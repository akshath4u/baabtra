// Copyright 2009-2012 by contributors, MIT License
// vim: ts=4 sts=4 sw=4 expandtab
//Add semicolon to prevent IIFE from being passed as argument to concated code.
;
// Module systems magic dance
(function (definition) {
  // RequireJS
  if (typeof define == 'function') {
    define(definition);  // YUI3
  } else if (typeof YUI == 'function') {
    YUI.add('es5', definition);  // CommonJS and <script>
  } else {
    definition();
  }
}(function () {
  /**
 * Brings an environment as close to ECMAScript 5 compliance
 * as is possible with the facilities of erstwhile engines.
 *
 * Annotated ES5: http://es5.github.com/ (specific links below)
 * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
 * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/
 */
  // ES-5 15.1.2.2
  if (parseInt('08') !== 8) {
    parseInt = function (origParseInt) {
      var hexRegex = /^0[xX]/;
      return function parseIntES5(str, radix) {
        str = String(str).trim();
        if (!+radix) {
          radix = hexRegex.test(str) ? 16 : 10;
        }
        return origParseInt(str, radix);
      };
    }(parseInt);
  }
  //
  // Function
  // ========
  //
  // ES-5 15.3.4.5
  // http://es5.github.com/#x15.3.4.5
  function Empty() {
  }
  if (!Function.prototype.bind) {
    Function.prototype.bind = function bind(that) {
      // .length is 1
      // 1. Let Target be the this value.
      var target = this;
      // 2. If IsCallable(Target) is false, throw a TypeError exception.
      if (typeof target != 'function') {
        throw new TypeError('Function.prototype.bind called on incompatible ' + target);
      }
      // 3. Let A be a new (possibly empty) internal list of all of the
      //   argument values provided after thisArg (arg1, arg2 etc), in order.
      // XXX slicedArgs will stand in for "A" if used
      var args = _Array_slice_.call(arguments, 1);
      // for normal call
      // 4. Let F be a new native ECMAScript object.
      // 11. Set the [[Prototype]] internal property of F to the standard
      //   built-in Function prototype object as specified in 15.3.3.1.
      // 12. Set the [[Call]] internal property of F as described in
      //   15.3.4.5.1.
      // 13. Set the [[Construct]] internal property of F as described in
      //   15.3.4.5.2.
      // 14. Set the [[HasInstance]] internal property of F as described in
      //   15.3.4.5.3.
      var binder = function () {
        if (this instanceof bound) {
          // 15.3.4.5.2 [[Construct]]
          // When the [[Construct]] internal method of a function object,
          // F that was created using the bind function is called with a
          // list of arguments ExtraArgs, the following steps are taken:
          // 1. Let target be the value of F's [[TargetFunction]]
          //   internal property.
          // 2. If target has no [[Construct]] internal method, a
          //   TypeError exception is thrown.
          // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
          //   property.
          // 4. Let args be a new list containing the same values as the
          //   list boundArgs in the same order followed by the same
          //   values as the list ExtraArgs in the same order.
          // 5. Return the result of calling the [[Construct]] internal
          //   method of target providing args as the arguments.
          var result = target.apply(this, args.concat(_Array_slice_.call(arguments)));
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          // 15.3.4.5.1 [[Call]]
          // When the [[Call]] internal method of a function object, F,
          // which was created using the bind function is called with a
          // this value and a list of arguments ExtraArgs, the following
          // steps are taken:
          // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
          //   property.
          // 2. Let boundThis be the value of F's [[BoundThis]] internal
          //   property.
          // 3. Let target be the value of F's [[TargetFunction]] internal
          //   property.
          // 4. Let args be a new list containing the same values as the
          //   list boundArgs in the same order followed by the same
          //   values as the list ExtraArgs in the same order.
          // 5. Return the result of calling the [[Call]] internal method
          //   of target providing boundThis as the this value and
          //   providing args as the arguments.
          // equiv: target.call(this, ...boundArgs, ...args)
          return target.apply(that, args.concat(_Array_slice_.call(arguments)));
        }
      };
      // 15. If the [[Class]] internal property of Target is "Function", then
      //     a. Let L be the length property of Target minus the length of A.
      //     b. Set the length own property of F to either 0 or L, whichever is
      //       larger.
      // 16. Else set the length own property of F to 0.
      var boundLength = Math.max(0, target.length - args.length);
      // 17. Set the attributes of the length own property of F to the values
      //   specified in 15.3.5.1.
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
      }
      // XXX Build a dynamic function with desired amount of arguments is the only 
      // way to set the length property of a function. 
      // In environments where Content Security Policies enabled (Chrome extensions, 
      // for ex.) all use of eval or Function costructor throws an exception. 
      // However in all of these environments Function.prototype.bind exists 
      // and so this code will never be executed.
      var bound = Function('binder', 'return function(' + boundArgs.join(',') + '){return binder.apply(this,arguments)}')(binder);
      if (target.prototype) {
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        // Clean up dangling references.
        Empty.prototype = null;
      }
      // TODO
      // 18. Set the [[Extensible]] internal property of F to true.
      // TODO
      // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
      // 20. Call the [[DefineOwnProperty]] internal method of F with
      //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
      //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
      //   false.
      // 21. Call the [[DefineOwnProperty]] internal method of F with
      //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
      //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
      //   and false.
      // TODO
      // NOTE Function objects created using Function.prototype.bind do not
      // have a prototype property or the [[Code]], [[FormalParameters]], and
      // [[Scope]] internal properties.
      // XXX can't delete prototype in pure-js.
      // 22. Return F.
      return bound;
    };
  }
  // Shortcut to an often accessed properties, in order to avoid multiple
  // dereference that costs universally.
  // _Please note: Shortcuts are defined after `Function.prototype.bind` as we
  // us it in defining shortcuts.
  var call = Function.prototype.call;
  var prototypeOfArray = Array.prototype;
  var prototypeOfObject = Object.prototype;
  var _Array_slice_ = prototypeOfArray.slice;
  // Having a toString local variable name breaks in Opera so use _toString.
  var _toString = call.bind(prototypeOfObject.toString);
  var owns = call.bind(prototypeOfObject.hasOwnProperty);
  // If JS engine supports accessors creating shortcuts.
  var defineGetter;
  var defineSetter;
  var lookupGetter;
  var lookupSetter;
  var supportsAccessors;
  if (supportsAccessors = owns(prototypeOfObject, '__defineGetter__')) {
    defineGetter = call.bind(prototypeOfObject.__defineGetter__);
    defineSetter = call.bind(prototypeOfObject.__defineSetter__);
    lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);
    lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);
  }
  //
  // Array
  // =====
  //
  // ES5 15.4.4.12
  // http://es5.github.com/#x15.4.4.12
  // Default value for second param
  // [bugfix, ielt9, old browsers]
  // IE < 9 bug: [1,2].splice(0).join("") == "" but should be "12"
  if ([
      1,
      2
    ].splice(0).length != 2) {
    var array_splice = Array.prototype.splice;
    var array_push = Array.prototype.push;
    var array_unshift = Array.prototype.unshift;
    if (function () {
        // test IE < 9 to splice bug - see issue #138
        function makeArray(l) {
          var a = [];
          while (l--) {
            a.unshift(l);
          }
          return a;
        }
        var array = [], lengthBefore;
        ;
        array.splice.bind(array, 0, 0).apply(null, makeArray(20));
        array.splice.bind(array, 0, 0).apply(null, makeArray(26));
        lengthBefore = array.length;
        //20
        array.splice(5, 0, 'XXX');
        // add one element
        if (lengthBefore + 1 == array.length) {
          return true;  // has right splice implementation without bugs
        }  // else {
           //    IE8 bug
           // }
      }()) {
      //IE 6/7
      Array.prototype.splice = function (start, deleteCount) {
        if (!arguments.length) {
          return [];
        } else {
          return array_splice.apply(this, [
            start === void 0 ? 0 : start,
            deleteCount === void 0 ? this.length - start : deleteCount
          ].concat(_Array_slice_.call(arguments, 2)));
        }
      };
    } else {
      //IE8
      Array.prototype.splice = function (start, deleteCount) {
        var result, args = _Array_slice_.call(arguments, 2), addElementsCount = args.length;
        ;
        if (!arguments.length) {
          return [];
        }
        if (start === void 0) {
          // default
          start = 0;
        }
        if (deleteCount === void 0) {
          // default
          deleteCount = this.length - start;
        }
        if (addElementsCount > 0) {
          if (deleteCount <= 0) {
            if (start == this.length) {
              // tiny optimisation #1
              array_push.apply(this, args);
              return [];
            }
            if (start == 0) {
              // tiny optimisation #2
              array_unshift.apply(this, args);
              return [];
            }
          }
          // Array.prototype.splice implementation
          result = _Array_slice_.call(this, start, start + deleteCount);
          // delete part
          args.push.apply(args, _Array_slice_.call(this, start + deleteCount, this.length));
          // right part
          args.unshift.apply(args, _Array_slice_.call(this, 0, start));
          // left part
          // delete all items from this array and replace it to 'left part' + _Array_slice_.call(arguments, 2) + 'right part'
          args.unshift(0, this.length);
          array_splice.apply(this, args);
          return result;
        }
        return array_splice.call(this, start, deleteCount);
      };
    }
  }
  // ES5 15.4.4.12
  // http://es5.github.com/#x15.4.4.13
  // Return len+argCount.
  // [bugfix, ielt8]
  // IE < 8 bug: [].unshift(0) == undefined but should be "1"
  if ([].unshift(0) != 1) {
    var array_unshift = Array.prototype.unshift;
    Array.prototype.unshift = function () {
      array_unshift.apply(this, arguments);
      return this.length;
    };
  }
  // ES5 15.4.3.2
  // http://es5.github.com/#x15.4.3.2
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
  if (!Array.isArray) {
    Array.isArray = function isArray(obj) {
      return _toString(obj) == '[object Array]';
    };
  }
  // The IsCallable() check in the Array functions
  // has been replaced with a strict check on the
  // internal class of the object to trap cases where
  // the provided function was actually a regular
  // expression literal, which in V8 and
  // JavaScriptCore is a typeof "function".  Only in
  // V8 are regular expression literals permitted as
  // reduce parameters, so it is desirable in the
  // general case for the shim to match the more
  // strict and common behavior of rejecting regular
  // expressions.
  // ES5 15.4.4.18
  // http://es5.github.com/#x15.4.4.18
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach
  // Check failure of by-index access of string characters (IE < 9)
  // and failure of `0 in boxedString` (Rhino)
  var boxedString = Object('a'), splitString = boxedString[0] != 'a' || !(0 in boxedString);
  // Check node 0.6.21 bug where third parameter is not boxed
  var boxedForEach = true;
  if (Array.prototype.forEach) {
    Array.prototype.forEach.call('foo', function (item, i, obj) {
      if (typeof obj !== 'object')
        boxedForEach = false;
    });
  }
  if (!Array.prototype.forEach || !boxedForEach) {
    Array.prototype.forEach = function forEach(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, thisp = arguments[1], i = -1, length = self.length >>> 0;
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError();  // TODO message
      }
      while (++i < length) {
        if (i in self) {
          // Invoke the callback function with call, passing arguments:
          // context, property value, property key, thisArg object
          // context
          fun.call(thisp, self[i], i, object);
        }
      }
    };
  }
  // ES5 15.4.4.19
  // http://es5.github.com/#x15.4.4.19
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
  if (!Array.prototype.map) {
    Array.prototype.map = function map(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, length = self.length >>> 0, result = Array(length), thisp = arguments[1];
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError(fun + ' is not a function');
      }
      for (var i = 0; i < length; i++) {
        if (i in self)
          result[i] = fun.call(thisp, self[i], i, object);
      }
      return result;
    };
  }
  // ES5 15.4.4.20
  // http://es5.github.com/#x15.4.4.20
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter
  if (!Array.prototype.filter) {
    Array.prototype.filter = function filter(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, length = self.length >>> 0, result = [], value, thisp = arguments[1];
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError(fun + ' is not a function');
      }
      for (var i = 0; i < length; i++) {
        if (i in self) {
          value = self[i];
          if (fun.call(thisp, value, i, object)) {
            result.push(value);
          }
        }
      }
      return result;
    };
  }
  // ES5 15.4.4.16
  // http://es5.github.com/#x15.4.4.16
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every
  if (!Array.prototype.every) {
    Array.prototype.every = function every(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, length = self.length >>> 0, thisp = arguments[1];
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError(fun + ' is not a function');
      }
      for (var i = 0; i < length; i++) {
        if (i in self && !fun.call(thisp, self[i], i, object)) {
          return false;
        }
      }
      return true;
    };
  }
  // ES5 15.4.4.17
  // http://es5.github.com/#x15.4.4.17
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some
  if (!Array.prototype.some) {
    Array.prototype.some = function some(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, length = self.length >>> 0, thisp = arguments[1];
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError(fun + ' is not a function');
      }
      for (var i = 0; i < length; i++) {
        if (i in self && fun.call(thisp, self[i], i, object)) {
          return true;
        }
      }
      return false;
    };
  }
  // ES5 15.4.4.21
  // http://es5.github.com/#x15.4.4.21
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce
  if (!Array.prototype.reduce) {
    Array.prototype.reduce = function reduce(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, length = self.length >>> 0;
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError(fun + ' is not a function');
      }
      // no value to return if no initial value and an empty array
      if (!length && arguments.length == 1) {
        throw new TypeError('reduce of empty array with no initial value');
      }
      var i = 0;
      var result;
      if (arguments.length >= 2) {
        result = arguments[1];
      } else {
        do {
          if (i in self) {
            result = self[i++];
            break;
          }
          // if array contains no values, no initial value to return
          if (++i >= length) {
            throw new TypeError('reduce of empty array with no initial value');
          }
        } while (true);
      }
      for (; i < length; i++) {
        if (i in self) {
          result = fun.call(void 0, result, self[i], i, object);
        }
      }
      return result;
    };
  }
  // ES5 15.4.4.22
  // http://es5.github.com/#x15.4.4.22
  // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight
  if (!Array.prototype.reduceRight) {
    Array.prototype.reduceRight = function reduceRight(fun) {
      var object = toObject(this), self = splitString && _toString(this) == '[object String]' ? this.split('') : object, length = self.length >>> 0;
      // If no callback function or if callback is not a callable function
      if (_toString(fun) != '[object Function]') {
        throw new TypeError(fun + ' is not a function');
      }
      // no value to return if no initial value, empty array
      if (!length && arguments.length == 1) {
        throw new TypeError('reduceRight of empty array with no initial value');
      }
      var result, i = length - 1;
      if (arguments.length >= 2) {
        result = arguments[1];
      } else {
        do {
          if (i in self) {
            result = self[i--];
            break;
          }
          // if array contains no values, no initial value to return
          if (--i < 0) {
            throw new TypeError('reduceRight of empty array with no initial value');
          }
        } while (true);
      }
      if (i < 0) {
        return result;
      }
      do {
        if (i in this) {
          result = fun.call(void 0, result, self[i], i, object);
        }
      } while (i--);
      return result;
    };
  }
  // ES5 15.4.4.14
  // http://es5.github.com/#x15.4.4.14
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
  if (!Array.prototype.indexOf || [
      0,
      1
    ].indexOf(1, 2) != -1) {
    Array.prototype.indexOf = function indexOf(sought) {
      var self = splitString && _toString(this) == '[object String]' ? this.split('') : toObject(this), length = self.length >>> 0;
      if (!length) {
        return -1;
      }
      var i = 0;
      if (arguments.length > 1) {
        i = toInteger(arguments[1]);
      }
      // handle negative indices
      i = i >= 0 ? i : Math.max(0, length + i);
      for (; i < length; i++) {
        if (i in self && self[i] === sought) {
          return i;
        }
      }
      return -1;
    };
  }
  // ES5 15.4.4.15
  // http://es5.github.com/#x15.4.4.15
  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf
  if (!Array.prototype.lastIndexOf || [
      0,
      1
    ].lastIndexOf(0, -3) != -1) {
    Array.prototype.lastIndexOf = function lastIndexOf(sought) {
      var self = splitString && _toString(this) == '[object String]' ? this.split('') : toObject(this), length = self.length >>> 0;
      if (!length) {
        return -1;
      }
      var i = length - 1;
      if (arguments.length > 1) {
        i = Math.min(i, toInteger(arguments[1]));
      }
      // handle negative indices
      i = i >= 0 ? i : length - Math.abs(i);
      for (; i >= 0; i--) {
        if (i in self && sought === self[i]) {
          return i;
        }
      }
      return -1;
    };
  }
  //
  // Object
  // ======
  //
  // ES5 15.2.3.14
  // http://es5.github.com/#x15.2.3.14
  if (!Object.keys) {
    // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation
    var hasDontEnumBug = true, dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor'
      ], dontEnumsLength = dontEnums.length;
    for (var key in { 'toString': null }) {
      hasDontEnumBug = false;
    }
    Object.keys = function keys(object) {
      if (typeof object != 'object' && typeof object != 'function' || object === null) {
        throw new TypeError('Object.keys called on a non-object');
      }
      var keys = [];
      for (var name in object) {
        if (owns(object, name)) {
          keys.push(name);
        }
      }
      if (hasDontEnumBug) {
        for (var i = 0, ii = dontEnumsLength; i < ii; i++) {
          var dontEnum = dontEnums[i];
          if (owns(object, dontEnum)) {
            keys.push(dontEnum);
          }
        }
      }
      return keys;
    };
  }
  //
  // Date
  // ====
  //
  // ES5 15.9.5.43
  // http://es5.github.com/#x15.9.5.43
  // This function returns a String value represent the instance in time
  // represented by this Date object. The format of the String is the Date Time
  // string format defined in 15.9.1.15. All fields are present in the String.
  // The time zone is always UTC, denoted by the suffix Z. If the time value of
  // this object is not a finite Number a RangeError exception is thrown.
  var negativeDate = -62198755200000, negativeYearString = '-000001';
  if (!Date.prototype.toISOString || new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1) {
    Date.prototype.toISOString = function toISOString() {
      var result, length, value, year, month;
      if (!isFinite(this)) {
        throw new RangeError('Date.prototype.toISOString called on non-finite value.');
      }
      year = this.getUTCFullYear();
      month = this.getUTCMonth();
      // see https://github.com/es-shims/es5-shim/issues/111
      year += Math.floor(month / 12);
      month = (month % 12 + 12) % 12;
      // the date time string format is specified in 15.9.1.15.
      result = [
        month + 1,
        this.getUTCDate(),
        this.getUTCHours(),
        this.getUTCMinutes(),
        this.getUTCSeconds()
      ];
      year = (year < 0 ? '-' : year > 9999 ? '+' : '') + ('00000' + Math.abs(year)).slice(0 <= year && year <= 9999 ? -4 : -6);
      length = result.length;
      while (length--) {
        value = result[length];
        // pad months, days, hours, minutes, and seconds to have two
        // digits.
        if (value < 10) {
          result[length] = '0' + value;
        }
      }
      // pad milliseconds to have three digits.
      return year + '-' + result.slice(0, 2).join('-') + 'T' + result.slice(2).join(':') + '.' + ('000' + this.getUTCMilliseconds()).slice(-3) + 'Z';
    };
  }
  // ES5 15.9.5.44
  // http://es5.github.com/#x15.9.5.44
  // This function provides a String representation of a Date object for use by
  // JSON.stringify (15.12.3).
  var dateToJSONIsSupported = false;
  try {
    dateToJSONIsSupported = Date.prototype.toJSON && new Date(NaN).toJSON() === null && new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 && Date.prototype.toJSON.call({
      toISOString: function () {
        return true;
      }
    });
  } catch (e) {
  }
  if (!dateToJSONIsSupported) {
    Date.prototype.toJSON = function toJSON(key) {
      // When the toJSON method is called with argument key, the following
      // steps are taken:
      // 1.  Let O be the result of calling ToObject, giving it the this
      // value as its argument.
      // 2. Let tv be toPrimitive(O, hint Number).
      var o = Object(this), tv = toPrimitive(o), toISO;
      // 3. If tv is a Number and is not finite, return null.
      if (typeof tv === 'number' && !isFinite(tv)) {
        return null;
      }
      // 4. Let toISO be the result of calling the [[Get]] internal method of
      // O with argument "toISOString".
      toISO = o.toISOString;
      // 5. If IsCallable(toISO) is false, throw a TypeError exception.
      if (typeof toISO != 'function') {
        throw new TypeError('toISOString property is not callable');
      }
      // 6. Return the result of calling the [[Call]] internal method of
      //  toISO with O as the this value and an empty argument list.
      return toISO.call(o);  // NOTE 1 The argument is ignored.
                             // NOTE 2 The toJSON function is intentionally generic; it does not
                             // require that its this value be a Date object. Therefore, it can be
                             // transferred to other kinds of objects for use as a method. However,
                             // it does require that any such object have a toISOString method. An
                             // object is free to use the argument key to filter its
                             // stringification.
    };
  }
  // ES5 15.9.4.2
  // http://es5.github.com/#x15.9.4.2
  // based on work shared by Daniel Friesen (dantman)
  // http://gist.github.com/303249
  if (!Date.parse || 'Date.parse is buggy') {
    // XXX global assignment won't work in embeddings that use
    // an alternate object for the context.
    Date = function (NativeDate) {
      // Date.length === 7
      function Date(Y, M, D, h, m, s, ms) {
        var length = arguments.length;
        if (this instanceof NativeDate) {
          var date = length == 1 && String(Y) === Y ? new NativeDate(Date.parse(Y)) : length >= 7 ? new NativeDate(Y, M, D, h, m, s, ms) : length >= 6 ? new NativeDate(Y, M, D, h, m, s) : length >= 5 ? new NativeDate(Y, M, D, h, m) : length >= 4 ? new NativeDate(Y, M, D, h) : length >= 3 ? new NativeDate(Y, M, D) : length >= 2 ? new NativeDate(Y, M) : length >= 1 ? new NativeDate(Y) : new NativeDate();
          // Prevent mixups with unfixed Date object
          date.constructor = Date;
          return date;
        }
        return NativeDate.apply(this, arguments);
      }
      ;
      // 15.9.1.15 Date Time String Format.
      var isoDateExpression = new RegExp('^' + '(\\d{4}|[+-]\\d{6})' + '(?:-(\\d{2})' + '(?:-(\\d{2})' + '(?:' + 'T(\\d{2})' + ':(\\d{2})' + '(?:' + ':(\\d{2})' + '(?:(\\.\\d{1,}))?' + ')?' + '(' + 'Z|' + '(?:' + '([-+])' + '(\\d{2})' + ':(\\d{2})' + ')' + ')?)?)?)?' + '$');
      var months = [
          0,
          31,
          59,
          90,
          120,
          151,
          181,
          212,
          243,
          273,
          304,
          334,
          365
        ];
      function dayFromMonth(year, month) {
        var t = month > 1 ? 1 : 0;
        return months[month] + Math.floor((year - 1969 + t) / 4) - Math.floor((year - 1901 + t) / 100) + Math.floor((year - 1601 + t) / 400) + 365 * (year - 1970);
      }
      function toUTC(t) {
        return Number(new NativeDate(1970, 0, 1, 0, 0, 0, t));
      }
      // Copy any custom methods a 3rd party library may have added
      for (var key in NativeDate) {
        Date[key] = NativeDate[key];
      }
      // Copy "native" methods explicitly; they may be non-enumerable
      Date.now = NativeDate.now;
      Date.UTC = NativeDate.UTC;
      Date.prototype = NativeDate.prototype;
      Date.prototype.constructor = Date;
      // Upgrade Date.parse to handle simplified ISO 8601 strings
      Date.parse = function parse(string) {
        var match = isoDateExpression.exec(string);
        if (match) {
          // parse months, days, hours, minutes, seconds, and milliseconds
          // provide default values if necessary
          // parse the UTC offset component
          var year = Number(match[1]), month = Number(match[2] || 1) - 1, day = Number(match[3] || 1) - 1, hour = Number(match[4] || 0), minute = Number(match[5] || 0), second = Number(match[6] || 0), millisecond = Math.floor(Number(match[7] || 0) * 1000),
            // When time zone is missed, local offset should be used
            // (ES 5.1 bug)
            // see https://bugs.ecmascript.org/show_bug.cgi?id=112
            isLocalTime = Boolean(match[4] && !match[8]), signOffset = match[9] === '-' ? 1 : -1, hourOffset = Number(match[10] || 0), minuteOffset = Number(match[11] || 0), result;
          if (hour < (minute > 0 || second > 0 || millisecond > 0 ? 24 : 25) && minute < 60 && second < 60 && millisecond < 1000 && month > -1 && month < 12 && hourOffset < 24 && minuteOffset < 60 && day > -1 && day < dayFromMonth(year, month + 1) - dayFromMonth(year, month)) {
            result = ((dayFromMonth(year, month) + day) * 24 + hour + hourOffset * signOffset) * 60;
            result = ((result + minute + minuteOffset * signOffset) * 60 + second) * 1000 + millisecond;
            if (isLocalTime) {
              result = toUTC(result);
            }
            if (-8640000000000000 <= result && result <= 8640000000000000) {
              return result;
            }
          }
          return NaN;
        }
        return NativeDate.parse.apply(this, arguments);
      };
      return Date;
    }(Date);
  }
  // ES5 15.9.4.4
  // http://es5.github.com/#x15.9.4.4
  if (!Date.now) {
    Date.now = function now() {
      return new Date().getTime();
    };
  }
  //
  // Number
  // ======
  //
  // ES5.1 15.7.4.5
  // http://es5.github.com/#x15.7.4.5
  if (!Number.prototype.toFixed || 0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) === '0' || 1.255.toFixed(2) !== '1.25' || 1000000000000000100..toFixed(0) !== '1000000000000000128') {
    // Hide these variables and functions
    (function () {
      var base, size, data, i;
      base = 10000000;
      size = 6;
      data = [
        0,
        0,
        0,
        0,
        0,
        0
      ];
      function multiply(n, c) {
        var i = -1;
        while (++i < size) {
          c += n * data[i];
          data[i] = c % base;
          c = Math.floor(c / base);
        }
      }
      function divide(n) {
        var i = size, c = 0;
        while (--i >= 0) {
          c += data[i];
          data[i] = Math.floor(c / n);
          c = c % n * base;
        }
      }
      function toString() {
        var i = size;
        var s = '';
        while (--i >= 0) {
          if (s !== '' || i === 0 || data[i] !== 0) {
            var t = String(data[i]);
            if (s === '') {
              s = t;
            } else {
              s += '0000000'.slice(0, 7 - t.length) + t;
            }
          }
        }
        return s;
      }
      function pow(x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      }
      function log(x) {
        var n = 0;
        while (x >= 4096) {
          n += 12;
          x /= 4096;
        }
        while (x >= 2) {
          n += 1;
          x /= 2;
        }
        return n;
      }
      Number.prototype.toFixed = function (fractionDigits) {
        var f, x, s, m, e, z, j, k;
        // Test for NaN and round fractionDigits down
        f = Number(fractionDigits);
        f = f !== f ? 0 : Math.floor(f);
        if (f < 0 || f > 20) {
          throw new RangeError('Number.toFixed called with invalid number of decimals');
        }
        x = Number(this);
        // Test for NaN
        if (x !== x) {
          return 'NaN';
        }
        // If it is too big or small, return the string value of the number
        if (x <= -1e+21 || x >= 1e+21) {
          return String(x);
        }
        s = '';
        if (x < 0) {
          s = '-';
          x = -x;
        }
        m = '0';
        if (x > 1e-21) {
          // 1e-21 < x < 1e21
          // -70 < log2(x) < 70
          e = log(x * pow(2, 69, 1)) - 69;
          z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
          z *= 4503599627370496;
          // Math.pow(2, 52);
          e = 52 - e;
          // -18 < e < 122
          // x = z / 2 ^ e
          if (e > 0) {
            multiply(0, z);
            j = f;
            while (j >= 7) {
              multiply(10000000, 0);
              j -= 7;
            }
            multiply(pow(10, j, 1), 0);
            j = e - 1;
            while (j >= 23) {
              divide(1 << 23);
              j -= 23;
            }
            divide(1 << j);
            multiply(1, 1);
            divide(2);
            m = toString();
          } else {
            multiply(0, z);
            multiply(1 << -e, 0);
            m = toString() + '0.00000000000000000000'.slice(2, 2 + f);
          }
        }
        if (f > 0) {
          k = m.length;
          if (k <= f) {
            m = s + '0.0000000000000000000'.slice(0, f - k + 2) + m;
          } else {
            m = s + m.slice(0, k - f) + '.' + m.slice(k - f);
          }
        } else {
          m = s + m;
        }
        return m;
      };
    }());
  }
  //
  // String
  // ======
  //
  // ES5 15.5.4.14
  // http://es5.github.com/#x15.5.4.14
  // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
  // Many browsers do not split properly with regular expressions or they
  // do not perform the split correctly under obscure conditions.
  // See http://blog.stevenlevithan.com/archives/cross-browser-split
  // I've tested in many browsers and this seems to cover the deviant ones:
  //    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
  //    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
  //    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
  //       [undefined, "t", undefined, "e", ...]
  //    ''.split(/.?/) should be [], not [""]
  //    '.'.split(/()()/) should be ["."], not ["", "", "."]
  var string_split = String.prototype.split;
  if ('ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 || 'tesst'.split(/(s)*/)[1] === 't' || ''.split(/.?/).length || '.'.split(/()()/).length > 1) {
    (function () {
      var compliantExecNpcg = /()??/.exec('')[1] === void 0;
      // NPCG: nonparticipating capturing group
      String.prototype.split = function (separator, limit) {
        var string = this;
        if (separator === void 0 && limit === 0)
          return [];
        // If `separator` is not a regex, use native split
        if (Object.prototype.toString.call(separator) !== '[object RegExp]') {
          return string_split.apply(this, arguments);
        }
        var output = [], flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + (separator.sticky ? 'y' : ''),
          // Firefox 3+
          lastLastIndex = 0,
          // Make `global` and avoid `lastIndex` issues by working with a copy
          separator = new RegExp(separator.source, flags + 'g'), separator2, match, lastIndex, lastLength;
        string += '';
        // Type-convert
        if (!compliantExecNpcg) {
          // Doesn't need flags gy, but they don't hurt
          separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
        }
        /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
        limit = limit === void 0 ? -1 >>> 0 : limit >>> 0;
        // ToUint32(limit)
        while (match = separator.exec(string)) {
          // `separator.lastIndex` is not reliable cross-browser
          lastIndex = match.index + match[0].length;
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            // Fix browsers whose `exec` methods don't consistently return `undefined` for
            // nonparticipating capturing groups
            if (!compliantExecNpcg && match.length > 1) {
              match[0].replace(separator2, function () {
                for (var i = 1; i < arguments.length - 2; i++) {
                  if (arguments[i] === void 0) {
                    match[i] = void 0;
                  }
                }
              });
            }
            if (match.length > 1 && match.index < string.length) {
              Array.prototype.push.apply(output, match.slice(1));
            }
            lastLength = match[0].length;
            lastLastIndex = lastIndex;
            if (output.length >= limit) {
              break;
            }
          }
          if (separator.lastIndex === match.index) {
            separator.lastIndex++;  // Avoid an infinite loop
          }
        }
        if (lastLastIndex === string.length) {
          if (lastLength || !separator.test('')) {
            output.push('');
          }
        } else {
          output.push(string.slice(lastLastIndex));
        }
        return output.length > limit ? output.slice(0, limit) : output;
      };
    }());  // [bugfix, chrome]
           // If separator is undefined, then the result array contains just one String,
           // which is the this value (converted to a String). If limit is not undefined,
           // then the output array is truncated so that it contains no more than limit
           // elements.
           // "0".split(undefined, 0) -> []
  } else if ('0'.split(void 0, 0).length) {
    String.prototype.split = function (separator, limit) {
      if (separator === void 0 && limit === 0)
        return [];
      return string_split.apply(this, arguments);
    };
  }
  // ECMA-262, 3rd B.2.3
  // Note an ECMAScript standart, although ECMAScript 3rd Edition has a
  // non-normative section suggesting uniform semantics and it should be
  // normalized across all browsers
  // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
  if (''.substr && '0b'.substr(-1) !== 'b') {
    var string_substr = String.prototype.substr;
    /**
     *  Get the substring of a string
     *  @param  {integer}  start   where to start the substring
     *  @param  {integer}  length  how many characters to return
     *  @return {string}
     */
    String.prototype.substr = function (start, length) {
      return string_substr.call(this, start < 0 ? (start = this.length + start) < 0 ? 0 : start : start, length);
    };
  }
  // ES5 15.5.4.20
  // http://es5.github.com/#x15.5.4.20
  var ws = '\t\n\x0B\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028' + '\u2029\ufeff';
  if (!String.prototype.trim || ws.trim()) {
    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
    // http://perfectionkills.com/whitespace-deviations/
    ws = '[' + ws + ']';
    var trimBeginRegexp = new RegExp('^' + ws + ws + '*'), trimEndRegexp = new RegExp(ws + ws + '*$');
    String.prototype.trim = function trim() {
      if (this === void 0 || this === null) {
        throw new TypeError('can\'t convert ' + this + ' to object');
      }
      return String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
    };
  }
  //
  // Util
  // ======
  //
  // ES5 9.4
  // http://es5.github.com/#x9.4
  // http://jsperf.com/to-integer
  function toInteger(n) {
    n = +n;
    if (n !== n) {
      // isNaN
      n = 0;
    } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
      n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
  }
  function isPrimitive(input) {
    var type = typeof input;
    return input === null || type === 'undefined' || type === 'boolean' || type === 'number' || type === 'string';
  }
  function toPrimitive(input) {
    var val, valueOf, toString;
    if (isPrimitive(input)) {
      return input;
    }
    valueOf = input.valueOf;
    if (typeof valueOf === 'function') {
      val = valueOf.call(input);
      if (isPrimitive(val)) {
        return val;
      }
    }
    toString = input.toString;
    if (typeof toString === 'function') {
      val = toString.call(input);
      if (isPrimitive(val)) {
        return val;
      }
    }
    throw new TypeError();
  }
  // ES5 9.9
  // http://es5.github.com/#x9.9
  var toObject = function (o) {
    if (o == null) {
      // this matches both null and undefined
      throw new TypeError('can\'t convert ' + o + ' to object');
    }
    return Object(o);
  };
}));
/*!
 * jQuery JavaScript Library v2.1.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:11Z
 */
(function (global, factory) {
  if (typeof module === 'object' && typeof module.exports === 'object') {
    // For CommonJS and CommonJS-like environments where a proper window is present,
    // execute the factory and get jQuery
    // For environments that do not inherently posses a window with a document
    // (such as Node.js), expose a jQuery-making factory as module.exports
    // This accentuates the need for the creation of a real window
    // e.g. var jQuery = require("jquery")(window);
    // See ticket #14549 for more info
    module.exports = global.document ? factory(global, true) : function (w) {
      if (!w.document) {
        throw new Error('jQuery requires a window with a document');
      }
      return factory(w);
    };
  } else {
    factory(global);
  }  // Pass this if window is not defined yet
}(typeof window !== 'undefined' ? window : this, function (window, noGlobal) {
  // Can't do this because several apps including ASP.NET trace
  // the stack via arguments.caller.callee and Firefox dies if
  // you try to trace through "use strict" call chains. (#13335)
  // Support: Firefox 18+
  //
  var arr = [];
  var slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var support = {};
  var
    // Use the correct document accordingly with window argument (sandbox)
    document = window.document, version = '2.1.1',
    // Define a local copy of jQuery
    jQuery = function (selector, context) {
      // The jQuery object is actually just the init constructor 'enhanced'
      // Need init if jQuery is called (just allow error to be thrown if not included)
      return new jQuery.fn.init(selector, context);
    },
    // Support: Android<4.1
    // Make sure we trim BOM and NBSP
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
    // Matches dashed string for camelizing
    rmsPrefix = /^-ms-/, rdashAlpha = /-([\da-z])/gi,
    // Used by jQuery.camelCase as callback to replace()
    fcamelCase = function (all, letter) {
      return letter.toUpperCase();
    };
  jQuery.fn = jQuery.prototype = {
    jquery: version,
    constructor: jQuery,
    selector: '',
    length: 0,
    toArray: function () {
      return slice.call(this);
    },
    get: function (num) {
      return num != null ? num < 0 ? this[num + this.length] : this[num] : slice.call(this);
    },
    pushStack: function (elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems);
      // Add the old object onto the stack (as a reference)
      ret.prevObject = this;
      ret.context = this.context;
      // Return the newly-formed element set
      return ret;
    },
    each: function (callback, args) {
      return jQuery.each(this, callback, args);
    },
    map: function (callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function () {
      return this.pushStack(slice.apply(this, arguments));
    },
    first: function () {
      return this.eq(0);
    },
    last: function () {
      return this.eq(-1);
    },
    eq: function (i) {
      var len = this.length, j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function () {
      return this.prevObject || this.constructor(null);
    },
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };
  jQuery.extend = jQuery.fn.extend = function () {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    // Handle a deep copy situation
    if (typeof target === 'boolean') {
      deep = target;
      // skip the boolean and the target
      target = arguments[i] || {};
      i++;
    }
    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && !jQuery.isFunction(target)) {
      target = {};
    }
    // extend jQuery itself if only one argument is passed
    if (i === length) {
      target = this;
      i--;
    }
    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name];
          // Prevent never-ending loop
          if (target === copy) {
            continue;
          }
          // Recurse if we're merging plain objects or arrays
          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && jQuery.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            }
            // Never move original objects, clone them
            target[name] = jQuery.extend(deep, clone, copy);  // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    }
    // Return the modified object
    return target;
  };
  jQuery.extend({
    expando: 'jQuery' + (version + Math.random()).replace(/\D/g, ''),
    isReady: true,
    error: function (msg) {
      throw new Error(msg);
    },
    noop: function () {
    },
    isFunction: function (obj) {
      return jQuery.type(obj) === 'function';
    },
    isArray: Array.isArray,
    isWindow: function (obj) {
      return obj != null && obj === obj.window;
    },
    isNumeric: function (obj) {
      // parseFloat NaNs numeric-cast false positives (null|true|false|"")
      // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
      // subtraction forces infinities to NaN
      return !jQuery.isArray(obj) && obj - parseFloat(obj) >= 0;
    },
    isPlainObject: function (obj) {
      // Not plain objects:
      // - Any object or value whose internal [[Class]] property is not "[object Object]"
      // - DOM nodes
      // - window
      if (jQuery.type(obj) !== 'object' || obj.nodeType || jQuery.isWindow(obj)) {
        return false;
      }
      if (obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')) {
        return false;
      }
      // If the function hasn't returned already, we're confident that
      // |obj| is a plain object, created by {} or constructed with new Object
      return true;
    },
    isEmptyObject: function (obj) {
      var name;
      for (name in obj) {
        return false;
      }
      return true;
    },
    type: function (obj) {
      if (obj == null) {
        return obj + '';
      }
      // Support: Android < 4.0, iOS < 6 (functionish RegExp)
      return typeof obj === 'object' || typeof obj === 'function' ? class2type[toString.call(obj)] || 'object' : typeof obj;
    },
    globalEval: function (code) {
      var script, indirect = eval;
      code = jQuery.trim(code);
      if (code) {
        // If the code includes a valid, prologue position
        // strict mode pragma, execute code by injecting a
        // script tag into the document.
        if (code.indexOf('use strict') === 1) {
          script = document.createElement('script');
          script.text = code;
          document.head.appendChild(script).parentNode.removeChild(script);
        } else {
          // Otherwise, avoid the DOM node creation, insertion
          // and removal by using an indirect global eval
          indirect(code);
        }
      }
    },
    camelCase: function (string) {
      return string.replace(rmsPrefix, 'ms-').replace(rdashAlpha, fcamelCase);
    },
    nodeName: function (elem, name) {
      return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
    },
    each: function (obj, callback, args) {
      var value, i = 0, length = obj.length, isArray = isArraylike(obj);
      if (args) {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.apply(obj[i], args);
            if (value === false) {
              break;
            }
          }
        }  // A special, fast, case for the most common use of each
      } else {
        if (isArray) {
          for (; i < length; i++) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        } else {
          for (i in obj) {
            value = callback.call(obj[i], i, obj[i]);
            if (value === false) {
              break;
            }
          }
        }
      }
      return obj;
    },
    trim: function (text) {
      return text == null ? '' : (text + '').replace(rtrim, '');
    },
    makeArray: function (arr, results) {
      var ret = results || [];
      if (arr != null) {
        if (isArraylike(Object(arr))) {
          jQuery.merge(ret, typeof arr === 'string' ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }
      return ret;
    },
    inArray: function (elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    merge: function (first, second) {
      var len = +second.length, j = 0, i = first.length;
      for (; j < len; j++) {
        first[i++] = second[j];
      }
      first.length = i;
      return first;
    },
    grep: function (elems, callback, invert) {
      var callbackInverse, matches = [], i = 0, length = elems.length, callbackExpect = !invert;
      // Go through the array, only saving the items
      // that pass the validator function
      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);
        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }
      return matches;
    },
    map: function (elems, callback, arg) {
      var value, i = 0, length = elems.length, isArray = isArraylike(elems), ret = [];
      // Go through the array, translating each of the items to their new values
      if (isArray) {
        for (; i < length; i++) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }  // Go through every key on the object,
      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);
          if (value != null) {
            ret.push(value);
          }
        }
      }
      // Flatten any nested arrays
      return concat.apply([], ret);
    },
    guid: 1,
    proxy: function (fn, context) {
      var tmp, args, proxy;
      if (typeof context === 'string') {
        tmp = fn[context];
        context = fn;
        fn = tmp;
      }
      // Quick check to determine if target is callable, in the spec
      // this throws a TypeError, but we will just return undefined.
      if (!jQuery.isFunction(fn)) {
        return undefined;
      }
      // Simulated bind
      args = slice.call(arguments, 2);
      proxy = function () {
        return fn.apply(context || this, args.concat(slice.call(arguments)));
      };
      // Set the guid of unique handler to the same of original handler, so it can be removed
      proxy.guid = fn.guid = fn.guid || jQuery.guid++;
      return proxy;
    },
    now: Date.now,
    support: support
  });
  // Populate the class2type map
  jQuery.each('Boolean Number String Function Array Date RegExp Object Error'.split(' '), function (i, name) {
    class2type['[object ' + name + ']'] = name.toLowerCase();
  });
  function isArraylike(obj) {
    var length = obj.length, type = jQuery.type(obj);
    if (type === 'function' || jQuery.isWindow(obj)) {
      return false;
    }
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return type === 'array' || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  var Sizzle = function (window) {
      var i, support, Expr, getText, isXML, tokenize, compile, select, outermostContext, sortInput, hasDuplicate,
        // Local document vars
        setDocument, document, docElem, documentIsHTML, rbuggyQSA, rbuggyMatches, matches, contains,
        // Instance-specific data
        expando = 'sizzle' + -new Date(), preferredDoc = window.document, dirruns = 0, done = 0, classCache = createCache(), tokenCache = createCache(), compilerCache = createCache(), sortOrder = function (a, b) {
          if (a === b) {
            hasDuplicate = true;
          }
          return 0;
        },
        // General-purpose constants
        strundefined = typeof undefined, MAX_NEGATIVE = 1 << 31,
        // Instance methods
        hasOwn = {}.hasOwnProperty, arr = [], pop = arr.pop, push_native = arr.push, push = arr.push, slice = arr.slice,
        // Use a stripped-down indexOf if we can't use a native one
        indexOf = arr.indexOf || function (elem) {
          var i = 0, len = this.length;
          for (; i < len; i++) {
            if (this[i] === elem) {
              return i;
            }
          }
          return -1;
        }, booleans = 'checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped',
        // Regular expressions
        // Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
        whitespace = '[\\x20\\t\\r\\n\\f]',
        // http://www.w3.org/TR/css3-syntax/#characters
        characterEncoding = '(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+',
        // Loosely modeled on CSS identifier characters
        // An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
        // Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
        identifier = characterEncoding.replace('w', 'w#'),
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
        attributes = '\\[' + whitespace + '*(' + characterEncoding + ')(?:' + whitespace + '*([*^$|!~]?=)' + whitespace + '*(?:\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)"|(' + identifier + '))|)' + whitespace + '*\\]', pseudos = ':(' + characterEncoding + ')(?:\\((' + '(\'((?:\\\\.|[^\\\\\'])*)\'|"((?:\\\\.|[^\\\\"])*)")|' + '((?:\\\\.|[^\\\\()[\\]]|' + attributes + ')*)|' + '.*' + ')\\)|)',
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
        rtrim = new RegExp('^' + whitespace + '+|((?:^|[^\\\\])(?:\\\\.)*)' + whitespace + '+$', 'g'), rcomma = new RegExp('^' + whitespace + '*,' + whitespace + '*'), rcombinators = new RegExp('^' + whitespace + '*([>+~]|' + whitespace + ')' + whitespace + '*'), rattributeQuotes = new RegExp('=' + whitespace + '*([^\\]\'"]*?)' + whitespace + '*\\]', 'g'), rpseudo = new RegExp(pseudos), ridentifier = new RegExp('^' + identifier + '$'), matchExpr = {
          'ID': new RegExp('^#(' + characterEncoding + ')'),
          'CLASS': new RegExp('^\\.(' + characterEncoding + ')'),
          'TAG': new RegExp('^(' + characterEncoding.replace('w', 'w*') + ')'),
          'ATTR': new RegExp('^' + attributes),
          'PSEUDO': new RegExp('^' + pseudos),
          'CHILD': new RegExp('^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(' + whitespace + '*(even|odd|(([+-]|)(\\d*)n|)' + whitespace + '*(?:([+-]|)' + whitespace + '*(\\d+)|))' + whitespace + '*\\)|)', 'i'),
          'bool': new RegExp('^(?:' + booleans + ')$', 'i'),
          'needsContext': new RegExp('^' + whitespace + '*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(' + whitespace + '*((?:-\\d)?\\d*)' + whitespace + '*\\)|)(?=[^-]|$)', 'i')
        }, rinputs = /^(?:input|select|textarea|button)$/i, rheader = /^h\d$/i, rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
        rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/, rsibling = /[+~]/, rescape = /'|\\/g,
        // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
        runescape = new RegExp('\\\\([\\da-f]{1,6}' + whitespace + '?|(' + whitespace + ')|.)', 'ig'), funescape = function (_, escaped, escapedWhitespace) {
          var high = '0x' + escaped - 65536;
          // NaN means non-codepoint
          // Support: Firefox<24
          // Workaround erroneous numeric interpretation of +"0x"
          return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 65536) : String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320);
        };
      // Optimize for push.apply( _, NodeList )
      try {
        push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
        // Support: Android<4.0
        // Detect silently failing push.apply
        arr[preferredDoc.childNodes.length].nodeType;
      } catch (e) {
        push = {
          apply: arr.length ? function (target, els) {
            push_native.apply(target, slice.call(els));
          } : function (target, els) {
            var j = target.length, i = 0;
            // Can't trust NodeList.length
            while (target[j++] = els[i++]) {
            }
            target.length = j - 1;
          }
        };
      }
      function Sizzle(selector, context, results, seed) {
        var match, elem, m, nodeType,
          // QSA vars
          i, groups, old, nid, newContext, newSelector;
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }
        context = context || document;
        results = results || [];
        if (!selector || typeof selector !== 'string') {
          return results;
        }
        if ((nodeType = context.nodeType) !== 1 && nodeType !== 9) {
          return [];
        }
        if (documentIsHTML && !seed) {
          // Shortcuts
          if (match = rquickExpr.exec(selector)) {
            // Speed-up: Sizzle("#ID")
            if (m = match[1]) {
              if (nodeType === 9) {
                elem = context.getElementById(m);
                // Check parentNode to catch when Blackberry 4.6 returns
                // nodes that are no longer in the document (jQuery #6963)
                if (elem && elem.parentNode) {
                  // Handle the case where IE, Opera, and Webkit return items
                  // by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                }
              } else {
                // Context is not a document
                if (context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              }  // Speed-up: Sizzle("TAG")
            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results;  // Speed-up: Sizzle(".CLASS")
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          }
          // QSA path
          if (support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            nid = old = expando;
            newContext = context;
            newSelector = nodeType === 9 && selector;
            // qSA works strangely on Element-rooted queries
            // We can work around this by specifying an extra ID on the root
            // and working up from there (Thanks to Andrew Dupont for the technique)
            // IE 8 doesn't work on object elements
            if (nodeType === 1 && context.nodeName.toLowerCase() !== 'object') {
              groups = tokenize(selector);
              if (old = context.getAttribute('id')) {
                nid = old.replace(rescape, '\\$&');
              } else {
                context.setAttribute('id', nid);
              }
              nid = '[id=\'' + nid + '\'] ';
              i = groups.length;
              while (i--) {
                groups[i] = nid + toSelector(groups[i]);
              }
              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
              newSelector = groups.join(',');
            }
            if (newSelector) {
              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {
              } finally {
                if (!old) {
                  context.removeAttribute('id');
                }
              }
            }
          }
        }
        // All others
        return select(selector.replace(rtrim, '$1'), context, results, seed);
      }
      /**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
      function createCache() {
        var keys = [];
        function cache(key, value) {
          // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
          if (keys.push(key + ' ') > Expr.cacheLength) {
            // Only keep the most recent entries
            delete cache[keys.shift()];
          }
          return cache[key + ' '] = value;
        }
        return cache;
      }
      /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
      function markFunction(fn) {
        fn[expando] = true;
        return fn;
      }
      /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
      function assert(fn) {
        var div = document.createElement('div');
        try {
          return !!fn(div);
        } catch (e) {
          return false;
        } finally {
          // Remove from its parent by default
          if (div.parentNode) {
            div.parentNode.removeChild(div);
          }
          // release memory in IE
          div = null;
        }
      }
      /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
      function addHandle(attrs, handler) {
        var arr = attrs.split('|'), i = attrs.length;
        while (i--) {
          Expr.attrHandle[arr[i]] = handler;
        }
      }
      /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
      function siblingCheck(a, b) {
        var cur = b && a, diff = cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE);
        // Use IE sourceIndex if available on both nodes
        if (diff) {
          return diff;
        }
        // Check if b follows a
        if (cur) {
          while (cur = cur.nextSibling) {
            if (cur === b) {
              return -1;
            }
          }
        }
        return a ? 1 : -1;
      }
      /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
      function createInputPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return name === 'input' && elem.type === type;
        };
      }
      /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
      function createButtonPseudo(type) {
        return function (elem) {
          var name = elem.nodeName.toLowerCase();
          return (name === 'input' || name === 'button') && elem.type === type;
        };
      }
      /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
      function createPositionalPseudo(fn) {
        return markFunction(function (argument) {
          argument = +argument;
          return markFunction(function (seed, matches) {
            var j, matchIndexes = fn([], seed.length, argument), i = matchIndexes.length;
            // Match elements found at the specified indexes
            while (i--) {
              if (seed[j = matchIndexes[i]]) {
                seed[j] = !(matches[j] = seed[j]);
              }
            }
          });
        });
      }
      /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
      function testContext(context) {
        return context && typeof context.getElementsByTagName !== strundefined && context;
      }
      // Expose support vars for convenience
      support = Sizzle.support = {};
      /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
      isXML = Sizzle.isXML = function (elem) {
        // documentElement is verified for cases where it doesn't yet exist
        // (such as loading iframes in IE - #4833)
        var documentElement = elem && (elem.ownerDocument || elem).documentElement;
        return documentElement ? documentElement.nodeName !== 'HTML' : false;
      };
      /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
      setDocument = Sizzle.setDocument = function (node) {
        var hasCompare, doc = node ? node.ownerDocument || node : preferredDoc, parent = doc.defaultView;
        // If no document and documentElement is available, return
        if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
          return document;
        }
        // Set our document
        document = doc;
        docElem = doc.documentElement;
        // Support tests
        documentIsHTML = !isXML(doc);
        // Support: IE>8
        // If iframe document is assigned to "document" variable and if iframe has been reloaded,
        // IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
        // IE6-8 do not support the defaultView property so parent will be undefined
        if (parent && parent !== parent.top) {
          // IE11 does not have attachEvent, so all must suffer
          if (parent.addEventListener) {
            parent.addEventListener('unload', function () {
              setDocument();
            }, false);
          } else if (parent.attachEvent) {
            parent.attachEvent('onunload', function () {
              setDocument();
            });
          }
        }
        /* Attributes
	---------------------------------------------------------------------- */
        // Support: IE<8
        // Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
        support.attributes = assert(function (div) {
          div.className = 'i';
          return !div.getAttribute('className');
        });
        /* getElement(s)By*
	---------------------------------------------------------------------- */
        // Check if getElementsByTagName("*") returns only elements
        support.getElementsByTagName = assert(function (div) {
          div.appendChild(doc.createComment(''));
          return !div.getElementsByTagName('*').length;
        });
        // Check if getElementsByClassName can be trusted
        support.getElementsByClassName = rnative.test(doc.getElementsByClassName) && assert(function (div) {
          div.innerHTML = '<div class=\'a\'></div><div class=\'a i\'></div>';
          // Support: Safari<4
          // Catch class over-caching
          div.firstChild.className = 'i';
          // Support: Opera<10
          // Catch gEBCN failure to find non-leading classes
          return div.getElementsByClassName('i').length === 2;
        });
        // Support: IE<10
        // Check if getElementById returns elements by name
        // The broken getElementById methods don't pick up programatically-set names,
        // so use a roundabout getElementsByName test
        support.getById = assert(function (div) {
          docElem.appendChild(div).id = expando;
          return !doc.getElementsByName || !doc.getElementsByName(expando).length;
        });
        // ID find and filter
        if (support.getById) {
          Expr.find['ID'] = function (id, context) {
            if (typeof context.getElementById !== strundefined && documentIsHTML) {
              var m = context.getElementById(id);
              // Check parentNode to catch when Blackberry 4.6 returns
              // nodes that are no longer in the document #6963
              return m && m.parentNode ? [m] : [];
            }
          };
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              return elem.getAttribute('id') === attrId;
            };
          };
        } else {
          // Support: IE6/7
          // getElementById is not reliable as a find shortcut
          delete Expr.find['ID'];
          Expr.filter['ID'] = function (id) {
            var attrId = id.replace(runescape, funescape);
            return function (elem) {
              var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode('id');
              return node && node.value === attrId;
            };
          };
        }
        // Tag
        Expr.find['TAG'] = support.getElementsByTagName ? function (tag, context) {
          if (typeof context.getElementsByTagName !== strundefined) {
            return context.getElementsByTagName(tag);
          }
        } : function (tag, context) {
          var elem, tmp = [], i = 0, results = context.getElementsByTagName(tag);
          // Filter out possible comments
          if (tag === '*') {
            while (elem = results[i++]) {
              if (elem.nodeType === 1) {
                tmp.push(elem);
              }
            }
            return tmp;
          }
          return results;
        };
        // Class
        Expr.find['CLASS'] = support.getElementsByClassName && function (className, context) {
          if (typeof context.getElementsByClassName !== strundefined && documentIsHTML) {
            return context.getElementsByClassName(className);
          }
        };
        /* QSA/matchesSelector
	---------------------------------------------------------------------- */
        // QSA and matchesSelector support
        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)
        rbuggyMatches = [];
        // qSa(:focus) reports false when true (Chrome 21)
        // We allow this because of a bug in IE8/9 that throws an error
        // whenever `document.activeElement` is accessed on an iframe
        // So, we allow :focus to pass through QSA all the time to avoid the IE error
        // See http://bugs.jquery.com/ticket/13378
        rbuggyQSA = [];
        if (support.qsa = rnative.test(doc.querySelectorAll)) {
          // Build QSA regex
          // Regex strategy adopted from Diego Perini
          assert(function (div) {
            // Select is set to empty string on purpose
            // This is to test IE's treatment of not explicitly
            // setting a boolean content attribute,
            // since its presence should be enough
            // http://bugs.jquery.com/ticket/12359
            div.innerHTML = '<select msallowclip=\'\'><option selected=\'\'></option></select>';
            // Support: IE8, Opera 11-12.16
            // Nothing should be selected when empty strings follow ^= or $= or *=
            // The test attribute must be unknown in Opera but "safe" for WinRT
            // http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
            if (div.querySelectorAll('[msallowclip^=\'\']').length) {
              rbuggyQSA.push('[*^$]=' + whitespace + '*(?:\'\'|"")');
            }
            // Support: IE8
            // Boolean attributes and "value" are not treated correctly
            if (!div.querySelectorAll('[selected]').length) {
              rbuggyQSA.push('\\[' + whitespace + '*(?:value|' + booleans + ')');
            }
            // Webkit/Opera - :checked should return selected option elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            // IE8 throws error here and will not see later tests
            if (!div.querySelectorAll(':checked').length) {
              rbuggyQSA.push(':checked');
            }
          });
          assert(function (div) {
            // Support: Windows 8 Native Apps
            // The type and name attributes are restricted during .innerHTML assignment
            var input = doc.createElement('input');
            input.setAttribute('type', 'hidden');
            div.appendChild(input).setAttribute('name', 'D');
            // Support: IE8
            // Enforce case-sensitivity of name attribute
            if (div.querySelectorAll('[name=d]').length) {
              rbuggyQSA.push('name' + whitespace + '*[*^$|!~]?=');
            }
            // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
            // IE8 throws error here and will not see later tests
            if (!div.querySelectorAll(':enabled').length) {
              rbuggyQSA.push(':enabled', ':disabled');
            }
            // Opera 10-11 does not throw on post-comma invalid pseudos
            div.querySelectorAll('*,:x');
            rbuggyQSA.push(',.*:');
          });
        }
        if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
          assert(function (div) {
            // Check to see if it's possible to do matchesSelector
            // on a disconnected node (IE 9)
            support.disconnectedMatch = matches.call(div, 'div');
            // This should fail with an exception
            // Gecko does not error, returns false instead
            matches.call(div, '[s!=\'\']:x');
            rbuggyMatches.push('!=', pseudos);
          });
        }
        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join('|'));
        rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join('|'));
        /* Contains
	---------------------------------------------------------------------- */
        hasCompare = rnative.test(docElem.compareDocumentPosition);
        // Element contains another
        // Purposefully does not implement inclusive descendent
        // As in, an element does not contain itself
        contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
          var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
          return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        } : function (a, b) {
          if (b) {
            while (b = b.parentNode) {
              if (b === a) {
                return true;
              }
            }
          }
          return false;
        };
        /* Sorting
	---------------------------------------------------------------------- */
        // Document order sorting
        sortOrder = hasCompare ? function (a, b) {
          // Flag for duplicate removal
          if (a === b) {
            hasDuplicate = true;
            return 0;
          }
          // Sort on method existence if only one input has compareDocumentPosition
          var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
          if (compare) {
            return compare;
          }
          // Calculate position if both inputs belong to the same document
          compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1;
          // Disconnected nodes
          if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
            // Choose the first element that is related to our preferred document
            if (a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
              return -1;
            }
            if (b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
              return 1;
            }
            // Maintain original order
            return sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;
          }
          return compare & 4 ? -1 : 1;
        } : function (a, b) {
          // Exit early if the nodes are identical
          if (a === b) {
            hasDuplicate = true;
            return 0;
          }
          var cur, i = 0, aup = a.parentNode, bup = b.parentNode, ap = [a], bp = [b];
          // Parentless nodes are either documents or disconnected
          if (!aup || !bup) {
            return a === doc ? -1 : b === doc ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf.call(sortInput, a) - indexOf.call(sortInput, b) : 0;  // If the nodes are siblings, we can do a quick check
          } else if (aup === bup) {
            return siblingCheck(a, b);
          }
          // Otherwise we need full lists of their ancestors for comparison
          cur = a;
          while (cur = cur.parentNode) {
            ap.unshift(cur);
          }
          cur = b;
          while (cur = cur.parentNode) {
            bp.unshift(cur);
          }
          // Walk down the tree looking for a discrepancy
          while (ap[i] === bp[i]) {
            i++;
          }
          return i ? siblingCheck(ap[i], bp[i]) : ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
        };
        return doc;
      };
      Sizzle.matches = function (expr, elements) {
        return Sizzle(expr, null, null, elements);
      };
      Sizzle.matchesSelector = function (elem, expr) {
        // Set document vars if needed
        if ((elem.ownerDocument || elem) !== document) {
          setDocument(elem);
        }
        // Make sure that attribute selectors are quoted
        expr = expr.replace(rattributeQuotes, '=\'$1\']');
        if (support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
          try {
            var ret = matches.call(elem, expr);
            // IE 9's matchesSelector returns false on disconnected nodes
            if (ret || support.disconnectedMatch || elem.document && elem.document.nodeType !== 11) {
              return ret;
            }
          } catch (e) {
          }
        }
        return Sizzle(expr, document, null, [elem]).length > 0;
      };
      Sizzle.contains = function (context, elem) {
        // Set document vars if needed
        if ((context.ownerDocument || context) !== document) {
          setDocument(context);
        }
        return contains(context, elem);
      };
      Sizzle.attr = function (elem, name) {
        // Set document vars if needed
        if ((elem.ownerDocument || elem) !== document) {
          setDocument(elem);
        }
        var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
          val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
        return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
      };
      Sizzle.error = function (msg) {
        throw new Error('Syntax error, unrecognized expression: ' + msg);
      };
      /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
      Sizzle.uniqueSort = function (results) {
        var elem, duplicates = [], j = 0, i = 0;
        // Unless we *know* we can detect duplicates, assume their presence
        hasDuplicate = !support.detectDuplicates;
        sortInput = !support.sortStable && results.slice(0);
        results.sort(sortOrder);
        if (hasDuplicate) {
          while (elem = results[i++]) {
            if (elem === results[i]) {
              j = duplicates.push(i);
            }
          }
          while (j--) {
            results.splice(duplicates[j], 1);
          }
        }
        // Clear input after sorting to release objects
        // See https://github.com/jquery/sizzle/pull/225
        sortInput = null;
        return results;
      };
      /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
      getText = Sizzle.getText = function (elem) {
        var node, ret = '', i = 0, nodeType = elem.nodeType;
        if (!nodeType) {
          // If no nodeType, this is expected to be an array
          while (node = elem[i++]) {
            // Do not traverse comment nodes
            ret += getText(node);
          }
        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
          // Use textContent for elements
          // innerText usage removed for consistency of new lines (jQuery #11153)
          if (typeof elem.textContent === 'string') {
            return elem.textContent;
          } else {
            // Traverse its children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              ret += getText(elem);
            }
          }
        } else if (nodeType === 3 || nodeType === 4) {
          return elem.nodeValue;
        }
        // Do not include comment or processing instruction nodes
        return ret;
      };
      Expr = Sizzle.selectors = {
        cacheLength: 50,
        createPseudo: markFunction,
        match: matchExpr,
        attrHandle: {},
        find: {},
        relative: {
          '>': {
            dir: 'parentNode',
            first: true
          },
          ' ': { dir: 'parentNode' },
          '+': {
            dir: 'previousSibling',
            first: true
          },
          '~': { dir: 'previousSibling' }
        },
        preFilter: {
          'ATTR': function (match) {
            match[1] = match[1].replace(runescape, funescape);
            // Move the given value to match[3] whether quoted or unquoted
            match[3] = (match[3] || match[4] || match[5] || '').replace(runescape, funescape);
            if (match[2] === '~=') {
              match[3] = ' ' + match[3] + ' ';
            }
            return match.slice(0, 4);
          },
          'CHILD': function (match) {
            /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
            match[1] = match[1].toLowerCase();
            if (match[1].slice(0, 3) === 'nth') {
              // nth-* requires argument
              if (!match[3]) {
                Sizzle.error(match[0]);
              }
              // numeric x and y parameters for Expr.filter.CHILD
              // remember that false/true cast respectively to 0/1
              match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === 'even' || match[3] === 'odd'));
              match[5] = +(match[7] + match[8] || match[3] === 'odd');  // other types prohibit arguments
            } else if (match[3]) {
              Sizzle.error(match[0]);
            }
            return match;
          },
          'PSEUDO': function (match) {
            var excess, unquoted = !match[6] && match[2];
            if (matchExpr['CHILD'].test(match[0])) {
              return null;
            }
            // Accept quoted arguments as-is
            if (match[3]) {
              match[2] = match[4] || match[5] || '';  // Strip excess characters from unquoted arguments
            } else if (unquoted && rpseudo.test(unquoted) && (excess = tokenize(unquoted, true)) && (excess = unquoted.indexOf(')', unquoted.length - excess) - unquoted.length)) {
              // excess is a negative index
              match[0] = match[0].slice(0, excess);
              match[2] = unquoted.slice(0, excess);
            }
            // Return only captures needed by the pseudo filter method (type and argument)
            return match.slice(0, 3);
          }
        },
        filter: {
          'TAG': function (nodeNameSelector) {
            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
            return nodeNameSelector === '*' ? function () {
              return true;
            } : function (elem) {
              return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
            };
          },
          'CLASS': function (className) {
            var pattern = classCache[className + ' '];
            return pattern || (pattern = new RegExp('(^|' + whitespace + ')' + className + '(' + whitespace + '|$)')) && classCache(className, function (elem) {
              return pattern.test(typeof elem.className === 'string' && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute('class') || '');
            });
          },
          'ATTR': function (name, operator, check) {
            return function (elem) {
              var result = Sizzle.attr(elem, name);
              if (result == null) {
                return operator === '!=';
              }
              if (!operator) {
                return true;
              }
              result += '';
              return operator === '=' ? result === check : operator === '!=' ? result !== check : operator === '^=' ? check && result.indexOf(check) === 0 : operator === '*=' ? check && result.indexOf(check) > -1 : operator === '$=' ? check && result.slice(-check.length) === check : operator === '~=' ? (' ' + result + ' ').indexOf(check) > -1 : operator === '|=' ? result === check || result.slice(0, check.length + 1) === check + '-' : false;
            };
          },
          'CHILD': function (type, what, argument, first, last) {
            var simple = type.slice(0, 3) !== 'nth', forward = type.slice(-4) !== 'last', ofType = what === 'of-type';
            return first === 1 && last === 0 ? function (elem) {
              return !!elem.parentNode;
            } : function (elem, context, xml) {
              var cache, outerCache, node, diff, nodeIndex, start, dir = simple !== forward ? 'nextSibling' : 'previousSibling', parent = elem.parentNode, name = ofType && elem.nodeName.toLowerCase(), useCache = !xml && !ofType;
              if (parent) {
                // :(first|last|only)-(child|of-type)
                if (simple) {
                  while (dir) {
                    node = elem;
                    while (node = node[dir]) {
                      if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                        return false;
                      }
                    }
                    // Reverse direction for :only-* (if we haven't yet done so)
                    start = dir = type === 'only' && !start && 'nextSibling';
                  }
                  return true;
                }
                start = [forward ? parent.firstChild : parent.lastChild];
                // non-xml :nth-child(...) stores cache data on `parent`
                if (forward && useCache) {
                  // Seek `elem` from a previously-cached index
                  outerCache = parent[expando] || (parent[expando] = {});
                  cache = outerCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = cache[0] === dirruns && cache[2];
                  node = nodeIndex && parent.childNodes[nodeIndex];
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    // When found, cache indexes on `parent` and break
                    if (node.nodeType === 1 && ++diff && node === elem) {
                      outerCache[type] = [
                        dirruns,
                        nodeIndex,
                        diff
                      ];
                      break;
                    }
                  }  // Use previously-cached element index if available
                } else if (useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns) {
                  diff = cache[1];  // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
                } else {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        (node[expando] || (node[expando] = {}))[type] = [
                          dirruns,
                          diff
                        ];
                      }
                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
                // Incorporate the offset, then check against cycle size
                diff -= last;
                return diff === first || diff % first === 0 && diff / first >= 0;
              }
            };
          },
          'PSEUDO': function (pseudo, argument) {
            // pseudo-class names are case-insensitive
            // http://www.w3.org/TR/selectors/#pseudo-classes
            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
            // Remember that setFilters inherits from pseudos
            var args, fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error('unsupported pseudo: ' + pseudo);
            // The user may use createPseudo to indicate that
            // arguments are needed to create the filter function
            // just as Sizzle does
            if (fn[expando]) {
              return fn(argument);
            }
            // But maintain support for old signatures
            if (fn.length > 1) {
              args = [
                pseudo,
                pseudo,
                '',
                argument
              ];
              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
                var idx, matched = fn(seed, argument), i = matched.length;
                while (i--) {
                  idx = indexOf.call(seed, matched[i]);
                  seed[idx] = !(matches[idx] = matched[i]);
                }
              }) : function (elem) {
                return fn(elem, 0, args);
              };
            }
            return fn;
          }
        },
        pseudos: {
          'not': markFunction(function (selector) {
            // Trim the selector passed to compile
            // to avoid treating leading and trailing
            // spaces as combinators
            var input = [], results = [], matcher = compile(selector.replace(rtrim, '$1'));
            return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
              var elem, unmatched = matcher(seed, null, xml, []), i = seed.length;
              // Match elements unmatched by `matcher`
              while (i--) {
                if (elem = unmatched[i]) {
                  seed[i] = !(matches[i] = elem);
                }
              }
            }) : function (elem, context, xml) {
              input[0] = elem;
              matcher(input, null, xml, results);
              return !results.pop();
            };
          }),
          'has': markFunction(function (selector) {
            return function (elem) {
              return Sizzle(selector, elem).length > 0;
            };
          }),
          'contains': markFunction(function (text) {
            return function (elem) {
              return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
            };
          }),
          'lang': markFunction(function (lang) {
            // lang value must be a valid identifier
            if (!ridentifier.test(lang || '')) {
              Sizzle.error('unsupported lang: ' + lang);
            }
            lang = lang.replace(runescape, funescape).toLowerCase();
            return function (elem) {
              var elemLang;
              do {
                if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute('xml:lang') || elem.getAttribute('lang')) {
                  elemLang = elemLang.toLowerCase();
                  return elemLang === lang || elemLang.indexOf(lang + '-') === 0;
                }
              } while ((elem = elem.parentNode) && elem.nodeType === 1);
              return false;
            };
          }),
          'target': function (elem) {
            var hash = window.location && window.location.hash;
            return hash && hash.slice(1) === elem.id;
          },
          'root': function (elem) {
            return elem === docElem;
          },
          'focus': function (elem) {
            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
          },
          'enabled': function (elem) {
            return elem.disabled === false;
          },
          'disabled': function (elem) {
            return elem.disabled === true;
          },
          'checked': function (elem) {
            // In CSS3, :checked should return both checked and selected elements
            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
            var nodeName = elem.nodeName.toLowerCase();
            return nodeName === 'input' && !!elem.checked || nodeName === 'option' && !!elem.selected;
          },
          'selected': function (elem) {
            // Accessing this property makes selected-by-default
            // options in Safari work properly
            if (elem.parentNode) {
              elem.parentNode.selectedIndex;
            }
            return elem.selected === true;
          },
          'empty': function (elem) {
            // http://www.w3.org/TR/selectors/#empty-pseudo
            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
            //   but not by others (comment: 8; processing instruction: 7; etc.)
            // nodeType < 6 works because attributes (2) do not appear as children
            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
              if (elem.nodeType < 6) {
                return false;
              }
            }
            return true;
          },
          'parent': function (elem) {
            return !Expr.pseudos['empty'](elem);
          },
          'header': function (elem) {
            return rheader.test(elem.nodeName);
          },
          'input': function (elem) {
            return rinputs.test(elem.nodeName);
          },
          'button': function (elem) {
            var name = elem.nodeName.toLowerCase();
            return name === 'input' && elem.type === 'button' || name === 'button';
          },
          'text': function (elem) {
            var attr;
            return elem.nodeName.toLowerCase() === 'input' && elem.type === 'text' && ((attr = elem.getAttribute('type')) == null || attr.toLowerCase() === 'text');
          },
          'first': createPositionalPseudo(function () {
            return [0];
          }),
          'last': createPositionalPseudo(function (matchIndexes, length) {
            return [length - 1];
          }),
          'eq': createPositionalPseudo(function (matchIndexes, length, argument) {
            return [argument < 0 ? argument + length : argument];
          }),
          'even': createPositionalPseudo(function (matchIndexes, length) {
            var i = 0;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
          'odd': createPositionalPseudo(function (matchIndexes, length) {
            var i = 1;
            for (; i < length; i += 2) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
          'lt': createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; --i >= 0;) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          }),
          'gt': createPositionalPseudo(function (matchIndexes, length, argument) {
            var i = argument < 0 ? argument + length : argument;
            for (; ++i < length;) {
              matchIndexes.push(i);
            }
            return matchIndexes;
          })
        }
      };
      Expr.pseudos['nth'] = Expr.pseudos['eq'];
      // Add button/input type pseudos
      for (i in {
          radio: true,
          checkbox: true,
          file: true,
          password: true,
          image: true
        }) {
        Expr.pseudos[i] = createInputPseudo(i);
      }
      for (i in {
          submit: true,
          reset: true
        }) {
        Expr.pseudos[i] = createButtonPseudo(i);
      }
      // Easy API for creating new setFilters
      function setFilters() {
      }
      setFilters.prototype = Expr.filters = Expr.pseudos;
      Expr.setFilters = new setFilters();
      tokenize = Sizzle.tokenize = function (selector, parseOnly) {
        var matched, match, tokens, type, soFar, groups, preFilters, cached = tokenCache[selector + ' '];
        if (cached) {
          return parseOnly ? 0 : cached.slice(0);
        }
        soFar = selector;
        groups = [];
        preFilters = Expr.preFilter;
        while (soFar) {
          // Comma and first run
          if (!matched || (match = rcomma.exec(soFar))) {
            if (match) {
              // Don't consume trailing commas as valid
              soFar = soFar.slice(match[0].length) || soFar;
            }
            groups.push(tokens = []);
          }
          matched = false;
          // Combinators
          if (match = rcombinators.exec(soFar)) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: match[0].replace(rtrim, ' ')
            });
            soFar = soFar.slice(matched.length);
          }
          // Filters
          for (type in Expr.filter) {
            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
              matched = match.shift();
              tokens.push({
                value: matched,
                type: type,
                matches: match
              });
              soFar = soFar.slice(matched.length);
            }
          }
          if (!matched) {
            break;
          }
        }
        // Return the length of the invalid excess
        // if we're just parsing
        // Otherwise, throw an error or return tokens
        return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : tokenCache(selector, groups).slice(0);
      };
      function toSelector(tokens) {
        var i = 0, len = tokens.length, selector = '';
        for (; i < len; i++) {
          selector += tokens[i].value;
        }
        return selector;
      }
      function addCombinator(matcher, combinator, base) {
        var dir = combinator.dir, checkNonElements = base && dir === 'parentNode', doneName = done++;
        return combinator.first ? function (elem, context, xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              return matcher(elem, context, xml);
            }
          }
        } : function (elem, context, xml) {
          var oldCache, outerCache, newCache = [
              dirruns,
              doneName
            ];
          // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
          if (xml) {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                if (matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          } else {
            while (elem = elem[dir]) {
              if (elem.nodeType === 1 || checkNonElements) {
                outerCache = elem[expando] || (elem[expando] = {});
                if ((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                  // Assign to newCache so results back-propagate to previous elements
                  return newCache[2] = oldCache[2];
                } else {
                  // Reuse newcache so results back-propagate to previous elements
                  outerCache[dir] = newCache;
                  // A match means we're done; a fail means we have to keep checking
                  if (newCache[2] = matcher(elem, context, xml)) {
                    return true;
                  }
                }
              }
            }
          }
        };
      }
      function elementMatcher(matchers) {
        return matchers.length > 1 ? function (elem, context, xml) {
          var i = matchers.length;
          while (i--) {
            if (!matchers[i](elem, context, xml)) {
              return false;
            }
          }
          return true;
        } : matchers[0];
      }
      function multipleContexts(selector, contexts, results) {
        var i = 0, len = contexts.length;
        for (; i < len; i++) {
          Sizzle(selector, contexts[i], results);
        }
        return results;
      }
      function condense(unmatched, map, filter, context, xml) {
        var elem, newUnmatched = [], i = 0, len = unmatched.length, mapped = map != null;
        for (; i < len; i++) {
          if (elem = unmatched[i]) {
            if (!filter || filter(elem, context, xml)) {
              newUnmatched.push(elem);
              if (mapped) {
                map.push(i);
              }
            }
          }
        }
        return newUnmatched;
      }
      function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
        if (postFilter && !postFilter[expando]) {
          postFilter = setMatcher(postFilter);
        }
        if (postFinder && !postFinder[expando]) {
          postFinder = setMatcher(postFinder, postSelector);
        }
        return markFunction(function (seed, results, context, xml) {
          var temp, i, elem, preMap = [], postMap = [], preexisting = results.length,
            // Get initial elements from seed or context
            elems = seed || multipleContexts(selector || '*', context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
            matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems, matcherOut = matcher ? postFinder || (seed ? preFilter : preexisting || postFilter) ? [] : results : matcherIn;
          // Find primary matches
          if (matcher) {
            matcher(matcherIn, matcherOut, context, xml);
          }
          // Apply postFilter
          if (postFilter) {
            temp = condense(matcherOut, postMap);
            postFilter(temp, [], context, xml);
            // Un-match failing elements by moving them back to matcherIn
            i = temp.length;
            while (i--) {
              if (elem = temp[i]) {
                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
              }
            }
          }
          if (seed) {
            if (postFinder || preFilter) {
              if (postFinder) {
                // Get the final matcherOut by condensing this intermediate into postFinder contexts
                temp = [];
                i = matcherOut.length;
                while (i--) {
                  if (elem = matcherOut[i]) {
                    // Restore matcherIn since elem is not yet a final match
                    temp.push(matcherIn[i] = elem);
                  }
                }
                postFinder(null, matcherOut = [], temp, xml);
              }
              // Move matched elements from seed to results to keep them synchronized
              i = matcherOut.length;
              while (i--) {
                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf.call(seed, elem) : preMap[i]) > -1) {
                  seed[temp] = !(results[temp] = elem);
                }
              }
            }  // Add elements to results, through postFinder if defined
          } else {
            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
            if (postFinder) {
              postFinder(null, results, matcherOut, xml);
            } else {
              push.apply(results, matcherOut);
            }
          }
        });
      }
      function matcherFromTokens(tokens) {
        var checkContext, matcher, j, len = tokens.length, leadingRelative = Expr.relative[tokens[0].type], implicitRelative = leadingRelative || Expr.relative[' '], i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
          matchContext = addCombinator(function (elem) {
            return elem === checkContext;
          }, implicitRelative, true), matchAnyContext = addCombinator(function (elem) {
            return indexOf.call(checkContext, elem) > -1;
          }, implicitRelative, true), matchers = [function (elem, context, xml) {
              return !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
            }];
        for (; i < len; i++) {
          if (matcher = Expr.relative[tokens[i].type]) {
            matchers = [addCombinator(elementMatcher(matchers), matcher)];
          } else {
            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);
            // Return special upon seeing a positional matcher
            if (matcher[expando]) {
              // Find the next relative operator (if any) for proper handling
              j = ++i;
              for (; j < len; j++) {
                if (Expr.relative[tokens[j].type]) {
                  break;
                }
              }
              return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === ' ' ? '*' : '' })).replace(rtrim, '$1'), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
            }
            matchers.push(matcher);
          }
        }
        return elementMatcher(matchers);
      }
      function matcherFromGroupMatchers(elementMatchers, setMatchers) {
        var bySet = setMatchers.length > 0, byElement = elementMatchers.length > 0, superMatcher = function (seed, context, xml, results, outermost) {
            var elem, j, matcher, matchedCount = 0, i = '0', unmatched = seed && [], setMatched = [], contextBackup = outermostContext,
              // We must always have either seed elements or outermost context
              elems = seed || byElement && Expr.find['TAG']('*', outermost),
              // Use integer dirruns iff this is the outermost matcher
              dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1, len = elems.length;
            if (outermost) {
              outermostContext = context !== document && context;
            }
            // Add elements passing elementMatchers directly to results
            // Keep `i` a string if there are no elements so `matchedCount` will be "00" below
            // Support: IE<9, Safari
            // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
            for (; i !== len && (elem = elems[i]) != null; i++) {
              if (byElement && elem) {
                j = 0;
                while (matcher = elementMatchers[j++]) {
                  if (matcher(elem, context, xml)) {
                    results.push(elem);
                    break;
                  }
                }
                if (outermost) {
                  dirruns = dirrunsUnique;
                }
              }
              // Track unmatched elements for set filters
              if (bySet) {
                // They will have gone through all possible matchers
                if (elem = !matcher && elem) {
                  matchedCount--;
                }
                // Lengthen the array for every element, matched or not
                if (seed) {
                  unmatched.push(elem);
                }
              }
            }
            // Apply set filters to unmatched elements
            matchedCount += i;
            if (bySet && i !== matchedCount) {
              j = 0;
              while (matcher = setMatchers[j++]) {
                matcher(unmatched, setMatched, context, xml);
              }
              if (seed) {
                // Reintegrate element matches to eliminate the need for sorting
                if (matchedCount > 0) {
                  while (i--) {
                    if (!(unmatched[i] || setMatched[i])) {
                      setMatched[i] = pop.call(results);
                    }
                  }
                }
                // Discard index placeholder values to get only actual matches
                setMatched = condense(setMatched);
              }
              // Add matches to results
              push.apply(results, setMatched);
              // Seedless set matches succeeding multiple successful matchers stipulate sorting
              if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
                Sizzle.uniqueSort(results);
              }
            }
            // Override manipulation of globals by nested matchers
            if (outermost) {
              dirruns = dirrunsUnique;
              outermostContext = contextBackup;
            }
            return unmatched;
          };
        return bySet ? markFunction(superMatcher) : superMatcher;
      }
      compile = Sizzle.compile = function (selector, match) {
        var i, setMatchers = [], elementMatchers = [], cached = compilerCache[selector + ' '];
        if (!cached) {
          // Generate a function of recursive functions that can be used to check each element
          if (!match) {
            match = tokenize(selector);
          }
          i = match.length;
          while (i--) {
            cached = matcherFromTokens(match[i]);
            if (cached[expando]) {
              setMatchers.push(cached);
            } else {
              elementMatchers.push(cached);
            }
          }
          // Cache the compiled function
          cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));
          // Save selector and tokenization
          cached.selector = selector;
        }
        return cached;
      };
      /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
      select = Sizzle.select = function (selector, context, results, seed) {
        var i, tokens, token, type, find, compiled = typeof selector === 'function' && selector, match = !seed && tokenize(selector = compiled.selector || selector);
        results = results || [];
        // Try to minimize operations if there is no seed and only one group
        if (match.length === 1) {
          // Take a shortcut and set the context if the root selector is an ID
          tokens = match[0] = match[0].slice(0);
          if (tokens.length > 2 && (token = tokens[0]).type === 'ID' && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
            context = (Expr.find['ID'](token.matches[0].replace(runescape, funescape), context) || [])[0];
            if (!context) {
              return results;  // Precompiled matchers will still verify ancestry, so step up a level
            } else if (compiled) {
              context = context.parentNode;
            }
            selector = selector.slice(tokens.shift().value.length);
          }
          // Fetch a seed set for right-to-left matching
          i = matchExpr['needsContext'].test(selector) ? 0 : tokens.length;
          while (i--) {
            token = tokens[i];
            // Abort if we hit a combinator
            if (Expr.relative[type = token.type]) {
              break;
            }
            if (find = Expr.find[type]) {
              // Search, expanding context for leading sibling combinators
              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
                // If seed is empty or no tokens remain, we can return early
                tokens.splice(i, 1);
                selector = seed.length && toSelector(tokens);
                if (!selector) {
                  push.apply(results, seed);
                  return results;
                }
                break;
              }
            }
          }
        }
        // Compile and execute a filtering function if one is not provided
        // Provide `match` to avoid retokenization if we modified the selector above
        (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, rsibling.test(selector) && testContext(context.parentNode) || context);
        return results;
      };
      // One-time assignments
      // Sort stability
      support.sortStable = expando.split('').sort(sortOrder).join('') === expando;
      // Support: Chrome<14
      // Always assume duplicates if they aren't passed to the comparison function
      support.detectDuplicates = !!hasDuplicate;
      // Initialize against the default document
      setDocument();
      // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
      // Detached nodes confoundingly follow *each other*
      support.sortDetached = assert(function (div1) {
        // Should return 1, but returns 4 (following)
        return div1.compareDocumentPosition(document.createElement('div')) & 1;
      });
      // Support: IE<8
      // Prevent attribute/property "interpolation"
      // http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
      if (!assert(function (div) {
          div.innerHTML = '<a href=\'#\'></a>';
          return div.firstChild.getAttribute('href') === '#';
        })) {
        addHandle('type|href|height|width', function (elem, name, isXML) {
          if (!isXML) {
            return elem.getAttribute(name, name.toLowerCase() === 'type' ? 1 : 2);
          }
        });
      }
      // Support: IE<9
      // Use defaultValue in place of getAttribute("value")
      if (!support.attributes || !assert(function (div) {
          div.innerHTML = '<input/>';
          div.firstChild.setAttribute('value', '');
          return div.firstChild.getAttribute('value') === '';
        })) {
        addHandle('value', function (elem, name, isXML) {
          if (!isXML && elem.nodeName.toLowerCase() === 'input') {
            return elem.defaultValue;
          }
        });
      }
      // Support: IE<9
      // Use getAttributeNode to fetch booleans when getAttribute lies
      if (!assert(function (div) {
          return div.getAttribute('disabled') == null;
        })) {
        addHandle(booleans, function (elem, name, isXML) {
          var val;
          if (!isXML) {
            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
          }
        });
      }
      return Sizzle;
    }(window);
  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors;
  jQuery.expr[':'] = jQuery.expr.pseudos;
  jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  var rneedsContext = jQuery.expr.match.needsContext;
  var rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var risSimple = /^.[^:#\[\.,]*$/;
  // Implement the identical functionality for filter and not
  function winnow(elements, qualifier, not) {
    if (jQuery.isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        /* jshint -W018 */
        return !!qualifier.call(elem, i, elem) !== not;
      });
    }
    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    }
    if (typeof qualifier === 'string') {
      if (risSimple.test(qualifier)) {
        return jQuery.filter(qualifier, elements, not);
      }
      qualifier = jQuery.filter(qualifier, elements);
    }
    return jQuery.grep(elements, function (elem) {
      return indexOf.call(qualifier, elem) >= 0 !== not;
    });
  }
  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];
    if (not) {
      expr = ':not(' + expr + ')';
    }
    return elems.length === 1 && elem.nodeType === 1 ? jQuery.find.matchesSelector(elem, expr) ? [elem] : [] : jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };
  jQuery.fn.extend({
    find: function (selector) {
      var i, len = this.length, ret = [], self = this;
      if (typeof selector !== 'string') {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }
      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }
      // Needed because $( selector, context ) becomes $( context ).find( selector )
      ret = this.pushStack(len > 1 ? jQuery.unique(ret) : ret);
      ret.selector = this.selector ? this.selector + ' ' + selector : selector;
      return ret;
    },
    filter: function (selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function (selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function (selector) {
      return !!winnow(this, typeof selector === 'string' && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  });
  // Initialize a jQuery object
  // A central reference to the root jQuery(document)
  var rootjQuery,
    // A simple way to check for HTML strings
    // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
    // Strict HTML recognition (#11290: must start with <)
    rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/, init = jQuery.fn.init = function (selector, context) {
      var match, elem;
      // HANDLE: $(""), $(null), $(undefined), $(false)
      if (!selector) {
        return this;
      }
      // Handle HTML strings
      if (typeof selector === 'string') {
        if (selector[0] === '<' && selector[selector.length - 1] === '>' && selector.length >= 3) {
          // Assume that strings that start and end with <> are HTML and skip the regex check
          match = [
            null,
            selector,
            null
          ];
        } else {
          match = rquickExpr.exec(selector);
        }
        // Match html or make sure no context is specified for #id
        if (match && (match[1] || !context)) {
          // HANDLE: $(html) -> $(array)
          if (match[1]) {
            context = context instanceof jQuery ? context[0] : context;
            // scripts is true for back-compat
            // Intentionally let the error be thrown if parseHTML is not present
            jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));
            // HANDLE: $(html, props)
            if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
              for (match in context) {
                // Properties of context are called as methods if possible
                if (jQuery.isFunction(this[match])) {
                  this[match](context[match]);  // ...and otherwise set as attributes
                } else {
                  this.attr(match, context[match]);
                }
              }
            }
            return this;  // HANDLE: $(#id)
          } else {
            elem = document.getElementById(match[2]);
            // Check parentNode to catch when Blackberry 4.6 returns
            // nodes that are no longer in the document #6963
            if (elem && elem.parentNode) {
              // Inject the element directly into the jQuery object
              this.length = 1;
              this[0] = elem;
            }
            this.context = document;
            this.selector = selector;
            return this;
          }  // HANDLE: $(expr, $(...))
        } else if (!context || context.jquery) {
          return (context || rootjQuery).find(selector);  // HANDLE: $(expr, context)
                                                          // (which is just equivalent to: $(context).find(expr)
        } else {
          return this.constructor(context).find(selector);
        }  // HANDLE: $(DOMElement)
      } else if (selector.nodeType) {
        this.context = this[0] = selector;
        this.length = 1;
        return this;  // HANDLE: $(function)
                      // Shortcut for document ready
      } else if (jQuery.isFunction(selector)) {
        return typeof rootjQuery.ready !== 'undefined' ? rootjQuery.ready(selector) : selector(jQuery);
      }
      if (selector.selector !== undefined) {
        this.selector = selector.selector;
        this.context = selector.context;
      }
      return jQuery.makeArray(selector, this);
    };
  // Give the init function the jQuery prototype for later instantiation
  init.prototype = jQuery.fn;
  // Initialize central reference
  rootjQuery = jQuery(document);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
    // methods guaranteed to produce a unique set when starting from a unique set
    guaranteedUnique = {
      children: true,
      contents: true,
      next: true,
      prev: true
    };
  jQuery.extend({
    dir: function (elem, dir, until) {
      var matched = [], truncate = until !== undefined;
      while ((elem = elem[dir]) && elem.nodeType !== 9) {
        if (elem.nodeType === 1) {
          if (truncate && jQuery(elem).is(until)) {
            break;
          }
          matched.push(elem);
        }
      }
      return matched;
    },
    sibling: function (n, elem) {
      var matched = [];
      for (; n; n = n.nextSibling) {
        if (n.nodeType === 1 && n !== elem) {
          matched.push(n);
        }
      }
      return matched;
    }
  });
  jQuery.fn.extend({
    has: function (target) {
      var targets = jQuery(target, this), l = targets.length;
      return this.filter(function () {
        var i = 0;
        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function (selectors, context) {
      var cur, i = 0, l = this.length, matched = [], pos = rneedsContext.test(selectors) || typeof selectors !== 'string' ? jQuery(selectors, context || this.context) : 0;
      for (; i < l; i++) {
        for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
          // Always skip document fragments
          if (cur.nodeType < 11 && (pos ? pos.index(cur) > -1 : cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
            matched.push(cur);
            break;
          }
        }
      }
      return this.pushStack(matched.length > 1 ? jQuery.unique(matched) : matched);
    },
    index: function (elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      }
      // index in selector
      if (typeof elem === 'string') {
        return indexOf.call(jQuery(elem), this[0]);
      }
      // Locate the position of the desired element
      return indexOf.call(this, elem.jquery ? elem[0] : elem);
    },
    add: function (selector, context) {
      return this.pushStack(jQuery.unique(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function (selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });
  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {
    }
    return cur;
  }
  jQuery.each({
    parent: function (elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function (elem) {
      return jQuery.dir(elem, 'parentNode');
    },
    parentsUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'parentNode', until);
    },
    next: function (elem) {
      return sibling(elem, 'nextSibling');
    },
    prev: function (elem) {
      return sibling(elem, 'previousSibling');
    },
    nextAll: function (elem) {
      return jQuery.dir(elem, 'nextSibling');
    },
    prevAll: function (elem) {
      return jQuery.dir(elem, 'previousSibling');
    },
    nextUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'nextSibling', until);
    },
    prevUntil: function (elem, i, until) {
      return jQuery.dir(elem, 'previousSibling', until);
    },
    siblings: function (elem) {
      return jQuery.sibling((elem.parentNode || {}).firstChild, elem);
    },
    children: function (elem) {
      return jQuery.sibling(elem.firstChild);
    },
    contents: function (elem) {
      return elem.contentDocument || jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);
      if (name.slice(-5) !== 'Until') {
        selector = until;
      }
      if (selector && typeof selector === 'string') {
        matched = jQuery.filter(selector, matched);
      }
      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.unique(matched);
        }
        // Reverse order for parents* and prev-derivatives
        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }
      return this.pushStack(matched);
    };
  });
  var rnotwhite = /\S+/g;
  // String to Object options format cache
  var optionsCache = {};
  // Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions(options) {
    var object = optionsCache[options] = {};
    jQuery.each(options.match(rnotwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === 'string' ? optionsCache[options] || createOptions(options) : jQuery.extend({}, options);
    var
      // Last fire value (for non-forgettable lists)
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to know if list is currently firing
      firing,
      // First callback to fire (used internally by add and fireWith)
      firingStart,
      // End of the loop when firing
      firingLength,
      // Index of currently firing callback (modified by remove if needed)
      firingIndex,
      // Actual callback list
      list = [],
      // Stack of fire calls for repeatable lists
      stack = !options.once && [],
      // Fire callbacks
      fire = function (data) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for (; list && firingIndex < firingLength; firingIndex++) {
          if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {
            memory = false;
            // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if (list) {
          if (stack) {
            if (stack.length) {
              fire(stack.shift());
            }
          } else if (memory) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
      // Actual Callbacks object
      self = {
        add: function () {
          if (list) {
            // First, we save the current length
            var start = list.length;
            (function add(args) {
              jQuery.each(args, function (_, arg) {
                var type = jQuery.type(arg);
                if (type === 'function') {
                  if (!options.unique || !self.has(arg)) {
                    list.push(arg);
                  }
                } else if (arg && arg.length && type !== 'string') {
                  // Inspect recursively
                  add(arg);
                }
              });
            }(arguments));
            // Do we need to add the callbacks to the
            // current firing batch?
            if (firing) {
              firingLength = list.length;  // With memory, if we're not firing then
                                           // we should call right away
            } else if (memory) {
              firingStart = start;
              fire(memory);
            }
          }
          return this;
        },
        remove: function () {
          if (list) {
            jQuery.each(arguments, function (_, arg) {
              var index;
              while ((index = jQuery.inArray(arg, list, index)) > -1) {
                list.splice(index, 1);
                // Handle firing indexes
                if (firing) {
                  if (index <= firingLength) {
                    firingLength--;
                  }
                  if (index <= firingIndex) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        has: function (fn) {
          return fn ? jQuery.inArray(fn, list) > -1 : !!(list && list.length);
        },
        empty: function () {
          list = [];
          firingLength = 0;
          return this;
        },
        disable: function () {
          list = stack = memory = undefined;
          return this;
        },
        disabled: function () {
          return !list;
        },
        lock: function () {
          stack = undefined;
          if (!memory) {
            self.disable();
          }
          return this;
        },
        locked: function () {
          return !stack;
        },
        fireWith: function (context, args) {
          if (list && (!fired || stack)) {
            args = args || [];
            args = [
              context,
              args.slice ? args.slice() : args
            ];
            if (firing) {
              stack.push(args);
            } else {
              fire(args);
            }
          }
          return this;
        },
        fire: function () {
          self.fireWith(this, arguments);
          return this;
        },
        fired: function () {
          return !!fired;
        }
      };
    return self;
  };
  jQuery.extend({
    Deferred: function (func) {
      var tuples = [
          [
            'resolve',
            'done',
            jQuery.Callbacks('once memory'),
            'resolved'
          ],
          [
            'reject',
            'fail',
            jQuery.Callbacks('once memory'),
            'rejected'
          ],
          [
            'notify',
            'progress',
            jQuery.Callbacks('memory')
          ]
        ], state = 'pending', promise = {
          state: function () {
            return state;
          },
          always: function () {
            deferred.done(arguments).fail(arguments);
            return this;
          },
          then: function () {
            var fns = arguments;
            return jQuery.Deferred(function (newDefer) {
              jQuery.each(tuples, function (i, tuple) {
                var fn = jQuery.isFunction(fns[i]) && fns[i];
                // deferred[ done | fail | progress ] for forwarding actions to newDefer
                deferred[tuple[1]](function () {
                  var returned = fn && fn.apply(this, arguments);
                  if (returned && jQuery.isFunction(returned.promise)) {
                    returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                  } else {
                    newDefer[tuple[0] + 'With'](this === promise ? newDefer.promise() : this, fn ? [returned] : arguments);
                  }
                });
              });
              fns = null;
            }).promise();
          },
          promise: function (obj) {
            return obj != null ? jQuery.extend(obj, promise) : promise;
          }
        }, deferred = {};
      // Keep pipe for back-compat
      promise.pipe = promise.then;
      // Add list-specific methods
      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2], stateString = tuple[3];
        // promise[ done | fail | progress ] = list.add
        promise[tuple[1]] = list.add;
        // Handle state
        if (stateString) {
          list.add(function () {
            // state = [ resolved | rejected ]
            state = stateString;  // [ reject_list | resolve_list ].disable; progress_list.lock
          }, tuples[i ^ 1][2].disable, tuples[2][2].lock);
        }
        // deferred[ resolve | reject | notify ]
        deferred[tuple[0]] = function () {
          deferred[tuple[0] + 'With'](this === deferred ? promise : this, arguments);
          return this;
        };
        deferred[tuple[0] + 'With'] = list.fireWith;
      });
      // Make the deferred a promise
      promise.promise(deferred);
      // Call given func if any
      if (func) {
        func.call(deferred, deferred);
      }
      // All done!
      return deferred;
    },
    when: function (subordinate) {
      var i = 0, resolveValues = slice.call(arguments), length = resolveValues.length,
        // the count of uncompleted subordinates
        remaining = length !== 1 || subordinate && jQuery.isFunction(subordinate.promise) ? length : 0,
        // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
        deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
        // Update function for both resolve and progress values
        updateFunc = function (i, contexts, values) {
          return function (value) {
            contexts[i] = this;
            values[i] = arguments.length > 1 ? slice.call(arguments) : value;
            if (values === progressValues) {
              deferred.notifyWith(contexts, values);
            } else if (!--remaining) {
              deferred.resolveWith(contexts, values);
            }
          };
        }, progressValues, progressContexts, resolveContexts;
      // add listeners to Deferred subordinates; treat others as resolved
      if (length > 1) {
        progressValues = new Array(length);
        progressContexts = new Array(length);
        resolveContexts = new Array(length);
        for (; i < length; i++) {
          if (resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)) {
            resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));
          } else {
            --remaining;
          }
        }
      }
      // if we're not waiting on anything, resolve the master
      if (!remaining) {
        deferred.resolveWith(resolveContexts, resolveValues);
      }
      return deferred.promise();
    }
  });
  // The deferred used on DOM ready
  var readyList;
  jQuery.fn.ready = function (fn) {
    // Add the callback
    jQuery.ready.promise().done(fn);
    return this;
  };
  jQuery.extend({
    isReady: false,
    readyWait: 1,
    holdReady: function (hold) {
      if (hold) {
        jQuery.readyWait++;
      } else {
        jQuery.ready(true);
      }
    },
    ready: function (wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      }
      // Remember that the DOM is ready
      jQuery.isReady = true;
      // If a normal DOM Ready event fired, decrement, and wait if need be
      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      }
      // If there are functions bound, to execute
      readyList.resolveWith(document, [jQuery]);
      // Trigger any bound ready events
      if (jQuery.fn.triggerHandler) {
        jQuery(document).triggerHandler('ready');
        jQuery(document).off('ready');
      }
    }
  });
  /**
 * The ready event handler and self cleanup method
 */
  function completed() {
    document.removeEventListener('DOMContentLoaded', completed, false);
    window.removeEventListener('load', completed, false);
    jQuery.ready();
  }
  jQuery.ready.promise = function (obj) {
    if (!readyList) {
      readyList = jQuery.Deferred();
      // Catch cases where $(document).ready() is called after the browser event has already occurred.
      // we once tried to use readyState "interactive" here, but it caused issues like the one
      // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
      if (document.readyState === 'complete') {
        // Handle it asynchronously to allow scripts the opportunity to delay ready
        setTimeout(jQuery.ready);
      } else {
        // Use the handy event callback
        document.addEventListener('DOMContentLoaded', completed, false);
        // A fallback to window.onload, that will always work
        window.addEventListener('load', completed, false);
      }
    }
    return readyList.promise(obj);
  };
  // Kick off the DOM ready check even if the user does not
  jQuery.ready.promise();
  // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function
  var access = jQuery.access = function (elems, fn, key, value, chainable, emptyGet, raw) {
      var i = 0, len = elems.length, bulk = key == null;
      // Sets many values
      if (jQuery.type(key) === 'object') {
        chainable = true;
        for (i in key) {
          jQuery.access(elems, fn, i, key[i], true, emptyGet, raw);
        }  // Sets one value
      } else if (value !== undefined) {
        chainable = true;
        if (!jQuery.isFunction(value)) {
          raw = true;
        }
        if (bulk) {
          // Bulk operations run against the entire set
          if (raw) {
            fn.call(elems, value);
            fn = null;  // ...except when executing function values
          } else {
            bulk = fn;
            fn = function (elem, key, value) {
              return bulk.call(jQuery(elem), value);
            };
          }
        }
        if (fn) {
          for (; i < len; i++) {
            fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
          }
        }
      }
      return chainable ? elems : bulk ? fn.call(elems) : len ? fn(elems[0], key) : emptyGet;
    };
  /**
 * Determines whether an object can have data
 */
  jQuery.acceptData = function (owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    /* jshint -W018 */
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };
  function Data() {
    // Support: Android < 4,
    // Old WebKit does not have Object.preventExtensions/freeze method,
    // return new empty object instead with no [[set]] accessor
    Object.defineProperty(this.cache = {}, 0, {
      get: function () {
        return {};
      }
    });
    this.expando = jQuery.expando + Math.random();
  }
  Data.uid = 1;
  Data.accepts = jQuery.acceptData;
  Data.prototype = {
    key: function (owner) {
      // We can accept data for non-element nodes in modern browsers,
      // but we should not, see #8335.
      // Always return the key for a frozen object.
      if (!Data.accepts(owner)) {
        return 0;
      }
      var descriptor = {},
        // Check if the owner object already has a cache key
        unlock = owner[this.expando];
      // If not, create one
      if (!unlock) {
        unlock = Data.uid++;
        // Secure it in a non-enumerable, non-writable property
        try {
          descriptor[this.expando] = { value: unlock };
          Object.defineProperties(owner, descriptor);  // Support: Android < 4
                                                       // Fallback to a less secure definition
        } catch (e) {
          descriptor[this.expando] = unlock;
          jQuery.extend(owner, descriptor);
        }
      }
      // Ensure the cache object
      if (!this.cache[unlock]) {
        this.cache[unlock] = {};
      }
      return unlock;
    },
    set: function (owner, data, value) {
      var prop,
        // There may be an unlock assigned to this node,
        // if there is no entry for this "owner", create one inline
        // and set the unlock as though an owner entry had always existed
        unlock = this.key(owner), cache = this.cache[unlock];
      // Handle: [ owner, key, value ] args
      if (typeof data === 'string') {
        cache[data] = value;  // Handle: [ owner, { properties } ] args
      } else {
        // Fresh assignments by object are shallow copied
        if (jQuery.isEmptyObject(cache)) {
          jQuery.extend(this.cache[unlock], data);  // Otherwise, copy the properties one-by-one to the cache object
        } else {
          for (prop in data) {
            cache[prop] = data[prop];
          }
        }
      }
      return cache;
    },
    get: function (owner, key) {
      // Either a valid cache is found, or will be created.
      // New caches will be created and the unlock returned,
      // allowing direct access to the newly created
      // empty data object. A valid owner object must be provided.
      var cache = this.cache[this.key(owner)];
      return key === undefined ? cache : cache[key];
    },
    access: function (owner, key, value) {
      var stored;
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === 'string' && value === undefined) {
        stored = this.get(owner, key);
        return stored !== undefined ? stored : this.get(owner, jQuery.camelCase(key));
      }
      // [*]When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //
      this.set(owner, key, value);
      // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]
      return value !== undefined ? value : key;
    },
    remove: function (owner, key) {
      var i, name, camel, unlock = this.key(owner), cache = this.cache[unlock];
      if (key === undefined) {
        this.cache[unlock] = {};
      } else {
        // Support array or space separated string of keys
        if (jQuery.isArray(key)) {
          // If "name" is an array of keys...
          // When data is initially created, via ("key", "val") signature,
          // keys will be converted to camelCase.
          // Since there is no way to tell _how_ a key was added, remove
          // both plain key and camelCase key. #12786
          // This will only penalize the array argument path.
          name = key.concat(key.map(jQuery.camelCase));
        } else {
          camel = jQuery.camelCase(key);
          // Try the string as a key before any manipulation
          if (key in cache) {
            name = [
              key,
              camel
            ];
          } else {
            // If a key with the spaces exists, use it.
            // Otherwise, create an array by matching non-whitespace
            name = camel;
            name = name in cache ? [name] : name.match(rnotwhite) || [];
          }
        }
        i = name.length;
        while (i--) {
          delete cache[name[i]];
        }
      }
    },
    hasData: function (owner) {
      return !jQuery.isEmptyObject(this.cache[owner[this.expando]] || {});
    },
    discard: function (owner) {
      if (owner[this.expando]) {
        delete this.cache[owner[this.expando]];
      }
    }
  };
  var data_priv = new Data();
  var data_user = new Data();
  /*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/, rmultiDash = /([A-Z])/g;
  function dataAttr(elem, key, data) {
    var name;
    // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute
    if (data === undefined && elem.nodeType === 1) {
      name = 'data-' + key.replace(rmultiDash, '-$1').toLowerCase();
      data = elem.getAttribute(name);
      if (typeof data === 'string') {
        try {
          data = data === 'true' ? true : data === 'false' ? false : data === 'null' ? null : +data + '' === data ? +data : rbrace.test(data) ? jQuery.parseJSON(data) : data;
        } catch (e) {
        }
        // Make sure we set the data so it isn't changed later
        data_user.set(elem, key, data);
      } else {
        data = undefined;
      }
    }
    return data;
  }
  jQuery.extend({
    hasData: function (elem) {
      return data_user.hasData(elem) || data_priv.hasData(elem);
    },
    data: function (elem, name, data) {
      return data_user.access(elem, name, data);
    },
    removeData: function (elem, name) {
      data_user.remove(elem, name);
    },
    _data: function (elem, name, data) {
      return data_priv.access(elem, name, data);
    },
    _removeData: function (elem, name) {
      data_priv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function (key, value) {
      var i, name, data, elem = this[0], attrs = elem && elem.attributes;
      // Gets all values
      if (key === undefined) {
        if (this.length) {
          data = data_user.get(elem);
          if (elem.nodeType === 1 && !data_priv.get(elem, 'hasDataAttrs')) {
            i = attrs.length;
            while (i--) {
              // Support: IE11+
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;
                if (name.indexOf('data-') === 0) {
                  name = jQuery.camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }
            data_priv.set(elem, 'hasDataAttrs', true);
          }
        }
        return data;
      }
      // Sets multiple values
      if (typeof key === 'object') {
        return this.each(function () {
          data_user.set(this, key);
        });
      }
      return access(this, function (value) {
        var data, camelKey = jQuery.camelCase(key);
        // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.
        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // with the key as-is
          data = data_user.get(elem, key);
          if (data !== undefined) {
            return data;
          }
          // Attempt to get data from the cache
          // with the key camelized
          data = data_user.get(elem, camelKey);
          if (data !== undefined) {
            return data;
          }
          // Attempt to "discover" the data in
          // HTML5 custom data-* attrs
          data = dataAttr(elem, camelKey, undefined);
          if (data !== undefined) {
            return data;
          }
          // We tried really hard, but the data doesn't exist.
          return;
        }
        // Set the data...
        this.each(function () {
          // First, attempt to store a copy or reference of any
          // data that might've been store with a camelCased key.
          var data = data_user.get(this, camelKey);
          // For HTML5 data-* attribute interop, we have to
          // store property names with dashes in a camelCase form.
          // This might not apply to all properties...*
          data_user.set(this, camelKey, value);
          // *... In the case of properties that might _actually_
          // have dashes, we need to also store a copy of that
          // unchanged property.
          if (key.indexOf('-') !== -1 && data !== undefined) {
            data_user.set(this, key, value);
          }
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function (key) {
      return this.each(function () {
        data_user.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function (elem, type, data) {
      var queue;
      if (elem) {
        type = (type || 'fx') + 'queue';
        queue = data_priv.get(elem, type);
        // Speed up dequeue by getting out quickly if this is just a lookup
        if (data) {
          if (!queue || jQuery.isArray(data)) {
            queue = data_priv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }
        return queue || [];
      }
    },
    dequeue: function (elem, type) {
      type = type || 'fx';
      var queue = jQuery.queue(elem, type), startLength = queue.length, fn = queue.shift(), hooks = jQuery._queueHooks(elem, type), next = function () {
          jQuery.dequeue(elem, type);
        };
      // If the fx queue is dequeued, always remove the progress sentinel
      if (fn === 'inprogress') {
        fn = queue.shift();
        startLength--;
      }
      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === 'fx') {
          queue.unshift('inprogress');
        }
        // clear up the last queue stop function
        delete hooks.stop;
        fn.call(elem, next, hooks);
      }
      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    _queueHooks: function (elem, type) {
      var key = type + 'queueHooks';
      return data_priv.get(elem, key) || data_priv.access(elem, key, {
        empty: jQuery.Callbacks('once memory').add(function () {
          data_priv.remove(elem, [
            type + 'queue',
            key
          ]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function (type, data) {
      var setter = 2;
      if (typeof type !== 'string') {
        data = type;
        type = 'fx';
        setter--;
      }
      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }
      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data);
        // ensure a hooks for this queue
        jQuery._queueHooks(this, type);
        if (type === 'fx' && queue[0] !== 'inprogress') {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function (type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function (type) {
      return this.queue(type || 'fx', []);
    },
    promise: function (type, obj) {
      var tmp, count = 1, defer = jQuery.Deferred(), elements = this, i = this.length, resolve = function () {
          if (!--count) {
            defer.resolveWith(elements, [elements]);
          }
        };
      if (typeof type !== 'string') {
        obj = type;
        type = undefined;
      }
      type = type || 'fx';
      while (i--) {
        tmp = data_priv.get(elements[i], type + 'queueHooks');
        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }
      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var cssExpand = [
      'Top',
      'Right',
      'Bottom',
      'Left'
    ];
  var isHidden = function (elem, el) {
    // isHidden might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem;
    return jQuery.css(elem, 'display') === 'none' || !jQuery.contains(elem.ownerDocument, elem);
  };
  var rcheckableType = /^(?:checkbox|radio)$/i;
  (function () {
    var fragment = document.createDocumentFragment(), div = fragment.appendChild(document.createElement('div')), input = document.createElement('input');
    // #11217 - WebKit loses check when the name is after the checked attribute
    // Support: Windows Web Apps (WWA)
    // `name` and `type` need .setAttribute for WWA
    input.setAttribute('type', 'radio');
    input.setAttribute('checked', 'checked');
    input.setAttribute('name', 't');
    div.appendChild(input);
    // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
    // old WebKit doesn't clone checked state correctly in fragments
    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;
    // Make sure textarea (and checkbox) defaultValue is properly cloned
    // Support: IE9-IE11+
    div.innerHTML = '<textarea>x</textarea>';
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  }());
  var strundefined = typeof undefined;
  support.focusinBubbles = 'onfocusin' in window;
  var rkeyEvent = /^key/, rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/, rfocusMorph = /^(?:focusinfocus|focusoutblur)$/, rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;
  function returnTrue() {
    return true;
  }
  function returnFalse() {
    return false;
  }
  function safeActiveElement() {
    try {
      return document.activeElement;
    } catch (err) {
    }
  }
  /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
  jQuery.event = {
    global: {},
    add: function (elem, types, handler, data, selector) {
      var handleObjIn, eventHandle, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.get(elem);
      // Don't attach events to noData or text/comment nodes (but allow plain objects)
      if (!elemData) {
        return;
      }
      // Caller can pass in an object of custom data in lieu of the handler
      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      }
      // Make sure that the handler has a unique ID, used to find/remove it later
      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      }
      // Init the element's event structure and main handler, if this is the first
      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }
      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      }
      // Handle multiple events separated by a space
      types = (types || '').match(rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // There *must* be a type, no attaching namespace-only handlers
        if (!type) {
          continue;
        }
        // If event changes its type, use the special event handlers for the changed type
        special = jQuery.event.special[type] || {};
        // If selector defined, determine special event api type, otherwise given type
        type = (selector ? special.delegateType : special.bindType) || type;
        // Update special based on newly reset type
        special = jQuery.event.special[type] || {};
        // handleObj is passed to all event handlers
        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join('.')
        }, handleObjIn);
        // Init the event handler queue if we're the first
        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0;
          // Only use addEventListener if the special events handler returns false
          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle, false);
            }
          }
        }
        if (special.add) {
          special.add.call(elem, handleObj);
          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        }
        // Add to the element's handler list, delegates in front
        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        }
        // Keep track of which events have ever been used, for event optimization
        jQuery.event.global[type] = true;
      }
    },
    remove: function (elem, types, handler, selector, mappedTypes) {
      var j, origCount, tmp, events, t, handleObj, special, handlers, type, namespaces, origType, elemData = data_priv.hasData(elem) && data_priv.get(elem);
      if (!elemData || !(events = elemData.events)) {
        return;
      }
      // Once for each type.namespace in types; type may be omitted
      types = (types || '').match(rnotwhite) || [''];
      t = types.length;
      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || '').split('.').sort();
        // Unbind all events (on this namespace, if provided) for the element
        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }
          continue;
        }
        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)');
        // Remove matching events
        origCount = j = handlers.length;
        while (j--) {
          handleObj = handlers[j];
          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === '**' && handleObj.selector)) {
            handlers.splice(j, 1);
            if (handleObj.selector) {
              handlers.delegateCount--;
            }
            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        }
        // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)
        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }
          delete events[type];
        }
      }
      // Remove the expando if it's no longer used
      if (jQuery.isEmptyObject(events)) {
        delete elemData.handle;
        data_priv.remove(elem, 'events');
      }
    },
    trigger: function (event, data, elem, onlyHandlers) {
      var i, cur, tmp, bubbleType, ontype, handle, special, eventPath = [elem || document], type = hasOwn.call(event, 'type') ? event.type : event, namespaces = hasOwn.call(event, 'namespace') ? event.namespace.split('.') : [];
      cur = tmp = elem = elem || document;
      // Don't do events on text and comment nodes
      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      }
      // focus/blur morphs to focusin/out; ensure we're not firing them right now
      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }
      if (type.indexOf('.') >= 0) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split('.');
        type = namespaces.shift();
        namespaces.sort();
      }
      ontype = type.indexOf(':') < 0 && 'on' + type;
      // Caller can pass in a jQuery.Event object, Object, or just an event type string
      event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === 'object' && event);
      // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join('.');
      event.namespace_re = event.namespace ? new RegExp('(^|\\.)' + namespaces.join('\\.(?:.*\\.|)') + '(\\.|$)') : null;
      // Clean up the event in case it is being reused
      event.result = undefined;
      if (!event.target) {
        event.target = elem;
      }
      // Clone any incoming data and prepend the event, creating the handler arg list
      data = data == null ? [event] : jQuery.makeArray(data, [event]);
      // Allow special events to draw outside the lines
      special = jQuery.event.special[type] || {};
      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      }
      // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
      if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {
        bubbleType = special.delegateType || type;
        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }
        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        }
        // Only add window if we got to document (e.g., not plain obj or detached DOM)
        if (tmp === (elem.ownerDocument || document)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      }
      // Fire handlers on the event path
      i = 0;
      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        event.type = i > 1 ? bubbleType : special.bindType || type;
        // jQuery handler
        handle = (data_priv.get(cur, 'events') || {})[event.type] && data_priv.get(cur, 'handle');
        if (handle) {
          handle.apply(cur, data);
        }
        // Native handler
        handle = ontype && cur[ontype];
        if (handle && handle.apply && jQuery.acceptData(cur)) {
          event.result = handle.apply(cur, data);
          if (event.result === false) {
            event.preventDefault();
          }
        }
      }
      event.type = type;
      // If nobody prevented the default action, do it now
      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && jQuery.acceptData(elem)) {
          // Call a native DOM method on the target with the same name name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];
            if (tmp) {
              elem[ontype] = null;
            }
            // Prevent re-triggering of the same event, since we already bubbled it above
            jQuery.event.triggered = type;
            elem[type]();
            jQuery.event.triggered = undefined;
            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }
      return event.result;
    },
    dispatch: function (event) {
      // Make a writable jQuery.Event from the native event object
      event = jQuery.event.fix(event);
      var i, j, ret, matched, handleObj, handlerQueue = [], args = slice.call(arguments), handlers = (data_priv.get(this, 'events') || {})[event.type] || [], special = jQuery.event.special[event.type] || {};
      // Use the fix-ed jQuery.Event rather than the (read-only) native event
      args[0] = event;
      event.delegateTarget = this;
      // Call the preDispatch hook for the mapped type, and let it bail if desired
      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      }
      // Determine handlers
      handlerQueue = jQuery.event.handlers.call(this, event, handlers);
      // Run delegates first; they may want to stop propagation beneath us
      i = 0;
      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;
        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or
          // 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
          if (!event.namespace_re || event.namespace_re.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);
            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      }
      // Call the postDispatch hook for the mapped type
      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }
      return event.result;
    },
    handlers: function (event, handlers) {
      var i, matches, sel, handleObj, handlerQueue = [], delegateCount = handlers.delegateCount, cur = event.target;
      // Find delegate handlers
      // Black-hole SVG <use> instance trees (#13180)
      // Avoid non-left-click bubbling in Firefox (#3861)
      if (delegateCount && cur.nodeType && (!event.button || event.type !== 'click')) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.disabled !== true || event.type !== 'click') {
            matches = [];
            for (i = 0; i < delegateCount; i++) {
              handleObj = handlers[i];
              // Don't conflict with Object.prototype properties (#13203)
              sel = handleObj.selector + ' ';
              if (matches[sel] === undefined) {
                matches[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) >= 0 : jQuery.find(sel, this, null, [cur]).length;
              }
              if (matches[sel]) {
                matches.push(handleObj);
              }
            }
            if (matches.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matches
              });
            }
          }
        }
      }
      // Add the remaining (directly-bound) handlers
      if (delegateCount < handlers.length) {
        handlerQueue.push({
          elem: this,
          handlers: handlers.slice(delegateCount)
        });
      }
      return handlerQueue;
    },
    props: 'altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which'.split(' '),
    fixHooks: {},
    keyHooks: {
      props: 'char charCode key keyCode'.split(' '),
      filter: function (event, original) {
        // Add which for key events
        if (event.which == null) {
          event.which = original.charCode != null ? original.charCode : original.keyCode;
        }
        return event;
      }
    },
    mouseHooks: {
      props: 'button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement'.split(' '),
      filter: function (event, original) {
        var eventDoc, doc, body, button = original.button;
        // Calculate pageX/Y if missing and clientX/Y available
        if (event.pageX == null && original.clientX != null) {
          eventDoc = event.target.ownerDocument || document;
          doc = eventDoc.documentElement;
          body = eventDoc.body;
          event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
          event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
        }
        // Add which for click: 1 === left; 2 === middle; 3 === right
        // Note: button is not normalized, so don't use it
        if (!event.which && button !== undefined) {
          event.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
        }
        return event;
      }
    },
    fix: function (event) {
      if (event[jQuery.expando]) {
        return event;
      }
      // Create a writable copy of the event object and normalize some properties
      var i, prop, copy, type = event.type, originalEvent = event, fixHook = this.fixHooks[type];
      if (!fixHook) {
        this.fixHooks[type] = fixHook = rmouseEvent.test(type) ? this.mouseHooks : rkeyEvent.test(type) ? this.keyHooks : {};
      }
      copy = fixHook.props ? this.props.concat(fixHook.props) : this.props;
      event = new jQuery.Event(originalEvent);
      i = copy.length;
      while (i--) {
        prop = copy[i];
        event[prop] = originalEvent[prop];
      }
      // Support: Cordova 2.5 (WebKit) (#13255)
      // All events should have a target; Cordova deviceready doesn't
      if (!event.target) {
        event.target = document;
      }
      // Support: Safari 6.0+, Chrome < 28
      // Target should not be a text node (#504, #13143)
      if (event.target.nodeType === 3) {
        event.target = event.target.parentNode;
      }
      return fixHook.filter ? fixHook.filter(event, originalEvent) : event;
    },
    special: {
      load: { noBubble: true },
      focus: {
        trigger: function () {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: 'focusin'
      },
      blur: {
        trigger: function () {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: 'focusout'
      },
      click: {
        trigger: function () {
          if (this.type === 'checkbox' && this.click && jQuery.nodeName(this, 'input')) {
            this.click();
            return false;
          }
        },
        _default: function (event) {
          return jQuery.nodeName(event.target, 'a');
        }
      },
      beforeunload: {
        postDispatch: function (event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    },
    simulate: function (type, elem, event, bubble) {
      // Piggyback on a donor event to simulate a different one.
      // Fake originalEvent to avoid donor's stopPropagation, but if the
      // simulated event prevents default then we do the same on the donor.
      var e = jQuery.extend(new jQuery.Event(), event, {
          type: type,
          isSimulated: true,
          originalEvent: {}
        });
      if (bubble) {
        jQuery.event.trigger(e, null, elem);
      } else {
        jQuery.event.dispatch.call(elem, e);
      }
      if (e.isDefaultPrevented()) {
        event.preventDefault();
      }
    }
  };
  jQuery.removeEvent = function (elem, type, handle) {
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle, false);
    }
  };
  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    }
    // Event object
    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type;
      // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.
      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && src.returnValue === false ? returnTrue : returnFalse;  // Event type
    } else {
      this.type = src;
    }
    // Put explicitly provided properties onto the event object
    if (props) {
      jQuery.extend(this, props);
    }
    // Create a timestamp if incoming event doesn't have one
    this.timeStamp = src && src.timeStamp || jQuery.now();
    // Mark it as fixed
    this[jQuery.expando] = true;
  };
  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
  jQuery.Event.prototype = {
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    preventDefault: function () {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;
      if (e && e.preventDefault) {
        e.preventDefault();
      }
    },
    stopPropagation: function () {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;
      if (e && e.stopPropagation) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function () {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;
      if (e && e.stopImmediatePropagation) {
        e.stopImmediatePropagation();
      }
      this.stopPropagation();
    }
  };
  // Create mouseenter/leave events using mouseover/out and event-time checks
  // Support: Chrome 15+
  jQuery.each({
    mouseenter: 'mouseover',
    mouseleave: 'mouseout',
    pointerenter: 'pointerover',
    pointerleave: 'pointerout'
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function (event) {
        var ret, target = this, related = event.relatedTarget, handleObj = event.handleObj;
        // For mousenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window
        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }
        return ret;
      }
    };
  });
  // Create "bubbling" focus and blur events
  // Support: Firefox, Chrome, Safari
  if (!support.focusinBubbles) {
    jQuery.each({
      focus: 'focusin',
      blur: 'focusout'
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function (event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event), true);
      };
      jQuery.event.special[fix] = {
        setup: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix);
          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }
          data_priv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function () {
          var doc = this.ownerDocument || this, attaches = data_priv.access(doc, fix) - 1;
          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            data_priv.remove(doc, fix);
          } else {
            data_priv.access(doc, fix, attaches);
          }
        }
      };
    });
  }
  jQuery.fn.extend({
    on: function (types, selector, data, fn, one) {
      var origFn, type;
      // Types can be a map of types/handlers
      if (typeof types === 'object') {
        // ( types-Object, selector, data )
        if (typeof selector !== 'string') {
          // ( types-Object, data )
          data = data || selector;
          selector = undefined;
        }
        for (type in types) {
          this.on(type, selector, data, types[type], one);
        }
        return this;
      }
      if (data == null && fn == null) {
        // ( types, fn )
        fn = selector;
        data = selector = undefined;
      } else if (fn == null) {
        if (typeof selector === 'string') {
          // ( types, selector, fn )
          fn = data;
          data = undefined;
        } else {
          // ( types, data, fn )
          fn = data;
          data = selector;
          selector = undefined;
        }
      }
      if (fn === false) {
        fn = returnFalse;
      } else if (!fn) {
        return this;
      }
      if (one === 1) {
        origFn = fn;
        fn = function (event) {
          // Can use an empty set, since event contains the info
          jQuery().off(event);
          return origFn.apply(this, arguments);
        };
        // Use same guid so caller can remove using origFn
        fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
      }
      return this.each(function () {
        jQuery.event.add(this, types, fn, data, selector);
      });
    },
    one: function (types, selector, data, fn) {
      return this.on(types, selector, data, fn, 1);
    },
    off: function (types, selector, fn) {
      var handleObj, type;
      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + '.' + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }
      if (typeof types === 'object') {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }
        return this;
      }
      if (selector === false || typeof selector === 'function') {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }
      if (fn === false) {
        fn = returnFalse;
      }
      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    },
    trigger: function (type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function (type, data) {
      var elem = this[0];
      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  });
  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi, rtagName = /<([\w:]+)/, rhtml = /<|&#?\w+;/, rnoInnerhtml = /<(?:script|style|link)/i,
    // checked="checked" or checked
    rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i, rscriptType = /^$|\/(?:java|ecma)script/i, rscriptTypeMasked = /^true\/(.*)/, rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
    // We have to close these tags to support XHTML (#13200)
    wrapMap = {
      option: [
        1,
        '<select multiple=\'multiple\'>',
        '</select>'
      ],
      thead: [
        1,
        '<table>',
        '</table>'
      ],
      col: [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      tr: [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      td: [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      _default: [
        0,
        '',
        ''
      ]
    };
  // Support: IE 9
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  // Support: 1.x compatibility
  // Manipulating tables requires a tbody
  function manipulationTarget(elem, content) {
    return jQuery.nodeName(elem, 'table') && jQuery.nodeName(content.nodeType !== 11 ? content : content.firstChild, 'tr') ? elem.getElementsByTagName('tbody')[0] || elem.appendChild(elem.ownerDocument.createElement('tbody')) : elem;
  }
  // Replace/restore the type attribute of script elements for safe DOM manipulation
  function disableScript(elem) {
    elem.type = (elem.getAttribute('type') !== null) + '/' + elem.type;
    return elem;
  }
  function restoreScript(elem) {
    var match = rscriptTypeMasked.exec(elem.type);
    if (match) {
      elem.type = match[1];
    } else {
      elem.removeAttribute('type');
    }
    return elem;
  }
  // Mark scripts as having already been evaluated
  function setGlobalEval(elems, refElements) {
    var i = 0, l = elems.length;
    for (; i < l; i++) {
      data_priv.set(elems[i], 'globalEval', !refElements || data_priv.get(refElements[i], 'globalEval'));
    }
  }
  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
    if (dest.nodeType !== 1) {
      return;
    }
    // 1. Copy private data: events, handlers, etc.
    if (data_priv.hasData(src)) {
      pdataOld = data_priv.access(src);
      pdataCur = data_priv.set(dest, pdataOld);
      events = pdataOld.events;
      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};
        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    }
    // 2. Copy user data
    if (data_user.hasData(src)) {
      udataOld = data_user.access(src);
      udataCur = jQuery.extend({}, udataOld);
      data_user.set(dest, udataCur);
    }
  }
  function getAll(context, tag) {
    var ret = context.getElementsByTagName ? context.getElementsByTagName(tag || '*') : context.querySelectorAll ? context.querySelectorAll(tag || '*') : [];
    return tag === undefined || tag && jQuery.nodeName(context, tag) ? jQuery.merge([context], ret) : ret;
  }
  // Support: IE >= 9
  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase();
    // Fails to persist the checked state of a cloned checkbox or radio button.
    if (nodeName === 'input' && rcheckableType.test(src.type)) {
      dest.checked = src.checked;  // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === 'input' || nodeName === 'textarea') {
      dest.defaultValue = src.defaultValue;
    }
  }
  jQuery.extend({
    clone: function (elem, dataAndEvents, deepDataAndEvents) {
      var i, l, srcElements, destElements, clone = elem.cloneNode(true), inPage = jQuery.contains(elem.ownerDocument, elem);
      // Support: IE >= 9
      // Fix Cloning issues
      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);
        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      }
      // Copy the events from the original to the clone
      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);
          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      }
      // Preserve script evaluation history
      destElements = getAll(clone, 'script');
      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, 'script'));
      }
      // Return the cloned set
      return clone;
    },
    buildFragment: function (elems, context, scripts, selection) {
      var elem, tmp, tag, wrap, contains, j, fragment = context.createDocumentFragment(), nodes = [], i = 0, l = elems.length;
      for (; i < l; i++) {
        elem = elems[i];
        if (elem || elem === 0) {
          // Add nodes directly
          if (jQuery.type(elem) === 'object') {
            // Support: QtWebKit
            // jQuery.merge because push.apply(_, arraylike) throws
            jQuery.merge(nodes, elem.nodeType ? [elem] : elem);  // Convert non-html into a text node
          } else if (!rhtml.test(elem)) {
            nodes.push(context.createTextNode(elem));  // Convert html into DOM nodes
          } else {
            tmp = tmp || fragment.appendChild(context.createElement('div'));
            // Deserialize a standard representation
            tag = (rtagName.exec(elem) || [
              '',
              ''
            ])[1].toLowerCase();
            wrap = wrapMap[tag] || wrapMap._default;
            tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag, '<$1></$2>') + wrap[2];
            // Descend through wrappers to the right content
            j = wrap[0];
            while (j--) {
              tmp = tmp.lastChild;
            }
            // Support: QtWebKit
            // jQuery.merge because push.apply(_, arraylike) throws
            jQuery.merge(nodes, tmp.childNodes);
            // Remember the top-level container
            tmp = fragment.firstChild;
            // Fixes #12346
            // Support: Webkit, IE
            tmp.textContent = '';
          }
        }
      }
      // Remove wrapper from fragment
      fragment.textContent = '';
      i = 0;
      while (elem = nodes[i++]) {
        // #4087 - If origin and destination elements are the same, and this is
        // that element, do not do anything
        if (selection && jQuery.inArray(elem, selection) !== -1) {
          continue;
        }
        contains = jQuery.contains(elem.ownerDocument, elem);
        // Append to fragment
        tmp = getAll(fragment.appendChild(elem), 'script');
        // Preserve script evaluation history
        if (contains) {
          setGlobalEval(tmp);
        }
        // Capture executables
        if (scripts) {
          j = 0;
          while (elem = tmp[j++]) {
            if (rscriptType.test(elem.type || '')) {
              scripts.push(elem);
            }
          }
        }
      }
      return fragment;
    },
    cleanData: function (elems) {
      var data, elem, type, key, special = jQuery.event.special, i = 0;
      for (; (elem = elems[i]) !== undefined; i++) {
        if (jQuery.acceptData(elem)) {
          key = elem[data_priv.expando];
          if (key && (data = data_priv.cache[key])) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type);  // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            }
            if (data_priv.cache[key]) {
              // Discard any remaining `private` data
              delete data_priv.cache[key];
            }
          }
        }
        // Discard any remaining `user` data
        delete data_user.cache[elem[data_user.expando]];
      }
    }
  });
  jQuery.fn.extend({
    text: function (value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function () {
      return this.domManip(arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function () {
      return this.domManip(arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    remove: function (selector, keepData) {
      var elem, elems = selector ? jQuery.filter(selector, this) : this, i = 0;
      for (; (elem = elems[i]) != null; i++) {
        if (!keepData && elem.nodeType === 1) {
          jQuery.cleanData(getAll(elem));
        }
        if (elem.parentNode) {
          if (keepData && jQuery.contains(elem.ownerDocument, elem)) {
            setGlobalEval(getAll(elem, 'script'));
          }
          elem.parentNode.removeChild(elem);
        }
      }
      return this;
    },
    empty: function () {
      var elem, i = 0;
      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false));
          // Remove any remaining nodes
          elem.textContent = '';
        }
      }
      return this;
    },
    clone: function (dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function (value) {
      return access(this, function (value) {
        var elem = this[0] || {}, i = 0, l = this.length;
        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        }
        // See if we can take a shortcut and just use innerHTML
        if (typeof value === 'string' && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [
            '',
            ''
          ])[1].toLowerCase()]) {
          value = value.replace(rxhtmlTag, '<$1></$2>');
          try {
            for (; i < l; i++) {
              elem = this[i] || {};
              // Remove element nodes and prevent memory leaks
              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }
            elem = 0;  // If using innerHTML throws an exception, use the fallback method
          } catch (e) {
          }
        }
        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function () {
      var arg = arguments[0];
      // Make the changes, replacing each context element with the new content
      this.domManip(arguments, function (elem) {
        arg = this.parentNode;
        jQuery.cleanData(getAll(this));
        if (arg) {
          arg.replaceChild(elem, this);
        }
      });
      // Force removal if there was no new content (e.g., from empty arguments)
      return arg && (arg.length || arg.nodeType) ? this : this.remove();
    },
    detach: function (selector) {
      return this.remove(selector, true);
    },
    domManip: function (args, callback) {
      // Flatten any nested arrays
      args = concat.apply([], args);
      var fragment, first, scripts, hasScripts, node, doc, i = 0, l = this.length, set = this, iNoClone = l - 1, value = args[0], isFunction = jQuery.isFunction(value);
      // We can't cloneNode fragments that contain checked, in WebKit
      if (isFunction || l > 1 && typeof value === 'string' && !support.checkClone && rchecked.test(value)) {
        return this.each(function (index) {
          var self = set.eq(index);
          if (isFunction) {
            args[0] = value.call(this, index, self.html());
          }
          self.domManip(args, callback);
        });
      }
      if (l) {
        fragment = jQuery.buildFragment(args, this[0].ownerDocument, false, this);
        first = fragment.firstChild;
        if (fragment.childNodes.length === 1) {
          fragment = first;
        }
        if (first) {
          scripts = jQuery.map(getAll(fragment, 'script'), disableScript);
          hasScripts = scripts.length;
          // Use the original fragment for the last item instead of the first because it can end up
          // being emptied incorrectly in certain situations (#8070).
          for (; i < l; i++) {
            node = fragment;
            if (i !== iNoClone) {
              node = jQuery.clone(node, true, true);
              // Keep references to cloned scripts for later restoration
              if (hasScripts) {
                // Support: QtWebKit
                // jQuery.merge because push.apply(_, arraylike) throws
                jQuery.merge(scripts, getAll(node, 'script'));
              }
            }
            callback.call(this[i], node, i);
          }
          if (hasScripts) {
            doc = scripts[scripts.length - 1].ownerDocument;
            // Reenable scripts
            jQuery.map(scripts, restoreScript);
            // Evaluate executable scripts on first document insertion
            for (i = 0; i < hasScripts; i++) {
              node = scripts[i];
              if (rscriptType.test(node.type || '') && !data_priv.access(node, 'globalEval') && jQuery.contains(doc, node)) {
                if (node.src) {
                  // Optional AJAX dependency, but won't run scripts if not present
                  if (jQuery._evalUrl) {
                    jQuery._evalUrl(node.src);
                  }
                } else {
                  jQuery.globalEval(node.textContent.replace(rcleanScript, ''));
                }
              }
            }
          }
        }
      }
      return this;
    }
  });
  jQuery.each({
    appendTo: 'append',
    prependTo: 'prepend',
    insertBefore: 'before',
    insertAfter: 'after',
    replaceAll: 'replaceWith'
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems, ret = [], insert = jQuery(selector), last = insert.length - 1, i = 0;
      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems);
        // Support: QtWebKit
        // .get() because push.apply(_, arraylike) throws
        push.apply(ret, elems.get());
      }
      return this.pushStack(ret);
    };
  });
  var iframe, elemdisplay = {};
  /**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
  // Called only from within defaultDisplay
  function actualDisplay(name, doc) {
    var style, elem = jQuery(doc.createElement(name)).appendTo(doc.body),
      // getDefaultComputedStyle might be reliably used only on attached element
      display = window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0])) ? style.display : jQuery.css(elem[0], 'display');
    // We don't have any data stored on the element,
    // so use "detach" method as fast way to get rid of the element
    elem.detach();
    return display;
  }
  /**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
  function defaultDisplay(nodeName) {
    var doc = document, display = elemdisplay[nodeName];
    if (!display) {
      display = actualDisplay(nodeName, doc);
      // If the simple way fails, read from inside an iframe
      if (display === 'none' || !display) {
        // Use the already-created iframe if possible
        iframe = (iframe || jQuery('<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>')).appendTo(doc.documentElement);
        // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
        doc = iframe[0].contentDocument;
        // Support: IE
        doc.write();
        doc.close();
        display = actualDisplay(nodeName, doc);
        iframe.detach();
      }
      // Store the correct default display
      elemdisplay[nodeName] = display;
    }
    return display;
  }
  var rmargin = /^margin/;
  var rnumnonpx = new RegExp('^(' + pnum + ')(?!px)[a-z%]+$', 'i');
  var getStyles = function (elem) {
    return elem.ownerDocument.defaultView.getComputedStyle(elem, null);
  };
  function curCSS(elem, name, computed) {
    var width, minWidth, maxWidth, ret, style = elem.style;
    computed = computed || getStyles(elem);
    // Support: IE9
    // getPropertyValue is only needed for .css('filter') in IE9, see #12537
    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];
    }
    if (computed) {
      if (ret === '' && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name);
      }
      // Support: iOS < 6
      // A tribute to the "awesome hack by Dean Edwards"
      // iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
      // this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
      if (rnumnonpx.test(ret) && rmargin.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth;
        // Put in the new values to get a computed value out
        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width;
        // Revert the changed values
        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }
    return ret !== undefined ? ret + '' : ret;
  }
  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function () {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due to missing dependency),
          // remove it.
          // Since there are no other hooks for marginRight, remove the whole object.
          delete this.get;
          return;
        }
        // Hook needed; redefine it so that the support test is not executed again.
        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }
  (function () {
    var pixelPositionVal, boxSizingReliableVal, docElem = document.documentElement, container = document.createElement('div'), div = document.createElement('div');
    if (!div.style) {
      return;
    }
    div.style.backgroundClip = 'content-box';
    div.cloneNode(true).style.backgroundClip = '';
    support.clearCloneStyle = div.style.backgroundClip === 'content-box';
    container.style.cssText = 'border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;' + 'position:absolute';
    container.appendChild(div);
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computePixelPositionAndBoxSizingReliable() {
      div.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;' + 'box-sizing:border-box;display:block;margin-top:1%;top:1%;' + 'border:1px;padding:1px;width:4px;position:absolute';
      div.innerHTML = '';
      docElem.appendChild(container);
      var divStyle = window.getComputedStyle(div, null);
      pixelPositionVal = divStyle.top !== '1%';
      boxSizingReliableVal = divStyle.width === '4px';
      docElem.removeChild(container);
    }
    // Support: node.js jsdom
    // Don't assume that getComputedStyle is a property of the global object
    if (window.getComputedStyle) {
      jQuery.extend(support, {
        pixelPosition: function () {
          // This test is executed only once but we still do memoizing
          // since we can use the boxSizingReliable pre-computing.
          // No need to check if the test was already performed, though.
          computePixelPositionAndBoxSizingReliable();
          return pixelPositionVal;
        },
        boxSizingReliable: function () {
          if (boxSizingReliableVal == null) {
            computePixelPositionAndBoxSizingReliable();
          }
          return boxSizingReliableVal;
        },
        reliableMarginRight: function () {
          // Support: Android 2.3
          // Check if div with explicit width and no margin-right incorrectly
          // gets computed margin-right based on width of container. (#3333)
          // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
          // This support function is only executed once so no memoizing is needed.
          var ret, marginDiv = div.appendChild(document.createElement('div'));
          // Reset CSS: box-sizing; display; margin; border; padding
          marginDiv.style.cssText = div.style.cssText = '-webkit-box-sizing:content-box;-moz-box-sizing:content-box;' + 'box-sizing:content-box;display:block;margin:0;border:0;padding:0';
          marginDiv.style.marginRight = marginDiv.style.width = '0';
          div.style.width = '1px';
          docElem.appendChild(container);
          ret = !parseFloat(window.getComputedStyle(marginDiv, null).marginRight);
          docElem.removeChild(container);
          return ret;
        }
      });
    }
  }());
  // A method for quickly swapping in/out CSS properties to get correct calculations.
  jQuery.swap = function (elem, options, callback, args) {
    var ret, name, old = {};
    // Remember the old values, and insert the new ones
    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }
    ret = callback.apply(elem, args || []);
    // Revert the old values
    for (name in options) {
      elem.style[name] = old[name];
    }
    return ret;
  };
  var
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(none|table(?!-c[ea]).+)/, rnumsplit = new RegExp('^(' + pnum + ')(.*)$', 'i'), rrelNum = new RegExp('^([+-])=(' + pnum + ')', 'i'), cssShow = {
      position: 'absolute',
      visibility: 'hidden',
      display: 'block'
    }, cssNormalTransform = {
      letterSpacing: '0',
      fontWeight: '400'
    }, cssPrefixes = [
      'Webkit',
      'O',
      'Moz',
      'ms'
    ];
  // return a css property mapped to a potentially vendor prefixed property
  function vendorPropName(style, name) {
    // shortcut for names that are not vendor prefixed
    if (name in style) {
      return name;
    }
    // check for vendor prefixed names
    var capName = name[0].toUpperCase() + name.slice(1), origName = name, i = cssPrefixes.length;
    while (i--) {
      name = cssPrefixes[i] + capName;
      if (name in style) {
        return name;
      }
    }
    return origName;
  }
  function setPositiveNumber(elem, value, subtract) {
    var matches = rnumsplit.exec(value);
    return matches ? Math.max(0, matches[1] - (subtract || 0)) + (matches[2] || 'px') : value;
  }
  function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
    var i = extra === (isBorderBox ? 'border' : 'content') ? 4 : name === 'width' ? 1 : 0, val = 0;
    for (; i < 4; i += 2) {
      // both box models exclude margin, so add it if we want it
      if (extra === 'margin') {
        val += jQuery.css(elem, extra + cssExpand[i], true, styles);
      }
      if (isBorderBox) {
        // border-box includes padding, so remove it if we want content
        if (extra === 'content') {
          val -= jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        }
        // at this point, extra isn't border nor margin, so remove border
        if (extra !== 'margin') {
          val -= jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      } else {
        // at this point, extra isn't content, so add padding
        val += jQuery.css(elem, 'padding' + cssExpand[i], true, styles);
        // at this point, extra isn't content nor padding, so add border
        if (extra !== 'padding') {
          val += jQuery.css(elem, 'border' + cssExpand[i] + 'Width', true, styles);
        }
      }
    }
    return val;
  }
  function getWidthOrHeight(elem, name, extra) {
    // Start with offset property, which is equivalent to the border-box value
    var valueIsBorderBox = true, val = name === 'width' ? elem.offsetWidth : elem.offsetHeight, styles = getStyles(elem), isBorderBox = jQuery.css(elem, 'boxSizing', false, styles) === 'border-box';
    // some non-html elements return undefined for offsetWidth, so check for null/undefined
    // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
    // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
    if (val <= 0 || val == null) {
      // Fall back to computed then uncomputed css if necessary
      val = curCSS(elem, name, styles);
      if (val < 0 || val == null) {
        val = elem.style[name];
      }
      // Computed unit is not pixels. Stop here and return.
      if (rnumnonpx.test(val)) {
        return val;
      }
      // we need the check for style in case a browser which returns unreliable values
      // for getComputedStyle silently falls back to the reliable elem.style
      valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);
      // Normalize "", auto, and prepare for extra
      val = parseFloat(val) || 0;
    }
    // use the active box-sizing model to add/subtract irrelevant styles
    return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? 'border' : 'content'), valueIsBorderBox, styles) + 'px';
  }
  function showHide(elements, show) {
    var display, elem, hidden, values = [], index = 0, length = elements.length;
    for (; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      values[index] = data_priv.get(elem, 'olddisplay');
      display = elem.style.display;
      if (show) {
        // Reset the inline display of this element to learn if it is
        // being hidden by cascaded rules or not
        if (!values[index] && display === 'none') {
          elem.style.display = '';
        }
        // Set elements which have been overridden with display: none
        // in a stylesheet to whatever the default browser style is
        // for such an element
        if (elem.style.display === '' && isHidden(elem)) {
          values[index] = data_priv.access(elem, 'olddisplay', defaultDisplay(elem.nodeName));
        }
      } else {
        hidden = isHidden(elem);
        if (display !== 'none' || !hidden) {
          data_priv.set(elem, 'olddisplay', hidden ? display : jQuery.css(elem, 'display'));
        }
      }
    }
    // Set the display of most of the elements in a second loop
    // to avoid the constant reflow
    for (index = 0; index < length; index++) {
      elem = elements[index];
      if (!elem.style) {
        continue;
      }
      if (!show || elem.style.display === 'none' || elem.style.display === '') {
        elem.style.display = show ? values[index] || '' : 'none';
      }
    }
    return elements;
  }
  jQuery.extend({
    cssHooks: {
      opacity: {
        get: function (elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, 'opacity');
            return ret === '' ? '1' : ret;
          }
        }
      }
    },
    cssNumber: {
      'columnCount': true,
      'fillOpacity': true,
      'flexGrow': true,
      'flexShrink': true,
      'fontWeight': true,
      'lineHeight': true,
      'opacity': true,
      'order': true,
      'orphans': true,
      'widows': true,
      'zIndex': true,
      'zoom': true
    },
    cssProps: { 'float': 'cssFloat' },
    style: function (elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      }
      // Make sure that we're working with the right name
      var ret, type, hooks, origName = jQuery.camelCase(name), style = elem.style;
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style, origName));
      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // Check if we're setting a value
      if (value !== undefined) {
        type = typeof value;
        // convert relative number strings (+= or -=) to relative numbers. #7345
        if (type === 'string' && (ret = rrelNum.exec(value))) {
          value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem, name));
          // Fixes bug #9237
          type = 'number';
        }
        // Make sure that null and NaN values aren't set. See: #7116
        if (value == null || value !== value) {
          return;
        }
        // If a number was passed in, add 'px' to the (except for certain CSS properties)
        if (type === 'number' && !jQuery.cssNumber[origName]) {
          value += 'px';
        }
        // Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
        // but it would mean to define eight (for every problematic property) identical functions
        if (!support.clearCloneStyle && value === '' && name.indexOf('background') === 0) {
          style[name] = 'inherit';
        }
        // If a hook was provided, use that value, otherwise just set the specified value
        if (!hooks || !('set' in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          style[name] = value;
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && 'get' in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        }
        // Otherwise just get the value from the style object
        return style[name];
      }
    },
    css: function (elem, name, extra, styles) {
      var val, num, hooks, origName = jQuery.camelCase(name);
      // Make sure that we're working with the right name
      name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style, origName));
      // gets hook for the prefixed version
      // followed by the unprefixed version
      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];
      // If a hook was provided get the computed value from there
      if (hooks && 'get' in hooks) {
        val = hooks.get(elem, true, extra);
      }
      // Otherwise, if a way to get the computed value exists, use that
      if (val === undefined) {
        val = curCSS(elem, name, styles);
      }
      //convert "normal" to computed value
      if (val === 'normal' && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      }
      // Return, converting to number if forced or a qualifier was provided and val looks numeric
      if (extra === '' || extra) {
        num = parseFloat(val);
        return extra === true || jQuery.isNumeric(num) ? num || 0 : val;
      }
      return val;
    }
  });
  jQuery.each([
    'height',
    'width'
  ], function (i, name) {
    jQuery.cssHooks[name] = {
      get: function (elem, computed, extra) {
        if (computed) {
          // certain elements can have dimension info if we invisibly show them
          // however, it must have a current display style that would benefit from this
          return rdisplayswap.test(jQuery.css(elem, 'display')) && elem.offsetWidth === 0 ? jQuery.swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, name, extra);
          }) : getWidthOrHeight(elem, name, extra);
        }
      },
      set: function (elem, value, extra) {
        var styles = extra && getStyles(elem);
        return setPositiveNumber(elem, value, extra ? augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, 'boxSizing', false, styles) === 'border-box', styles) : 0);
      }
    };
  });
  // Support: Android 2.3
  jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight, function (elem, computed) {
    if (computed) {
      // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
      // Work around by temporarily setting element display to inline-block
      return jQuery.swap(elem, { 'display': 'inline-block' }, curCSS, [
        elem,
        'marginRight'
      ]);
    }
  });
  // These hooks are used by animate to expand properties
  jQuery.each({
    margin: '',
    padding: '',
    border: 'Width'
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function (value) {
        var i = 0, expanded = {},
          // assumes a single number if not a string
          parts = typeof value === 'string' ? value.split(' ') : [value];
        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }
        return expanded;
      }
    };
    if (!rmargin.test(prefix)) {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function (name, value) {
      return access(this, function (elem, name, value) {
        var styles, len, map = {}, i = 0;
        if (jQuery.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;
          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }
          return map;
        }
        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    },
    show: function () {
      return showHide(this, true);
    },
    hide: function () {
      return showHide(this);
    },
    toggle: function (state) {
      if (typeof state === 'boolean') {
        return state ? this.show() : this.hide();
      }
      return this.each(function () {
        if (isHidden(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  function Tween(elem, options, prop, end, easing) {
    return new Tween.prototype.init(elem, options, prop, end, easing);
  }
  jQuery.Tween = Tween;
  Tween.prototype = {
    constructor: Tween,
    init: function (elem, options, prop, end, easing, unit) {
      this.elem = elem;
      this.prop = prop;
      this.easing = easing || 'swing';
      this.options = options;
      this.start = this.now = this.cur();
      this.end = end;
      this.unit = unit || (jQuery.cssNumber[prop] ? '' : 'px');
    },
    cur: function () {
      var hooks = Tween.propHooks[this.prop];
      return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
    },
    run: function (percent) {
      var eased, hooks = Tween.propHooks[this.prop];
      if (this.options.duration) {
        this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
      } else {
        this.pos = eased = percent;
      }
      this.now = (this.end - this.start) * eased + this.start;
      if (this.options.step) {
        this.options.step.call(this.elem, this.now, this);
      }
      if (hooks && hooks.set) {
        hooks.set(this);
      } else {
        Tween.propHooks._default.set(this);
      }
      return this;
    }
  };
  Tween.prototype.init.prototype = Tween.prototype;
  Tween.propHooks = {
    _default: {
      get: function (tween) {
        var result;
        if (tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)) {
          return tween.elem[tween.prop];
        }
        // passing an empty string as a 3rd parameter to .css will automatically
        // attempt a parseFloat and fallback to a string if the parse fails
        // so, simple values such as "10px" are parsed to Float.
        // complex values such as "rotate(1rad)" are returned as is.
        result = jQuery.css(tween.elem, tween.prop, '');
        // Empty strings, null, undefined and "auto" are converted to 0.
        return !result || result === 'auto' ? 0 : result;
      },
      set: function (tween) {
        // use step hook for back compat - use cssHook if its there - use .style if its
        // available and use plain properties where available
        if (jQuery.fx.step[tween.prop]) {
          jQuery.fx.step[tween.prop](tween);
        } else if (tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
          jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
        } else {
          tween.elem[tween.prop] = tween.now;
        }
      }
    }
  };
  // Support: IE9
  // Panic based approach to setting things on disconnected nodes
  Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
    set: function (tween) {
      if (tween.elem.nodeType && tween.elem.parentNode) {
        tween.elem[tween.prop] = tween.now;
      }
    }
  };
  jQuery.easing = {
    linear: function (p) {
      return p;
    },
    swing: function (p) {
      return 0.5 - Math.cos(p * Math.PI) / 2;
    }
  };
  jQuery.fx = Tween.prototype.init;
  // Back Compat <1.8 extension point
  jQuery.fx.step = {};
  var fxNow, timerId, rfxtypes = /^(?:toggle|show|hide)$/, rfxnum = new RegExp('^(?:([+-])=|)(' + pnum + ')([a-z%]*)$', 'i'), rrun = /queueHooks$/, animationPrefilters = [defaultPrefilter], tweeners = {
      '*': [function (prop, value) {
          var tween = this.createTween(prop, value), target = tween.cur(), parts = rfxnum.exec(value), unit = parts && parts[3] || (jQuery.cssNumber[prop] ? '' : 'px'),
            // Starting value computation is required for potential unit mismatches
            start = (jQuery.cssNumber[prop] || unit !== 'px' && +target) && rfxnum.exec(jQuery.css(tween.elem, prop)), scale = 1, maxIterations = 20;
          if (start && start[3] !== unit) {
            // Trust units reported by jQuery.css
            unit = unit || start[3];
            // Make sure we update the tween properties later on
            parts = parts || [];
            // Iteratively approximate from a nonzero starting point
            start = +target || 1;
            do {
              // If previous iteration zeroed out, double until we get *something*
              // Use a string for doubling factor so we don't accidentally see scale as unchanged below
              scale = scale || '.5';
              // Adjust and apply
              start = start / scale;
              jQuery.style(tween.elem, prop, start + unit);  // Update scale, tolerating zero or NaN from tween.cur()
                                                             // And breaking the loop if scale is unchanged or perfect, or if we've just had enough
            } while (scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);
          }
          // Update tween properties
          if (parts) {
            start = tween.start = +start || +target || 0;
            tween.unit = unit;
            // If a +=/-= token was provided, we're doing a relative animation
            tween.end = parts[1] ? start + (parts[1] + 1) * parts[2] : +parts[2];
          }
          return tween;
        }]
    };
  // Animations created synchronously will run synchronously
  function createFxNow() {
    setTimeout(function () {
      fxNow = undefined;
    });
    return fxNow = jQuery.now();
  }
  // Generate parameters to create a standard animation
  function genFx(type, includeWidth) {
    var which, i = 0, attrs = { height: type };
    // if we include width, step value is 1 to do all cssExpand values,
    // if we don't include width, step value is 2 to skip over Left and Right
    includeWidth = includeWidth ? 1 : 0;
    for (; i < 4; i += 2 - includeWidth) {
      which = cssExpand[i];
      attrs['margin' + which] = attrs['padding' + which] = type;
    }
    if (includeWidth) {
      attrs.opacity = attrs.width = type;
    }
    return attrs;
  }
  function createTween(value, prop, animation) {
    var tween, collection = (tweeners[prop] || []).concat(tweeners['*']), index = 0, length = collection.length;
    for (; index < length; index++) {
      if (tween = collection[index].call(animation, prop, value)) {
        // we're done with this property
        return tween;
      }
    }
  }
  function defaultPrefilter(elem, props, opts) {
    /* jshint validthis: true */
    var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay, anim = this, orig = {}, style = elem.style, hidden = elem.nodeType && isHidden(elem), dataShow = data_priv.get(elem, 'fxshow');
    // handle queue: false promises
    if (!opts.queue) {
      hooks = jQuery._queueHooks(elem, 'fx');
      if (hooks.unqueued == null) {
        hooks.unqueued = 0;
        oldfire = hooks.empty.fire;
        hooks.empty.fire = function () {
          if (!hooks.unqueued) {
            oldfire();
          }
        };
      }
      hooks.unqueued++;
      anim.always(function () {
        // doing this makes sure that the complete handler will be called
        // before this completes
        anim.always(function () {
          hooks.unqueued--;
          if (!jQuery.queue(elem, 'fx').length) {
            hooks.empty.fire();
          }
        });
      });
    }
    // height/width overflow pass
    if (elem.nodeType === 1 && ('height' in props || 'width' in props)) {
      // Make sure that nothing sneaks out
      // Record all 3 overflow attributes because IE9-10 do not
      // change the overflow attribute when overflowX and
      // overflowY are set to the same value
      opts.overflow = [
        style.overflow,
        style.overflowX,
        style.overflowY
      ];
      // Set display property to inline-block for height/width
      // animations on inline elements that are having width/height animated
      display = jQuery.css(elem, 'display');
      // Test default display if display is currently "none"
      checkDisplay = display === 'none' ? data_priv.get(elem, 'olddisplay') || defaultDisplay(elem.nodeName) : display;
      if (checkDisplay === 'inline' && jQuery.css(elem, 'float') === 'none') {
        style.display = 'inline-block';
      }
    }
    if (opts.overflow) {
      style.overflow = 'hidden';
      anim.always(function () {
        style.overflow = opts.overflow[0];
        style.overflowX = opts.overflow[1];
        style.overflowY = opts.overflow[2];
      });
    }
    // show/hide pass
    for (prop in props) {
      value = props[prop];
      if (rfxtypes.exec(value)) {
        delete props[prop];
        toggle = toggle || value === 'toggle';
        if (value === (hidden ? 'hide' : 'show')) {
          // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
          if (value === 'show' && dataShow && dataShow[prop] !== undefined) {
            hidden = true;
          } else {
            continue;
          }
        }
        orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);  // Any non-fx value stops us from restoring the original display value
      } else {
        display = undefined;
      }
    }
    if (!jQuery.isEmptyObject(orig)) {
      if (dataShow) {
        if ('hidden' in dataShow) {
          hidden = dataShow.hidden;
        }
      } else {
        dataShow = data_priv.access(elem, 'fxshow', {});
      }
      // store state if its toggle - enables .stop().toggle() to "reverse"
      if (toggle) {
        dataShow.hidden = !hidden;
      }
      if (hidden) {
        jQuery(elem).show();
      } else {
        anim.done(function () {
          jQuery(elem).hide();
        });
      }
      anim.done(function () {
        var prop;
        data_priv.remove(elem, 'fxshow');
        for (prop in orig) {
          jQuery.style(elem, prop, orig[prop]);
        }
      });
      for (prop in orig) {
        tween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
        if (!(prop in dataShow)) {
          dataShow[prop] = tween.start;
          if (hidden) {
            tween.end = tween.start;
            tween.start = prop === 'width' || prop === 'height' ? 1 : 0;
          }
        }
      }  // If this is a noop like .hide().hide(), restore an overwritten display value
    } else if ((display === 'none' ? defaultDisplay(elem.nodeName) : display) === 'inline') {
      style.display = display;
    }
  }
  function propFilter(props, specialEasing) {
    var index, name, easing, value, hooks;
    // camelCase, specialEasing and expand cssHook pass
    for (index in props) {
      name = jQuery.camelCase(index);
      easing = specialEasing[name];
      value = props[index];
      if (jQuery.isArray(value)) {
        easing = value[1];
        value = props[index] = value[0];
      }
      if (index !== name) {
        props[name] = value;
        delete props[index];
      }
      hooks = jQuery.cssHooks[name];
      if (hooks && 'expand' in hooks) {
        value = hooks.expand(value);
        delete props[name];
        // not quite $.extend, this wont overwrite keys already present.
        // also - reusing 'index' from above because we have the correct "name"
        for (index in value) {
          if (!(index in props)) {
            props[index] = value[index];
            specialEasing[index] = easing;
          }
        }
      } else {
        specialEasing[name] = easing;
      }
    }
  }
  function Animation(elem, properties, options) {
    var result, stopped, index = 0, length = animationPrefilters.length, deferred = jQuery.Deferred().always(function () {
        // don't match elem in the :animated selector
        delete tick.elem;
      }), tick = function () {
        if (stopped) {
          return false;
        }
        var currentTime = fxNow || createFxNow(), remaining = Math.max(0, animation.startTime + animation.duration - currentTime),
          // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
          temp = remaining / animation.duration || 0, percent = 1 - temp, index = 0, length = animation.tweens.length;
        for (; index < length; index++) {
          animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem, [
          animation,
          percent,
          remaining
        ]);
        if (percent < 1 && length) {
          return remaining;
        } else {
          deferred.resolveWith(elem, [animation]);
          return false;
        }
      }, animation = deferred.promise({
        elem: elem,
        props: jQuery.extend({}, properties),
        opts: jQuery.extend(true, { specialEasing: {} }, options),
        originalProperties: properties,
        originalOptions: options,
        startTime: fxNow || createFxNow(),
        duration: options.duration,
        tweens: [],
        createTween: function (prop, end) {
          var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
          animation.tweens.push(tween);
          return tween;
        },
        stop: function (gotoEnd) {
          var index = 0,
            // if we are going to the end, we want to run all the tweens
            // otherwise we skip this part
            length = gotoEnd ? animation.tweens.length : 0;
          if (stopped) {
            return this;
          }
          stopped = true;
          for (; index < length; index++) {
            animation.tweens[index].run(1);
          }
          // resolve when we played the last frame
          // otherwise, reject
          if (gotoEnd) {
            deferred.resolveWith(elem, [
              animation,
              gotoEnd
            ]);
          } else {
            deferred.rejectWith(elem, [
              animation,
              gotoEnd
            ]);
          }
          return this;
        }
      }), props = animation.props;
    propFilter(props, animation.opts.specialEasing);
    for (; index < length; index++) {
      result = animationPrefilters[index].call(animation, elem, props, animation.opts);
      if (result) {
        return result;
      }
    }
    jQuery.map(props, createTween, animation);
    if (jQuery.isFunction(animation.opts.start)) {
      animation.opts.start.call(elem, animation);
    }
    jQuery.fx.timer(jQuery.extend(tick, {
      elem: elem,
      anim: animation,
      queue: animation.opts.queue
    }));
    // attach callbacks from options
    return animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
  }
  jQuery.Animation = jQuery.extend(Animation, {
    tweener: function (props, callback) {
      if (jQuery.isFunction(props)) {
        callback = props;
        props = ['*'];
      } else {
        props = props.split(' ');
      }
      var prop, index = 0, length = props.length;
      for (; index < length; index++) {
        prop = props[index];
        tweeners[prop] = tweeners[prop] || [];
        tweeners[prop].unshift(callback);
      }
    },
    prefilter: function (callback, prepend) {
      if (prepend) {
        animationPrefilters.unshift(callback);
      } else {
        animationPrefilters.push(callback);
      }
    }
  });
  jQuery.speed = function (speed, easing, fn) {
    var opt = speed && typeof speed === 'object' ? jQuery.extend({}, speed) : {
        complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
        duration: speed,
        easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
      };
    opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === 'number' ? opt.duration : opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[opt.duration] : jQuery.fx.speeds._default;
    // normalize opt.queue - true/undefined/null -> "fx"
    if (opt.queue == null || opt.queue === true) {
      opt.queue = 'fx';
    }
    // Queueing
    opt.old = opt.complete;
    opt.complete = function () {
      if (jQuery.isFunction(opt.old)) {
        opt.old.call(this);
      }
      if (opt.queue) {
        jQuery.dequeue(this, opt.queue);
      }
    };
    return opt;
  };
  jQuery.fn.extend({
    fadeTo: function (speed, to, easing, callback) {
      // show any hidden elements after setting opacity to 0
      return this.filter(isHidden).css('opacity', 0).show().end().animate({ opacity: to }, speed, easing, callback);
    },
    animate: function (prop, speed, easing, callback) {
      var empty = jQuery.isEmptyObject(prop), optall = jQuery.speed(speed, easing, callback), doAnimation = function () {
          // Operate on a copy of prop so per-property easing won't be lost
          var anim = Animation(this, jQuery.extend({}, prop), optall);
          // Empty animations, or finishing resolves immediately
          if (empty || data_priv.get(this, 'finish')) {
            anim.stop(true);
          }
        };
      doAnimation.finish = doAnimation;
      return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
    },
    stop: function (type, clearQueue, gotoEnd) {
      var stopQueue = function (hooks) {
        var stop = hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
      };
      if (typeof type !== 'string') {
        gotoEnd = clearQueue;
        clearQueue = type;
        type = undefined;
      }
      if (clearQueue && type !== false) {
        this.queue(type || 'fx', []);
      }
      return this.each(function () {
        var dequeue = true, index = type != null && type + 'queueHooks', timers = jQuery.timers, data = data_priv.get(this);
        if (index) {
          if (data[index] && data[index].stop) {
            stopQueue(data[index]);
          }
        } else {
          for (index in data) {
            if (data[index] && data[index].stop && rrun.test(index)) {
              stopQueue(data[index]);
            }
          }
        }
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && (type == null || timers[index].queue === type)) {
            timers[index].anim.stop(gotoEnd);
            dequeue = false;
            timers.splice(index, 1);
          }
        }
        // start the next in the queue if the last step wasn't forced
        // timers currently will call their complete callbacks, which will dequeue
        // but only if they were gotoEnd
        if (dequeue || !gotoEnd) {
          jQuery.dequeue(this, type);
        }
      });
    },
    finish: function (type) {
      if (type !== false) {
        type = type || 'fx';
      }
      return this.each(function () {
        var index, data = data_priv.get(this), queue = data[type + 'queue'], hooks = data[type + 'queueHooks'], timers = jQuery.timers, length = queue ? queue.length : 0;
        // enable finishing flag on private data
        data.finish = true;
        // empty the queue first
        jQuery.queue(this, type, []);
        if (hooks && hooks.stop) {
          hooks.stop.call(this, true);
        }
        // look for any active animations, and finish them
        for (index = timers.length; index--;) {
          if (timers[index].elem === this && timers[index].queue === type) {
            timers[index].anim.stop(true);
            timers.splice(index, 1);
          }
        }
        // look for any animations in the old queue and finish them
        for (index = 0; index < length; index++) {
          if (queue[index] && queue[index].finish) {
            queue[index].finish.call(this);
          }
        }
        // turn off finishing flag
        delete data.finish;
      });
    }
  });
  jQuery.each([
    'toggle',
    'show',
    'hide'
  ], function (i, name) {
    var cssFn = jQuery.fn[name];
    jQuery.fn[name] = function (speed, easing, callback) {
      return speed == null || typeof speed === 'boolean' ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
    };
  });
  // Generate shortcuts for custom animations
  jQuery.each({
    slideDown: genFx('show'),
    slideUp: genFx('hide'),
    slideToggle: genFx('toggle'),
    fadeIn: { opacity: 'show' },
    fadeOut: { opacity: 'hide' },
    fadeToggle: { opacity: 'toggle' }
  }, function (name, props) {
    jQuery.fn[name] = function (speed, easing, callback) {
      return this.animate(props, speed, easing, callback);
    };
  });
  jQuery.timers = [];
  jQuery.fx.tick = function () {
    var timer, i = 0, timers = jQuery.timers;
    fxNow = jQuery.now();
    for (; i < timers.length; i++) {
      timer = timers[i];
      // Checks the timer has not already been removed
      if (!timer() && timers[i] === timer) {
        timers.splice(i--, 1);
      }
    }
    if (!timers.length) {
      jQuery.fx.stop();
    }
    fxNow = undefined;
  };
  jQuery.fx.timer = function (timer) {
    jQuery.timers.push(timer);
    if (timer()) {
      jQuery.fx.start();
    } else {
      jQuery.timers.pop();
    }
  };
  jQuery.fx.interval = 13;
  jQuery.fx.start = function () {
    if (!timerId) {
      timerId = setInterval(jQuery.fx.tick, jQuery.fx.interval);
    }
  };
  jQuery.fx.stop = function () {
    clearInterval(timerId);
    timerId = null;
  };
  jQuery.fx.speeds = {
    slow: 600,
    fast: 200,
    _default: 400
  };
  // Based off of the plugin by Clint Helfers, with permission.
  // http://blindsignals.com/index.php/2009/07/jquery-delay/
  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || 'fx';
    return this.queue(type, function (next, hooks) {
      var timeout = setTimeout(next, time);
      hooks.stop = function () {
        clearTimeout(timeout);
      };
    });
  };
  (function () {
    var input = document.createElement('input'), select = document.createElement('select'), opt = select.appendChild(document.createElement('option'));
    input.type = 'checkbox';
    // Support: iOS 5.1, Android 4.x, Android 2.3
    // Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
    support.checkOn = input.value !== '';
    // Must access the parent to make an option select properly
    // Support: IE9, IE10
    support.optSelected = opt.selected;
    // Make sure that the options inside disabled selects aren't marked as disabled
    // (WebKit marks them as disabled)
    select.disabled = true;
    support.optDisabled = !opt.disabled;
    // Check if an input maintains its value after becoming a radio
    // Support: IE9, IE10
    input = document.createElement('input');
    input.value = 't';
    input.type = 'radio';
    support.radioValue = input.value === 't';
  }());
  var nodeHook, boolHook, attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function (name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function (name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function (elem, name, value) {
      var hooks, ret, nType = elem.nodeType;
      // don't get/set attributes on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      // Fallback to prop when attributes are not supported
      if (typeof elem.getAttribute === strundefined) {
        return jQuery.prop(elem, name, value);
      }
      // All attributes are lowercase
      // Grab necessary hook if one is defined
      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        name = name.toLowerCase();
        hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name) ? boolHook : nodeHook);
      }
      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
        } else if (hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        } else {
          elem.setAttribute(name, value + '');
          return value;
        }
      } else if (hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      } else {
        ret = jQuery.find.attr(elem, name);
        // Non-existent attributes return null, we normalize to undefined
        return ret == null ? undefined : ret;
      }
    },
    removeAttr: function (elem, value) {
      var name, propName, i = 0, attrNames = value && value.match(rnotwhite);
      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          propName = jQuery.propFix[name] || name;
          // Boolean attributes get special treatment (#10870)
          if (jQuery.expr.match.bool.test(name)) {
            // Set corresponding property to false
            elem[propName] = false;
          }
          elem.removeAttribute(name);
        }
      }
    },
    attrHooks: {
      type: {
        set: function (elem, value) {
          if (!support.radioValue && value === 'radio' && jQuery.nodeName(elem, 'input')) {
            // Setting the type on a radio button after the value resets the value in IE6-9
            // Reset value to default in case type is set after value during creation
            var val = elem.value;
            elem.setAttribute('type', value);
            if (val) {
              elem.value = val;
            }
            return value;
          }
        }
      }
    }
  });
  // Hooks for boolean attributes
  boolHook = {
    set: function (elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }
      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;
    attrHandle[name] = function (elem, name, isXML) {
      var ret, handle;
      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[name];
        attrHandle[name] = ret;
        ret = getter(elem, name, isXML) != null ? name.toLowerCase() : null;
        attrHandle[name] = handle;
      }
      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i;
  jQuery.fn.extend({
    prop: function (name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function (name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    propFix: {
      'for': 'htmlFor',
      'class': 'className'
    },
    prop: function (elem, name, value) {
      var ret, hooks, notxml, nType = elem.nodeType;
      // don't get/set properties on text, comment and attribute nodes
      if (!elem || nType === 3 || nType === 8 || nType === 2) {
        return;
      }
      notxml = nType !== 1 || !jQuery.isXMLDoc(elem);
      if (notxml) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }
      if (value !== undefined) {
        return hooks && 'set' in hooks && (ret = hooks.set(elem, value, name)) !== undefined ? ret : elem[name] = value;
      } else {
        return hooks && 'get' in hooks && (ret = hooks.get(elem, name)) !== null ? ret : elem[name];
      }
    },
    propHooks: {
      tabIndex: {
        get: function (elem) {
          return elem.hasAttribute('tabindex') || rfocusable.test(elem.nodeName) || elem.href ? elem.tabIndex : -1;
        }
      }
    }
  });
  // Support: IE9+
  // Selectedness for an option in an optgroup can be inaccurate
  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function (elem) {
        var parent = elem.parentNode;
        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }
        return null;
      }
    };
  }
  jQuery.each([
    'tabIndex',
    'readOnly',
    'maxLength',
    'cellSpacing',
    'cellPadding',
    'rowSpan',
    'colSpan',
    'useMap',
    'frameBorder',
    'contentEditable'
  ], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  });
  var rclass = /[\t\r\n\f]/g;
  jQuery.fn.extend({
    addClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = typeof value === 'string' && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        // The disjunction here is for better compressibility (see removeClass)
        classes = (value || '').match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : ' ');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              if (cur.indexOf(' ' + clazz + ' ') < 0) {
                cur += clazz + ' ';
              }
            }
            // only assign if different to avoid unneeded rendering.
            finalValue = jQuery.trim(cur);
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    removeClass: function (value) {
      var classes, elem, cur, clazz, j, finalValue, proceed = arguments.length === 0 || typeof value === 'string' && value, i = 0, len = this.length;
      if (jQuery.isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, this.className));
        });
      }
      if (proceed) {
        classes = (value || '').match(rnotwhite) || [];
        for (; i < len; i++) {
          elem = this[i];
          // This expression is here for better compressibility (see addClass)
          cur = elem.nodeType === 1 && (elem.className ? (' ' + elem.className + ' ').replace(rclass, ' ') : '');
          if (cur) {
            j = 0;
            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(' ' + clazz + ' ') >= 0) {
                cur = cur.replace(' ' + clazz + ' ', ' ');
              }
            }
            // only assign if different to avoid unneeded rendering.
            finalValue = value ? jQuery.trim(cur) : '';
            if (elem.className !== finalValue) {
              elem.className = finalValue;
            }
          }
        }
      }
      return this;
    },
    toggleClass: function (value, stateVal) {
      var type = typeof value;
      if (typeof stateVal === 'boolean' && type === 'string') {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }
      if (jQuery.isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, this.className, stateVal), stateVal);
        });
      }
      return this.each(function () {
        if (type === 'string') {
          // toggle individual class names
          var className, i = 0, self = jQuery(this), classNames = value.match(rnotwhite) || [];
          while (className = classNames[i++]) {
            // check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          }  // Toggle whole class name
        } else if (type === strundefined || type === 'boolean') {
          if (this.className) {
            // store className if set
            data_priv.set(this, '__className__', this.className);
          }
          // If the element has a class name or if we're passed "false",
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.
          this.className = this.className || value === false ? '' : data_priv.get(this, '__className__') || '';
        }
      });
    },
    hasClass: function (selector) {
      var className = ' ' + selector + ' ', i = 0, l = this.length;
      for (; i < l; i++) {
        if (this[i].nodeType === 1 && (' ' + this[i].className + ' ').replace(rclass, ' ').indexOf(className) >= 0) {
          return true;
        }
      }
      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function (value) {
      var hooks, ret, isFunction, elem = this[0];
      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];
          if (hooks && 'get' in hooks && (ret = hooks.get(elem, 'value')) !== undefined) {
            return ret;
          }
          ret = elem.value;
          return typeof ret === 'string' ? ret.replace(rreturn, '') : ret == null ? '' : ret;
        }
        return;
      }
      isFunction = jQuery.isFunction(value);
      return this.each(function (i) {
        var val;
        if (this.nodeType !== 1) {
          return;
        }
        if (isFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        }
        // Treat null/undefined as ""; convert numbers to string
        if (val == null) {
          val = '';
        } else if (typeof val === 'number') {
          val += '';
        } else if (jQuery.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? '' : value + '';
          });
        }
        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];
        // If set returns undefined, fall back to normal setting
        if (!hooks || !('set' in hooks) || hooks.set(this, val, 'value') === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function (elem) {
          var val = jQuery.find.attr(elem, 'value');
          return val != null ? val : jQuery.trim(jQuery.text(elem));
        }
      },
      select: {
        get: function (elem) {
          var value, option, options = elem.options, index = elem.selectedIndex, one = elem.type === 'select-one' || index < 0, values = one ? null : [], max = one ? index + 1 : options.length, i = index < 0 ? max : one ? index : 0;
          // Loop through all the selected options
          for (; i < max; i++) {
            option = options[i];
            // IE6-9 doesn't update selected after form reset (#2551)
            if ((option.selected || i === index) && (support.optDisabled ? !option.disabled : option.getAttribute('disabled') === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode, 'optgroup'))) {
              // Get the specific value for the option
              value = jQuery(option).val();
              // We don't need an array for one selects
              if (one) {
                return value;
              }
              // Multi-Selects return an array
              values.push(value);
            }
          }
          return values;
        },
        set: function (elem, value) {
          var optionSet, option, options = elem.options, values = jQuery.makeArray(value), i = options.length;
          while (i--) {
            option = options[i];
            if (option.selected = jQuery.inArray(option.value, values) >= 0) {
              optionSet = true;
            }
          }
          // force browsers to behave consistently when non-matching value is set
          if (!optionSet) {
            elem.selectedIndex = -1;
          }
          return values;
        }
      }
    }
  });
  // Radios and checkboxes getter/setter
  jQuery.each([
    'radio',
    'checkbox'
  ], function () {
    jQuery.valHooks[this] = {
      set: function (elem, value) {
        if (jQuery.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) >= 0;
        }
      }
    };
    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        // Support: Webkit
        // "" is returned instead of "on" if a value isn't specified
        return elem.getAttribute('value') === null ? 'on' : elem.value;
      };
    }
  });
  // Return jQuery for attributes-only inclusion
  jQuery.each(('blur focus focusin focusout load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select submit keydown keypress keyup error contextmenu').split(' '), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function (fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    },
    bind: function (types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function (types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function (selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function (selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, '**') : this.off(types, selector || '**', fn);
    }
  });
  var nonce = jQuery.now();
  var rquery = /\?/;
  // Support: Android 2.3
  // Workaround failure to string-cast null input
  jQuery.parseJSON = function (data) {
    return JSON.parse(data + '');
  };
  // Cross-browser xml parsing
  jQuery.parseXML = function (data) {
    var xml, tmp;
    if (!data || typeof data !== 'string') {
      return null;
    }
    // Support: IE9
    try {
      tmp = new DOMParser();
      xml = tmp.parseFromString(data, 'text/xml');
    } catch (e) {
      xml = undefined;
    }
    if (!xml || xml.getElementsByTagName('parsererror').length) {
      jQuery.error('Invalid XML: ' + data);
    }
    return xml;
  };
  var
    // Document location
    ajaxLocParts, ajaxLocation, rhash = /#.*$/, rts = /([?&])_=[^&]*/, rheaders = /^(.*?):[ \t]*([^\r\n]*)$/gm,
    // #7653, #8125, #8152: local protocol detection
    rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/, rnoContent = /^(?:GET|HEAD)$/, rprotocol = /^\/\//, rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,
    /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
    prefilters = {},
    /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
    transports = {},
    // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
    allTypes = '*/'.concat('*');
  // #8138, IE may throw an exception when accessing
  // a field from window.location if document.domain has been set
  try {
    ajaxLocation = location.href;
  } catch (e) {
    // Use the href attribute of an A element
    // since IE will modify it given document.location
    ajaxLocation = document.createElement('a');
    ajaxLocation.href = '';
    ajaxLocation = ajaxLocation.href;
  }
  // Segment location into parts
  ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || [];
  // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
  function addToPrefiltersOrTransports(structure) {
    // dataTypeExpression is optional and defaults to "*"
    return function (dataTypeExpression, func) {
      if (typeof dataTypeExpression !== 'string') {
        func = dataTypeExpression;
        dataTypeExpression = '*';
      }
      var dataType, i = 0, dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];
      if (jQuery.isFunction(func)) {
        // For each dataType in the dataTypeExpression
        while (dataType = dataTypes[i++]) {
          // Prepend if requested
          if (dataType[0] === '+') {
            dataType = dataType.slice(1) || '*';
            (structure[dataType] = structure[dataType] || []).unshift(func);  // Otherwise append
          } else {
            (structure[dataType] = structure[dataType] || []).push(func);
          }
        }
      }
    };
  }
  // Base inspection function for prefilters and transports
  function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {
    var inspected = {}, seekingTransport = structure === transports;
    function inspect(dataType) {
      var selected;
      inspected[dataType] = true;
      jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
        var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
        if (typeof dataTypeOrTransport === 'string' && !seekingTransport && !inspected[dataTypeOrTransport]) {
          options.dataTypes.unshift(dataTypeOrTransport);
          inspect(dataTypeOrTransport);
          return false;
        } else if (seekingTransport) {
          return !(selected = dataTypeOrTransport);
        }
      });
      return selected;
    }
    return inspect(options.dataTypes[0]) || !inspected['*'] && inspect('*');
  }
  // A special extend for ajax options
  // that takes "flat" options (not to be deep extended)
  // Fixes #9887
  function ajaxExtend(target, src) {
    var key, deep, flatOptions = jQuery.ajaxSettings.flatOptions || {};
    for (key in src) {
      if (src[key] !== undefined) {
        (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
      }
    }
    if (deep) {
      jQuery.extend(true, target, deep);
    }
    return target;
  }
  /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
  function ajaxHandleResponses(s, jqXHR, responses) {
    var ct, type, finalDataType, firstDataType, contents = s.contents, dataTypes = s.dataTypes;
    // Remove auto dataType and get content-type in the process
    while (dataTypes[0] === '*') {
      dataTypes.shift();
      if (ct === undefined) {
        ct = s.mimeType || jqXHR.getResponseHeader('Content-Type');
      }
    }
    // Check if we're dealing with a known content-type
    if (ct) {
      for (type in contents) {
        if (contents[type] && contents[type].test(ct)) {
          dataTypes.unshift(type);
          break;
        }
      }
    }
    // Check to see if we have a response for the expected dataType
    if (dataTypes[0] in responses) {
      finalDataType = dataTypes[0];
    } else {
      // Try convertible dataTypes
      for (type in responses) {
        if (!dataTypes[0] || s.converters[type + ' ' + dataTypes[0]]) {
          finalDataType = type;
          break;
        }
        if (!firstDataType) {
          firstDataType = type;
        }
      }
      // Or just use first one
      finalDataType = finalDataType || firstDataType;
    }
    // If we found a dataType
    // We add the dataType to the list if needed
    // and return the corresponding response
    if (finalDataType) {
      if (finalDataType !== dataTypes[0]) {
        dataTypes.unshift(finalDataType);
      }
      return responses[finalDataType];
    }
  }
  /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
  function ajaxConvert(s, response, jqXHR, isSuccess) {
    var conv2, current, conv, tmp, prev, converters = {},
      // Work with a copy of dataTypes in case we need to modify it for conversion
      dataTypes = s.dataTypes.slice();
    // Create converters map with lowercased keys
    if (dataTypes[1]) {
      for (conv in s.converters) {
        converters[conv.toLowerCase()] = s.converters[conv];
      }
    }
    current = dataTypes.shift();
    // Convert to each sequential dataType
    while (current) {
      if (s.responseFields[current]) {
        jqXHR[s.responseFields[current]] = response;
      }
      // Apply the dataFilter if provided
      if (!prev && isSuccess && s.dataFilter) {
        response = s.dataFilter(response, s.dataType);
      }
      prev = current;
      current = dataTypes.shift();
      if (current) {
        // There's only work to do if current dataType is non-auto
        if (current === '*') {
          current = prev;  // Convert response if prev dataType is non-auto and differs from current
        } else if (prev !== '*' && prev !== current) {
          // Seek a direct converter
          conv = converters[prev + ' ' + current] || converters['* ' + current];
          // If none found, seek a pair
          if (!conv) {
            for (conv2 in converters) {
              // If conv2 outputs current
              tmp = conv2.split(' ');
              if (tmp[1] === current) {
                // If prev can be converted to accepted input
                conv = converters[prev + ' ' + tmp[0]] || converters['* ' + tmp[0]];
                if (conv) {
                  // Condense equivalence converters
                  if (conv === true) {
                    conv = converters[conv2];  // Otherwise, insert the intermediate dataType
                  } else if (converters[conv2] !== true) {
                    current = tmp[0];
                    dataTypes.unshift(tmp[1]);
                  }
                  break;
                }
              }
            }
          }
          // Apply converter (if not an equivalence)
          if (conv !== true) {
            // Unless errors are allowed to bubble, catch and return them
            if (conv && s['throws']) {
              response = conv(response);
            } else {
              try {
                response = conv(response);
              } catch (e) {
                return {
                  state: 'parsererror',
                  error: conv ? e : 'No conversion from ' + prev + ' to ' + current
                };
              }
            }
          }
        }
      }
    }
    return {
      state: 'success',
      data: response
    };
  }
  jQuery.extend({
    active: 0,
    lastModified: {},
    etag: {},
    ajaxSettings: {
      url: ajaxLocation,
      type: 'GET',
      isLocal: rlocalProtocol.test(ajaxLocParts[1]),
      global: true,
      processData: true,
      async: true,
      contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
      accepts: {
        '*': allTypes,
        text: 'text/plain',
        html: 'text/html',
        xml: 'application/xml, text/xml',
        json: 'application/json, text/javascript'
      },
      contents: {
        xml: /xml/,
        html: /html/,
        json: /json/
      },
      responseFields: {
        xml: 'responseXML',
        text: 'responseText',
        json: 'responseJSON'
      },
      converters: {
        '* text': String,
        'text html': true,
        'text json': jQuery.parseJSON,
        'text xml': jQuery.parseXML
      },
      flatOptions: {
        url: true,
        context: true
      }
    },
    ajaxSetup: function (target, settings) {
      return settings ? ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : ajaxExtend(jQuery.ajaxSettings, target);
    },
    ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
    ajaxTransport: addToPrefiltersOrTransports(transports),
    ajax: function (url, options) {
      // If url is an object, simulate pre-1.5 signature
      if (typeof url === 'object') {
        options = url;
        url = undefined;
      }
      // Force options to be an object
      options = options || {};
      var transport,
        // URL without anti-cache param
        cacheURL,
        // Response headers
        responseHeadersString, responseHeaders,
        // timeout handle
        timeoutTimer,
        // Cross-domain detection vars
        parts,
        // To know if global events are to be dispatched
        fireGlobals,
        // Loop variable
        i,
        // Create the final options object
        s = jQuery.ajaxSetup({}, options),
        // Callbacks context
        callbackContext = s.context || s,
        // Context for global events is callbackContext if it is a DOM node or jQuery collection
        globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,
        // Deferreds
        deferred = jQuery.Deferred(), completeDeferred = jQuery.Callbacks('once memory'),
        // Status-dependent callbacks
        statusCode = s.statusCode || {},
        // Headers (they are sent all at once)
        requestHeaders = {}, requestHeadersNames = {},
        // The jqXHR state
        state = 0,
        // Default abort message
        strAbort = 'canceled',
        // Fake xhr
        jqXHR = {
          readyState: 0,
          getResponseHeader: function (key) {
            var match;
            if (state === 2) {
              if (!responseHeaders) {
                responseHeaders = {};
                while (match = rheaders.exec(responseHeadersString)) {
                  responseHeaders[match[1].toLowerCase()] = match[2];
                }
              }
              match = responseHeaders[key.toLowerCase()];
            }
            return match == null ? null : match;
          },
          getAllResponseHeaders: function () {
            return state === 2 ? responseHeadersString : null;
          },
          setRequestHeader: function (name, value) {
            var lname = name.toLowerCase();
            if (!state) {
              name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;
              requestHeaders[name] = value;
            }
            return this;
          },
          overrideMimeType: function (type) {
            if (!state) {
              s.mimeType = type;
            }
            return this;
          },
          statusCode: function (map) {
            var code;
            if (map) {
              if (state < 2) {
                for (code in map) {
                  // Lazy-add the new callback in a way that preserves old ones
                  statusCode[code] = [
                    statusCode[code],
                    map[code]
                  ];
                }
              } else {
                // Execute the appropriate callbacks
                jqXHR.always(map[jqXHR.status]);
              }
            }
            return this;
          },
          abort: function (statusText) {
            var finalText = statusText || strAbort;
            if (transport) {
              transport.abort(finalText);
            }
            done(0, finalText);
            return this;
          }
        };
      // Attach deferreds
      deferred.promise(jqXHR).complete = completeDeferred.add;
      jqXHR.success = jqXHR.done;
      jqXHR.error = jqXHR.fail;
      // Remove hash character (#7531: and string promotion)
      // Add protocol if not provided (prefilters might expect it)
      // Handle falsy url in the settings object (#10093: consistency with old signature)
      // We also use the url parameter if available
      s.url = ((url || s.url || ajaxLocation) + '').replace(rhash, '').replace(rprotocol, ajaxLocParts[1] + '//');
      // Alias method option to type as per ticket #12004
      s.type = options.method || options.type || s.method || s.type;
      // Extract dataTypes list
      s.dataTypes = jQuery.trim(s.dataType || '*').toLowerCase().match(rnotwhite) || [''];
      // A cross-domain request is in order when we have a protocol:host:port mismatch
      if (s.crossDomain == null) {
        parts = rurl.exec(s.url.toLowerCase());
        s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === 'http:' ? '80' : '443')) !== (ajaxLocParts[3] || (ajaxLocParts[1] === 'http:' ? '80' : '443'))));
      }
      // Convert data if not already a string
      if (s.data && s.processData && typeof s.data !== 'string') {
        s.data = jQuery.param(s.data, s.traditional);
      }
      // Apply prefilters
      inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);
      // If request was aborted inside a prefilter, stop there
      if (state === 2) {
        return jqXHR;
      }
      // We can fire global events as of now if asked to
      fireGlobals = s.global;
      // Watch for a new set of requests
      if (fireGlobals && jQuery.active++ === 0) {
        jQuery.event.trigger('ajaxStart');
      }
      // Uppercase the type
      s.type = s.type.toUpperCase();
      // Determine if request has content
      s.hasContent = !rnoContent.test(s.type);
      // Save the URL in case we're toying with the If-Modified-Since
      // and/or If-None-Match header later on
      cacheURL = s.url;
      // More options handling for requests with no content
      if (!s.hasContent) {
        // If data is available, append data to url
        if (s.data) {
          cacheURL = s.url += (rquery.test(cacheURL) ? '&' : '?') + s.data;
          // #9682: remove data so that it's not used in an eventual retry
          delete s.data;
        }
        // Add anti-cache in url if needed
        if (s.cache === false) {
          s.url = rts.test(cacheURL) ? cacheURL.replace(rts, '$1_=' + nonce++) : cacheURL + (rquery.test(cacheURL) ? '&' : '?') + '_=' + nonce++;
        }
      }
      // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
      if (s.ifModified) {
        if (jQuery.lastModified[cacheURL]) {
          jqXHR.setRequestHeader('If-Modified-Since', jQuery.lastModified[cacheURL]);
        }
        if (jQuery.etag[cacheURL]) {
          jqXHR.setRequestHeader('If-None-Match', jQuery.etag[cacheURL]);
        }
      }
      // Set the correct header, if data is being sent
      if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
        jqXHR.setRequestHeader('Content-Type', s.contentType);
      }
      // Set the Accepts header for the server, depending on the dataType
      jqXHR.setRequestHeader('Accept', s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== '*' ? ', ' + allTypes + '; q=0.01' : '') : s.accepts['*']);
      // Check for headers option
      for (i in s.headers) {
        jqXHR.setRequestHeader(i, s.headers[i]);
      }
      // Allow custom headers/mimetypes and early abort
      if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || state === 2)) {
        // Abort if not done already and return
        return jqXHR.abort();
      }
      // aborting is no longer a cancellation
      strAbort = 'abort';
      // Install callbacks on deferreds
      for (i in {
          success: 1,
          error: 1,
          complete: 1
        }) {
        jqXHR[i](s[i]);
      }
      // Get transport
      transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);
      // If no transport, we auto-abort
      if (!transport) {
        done(-1, 'No Transport');
      } else {
        jqXHR.readyState = 1;
        // Send global event
        if (fireGlobals) {
          globalEventContext.trigger('ajaxSend', [
            jqXHR,
            s
          ]);
        }
        // Timeout
        if (s.async && s.timeout > 0) {
          timeoutTimer = setTimeout(function () {
            jqXHR.abort('timeout');
          }, s.timeout);
        }
        try {
          state = 1;
          transport.send(requestHeaders, done);
        } catch (e) {
          // Propagate exception as error if not done
          if (state < 2) {
            done(-1, e);  // Simply rethrow otherwise
          } else {
            throw e;
          }
        }
      }
      // Callback for when everything is done
      function done(status, nativeStatusText, responses, headers) {
        var isSuccess, success, error, response, modified, statusText = nativeStatusText;
        // Called once
        if (state === 2) {
          return;
        }
        // State is "done" now
        state = 2;
        // Clear timeout if it exists
        if (timeoutTimer) {
          clearTimeout(timeoutTimer);
        }
        // Dereference transport for early garbage collection
        // (no matter how long the jqXHR object will be used)
        transport = undefined;
        // Cache response headers
        responseHeadersString = headers || '';
        // Set readyState
        jqXHR.readyState = status > 0 ? 4 : 0;
        // Determine if successful
        isSuccess = status >= 200 && status < 300 || status === 304;
        // Get response data
        if (responses) {
          response = ajaxHandleResponses(s, jqXHR, responses);
        }
        // Convert no matter what (that way responseXXX fields are always set)
        response = ajaxConvert(s, response, jqXHR, isSuccess);
        // If successful, handle type chaining
        if (isSuccess) {
          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
          if (s.ifModified) {
            modified = jqXHR.getResponseHeader('Last-Modified');
            if (modified) {
              jQuery.lastModified[cacheURL] = modified;
            }
            modified = jqXHR.getResponseHeader('etag');
            if (modified) {
              jQuery.etag[cacheURL] = modified;
            }
          }
          // if no content
          if (status === 204 || s.type === 'HEAD') {
            statusText = 'nocontent';  // if not modified
          } else if (status === 304) {
            statusText = 'notmodified';  // If we have data, let's convert it
          } else {
            statusText = response.state;
            success = response.data;
            error = response.error;
            isSuccess = !error;
          }
        } else {
          // We extract error from statusText
          // then normalize statusText and status for non-aborts
          error = statusText;
          if (status || !statusText) {
            statusText = 'error';
            if (status < 0) {
              status = 0;
            }
          }
        }
        // Set data for the fake xhr object
        jqXHR.status = status;
        jqXHR.statusText = (nativeStatusText || statusText) + '';
        // Success/Error
        if (isSuccess) {
          deferred.resolveWith(callbackContext, [
            success,
            statusText,
            jqXHR
          ]);
        } else {
          deferred.rejectWith(callbackContext, [
            jqXHR,
            statusText,
            error
          ]);
        }
        // Status-dependent callbacks
        jqXHR.statusCode(statusCode);
        statusCode = undefined;
        if (fireGlobals) {
          globalEventContext.trigger(isSuccess ? 'ajaxSuccess' : 'ajaxError', [
            jqXHR,
            s,
            isSuccess ? success : error
          ]);
        }
        // Complete
        completeDeferred.fireWith(callbackContext, [
          jqXHR,
          statusText
        ]);
        if (fireGlobals) {
          globalEventContext.trigger('ajaxComplete', [
            jqXHR,
            s
          ]);
          // Handle the global AJAX counter
          if (!--jQuery.active) {
            jQuery.event.trigger('ajaxStop');
          }
        }
      }
      return jqXHR;
    },
    getJSON: function (url, data, callback) {
      return jQuery.get(url, data, callback, 'json');
    },
    getScript: function (url, callback) {
      return jQuery.get(url, undefined, callback, 'script');
    }
  });
  jQuery.each([
    'get',
    'post'
  ], function (i, method) {
    jQuery[method] = function (url, data, callback, type) {
      // shift arguments if data argument was omitted
      if (jQuery.isFunction(data)) {
        type = type || callback;
        callback = data;
        data = undefined;
      }
      return jQuery.ajax({
        url: url,
        type: method,
        dataType: type,
        data: data,
        success: callback
      });
    };
  });
  // Attach a bunch of functions for handling common AJAX events
  jQuery.each([
    'ajaxStart',
    'ajaxStop',
    'ajaxComplete',
    'ajaxError',
    'ajaxSuccess',
    'ajaxSend'
  ], function (i, type) {
    jQuery.fn[type] = function (fn) {
      return this.on(type, fn);
    };
  });
  jQuery._evalUrl = function (url) {
    return jQuery.ajax({
      url: url,
      type: 'GET',
      dataType: 'script',
      async: false,
      global: false,
      'throws': true
    });
  };
  jQuery.fn.extend({
    wrapAll: function (html) {
      var wrap;
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapAll(html.call(this, i));
        });
      }
      if (this[0]) {
        // The elements to wrap the target around
        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);
        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }
        wrap.map(function () {
          var elem = this;
          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }
          return elem;
        }).append(this);
      }
      return this;
    },
    wrapInner: function (html) {
      if (jQuery.isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }
      return this.each(function () {
        var self = jQuery(this), contents = self.contents();
        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function (html) {
      var isFunction = jQuery.isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function () {
      return this.parent().each(function () {
        if (!jQuery.nodeName(this, 'body')) {
          jQuery(this).replaceWith(this.childNodes);
        }
      }).end();
    }
  });
  jQuery.expr.filters.hidden = function (elem) {
    // Support: Opera <= 12.12
    // Opera reports offsetWidths and offsetHeights less than zero on some elements
    return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
  };
  jQuery.expr.filters.visible = function (elem) {
    return !jQuery.expr.filters.hidden(elem);
  };
  var r20 = /%20/g, rbracket = /\[\]$/, rCRLF = /\r?\n/g, rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i, rsubmittable = /^(?:input|select|textarea|keygen)/i;
  function buildParams(prefix, obj, traditional, add) {
    var name;
    if (jQuery.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add);
        }
      });
    } else if (!traditional && jQuery.type(obj) === 'object') {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + '[' + name + ']', obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  }
  // Serialize an array of form elements or a set of
  // key/values into a query string
  jQuery.param = function (a, traditional) {
    var prefix, s = [], add = function (key, value) {
        // If value is a function, invoke it and return its value
        value = jQuery.isFunction(value) ? value() : value == null ? '' : value;
        s[s.length] = encodeURIComponent(key) + '=' + encodeURIComponent(value);
      };
    // Set traditional to true for jQuery <= 1.3.2 behavior.
    if (traditional === undefined) {
      traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
    }
    // If an array was passed in, assume that it is an array of form elements.
    if (jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    }
    // Return the resulting serialization
    return s.join('&').replace(r20, '+');
  };
  jQuery.fn.extend({
    serialize: function () {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function () {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, 'elements');
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type;
        // Use .is( ":disabled" ) so that fieldset[disabled] works
        return this.name && !jQuery(this).is(':disabled') && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();
        return val == null ? null : jQuery.isArray(val) ? jQuery.map(val, function (val) {
          return {
            name: elem.name,
            value: val.replace(rCRLF, '\r\n')
          };
        }) : {
          name: elem.name,
          value: val.replace(rCRLF, '\r\n')
        };
      }).get();
    }
  });
  jQuery.ajaxSettings.xhr = function () {
    try {
      return new XMLHttpRequest();
    } catch (e) {
    }
  };
  var xhrId = 0, xhrCallbacks = {}, xhrSuccessStatus = {
      0: 200,
      1223: 204
    }, xhrSupported = jQuery.ajaxSettings.xhr();
  // Support: IE9
  // Open requests must be manually aborted on unload (#5280)
  if (window.ActiveXObject) {
    jQuery(window).on('unload', function () {
      for (var key in xhrCallbacks) {
        xhrCallbacks[key]();
      }
    });
  }
  support.cors = !!xhrSupported && 'withCredentials' in xhrSupported;
  support.ajax = xhrSupported = !!xhrSupported;
  jQuery.ajaxTransport(function (options) {
    var callback;
    // Cross domain only allowed if supported through XMLHttpRequest
    if (support.cors || xhrSupported && !options.crossDomain) {
      return {
        send: function (headers, complete) {
          var i, xhr = options.xhr(), id = ++xhrId;
          xhr.open(options.type, options.url, options.async, options.username, options.password);
          // Apply custom fields if provided
          if (options.xhrFields) {
            for (i in options.xhrFields) {
              xhr[i] = options.xhrFields[i];
            }
          }
          // Override mime type if needed
          if (options.mimeType && xhr.overrideMimeType) {
            xhr.overrideMimeType(options.mimeType);
          }
          // X-Requested-With header
          // For cross-domain requests, seeing as conditions for a preflight are
          // akin to a jigsaw puzzle, we simply never set it to be sure.
          // (it can always be set on a per-request basis or even using ajaxSetup)
          // For same-domain requests, won't change header if already provided.
          if (!options.crossDomain && !headers['X-Requested-With']) {
            headers['X-Requested-With'] = 'XMLHttpRequest';
          }
          // Set headers
          for (i in headers) {
            xhr.setRequestHeader(i, headers[i]);
          }
          // Callback
          callback = function (type) {
            return function () {
              if (callback) {
                delete xhrCallbacks[id];
                callback = xhr.onload = xhr.onerror = null;
                if (type === 'abort') {
                  xhr.abort();
                } else if (type === 'error') {
                  complete(xhr.status, xhr.statusText);
                } else {
                  complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, typeof xhr.responseText === 'string' ? { text: xhr.responseText } : undefined, xhr.getAllResponseHeaders());
                }
              }
            };
          };
          // Listen to events
          xhr.onload = callback();
          xhr.onerror = callback('error');
          // Create the abort callback
          callback = xhrCallbacks[id] = callback('abort');
          try {
            // Do send the request (this may raise an exception)
            xhr.send(options.hasContent && options.data || null);
          } catch (e) {
            // #14683: Only rethrow if this hasn't been notified as an error yet
            if (callback) {
              throw e;
            }
          }
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  // Install script dataType
  jQuery.ajaxSetup({
    accepts: { script: 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript' },
    contents: { script: /(?:java|ecma)script/ },
    converters: {
      'text script': function (text) {
        jQuery.globalEval(text);
        return text;
      }
    }
  });
  // Handle cache's special case and crossDomain
  jQuery.ajaxPrefilter('script', function (s) {
    if (s.cache === undefined) {
      s.cache = false;
    }
    if (s.crossDomain) {
      s.type = 'GET';
    }
  });
  // Bind script tag hack transport
  jQuery.ajaxTransport('script', function (s) {
    // This transport only deals with cross domain requests
    if (s.crossDomain) {
      var script, callback;
      return {
        send: function (_, complete) {
          script = jQuery('<script>').prop({
            async: true,
            charset: s.scriptCharset,
            src: s.url
          }).on('load error', callback = function (evt) {
            script.remove();
            callback = null;
            if (evt) {
              complete(evt.type === 'error' ? 404 : 200, evt.type);
            }
          });
          document.head.appendChild(script[0]);
        },
        abort: function () {
          if (callback) {
            callback();
          }
        }
      };
    }
  });
  var oldCallbacks = [], rjsonp = /(=)\?(?=&|$)|\?\?/;
  // Default jsonp settings
  jQuery.ajaxSetup({
    jsonp: 'callback',
    jsonpCallback: function () {
      var callback = oldCallbacks.pop() || jQuery.expando + '_' + nonce++;
      this[callback] = true;
      return callback;
    }
  });
  // Detect, normalize options and install callbacks for jsonp requests
  jQuery.ajaxPrefilter('json jsonp', function (s, originalSettings, jqXHR) {
    var callbackName, overwritten, responseContainer, jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? 'url' : typeof s.data === 'string' && !(s.contentType || '').indexOf('application/x-www-form-urlencoded') && rjsonp.test(s.data) && 'data');
    // Handle iff the expected data type is "jsonp" or we have a parameter to set
    if (jsonProp || s.dataTypes[0] === 'jsonp') {
      // Get callback name, remembering preexisting value associated with it
      callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;
      // Insert callback into url or form data
      if (jsonProp) {
        s[jsonProp] = s[jsonProp].replace(rjsonp, '$1' + callbackName);
      } else if (s.jsonp !== false) {
        s.url += (rquery.test(s.url) ? '&' : '?') + s.jsonp + '=' + callbackName;
      }
      // Use data converter to retrieve json after script execution
      s.converters['script json'] = function () {
        if (!responseContainer) {
          jQuery.error(callbackName + ' was not called');
        }
        return responseContainer[0];
      };
      // force json dataType
      s.dataTypes[0] = 'json';
      // Install callback
      overwritten = window[callbackName];
      window[callbackName] = function () {
        responseContainer = arguments;
      };
      // Clean-up function (fires after converters)
      jqXHR.always(function () {
        // Restore preexisting value
        window[callbackName] = overwritten;
        // Save back as free
        if (s[callbackName]) {
          // make sure that re-using the options doesn't screw things around
          s.jsonpCallback = originalSettings.jsonpCallback;
          // save the callback name for future use
          oldCallbacks.push(callbackName);
        }
        // Call if it was a function and we have a response
        if (responseContainer && jQuery.isFunction(overwritten)) {
          overwritten(responseContainer[0]);
        }
        responseContainer = overwritten = undefined;
      });
      // Delegate to script
      return 'script';
    }
  });
  // data: string of html
  // context (optional): If specified, the fragment will be created in this context, defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string
  jQuery.parseHTML = function (data, context, keepScripts) {
    if (!data || typeof data !== 'string') {
      return null;
    }
    if (typeof context === 'boolean') {
      keepScripts = context;
      context = false;
    }
    context = context || document;
    var parsed = rsingleTag.exec(data), scripts = !keepScripts && [];
    // Single tag
    if (parsed) {
      return [context.createElement(parsed[1])];
    }
    parsed = jQuery.buildFragment([data], context, scripts);
    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }
    return jQuery.merge([], parsed.childNodes);
  };
  // Keep a copy of the old load method
  var _load = jQuery.fn.load;
  /**
 * Load a url into a page
 */
  jQuery.fn.load = function (url, params, callback) {
    if (typeof url !== 'string' && _load) {
      return _load.apply(this, arguments);
    }
    var selector, type, response, self = this, off = url.indexOf(' ');
    if (off >= 0) {
      selector = jQuery.trim(url.slice(off));
      url = url.slice(0, off);
    }
    // If it's a function
    if (jQuery.isFunction(params)) {
      // We assume that it's the callback
      callback = params;
      params = undefined;  // Otherwise, build a param string
    } else if (params && typeof params === 'object') {
      type = 'POST';
    }
    // If we have elements to modify, make the request
    if (self.length > 0) {
      jQuery.ajax({
        url: url,
        type: type,
        dataType: 'html',
        data: params
      }).done(function (responseText) {
        // Save response for use in complete callback
        response = arguments;
        self.html(selector ? jQuery('<div>').append(jQuery.parseHTML(responseText)).find(selector) : responseText);
      }).complete(callback && function (jqXHR, status) {
        self.each(callback, response || [
          jqXHR.responseText,
          status,
          jqXHR
        ]);
      });
    }
    return this;
  };
  jQuery.expr.filters.animated = function (elem) {
    return jQuery.grep(jQuery.timers, function (fn) {
      return elem === fn.elem;
    }).length;
  };
  var docElem = window.document.documentElement;
  /**
 * Gets a window from an element
 */
  function getWindow(elem) {
    return jQuery.isWindow(elem) ? elem : elem.nodeType === 9 && elem.defaultView;
  }
  jQuery.offset = {
    setOffset: function (elem, options, i) {
      var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition, position = jQuery.css(elem, 'position'), curElem = jQuery(elem), props = {};
      // Set position first, in-case top/left are set even on static elem
      if (position === 'static') {
        elem.style.position = 'relative';
      }
      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, 'top');
      curCSSLeft = jQuery.css(elem, 'left');
      calculatePosition = (position === 'absolute' || position === 'fixed') && (curCSSTop + curCSSLeft).indexOf('auto') > -1;
      // Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }
      if (jQuery.isFunction(options)) {
        options = options.call(elem, i, curOffset);
      }
      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }
      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }
      if ('using' in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    offset: function (options) {
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }
      var docElem, win, elem = this[0], box = {
          top: 0,
          left: 0
        }, doc = elem && elem.ownerDocument;
      if (!doc) {
        return;
      }
      docElem = doc.documentElement;
      // Make sure it's not a disconnected DOM node
      if (!jQuery.contains(docElem, elem)) {
        return box;
      }
      // If we don't have gBCR, just use 0,0 rather than error
      // BlackBerry 5, iOS 3 (original iPhone)
      if (typeof elem.getBoundingClientRect !== strundefined) {
        box = elem.getBoundingClientRect();
      }
      win = getWindow(doc);
      return {
        top: box.top + win.pageYOffset - docElem.clientTop,
        left: box.left + win.pageXOffset - docElem.clientLeft
      };
    },
    position: function () {
      if (!this[0]) {
        return;
      }
      var offsetParent, offset, elem = this[0], parentOffset = {
          top: 0,
          left: 0
        };
      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
      if (jQuery.css(elem, 'position') === 'fixed') {
        // We assume that getBoundingClientRect is available when computed position is fixed
        offset = elem.getBoundingClientRect();
      } else {
        // Get *real* offsetParent
        offsetParent = this.offsetParent();
        // Get correct offsets
        offset = this.offset();
        if (!jQuery.nodeName(offsetParent[0], 'html')) {
          parentOffset = offsetParent.offset();
        }
        // Add offsetParent borders
        parentOffset.top += jQuery.css(offsetParent[0], 'borderTopWidth', true);
        parentOffset.left += jQuery.css(offsetParent[0], 'borderLeftWidth', true);
      }
      // Subtract parent offsets and element margins
      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, 'marginTop', true),
        left: offset.left - parentOffset.left - jQuery.css(elem, 'marginLeft', true)
      };
    },
    offsetParent: function () {
      return this.map(function () {
        var offsetParent = this.offsetParent || docElem;
        while (offsetParent && (!jQuery.nodeName(offsetParent, 'html') && jQuery.css(offsetParent, 'position') === 'static')) {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docElem;
      });
    }
  });
  // Create scrollLeft and scrollTop methods
  jQuery.each({
    scrollLeft: 'pageXOffset',
    scrollTop: 'pageYOffset'
  }, function (method, prop) {
    var top = 'pageYOffset' === prop;
    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        var win = getWindow(elem);
        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }
        if (win) {
          win.scrollTo(!top ? val : window.pageXOffset, top ? val : window.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length, null);
    };
  });
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // getComputedStyle returns percent when specified for top/left/bottom/right
  // rather than make the css module depend on the offset module, we just check for it here
  jQuery.each([
    'top',
    'left'
  ], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop);
        // if curCSS returns percentage, fallback to offset
        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + 'px' : computed;
      }
    });
  });
  // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
  jQuery.each({
    Height: 'height',
    Width: 'width'
  }, function (name, type) {
    jQuery.each({
      padding: 'inner' + name,
      content: type,
      '': 'outer' + name
    }, function (defaultExtra, funcName) {
      // margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== 'boolean'), extra = defaultExtra || (margin === true || value === true ? 'margin' : 'border');
        return access(this, function (elem, type, value) {
          var doc;
          if (jQuery.isWindow(elem)) {
            // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
            // isn't a whole lot we can do. See pull request at this URL for discussion:
            // https://github.com/jquery/jquery/pull/764
            return elem.document.documentElement['client' + name];
          }
          // Get document width or height
          if (elem.nodeType === 9) {
            doc = elem.documentElement;
            // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest
            return Math.max(elem.body['scroll' + name], doc['scroll' + name], elem.body['offset' + name], doc['offset' + name], doc['client' + name]);
          }
          return value === undefined ? jQuery.css(elem, type, extra) : jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable, null);
      };
    });
  });
  // The number of elements contained in the matched element set
  jQuery.fn.size = function () {
    return this.length;
  };
  jQuery.fn.andSelf = jQuery.fn.addBack;
  // Register as a named AMD module, since jQuery can be concatenated with other
  // files that may use define, but not via a proper concatenation script that
  // understands anonymous AMD modules. A named AMD is safest and most robust
  // way to register. Lowercase jquery is used because AMD module names are
  // derived from file names, and jQuery is normally delivered in a lowercase
  // file name. Do this after creating the global so that if an AMD module wants
  // to call noConflict to hide this version of jQuery, it will work.
  // Note that for maximum portability, libraries that are not jQuery should
  // declare themselves as anonymous modules, and avoid setting a global if an
  // AMD loader is present. jQuery is a special case. For more information, see
  // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
  if (typeof define === 'function' && define.amd) {
    define('jquery', [], function () {
      return jQuery;
    });
  }
  var
    // Map over jQuery in case of overwrite
    _jQuery = window.jQuery,
    // Map over the $ in case of overwrite
    _$ = window.$;
  jQuery.noConflict = function (deep) {
    if (window.$ === jQuery) {
      window.$ = _$;
    }
    if (deep && window.jQuery === jQuery) {
      window.jQuery = _jQuery;
    }
    return jQuery;
  };
  // Expose jQuery and $ identifiers, even in
  // AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
  // and CommonJS for browser emulators (#13566)
  if (typeof noGlobal === strundefined) {
    window.jQuery = window.$ = jQuery;
  }
  return jQuery;
}));
/**
 * @license AngularJS v1.2.26
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, document, undefined) {
  'use strict';
  /**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */
  function minErr(module) {
    return function () {
      var code = arguments[0], prefix = '[' + (module ? module + ':' : '') + code + '] ', template = arguments[1], templateArgs = arguments, stringify = function (obj) {
          if (typeof obj === 'function') {
            return obj.toString().replace(/ \{[\s\S]*$/, '');
          } else if (typeof obj === 'undefined') {
            return 'undefined';
          } else if (typeof obj !== 'string') {
            return JSON.stringify(obj);
          }
          return obj;
        }, message, i;
      message = prefix + template.replace(/\{\d+\}/g, function (match) {
        var index = +match.slice(1, -1), arg;
        if (index + 2 < templateArgs.length) {
          arg = templateArgs[index + 2];
          if (typeof arg === 'function') {
            return arg.toString().replace(/ ?\{[\s\S]*$/, '');
          } else if (typeof arg === 'undefined') {
            return 'undefined';
          } else if (typeof arg !== 'string') {
            return toJson(arg);
          }
          return arg;
        }
        return match;
      });
      message = message + '\nhttp://errors.angularjs.org/1.2.26/' + (module ? module + '/' : '') + code;
      for (i = 2; i < arguments.length; i++) {
        message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' + encodeURIComponent(stringify(arguments[i]));
      }
      return new Error(message);
    };
  }
  /* We need to tell jshint what variables are being exported */
  /* global angular: true,
    msie: true,
    jqLite: true,
    jQuery: true,
    slice: true,
    push: true,
    toString: true,
    ngMinErr: true,
    angularModule: true,
    nodeName_: true,
    uid: true,
    VALIDITY_STATE_PROPERTY: true,

    lowercase: true,
    uppercase: true,
    manualLowercase: true,
    manualUppercase: true,
    nodeName_: true,
    isArrayLike: true,
    forEach: true,
    sortedKeys: true,
    forEachSorted: true,
    reverseParams: true,
    nextUid: true,
    setHashKey: true,
    extend: true,
    int: true,
    inherit: true,
    noop: true,
    identity: true,
    valueFn: true,
    isUndefined: true,
    isDefined: true,
    isObject: true,
    isString: true,
    isNumber: true,
    isDate: true,
    isArray: true,
    isFunction: true,
    isRegExp: true,
    isWindow: true,
    isScope: true,
    isFile: true,
    isBlob: true,
    isBoolean: true,
    isPromiseLike: true,
    trim: true,
    isElement: true,
    makeMap: true,
    map: true,
    size: true,
    includes: true,
    indexOf: true,
    arrayRemove: true,
    isLeafNode: true,
    copy: true,
    shallowCopy: true,
    equals: true,
    csp: true,
    concat: true,
    sliceArgs: true,
    bind: true,
    toJsonReplacer: true,
    toJson: true,
    fromJson: true,
    toBoolean: true,
    startingTag: true,
    tryDecodeURIComponent: true,
    parseKeyValue: true,
    toKeyValue: true,
    encodeUriSegment: true,
    encodeUriQuery: true,
    angularInit: true,
    bootstrap: true,
    snake_case: true,
    bindJQuery: true,
    assertArg: true,
    assertArgFn: true,
    assertNotHasOwnProperty: true,
    getter: true,
    getBlockElements: true,
    hasOwnProperty: true,
*/
  ////////////////////////////////////
  /**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */
  // The name of a form control's ValidityState property.
  // This is used so that it's possible for internal tests to create mock ValidityStates.
  var VALIDITY_STATE_PROPERTY = 'validity';
  /**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
  var lowercase = function (string) {
    return isString(string) ? string.toLowerCase() : string;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  /**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
  var uppercase = function (string) {
    return isString(string) ? string.toUpperCase() : string;
  };
  var manualLowercase = function (s) {
    /* jshint bitwise: false */
    return isString(s) ? s.replace(/[A-Z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) | 32);
    }) : s;
  };
  var manualUppercase = function (s) {
    /* jshint bitwise: false */
    return isString(s) ? s.replace(/[a-z]/g, function (ch) {
      return String.fromCharCode(ch.charCodeAt(0) & ~32);
    }) : s;
  };
  // String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
  // locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
  // with correct but slower alternatives.
  if ('i' !== 'I'.toLowerCase()) {
    lowercase = manualLowercase;
    uppercase = manualUppercase;
  }
  var
    /** holds major version number for IE or NaN for real browsers */
    msie, jqLite,
    // delay binding since jQuery could be loaded after us.
    jQuery,
    // delay binding
    slice = [].slice, push = [].push, toString = Object.prototype.toString, ngMinErr = minErr('ng'),
    /** @name angular */
    angular = window.angular || (window.angular = {}), angularModule, nodeName_, uid = [
      '0',
      '0',
      '0'
    ];
  /**
 * IE 11 changed the format of the UserAgent string.
 * See http://msdn.microsoft.com/en-us/library/ms537503.aspx
 */
  msie = int((/msie (\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  if (isNaN(msie)) {
    msie = int((/trident\/.*; rv:(\d+)/.exec(lowercase(navigator.userAgent)) || [])[1]);
  }
  /**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
  function isArrayLike(obj) {
    if (obj == null || isWindow(obj)) {
      return false;
    }
    var length = obj.length;
    if (obj.nodeType === 1 && length) {
      return true;
    }
    return isString(obj) || isArray(obj) || length === 0 || typeof length === 'number' && length > 0 && length - 1 in obj;
  }
  /**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key)`, where `value`
 * is the value of an object property or an array element and `key` is the object property key or
 * array element index. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */
  function forEach(obj, iterator, context) {
    var key;
    if (obj) {
      if (isFunction(obj)) {
        for (key in obj) {
          // Need to check if hasOwnProperty exists,
          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key);
          }
        }
      } else if (isArray(obj) || isArrayLike(obj)) {
        for (key = 0; key < obj.length; key++) {
          iterator.call(context, obj[key], key);
        }
      } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context);
      } else {
        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            iterator.call(context, obj[key], key);
          }
        }
      }
    }
    return obj;
  }
  function sortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        keys.push(key);
      }
    }
    return keys.sort();
  }
  function forEachSorted(obj, iterator, context) {
    var keys = sortedKeys(obj);
    for (var i = 0; i < keys.length; i++) {
      iterator.call(context, obj[keys[i]], keys[i]);
    }
    return keys;
  }
  /**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
  function reverseParams(iteratorFn) {
    return function (value, key) {
      iteratorFn(key, value);
    };
  }
  /**
 * A consistent way of creating unique IDs in angular. The ID is a sequence of alpha numeric
 * characters such as '012ABC'. The reason why we are not using simply a number counter is that
 * the number string gets longer over time, and it can also overflow, where as the nextId
 * will grow much slower, it is a string, and it will never overflow.
 *
 * @returns {string} an unique alpha-numeric string
 */
  function nextUid() {
    var index = uid.length;
    var digit;
    while (index) {
      index--;
      digit = uid[index].charCodeAt(0);
      if (digit == 57) {
        uid[index] = 'A';
        return uid.join('');
      }
      if (digit == 90) {
        uid[index] = '0';
      } else {
        uid[index] = String.fromCharCode(digit + 1);
        return uid.join('');
      }
    }
    uid.unshift('0');
    return uid.join('');
  }
  /**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
  function setHashKey(obj, h) {
    if (h) {
      obj.$$hashKey = h;
    } else {
      delete obj.$$hashKey;
    }
  }
  /**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects.
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
  function extend(dst) {
    var h = dst.$$hashKey;
    forEach(arguments, function (obj) {
      if (obj !== dst) {
        forEach(obj, function (value, key) {
          dst[key] = value;
        });
      }
    });
    setHashKey(dst, h);
    return dst;
  }
  function int(str) {
    return parseInt(str, 10);
  }
  function inherit(parent, extra) {
    return extend(new (extend(function () {
    }, { prototype: parent }))(), extra);
  }
  /**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
  function noop() {
  }
  noop.$inject = [];
  /**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
 */
  function identity($) {
    return $;
  }
  identity.$inject = [];
  function valueFn(value) {
    return function () {
      return value;
    };
  }
  /**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
  function isUndefined(value) {
    return typeof value === 'undefined';
  }
  /**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
  function isDefined(value) {
    return typeof value !== 'undefined';
  }
  /**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
  function isObject(value) {
    return value != null && typeof value === 'object';
  }
  /**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
  function isString(value) {
    return typeof value === 'string';
  }
  /**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
  function isNumber(value) {
    return typeof value === 'number';
  }
  /**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
  function isDate(value) {
    return toString.call(value) === '[object Date]';
  }
  /**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
  var isArray = function () {
      if (!isFunction(Array.isArray)) {
        return function (value) {
          return toString.call(value) === '[object Array]';
        };
      }
      return Array.isArray;
    }();
  /**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
  function isFunction(value) {
    return typeof value === 'function';
  }
  /**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
  function isRegExp(value) {
    return toString.call(value) === '[object RegExp]';
  }
  /**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
  function isWindow(obj) {
    return obj && obj.document && obj.location && obj.alert && obj.setInterval;
  }
  function isScope(obj) {
    return obj && obj.$evalAsync && obj.$watch;
  }
  function isFile(obj) {
    return toString.call(obj) === '[object File]';
  }
  function isBlob(obj) {
    return toString.call(obj) === '[object Blob]';
  }
  function isBoolean(value) {
    return typeof value === 'boolean';
  }
  function isPromiseLike(obj) {
    return obj && isFunction(obj.then);
  }
  var trim = function () {
      // native trim is way faster: http://jsperf.com/angular-trim-test
      // but IE doesn't have it... :-(
      // TODO: we should move this into IE/ES5 polyfill
      if (!String.prototype.trim) {
        return function (value) {
          return isString(value) ? value.replace(/^\s\s*/, '').replace(/\s\s*$/, '') : value;
        };
      }
      return function (value) {
        return isString(value) ? value.trim() : value;
      };
    }();
  /**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
  function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));  // we have an on and find method part of jQuery API
  }
  /**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++)
      obj[items[i]] = true;
    return obj;
  }
  if (msie < 9) {
    nodeName_ = function (element) {
      element = element.nodeName ? element : element[0];
      return element.scopeName && element.scopeName != 'HTML' ? uppercase(element.scopeName + ':' + element.nodeName) : element.nodeName;
    };
  } else {
    nodeName_ = function (element) {
      return element.nodeName ? element.nodeName : element[0].nodeName;
    };
  }
  function map(obj, iterator, context) {
    var results = [];
    forEach(obj, function (value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  }
  /**
 * @description
 * Determines the number of elements in an array, the number of properties an object has, or
 * the length of a string.
 *
 * Note: This function is used to augment the Object type in Angular expressions. See
 * {@link angular.Object} for more information about Angular arrays.
 *
 * @param {Object|Array|string} obj Object, array, or string to inspect.
 * @param {boolean} [ownPropsOnly=false] Count only "own" properties in an object
 * @returns {number} The size of `obj` or `0` if `obj` is neither an object nor an array.
 */
  function size(obj, ownPropsOnly) {
    var count = 0, key;
    if (isArray(obj) || isString(obj)) {
      return obj.length;
    } else if (isObject(obj)) {
      for (key in obj)
        if (!ownPropsOnly || obj.hasOwnProperty(key))
          count++;
    }
    return count;
  }
  function includes(array, obj) {
    return indexOf(array, obj) != -1;
  }
  function indexOf(array, obj) {
    if (array.indexOf)
      return array.indexOf(obj);
    for (var i = 0; i < array.length; i++) {
      if (obj === array[i])
        return i;
    }
    return -1;
  }
  function arrayRemove(array, value) {
    var index = indexOf(array, value);
    if (index >= 0)
      array.splice(index, 1);
    return value;
  }
  function isLeafNode(node) {
    if (node) {
      switch (node.nodeName) {
      case 'OPTION':
      case 'PRE':
      case 'TITLE':
        return true;
      }
    }
    return false;
  }
  /**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for array) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
  function copy(source, destination, stackSource, stackDest) {
    if (isWindow(source) || isScope(source)) {
      throw ngMinErr('cpws', 'Can\'t copy! Making copies of Window or Scope instances is not supported.');
    }
    if (!destination) {
      destination = source;
      if (source) {
        if (isArray(source)) {
          destination = copy(source, [], stackSource, stackDest);
        } else if (isDate(source)) {
          destination = new Date(source.getTime());
        } else if (isRegExp(source)) {
          destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
          destination.lastIndex = source.lastIndex;
        } else if (isObject(source)) {
          destination = copy(source, {}, stackSource, stackDest);
        }
      }
    } else {
      if (source === destination)
        throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
      stackSource = stackSource || [];
      stackDest = stackDest || [];
      if (isObject(source)) {
        var index = indexOf(stackSource, source);
        if (index !== -1)
          return stackDest[index];
        stackSource.push(source);
        stackDest.push(destination);
      }
      var result;
      if (isArray(source)) {
        destination.length = 0;
        for (var i = 0; i < source.length; i++) {
          result = copy(source[i], null, stackSource, stackDest);
          if (isObject(source[i])) {
            stackSource.push(source[i]);
            stackDest.push(result);
          }
          destination.push(result);
        }
      } else {
        var h = destination.$$hashKey;
        if (isArray(destination)) {
          destination.length = 0;
        } else {
          forEach(destination, function (value, key) {
            delete destination[key];
          });
        }
        for (var key in source) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
        setHashKey(destination, h);
      }
    }
    return destination;
  }
  /**
 * Creates a shallow copy of an object, an array or a primitive
 */
  function shallowCopy(src, dst) {
    if (isArray(src)) {
      dst = dst || [];
      for (var i = 0; i < src.length; i++) {
        dst[i] = src[i];
      }
    } else if (isObject(src)) {
      dst = dst || {};
      for (var key in src) {
        if (hasOwnProperty.call(src, key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
          dst[key] = src[key];
        }
      }
    }
    return dst || src;
  }
  /**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
  function equals(o1, o2) {
    if (o1 === o2)
      return true;
    if (o1 === null || o2 === null)
      return false;
    if (o1 !== o1 && o2 !== o2)
      return true;
    // NaN === NaN
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
    if (t1 == t2) {
      if (t1 == 'object') {
        if (isArray(o1)) {
          if (!isArray(o2))
            return false;
          if ((length = o1.length) == o2.length) {
            for (key = 0; key < length; key++) {
              if (!equals(o1[key], o2[key]))
                return false;
            }
            return true;
          }
        } else if (isDate(o1)) {
          if (!isDate(o2))
            return false;
          return isNaN(o1.getTime()) && isNaN(o2.getTime()) || o1.getTime() === o2.getTime();
        } else if (isRegExp(o1) && isRegExp(o2)) {
          return o1.toString() == o2.toString();
        } else {
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) || isArray(o2))
            return false;
          keySet = {};
          for (key in o1) {
            if (key.charAt(0) === '$' || isFunction(o1[key]))
              continue;
            if (!equals(o1[key], o2[key]))
              return false;
            keySet[key] = true;
          }
          for (key in o2) {
            if (!keySet.hasOwnProperty(key) && key.charAt(0) !== '$' && o2[key] !== undefined && !isFunction(o2[key]))
              return false;
          }
          return true;
        }
      }
    }
    return false;
  }
  var csp = function () {
    if (isDefined(csp.isActive_))
      return csp.isActive_;
    var active = !!(document.querySelector('[ng-csp]') || document.querySelector('[data-ng-csp]'));
    if (!active) {
      try {
        /* jshint -W031, -W054 */
        new Function('');  /* jshint +W031, +W054 */
      } catch (e) {
        active = true;
      }
    }
    return csp.isActive_ = active;
  };
  function concat(array1, array2, index) {
    return array1.concat(slice.call(array2, index));
  }
  function sliceArgs(args, startIndex) {
    return slice.call(args, startIndex || 0);
  }
  /* jshint -W101 */
  /**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
  /* jshint +W101 */
  function bind(self, fn) {
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
    if (isFunction(fn) && !(fn instanceof RegExp)) {
      return curryArgs.length ? function () {
        return arguments.length ? fn.apply(self, curryArgs.concat(slice.call(arguments, 0))) : fn.apply(self, curryArgs);
      } : function () {
        return arguments.length ? fn.apply(self, arguments) : fn.call(self);
      };
    } else {
      // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
      return fn;
    }
  }
  function toJsonReplacer(key, value) {
    var val = value;
    if (typeof key === 'string' && key.charAt(0) === '$') {
      val = undefined;
    } else if (isWindow(value)) {
      val = '$WINDOW';
    } else if (value && document === value) {
      val = '$DOCUMENT';
    } else if (isScope(value)) {
      val = '$SCOPE';
    }
    return val;
  }
  /**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean=} pretty If set to true, the JSON output will contain newlines and whitespace.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
  function toJson(obj, pretty) {
    if (typeof obj === 'undefined')
      return undefined;
    return JSON.stringify(obj, toJsonReplacer, pretty ? '  ' : null);
  }
  /**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized thingy.
 */
  function fromJson(json) {
    return isString(json) ? JSON.parse(json) : json;
  }
  function toBoolean(value) {
    if (typeof value === 'function') {
      value = true;
    } else if (value && value.length !== 0) {
      var v = lowercase('' + value);
      value = !(v == 'f' || v == '0' || v == 'false' || v == 'no' || v == 'n' || v == '[]');
    } else {
      value = false;
    }
    return value;
  }
  /**
 * @returns {string} Returns the string representation of the element.
 */
  function startingTag(element) {
    element = jqLite(element).clone();
    try {
      // turns out IE does not let you set .html() on elements which
      // are not allowed to have children. So we just ignore it.
      element.empty();
    } catch (e) {
    }
    // As Per DOM Standards
    var TEXT_NODE = 3;
    var elemHtml = jqLite('<div>').append(element).html();
    try {
      return element[0].nodeType === TEXT_NODE ? lowercase(elemHtml) : elemHtml.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/, function (match, nodeName) {
        return '<' + lowercase(nodeName);
      });
    } catch (e) {
      return lowercase(elemHtml);
    }
  }
  /////////////////////////////////////////////////
  /**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
  function tryDecodeURIComponent(value) {
    try {
      return decodeURIComponent(value);
    } catch (e) {
    }
  }
  /**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
  function parseKeyValue(keyValue) {
    var obj = {}, key_value, key;
    forEach((keyValue || '').split('&'), function (keyValue) {
      if (keyValue) {
        key_value = keyValue.replace(/\+/g, '%20').split('=');
        key = tryDecodeURIComponent(key_value[0]);
        if (isDefined(key)) {
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
          if (!hasOwnProperty.call(obj, key)) {
            obj[key] = val;
          } else if (isArray(obj[key])) {
            obj[key].push(val);
          } else {
            obj[key] = [
              obj[key],
              val
            ];
          }
        }
      }
    });
    return obj;
  }
  function toKeyValue(obj) {
    var parts = [];
    forEach(obj, function (value, key) {
      if (isArray(value)) {
        forEach(value, function (arrayValue) {
          parts.push(encodeUriQuery(key, true) + (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
        });
      } else {
        parts.push(encodeUriQuery(key, true) + (value === true ? '' : '=' + encodeUriQuery(value, true)));
      }
    });
    return parts.length ? parts.join('&') : '';
  }
  /**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
  function encodeUriSegment(val) {
    return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
  }
  /**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
  function encodeUriQuery(val, pctEncodeSpaces) {
    return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
  }
  /**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped and
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common, way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 */
  function angularInit(element, bootstrap) {
    var elements = [element], appElement, module, names = [
        'ng:app',
        'ng-app',
        'x-ng-app',
        'data-ng-app'
      ], NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;
    function append(element) {
      element && elements.push(element);
    }
    forEach(names, function (name) {
      names[name] = true;
      append(document.getElementById(name));
      name = name.replace(':', '\\:');
      if (element.querySelectorAll) {
        forEach(element.querySelectorAll('.' + name), append);
        forEach(element.querySelectorAll('.' + name + '\\:'), append);
        forEach(element.querySelectorAll('[' + name + ']'), append);
      }
    });
    forEach(elements, function (element) {
      if (!appElement) {
        var className = ' ' + element.className + ' ';
        var match = NG_APP_CLASS_REGEXP.exec(className);
        if (match) {
          appElement = element;
          module = (match[2] || '').replace(/\s+/g, ',');
        } else {
          forEach(element.attributes, function (attr) {
            if (!appElement && names[attr.name]) {
              appElement = element;
              module = attr.value;
            }
          });
        }
      }
    });
    if (appElement) {
      bootstrap(appElement, module ? [module] : []);
    }
  }
  /**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that ngScenario-based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * <example name="multi-bootstrap" module="multi-bootstrap">
 * <file name="index.html">
 * <script src="../../../angular.js"></script>
 * <div ng-controller="BrokenTable">
 *   <table>
 *   <tr>
 *     <th ng-repeat="heading in headings">{{heading}}</th>
 *   </tr>
 *   <tr ng-repeat="filling in fillings">
 *     <td ng-repeat="fill in filling">{{fill}}</td>
 *   </tr>
 * </table>
 * </div>
 * </file>
 * <file name="controller.js">
 * var app = angular.module('multi-bootstrap', [])
 *
 * .controller('BrokenTable', function($scope) {
 *     $scope.headings = ['One', 'Two', 'Three'];
 *     $scope.fillings = [[1, 2, 3], ['A', 'B', 'C'], [7, 8, 9]];
 * });
 * </file>
 * <file name="protractor.js" type="protractor">
 * it('should only insert one table cell for each item in $scope.fillings', function() {
 *  expect(element.all(by.css('td')).count())
 *      .toBe(9);
 * });
 * </file>
 * </example>
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a run block.
 *     See: {@link angular.module modules}
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
  function bootstrap(element, modules) {
    var doBootstrap = function () {
      element = jqLite(element);
      if (element.injector()) {
        var tag = element[0] === document ? 'document' : startingTag(element);
        //Encode angle brackets to prevent input from being sanitized to empty string #8683
        throw ngMinErr('btstrpd', 'App Already Bootstrapped with this Element \'{0}\'', tag.replace(/</, '&lt;').replace(/>/, '&gt;'));
      }
      modules = modules || [];
      modules.unshift([
        '$provide',
        function ($provide) {
          $provide.value('$rootElement', element);
        }
      ]);
      modules.unshift('ng');
      var injector = createInjector(modules);
      injector.invoke([
        '$rootScope',
        '$rootElement',
        '$compile',
        '$injector',
        '$animate',
        function (scope, element, compile, injector, animate) {
          scope.$apply(function () {
            element.data('$injector', injector);
            compile(element)(scope);
          });
        }
      ]);
      return injector;
    };
    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
      return doBootstrap();
    }
    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
    angular.resumeBootstrap = function (extraModules) {
      forEach(extraModules, function (module) {
        modules.push(module);
      });
      doBootstrap();
    };
  }
  var SNAKE_CASE_REGEXP = /[A-Z]/g;
  function snake_case(name, separator) {
    separator = separator || '_';
    return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }
  function bindJQuery() {
    // bind to jQuery if present;
    jQuery = window.jQuery;
    // Use jQuery if it exists with proper functionality, otherwise default to us.
    // Angular 1.2+ requires jQuery 1.7.1+ for on()/off() support.
    if (jQuery && jQuery.fn.on) {
      jqLite = jQuery;
      extend(jQuery.fn, {
        scope: JQLitePrototype.scope,
        isolateScope: JQLitePrototype.isolateScope,
        controller: JQLitePrototype.controller,
        injector: JQLitePrototype.injector,
        inheritedData: JQLitePrototype.inheritedData
      });
      // Method signature:
      //     jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments)
      jqLitePatchJQueryRemove('remove', true, true, false);
      jqLitePatchJQueryRemove('empty', false, false, false);
      jqLitePatchJQueryRemove('html', false, false, true);
    } else {
      jqLite = JQLite;
    }
    angular.element = jqLite;
  }
  /**
 * throw error if the argument is falsy.
 */
  function assertArg(arg, name, reason) {
    if (!arg) {
      throw ngMinErr('areq', 'Argument \'{0}\' is {1}', name || '?', reason || 'required');
    }
    return arg;
  }
  function assertArgFn(arg, name, acceptArrayAnnotation) {
    if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
    }
    assertArg(isFunction(arg), name, 'not a function, got ' + (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
    return arg;
  }
  /**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
  function assertNotHasOwnProperty(name, context) {
    if (name === 'hasOwnProperty') {
      throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
    }
  }
  /**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
  //TODO(misko): this function needs to be removed
  function getter(obj, path, bindFnToScope) {
    if (!path)
      return obj;
    var keys = path.split('.');
    var key;
    var lastInstance = obj;
    var len = keys.length;
    for (var i = 0; i < len; i++) {
      key = keys[i];
      if (obj) {
        obj = (lastInstance = obj)[key];
      }
    }
    if (!bindFnToScope && isFunction(obj)) {
      return bind(lastInstance, obj);
    }
    return obj;
  }
  /**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {DOMElement} object containing the elements
 */
  function getBlockElements(nodes) {
    var startNode = nodes[0], endNode = nodes[nodes.length - 1];
    if (startNode === endNode) {
      return jqLite(startNode);
    }
    var element = startNode;
    var elements = [element];
    do {
      element = element.nextSibling;
      if (!element)
        break;
      elements.push(element);
    } while (element !== endNode);
    return jqLite(elements);
  }
  /**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */
  function setupModuleLoader(window) {
    var $injectorMinErr = minErr('$injector');
    var ngMinErr = minErr('ng');
    function ensure(obj, name, factory) {
      return obj[name] || (obj[name] = factory());
    }
    var angular = ensure(window, 'angular', Object);
    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
    angular.$$minErr = angular.$$minErr || minErr;
    return ensure(angular, 'module', function () {
      /** @type {Object.<string, angular.Module>} */
      var modules = {};
      /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
      return function module(name, requires, configFn) {
        var assertNotHasOwnProperty = function (name, context) {
          if (name === 'hasOwnProperty') {
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
          }
        };
        assertNotHasOwnProperty(name, 'module');
        if (requires && modules.hasOwnProperty(name)) {
          modules[name] = null;
        }
        return ensure(modules, name, function () {
          if (!requires) {
            throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' + 'the module name or forgot to load it. If registering a module ensure that you ' + 'specify the dependencies as the second argument.', name);
          }
          /** @type {!Array.<Array.<*>>} */
          var invokeQueue = [];
          /** @type {!Array.<Function>} */
          var runBlocks = [];
          var config = invokeLater('$injector', 'invoke');
          /** @type {angular.Module} */
          var moduleInstance = {
              _invokeQueue: invokeQueue,
              _runBlocks: runBlocks,
              requires: requires,
              name: name,
              provider: invokeLater('$provide', 'provider'),
              factory: invokeLater('$provide', 'factory'),
              service: invokeLater('$provide', 'service'),
              value: invokeLater('$provide', 'value'),
              constant: invokeLater('$provide', 'constant', 'unshift'),
              animation: invokeLater('$animateProvider', 'register'),
              filter: invokeLater('$filterProvider', 'register'),
              controller: invokeLater('$controllerProvider', 'register'),
              directive: invokeLater('$compileProvider', 'directive'),
              config: config,
              run: function (block) {
                runBlocks.push(block);
                return this;
              }
            };
          if (configFn) {
            config(configFn);
          }
          return moduleInstance;
          /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
          function invokeLater(provider, method, insertMethod) {
            return function () {
              invokeQueue[insertMethod || 'push']([
                provider,
                method,
                arguments
              ]);
              return moduleInstance;
            };
          }
        });
      };
    });
  }
  /* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

    htmlAnchorDirective,
    inputDirective,
    inputDirective,
    formDirective,
    scriptDirective,
    selectDirective,
    styleDirective,
    optionDirective,
    ngBindDirective,
    ngBindHtmlDirective,
    ngBindTemplateDirective,
    ngClassDirective,
    ngClassEvenDirective,
    ngClassOddDirective,
    ngCspDirective,
    ngCloakDirective,
    ngControllerDirective,
    ngFormDirective,
    ngHideDirective,
    ngIfDirective,
    ngIncludeDirective,
    ngIncludeFillContentDirective,
    ngInitDirective,
    ngNonBindableDirective,
    ngPluralizeDirective,
    ngRepeatDirective,
    ngShowDirective,
    ngStyleDirective,
    ngSwitchDirective,
    ngSwitchWhenDirective,
    ngSwitchDefaultDirective,
    ngOptionsDirective,
    ngTranscludeDirective,
    ngModelDirective,
    ngListDirective,
    ngChangeDirective,
    requiredDirective,
    requiredDirective,
    ngValueDirective,
    ngAttributeAliasDirectives,
    ngEventDirectives,

    $AnchorScrollProvider,
    $AnimateProvider,
    $BrowserProvider,
    $CacheFactoryProvider,
    $ControllerProvider,
    $DocumentProvider,
    $ExceptionHandlerProvider,
    $FilterProvider,
    $InterpolateProvider,
    $IntervalProvider,
    $HttpProvider,
    $HttpBackendProvider,
    $LocationProvider,
    $LogProvider,
    $ParseProvider,
    $RootScopeProvider,
    $QProvider,
    $$SanitizeUriProvider,
    $SceProvider,
    $SceDelegateProvider,
    $SnifferProvider,
    $TemplateCacheProvider,
    $TimeoutProvider,
    $$RAFProvider,
    $$AsyncCallbackProvider,
    $WindowProvider
*/
  /**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
  var version = {
      full: '1.2.26',
      major: 1,
      minor: 2,
      dot: 26,
      codeName: 'captivating-disinterest'
    };
  function publishExternalAPI(angular) {
    extend(angular, {
      'bootstrap': bootstrap,
      'copy': copy,
      'extend': extend,
      'equals': equals,
      'element': jqLite,
      'forEach': forEach,
      'injector': createInjector,
      'noop': noop,
      'bind': bind,
      'toJson': toJson,
      'fromJson': fromJson,
      'identity': identity,
      'isUndefined': isUndefined,
      'isDefined': isDefined,
      'isString': isString,
      'isFunction': isFunction,
      'isObject': isObject,
      'isNumber': isNumber,
      'isElement': isElement,
      'isArray': isArray,
      'version': version,
      'isDate': isDate,
      'lowercase': lowercase,
      'uppercase': uppercase,
      'callbacks': { counter: 0 },
      '$$minErr': minErr,
      '$$csp': csp
    });
    angularModule = setupModuleLoader(window);
    try {
      angularModule('ngLocale');
    } catch (e) {
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
    }
    angularModule('ng', ['ngLocale'], [
      '$provide',
      function ngModule($provide) {
        // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
        $provide.provider({ $$sanitizeUri: $$SanitizeUriProvider });
        $provide.provider('$compile', $CompileProvider).directive({
          a: htmlAnchorDirective,
          input: inputDirective,
          textarea: inputDirective,
          form: formDirective,
          script: scriptDirective,
          select: selectDirective,
          style: styleDirective,
          option: optionDirective,
          ngBind: ngBindDirective,
          ngBindHtml: ngBindHtmlDirective,
          ngBindTemplate: ngBindTemplateDirective,
          ngClass: ngClassDirective,
          ngClassEven: ngClassEvenDirective,
          ngClassOdd: ngClassOddDirective,
          ngCloak: ngCloakDirective,
          ngController: ngControllerDirective,
          ngForm: ngFormDirective,
          ngHide: ngHideDirective,
          ngIf: ngIfDirective,
          ngInclude: ngIncludeDirective,
          ngInit: ngInitDirective,
          ngNonBindable: ngNonBindableDirective,
          ngPluralize: ngPluralizeDirective,
          ngRepeat: ngRepeatDirective,
          ngShow: ngShowDirective,
          ngStyle: ngStyleDirective,
          ngSwitch: ngSwitchDirective,
          ngSwitchWhen: ngSwitchWhenDirective,
          ngSwitchDefault: ngSwitchDefaultDirective,
          ngOptions: ngOptionsDirective,
          ngTransclude: ngTranscludeDirective,
          ngModel: ngModelDirective,
          ngList: ngListDirective,
          ngChange: ngChangeDirective,
          required: requiredDirective,
          ngRequired: requiredDirective,
          ngValue: ngValueDirective
        }).directive({ ngInclude: ngIncludeFillContentDirective }).directive(ngAttributeAliasDirectives).directive(ngEventDirectives);
        $provide.provider({
          $anchorScroll: $AnchorScrollProvider,
          $animate: $AnimateProvider,
          $browser: $BrowserProvider,
          $cacheFactory: $CacheFactoryProvider,
          $controller: $ControllerProvider,
          $document: $DocumentProvider,
          $exceptionHandler: $ExceptionHandlerProvider,
          $filter: $FilterProvider,
          $interpolate: $InterpolateProvider,
          $interval: $IntervalProvider,
          $http: $HttpProvider,
          $httpBackend: $HttpBackendProvider,
          $location: $LocationProvider,
          $log: $LogProvider,
          $parse: $ParseProvider,
          $rootScope: $RootScopeProvider,
          $q: $QProvider,
          $sce: $SceProvider,
          $sceDelegate: $SceDelegateProvider,
          $sniffer: $SnifferProvider,
          $templateCache: $TemplateCacheProvider,
          $timeout: $TimeoutProvider,
          $window: $WindowProvider,
          $$rAF: $$RAFProvider,
          $$asyncCallback: $$AsyncCallbackProvider
        });
      }
    ]);
  }
  /* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true
*/
  //////////////////////////////////
  //JQLite
  //////////////////////////////////
  /**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use jQuery, simply load it before `DOMContentLoaded` event fired.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/)
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/)
 * - [`data()`](http://api.jquery.com/data/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */
  JQLite.expando = 'ng339';
  var jqCache = JQLite.cache = {}, jqId = 1, addEventListenerFn = window.document.addEventListener ? function (element, type, fn) {
      element.addEventListener(type, fn, false);
    } : function (element, type, fn) {
      element.attachEvent('on' + type, fn);
    }, removeEventListenerFn = window.document.removeEventListener ? function (element, type, fn) {
      element.removeEventListener(type, fn, false);
    } : function (element, type, fn) {
      element.detachEvent('on' + type, fn);
    };
  /*
 * !!! This is an undocumented "private" function !!!
 */
  var jqData = JQLite._data = function (node) {
      //jQuery always returns an object on cache miss
      return this.cache[node[this.expando]] || {};
    };
  function jqNextId() {
    return ++jqId;
  }
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var jqLiteMinErr = minErr('jqLite');
  /**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
  function camelCase(name) {
    return name.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).replace(MOZ_HACK_REGEXP, 'Moz$1');
  }
  /////////////////////////////////////////////
  // jQuery mutation patch
  //
  // In conjunction with bindJQuery intercepts all jQuery's DOM destruction apis and fires a
  // $destroy event on all DOM nodes being removed.
  //
  /////////////////////////////////////////////
  function jqLitePatchJQueryRemove(name, dispatchThis, filterElems, getterIfNoArguments) {
    var originalJqFn = jQuery.fn[name];
    originalJqFn = originalJqFn.$original || originalJqFn;
    removePatch.$original = originalJqFn;
    jQuery.fn[name] = removePatch;
    function removePatch(param) {
      // jshint -W040
      var list = filterElems && param ? [this.filter(param)] : [this], fireEvent = dispatchThis, set, setIndex, setLength, element, childIndex, childLength, children;
      if (!getterIfNoArguments || param != null) {
        while (list.length) {
          set = list.shift();
          for (setIndex = 0, setLength = set.length; setIndex < setLength; setIndex++) {
            element = jqLite(set[setIndex]);
            if (fireEvent) {
              element.triggerHandler('$destroy');
            } else {
              fireEvent = !fireEvent;
            }
            for (childIndex = 0, childLength = (children = element.children()).length; childIndex < childLength; childIndex++) {
              list.push(jQuery(children[childIndex]));
            }
          }
        }
      }
      return originalJqFn.apply(this, arguments);
    }
  }
  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
  var HTML_REGEXP = /<|&#?\w+;/;
  var TAG_NAME_REGEXP = /<([\w:]+)/;
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;
  var wrapMap = {
      'option': [
        1,
        '<select multiple="multiple">',
        '</select>'
      ],
      'thead': [
        1,
        '<table>',
        '</table>'
      ],
      'col': [
        2,
        '<table><colgroup>',
        '</colgroup></table>'
      ],
      'tr': [
        2,
        '<table><tbody>',
        '</tbody></table>'
      ],
      'td': [
        3,
        '<table><tbody><tr>',
        '</tr></tbody></table>'
      ],
      '_default': [
        0,
        '',
        ''
      ]
    };
  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;
  function jqLiteIsTextNode(html) {
    return !HTML_REGEXP.test(html);
  }
  function jqLiteBuildFragment(html, context) {
    var elem, tmp, tag, wrap, fragment = context.createDocumentFragment(), nodes = [], i, j, jj;
    if (jqLiteIsTextNode(html)) {
      // Convert non-html into a text node
      nodes.push(context.createTextNode(html));
    } else {
      tmp = fragment.appendChild(context.createElement('div'));
      // Convert html into DOM nodes
      tag = (TAG_NAME_REGEXP.exec(html) || [
        '',
        ''
      ])[1].toLowerCase();
      wrap = wrapMap[tag] || wrapMap._default;
      tmp.innerHTML = '<div>&#160;</div>' + wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];
      tmp.removeChild(tmp.firstChild);
      // Descend through wrappers to the right content
      i = wrap[0];
      while (i--) {
        tmp = tmp.lastChild;
      }
      for (j = 0, jj = tmp.childNodes.length; j < jj; ++j)
        nodes.push(tmp.childNodes[j]);
      tmp = fragment.firstChild;
      tmp.textContent = '';
    }
    // Remove wrapper from fragment
    fragment.textContent = '';
    fragment.innerHTML = '';
    // Clear inner HTML
    return nodes;
  }
  function jqLiteParseHTML(html, context) {
    context = context || document;
    var parsed;
    if (parsed = SINGLE_TAG_REGEXP.exec(html)) {
      return [context.createElement(parsed[1])];
    }
    return jqLiteBuildFragment(html, context);
  }
  /////////////////////////////////////////////
  function JQLite(element) {
    if (element instanceof JQLite) {
      return element;
    }
    if (isString(element)) {
      element = trim(element);
    }
    if (!(this instanceof JQLite)) {
      if (isString(element) && element.charAt(0) != '<') {
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }
      return new JQLite(element);
    }
    if (isString(element)) {
      jqLiteAddNodes(this, jqLiteParseHTML(element));
      var fragment = jqLite(document.createDocumentFragment());
      fragment.append(this);
    } else {
      jqLiteAddNodes(this, element);
    }
  }
  function jqLiteClone(element) {
    return element.cloneNode(true);
  }
  function jqLiteDealoc(element) {
    jqLiteRemoveData(element);
    for (var i = 0, children = element.childNodes || []; i < children.length; i++) {
      jqLiteDealoc(children[i]);
    }
  }
  function jqLiteOff(element, type, fn, unsupported) {
    if (isDefined(unsupported))
      throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
    var events = jqLiteExpandoStore(element, 'events'), handle = jqLiteExpandoStore(element, 'handle');
    if (!handle)
      return;
    //no listeners registered
    if (isUndefined(type)) {
      forEach(events, function (eventHandler, type) {
        removeEventListenerFn(element, type, eventHandler);
        delete events[type];
      });
    } else {
      forEach(type.split(' '), function (type) {
        if (isUndefined(fn)) {
          removeEventListenerFn(element, type, events[type]);
          delete events[type];
        } else {
          arrayRemove(events[type] || [], fn);
        }
      });
    }
  }
  function jqLiteRemoveData(element, name) {
    var expandoId = element.ng339, expandoStore = jqCache[expandoId];
    if (expandoStore) {
      if (name) {
        delete jqCache[expandoId].data[name];
        return;
      }
      if (expandoStore.handle) {
        expandoStore.events.$destroy && expandoStore.handle({}, '$destroy');
        jqLiteOff(element);
      }
      delete jqCache[expandoId];
      element.ng339 = undefined;  // don't delete DOM expandos. IE and Chrome don't like it
    }
  }
  function jqLiteExpandoStore(element, key, value) {
    var expandoId = element.ng339, expandoStore = jqCache[expandoId || -1];
    if (isDefined(value)) {
      if (!expandoStore) {
        element.ng339 = expandoId = jqNextId();
        expandoStore = jqCache[expandoId] = {};
      }
      expandoStore[key] = value;
    } else {
      return expandoStore && expandoStore[key];
    }
  }
  function jqLiteData(element, key, value) {
    var data = jqLiteExpandoStore(element, 'data'), isSetter = isDefined(value), keyDefined = !isSetter && isDefined(key), isSimpleGetter = keyDefined && !isObject(key);
    if (!data && !isSimpleGetter) {
      jqLiteExpandoStore(element, 'data', data = {});
    }
    if (isSetter) {
      data[key] = value;
    } else {
      if (keyDefined) {
        if (isSimpleGetter) {
          // don't create data in this case.
          return data && data[key];
        } else {
          extend(data, key);
        }
      } else {
        return data;
      }
    }
  }
  function jqLiteHasClass(element, selector) {
    if (!element.getAttribute)
      return false;
    return (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + selector + ' ') > -1;
  }
  function jqLiteRemoveClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      forEach(cssClasses.split(' '), function (cssClass) {
        element.setAttribute('class', trim((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').replace(' ' + trim(cssClass) + ' ', ' ')));
      });
    }
  }
  function jqLiteAddClass(element, cssClasses) {
    if (cssClasses && element.setAttribute) {
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ');
      forEach(cssClasses.split(' '), function (cssClass) {
        cssClass = trim(cssClass);
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
          existingClasses += cssClass + ' ';
        }
      });
      element.setAttribute('class', trim(existingClasses));
    }
  }
  function jqLiteAddNodes(root, elements) {
    if (elements) {
      elements = !elements.nodeName && isDefined(elements.length) && !isWindow(elements) ? elements : [elements];
      for (var i = 0; i < elements.length; i++) {
        root.push(elements[i]);
      }
    }
  }
  function jqLiteController(element, name) {
    return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
  }
  function jqLiteInheritedData(element, name, value) {
    // if element is the document object work with the html element instead
    // this makes $(document).scope() possible
    if (element.nodeType == 9) {
      element = element.documentElement;
    }
    var names = isArray(name) ? name : [name];
    while (element) {
      for (var i = 0, ii = names.length; i < ii; i++) {
        if ((value = jqLite.data(element, names[i])) !== undefined)
          return value;
      }
      // If dealing with a document fragment node with a host element, and no parent, use the host
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
      // to lookup parent controllers.
      element = element.parentNode || element.nodeType === 11 && element.host;
    }
  }
  function jqLiteEmpty(element) {
    for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
      jqLiteDealoc(childNodes[i]);
    }
    while (element.firstChild) {
      element.removeChild(element.firstChild);
    }
  }
  //////////////////////////////////////////
  // Functions which are declared directly.
  //////////////////////////////////////////
  var JQLitePrototype = JQLite.prototype = {
      ready: function (fn) {
        var fired = false;
        function trigger() {
          if (fired)
            return;
          fired = true;
          fn();
        }
        // check if document already is loaded
        if (document.readyState === 'complete') {
          setTimeout(trigger);
        } else {
          this.on('DOMContentLoaded', trigger);
          // works for modern browsers and IE9
          // we can not use jqLite since we are not done loading and jQuery could be loaded later.
          // jshint -W064
          JQLite(window).on('load', trigger);  // fallback to window.onload for others
                                               // jshint +W064
        }
      },
      toString: function () {
        var value = [];
        forEach(this, function (e) {
          value.push('' + e);
        });
        return '[' + value.join(', ') + ']';
      },
      eq: function (index) {
        return index >= 0 ? jqLite(this[index]) : jqLite(this[this.length + index]);
      },
      length: 0,
      push: push,
      sort: [].sort,
      splice: [].splice
    };
  //////////////////////////////////////////
  // Functions iterating getter/setters.
  // these functions return self on setter and
  // value on get.
  //////////////////////////////////////////
  var BOOLEAN_ATTR = {};
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function (value) {
    BOOLEAN_ATTR[lowercase(value)] = value;
  });
  var BOOLEAN_ELEMENTS = {};
  forEach('input,select,option,textarea,button,form,details'.split(','), function (value) {
    BOOLEAN_ELEMENTS[uppercase(value)] = true;
  });
  function getBooleanAttrName(element, name) {
    // check dom last since we will most likely fail on name
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
    // booleanAttr is here twice to minimize DOM access
    return booleanAttr && BOOLEAN_ELEMENTS[element.nodeName] && booleanAttr;
  }
  forEach({
    data: jqLiteData,
    removeData: jqLiteRemoveData
  }, function (fn, name) {
    JQLite[name] = fn;
  });
  forEach({
    data: jqLiteData,
    inheritedData: jqLiteInheritedData,
    scope: function (element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, [
        '$isolateScope',
        '$scope'
      ]);
    },
    isolateScope: function (element) {
      // Can't use jqLiteData here directly so we stay compatible with jQuery!
      return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
    },
    controller: jqLiteController,
    injector: function (element) {
      return jqLiteInheritedData(element, '$injector');
    },
    removeAttr: function (element, name) {
      element.removeAttribute(name);
    },
    hasClass: jqLiteHasClass,
    css: function (element, name, value) {
      name = camelCase(name);
      if (isDefined(value)) {
        element.style[name] = value;
      } else {
        var val;
        if (msie <= 8) {
          // this is some IE specific weirdness that jQuery 1.6.4 does not sure why
          val = element.currentStyle && element.currentStyle[name];
          if (val === '')
            val = 'auto';
        }
        val = val || element.style[name];
        if (msie <= 8) {
          // jquery weirdness :-/
          val = val === '' ? undefined : val;
        }
        return val;
      }
    },
    attr: function (element, name, value) {
      var lowercasedName = lowercase(name);
      if (BOOLEAN_ATTR[lowercasedName]) {
        if (isDefined(value)) {
          if (!!value) {
            element[name] = true;
            element.setAttribute(name, lowercasedName);
          } else {
            element[name] = false;
            element.removeAttribute(lowercasedName);
          }
        } else {
          return element[name] || (element.attributes.getNamedItem(name) || noop).specified ? lowercasedName : undefined;
        }
      } else if (isDefined(value)) {
        element.setAttribute(name, value);
      } else if (element.getAttribute) {
        // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
        // some elements (e.g. Document) don't have get attribute, so return undefined
        var ret = element.getAttribute(name, 2);
        // normalize non-existing attributes to undefined (as jQuery)
        return ret === null ? undefined : ret;
      }
    },
    prop: function (element, name, value) {
      if (isDefined(value)) {
        element[name] = value;
      } else {
        return element[name];
      }
    },
    text: function () {
      var NODE_TYPE_TEXT_PROPERTY = [];
      if (msie < 9) {
        NODE_TYPE_TEXT_PROPERTY[1] = 'innerText';
        /** Element **/
        NODE_TYPE_TEXT_PROPERTY[3] = 'nodeValue';  /** Text **/
      } else {
        NODE_TYPE_TEXT_PROPERTY[1] = NODE_TYPE_TEXT_PROPERTY[3] = 'textContent';  /** Text **/
      }
      getText.$dv = '';
      return getText;
      function getText(element, value) {
        var textProp = NODE_TYPE_TEXT_PROPERTY[element.nodeType];
        if (isUndefined(value)) {
          return textProp ? element[textProp] : '';
        }
        element[textProp] = value;
      }
    }(),
    val: function (element, value) {
      if (isUndefined(value)) {
        if (nodeName_(element) === 'SELECT' && element.multiple) {
          var result = [];
          forEach(element.options, function (option) {
            if (option.selected) {
              result.push(option.value || option.text);
            }
          });
          return result.length === 0 ? null : result;
        }
        return element.value;
      }
      element.value = value;
    },
    html: function (element, value) {
      if (isUndefined(value)) {
        return element.innerHTML;
      }
      for (var i = 0, childNodes = element.childNodes; i < childNodes.length; i++) {
        jqLiteDealoc(childNodes[i]);
      }
      element.innerHTML = value;
    },
    empty: jqLiteEmpty
  }, function (fn, name) {
    /**
   * Properties: writes return selection, reads return first value
   */
    JQLite.prototype[name] = function (arg1, arg2) {
      var i, key;
      var nodeCount = this.length;
      // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
      // in a way that survives minification.
      // jqLiteEmpty takes no arguments but is a setter.
      if (fn !== jqLiteEmpty && (fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController) ? arg1 : arg2) === undefined) {
        if (isObject(arg1)) {
          // we are a write, but the object properties are the key/values
          for (i = 0; i < nodeCount; i++) {
            if (fn === jqLiteData) {
              // data() takes the whole object in jQuery
              fn(this[i], arg1);
            } else {
              for (key in arg1) {
                fn(this[i], key, arg1[key]);
              }
            }
          }
          // return self for chaining
          return this;
        } else {
          // we are a read, so read the first child.
          // TODO: do we still need this?
          var value = fn.$dv;
          // Only if we have $dv do we iterate over all, otherwise it is just the first element.
          var jj = value === undefined ? Math.min(nodeCount, 1) : nodeCount;
          for (var j = 0; j < jj; j++) {
            var nodeValue = fn(this[j], arg1, arg2);
            value = value ? value + nodeValue : nodeValue;
          }
          return value;
        }
      } else {
        // we are a write, so apply to all children
        for (i = 0; i < nodeCount; i++) {
          fn(this[i], arg1, arg2);
        }
        // return self for chaining
        return this;
      }
    };
  });
  function createEventHandler(element, events) {
    var eventHandler = function (event, type) {
      if (!event.preventDefault) {
        event.preventDefault = function () {
          event.returnValue = false;  //ie
        };
      }
      if (!event.stopPropagation) {
        event.stopPropagation = function () {
          event.cancelBubble = true;  //ie
        };
      }
      if (!event.target) {
        event.target = event.srcElement || document;
      }
      if (isUndefined(event.defaultPrevented)) {
        var prevent = event.preventDefault;
        event.preventDefault = function () {
          event.defaultPrevented = true;
          prevent.call(event);
        };
        event.defaultPrevented = false;
      }
      event.isDefaultPrevented = function () {
        return event.defaultPrevented || event.returnValue === false;
      };
      // Copy event handlers in case event handlers array is modified during execution.
      var eventHandlersCopy = shallowCopy(events[type || event.type] || []);
      forEach(eventHandlersCopy, function (fn) {
        fn.call(element, event);
      });
      // Remove monkey-patched methods (IE),
      // as they would cause memory leaks in IE8.
      if (msie <= 8) {
        // IE7/8 does not allow to delete property on native object
        event.preventDefault = null;
        event.stopPropagation = null;
        event.isDefaultPrevented = null;
      } else {
        // It shouldn't affect normal browsers (native methods are defined on prototype).
        delete event.preventDefault;
        delete event.stopPropagation;
        delete event.isDefaultPrevented;
      }
    };
    eventHandler.elem = element;
    return eventHandler;
  }
  //////////////////////////////////////////
  // Functions iterating traversal.
  // These functions chain results into a single
  // selector.
  //////////////////////////////////////////
  forEach({
    removeData: jqLiteRemoveData,
    dealoc: jqLiteDealoc,
    on: function onFn(element, type, fn, unsupported) {
      if (isDefined(unsupported))
        throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
      var events = jqLiteExpandoStore(element, 'events'), handle = jqLiteExpandoStore(element, 'handle');
      if (!events)
        jqLiteExpandoStore(element, 'events', events = {});
      if (!handle)
        jqLiteExpandoStore(element, 'handle', handle = createEventHandler(element, events));
      forEach(type.split(' '), function (type) {
        var eventFns = events[type];
        if (!eventFns) {
          if (type == 'mouseenter' || type == 'mouseleave') {
            var contains = document.body.contains || document.body.compareDocumentPosition ? function (a, b) {
                // jshint bitwise: false
                var adown = a.nodeType === 9 ? a.documentElement : a, bup = b && b.parentNode;
                return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
              } : function (a, b) {
                if (b) {
                  while (b = b.parentNode) {
                    if (b === a) {
                      return true;
                    }
                  }
                }
                return false;
              };
            events[type] = [];
            // Refer to jQuery's implementation of mouseenter & mouseleave
            // Read about mouseenter and mouseleave:
            // http://www.quirksmode.org/js/events_mouse.html#link8
            var eventmap = {
                mouseleave: 'mouseout',
                mouseenter: 'mouseover'
              };
            onFn(element, eventmap[type], function (event) {
              var target = this, related = event.relatedTarget;
              // For mousenter/leave call the handler if related is outside the target.
              // NB: No relatedTarget if the mouse left/entered the browser window
              if (!related || related !== target && !contains(target, related)) {
                handle(event, type);
              }
            });
          } else {
            addEventListenerFn(element, type, handle);
            events[type] = [];
          }
          eventFns = events[type];
        }
        eventFns.push(fn);
      });
    },
    off: jqLiteOff,
    one: function (element, type, fn) {
      element = jqLite(element);
      //add the listener twice so that when it is called
      //you can remove the original function and still be
      //able to call element.off(ev, fn) normally
      element.on(type, function onFn() {
        element.off(type, fn);
        element.off(type, onFn);
      });
      element.on(type, fn);
    },
    replaceWith: function (element, replaceNode) {
      var index, parent = element.parentNode;
      jqLiteDealoc(element);
      forEach(new JQLite(replaceNode), function (node) {
        if (index) {
          parent.insertBefore(node, index.nextSibling);
        } else {
          parent.replaceChild(node, element);
        }
        index = node;
      });
    },
    children: function (element) {
      var children = [];
      forEach(element.childNodes, function (element) {
        if (element.nodeType === 1)
          children.push(element);
      });
      return children;
    },
    contents: function (element) {
      return element.contentDocument || element.childNodes || [];
    },
    append: function (element, node) {
      forEach(new JQLite(node), function (child) {
        if (element.nodeType === 1 || element.nodeType === 11) {
          element.appendChild(child);
        }
      });
    },
    prepend: function (element, node) {
      if (element.nodeType === 1) {
        var index = element.firstChild;
        forEach(new JQLite(node), function (child) {
          element.insertBefore(child, index);
        });
      }
    },
    wrap: function (element, wrapNode) {
      wrapNode = jqLite(wrapNode)[0];
      var parent = element.parentNode;
      if (parent) {
        parent.replaceChild(wrapNode, element);
      }
      wrapNode.appendChild(element);
    },
    remove: function (element) {
      jqLiteDealoc(element);
      var parent = element.parentNode;
      if (parent)
        parent.removeChild(element);
    },
    after: function (element, newElement) {
      var index = element, parent = element.parentNode;
      forEach(new JQLite(newElement), function (node) {
        parent.insertBefore(node, index.nextSibling);
        index = node;
      });
    },
    addClass: jqLiteAddClass,
    removeClass: jqLiteRemoveClass,
    toggleClass: function (element, selector, condition) {
      if (selector) {
        forEach(selector.split(' '), function (className) {
          var classCondition = condition;
          if (isUndefined(classCondition)) {
            classCondition = !jqLiteHasClass(element, className);
          }
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
        });
      }
    },
    parent: function (element) {
      var parent = element.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    next: function (element) {
      if (element.nextElementSibling) {
        return element.nextElementSibling;
      }
      // IE8 doesn't have nextElementSibling
      var elm = element.nextSibling;
      while (elm != null && elm.nodeType !== 1) {
        elm = elm.nextSibling;
      }
      return elm;
    },
    find: function (element, selector) {
      if (element.getElementsByTagName) {
        return element.getElementsByTagName(selector);
      } else {
        return [];
      }
    },
    clone: jqLiteClone,
    triggerHandler: function (element, event, extraParameters) {
      var dummyEvent, eventFnsCopy, handlerArgs;
      var eventName = event.type || event;
      var eventFns = (jqLiteExpandoStore(element, 'events') || {})[eventName];
      if (eventFns) {
        // Create a dummy event to pass to the handlers
        dummyEvent = {
          preventDefault: function () {
            this.defaultPrevented = true;
          },
          isDefaultPrevented: function () {
            return this.defaultPrevented === true;
          },
          stopPropagation: noop,
          type: eventName,
          target: element
        };
        // If a custom event was provided then extend our dummy event with it
        if (event.type) {
          dummyEvent = extend(dummyEvent, event);
        }
        // Copy event handlers in case event handlers array is modified during execution.
        eventFnsCopy = shallowCopy(eventFns);
        handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
        forEach(eventFnsCopy, function (fn) {
          fn.apply(element, handlerArgs);
        });
      }
    }
  }, function (fn, name) {
    /**
   * chaining functions
   */
    JQLite.prototype[name] = function (arg1, arg2, arg3) {
      var value;
      for (var i = 0; i < this.length; i++) {
        if (isUndefined(value)) {
          value = fn(this[i], arg1, arg2, arg3);
          if (isDefined(value)) {
            // any function which returns a value needs to be wrapped
            value = jqLite(value);
          }
        } else {
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
        }
      }
      return isDefined(value) ? value : this;
    };
    // bind legacy bind/unbind to on/off
    JQLite.prototype.bind = JQLite.prototype.on;
    JQLite.prototype.unbind = JQLite.prototype.off;
  });
  /**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
  function hashKey(obj, nextUidFn) {
    var objType = typeof obj, key;
    if (objType == 'function' || objType == 'object' && obj !== null) {
      if (typeof (key = obj.$$hashKey) == 'function') {
        // must invoke on object to keep the right this
        key = obj.$$hashKey();
      } else if (key === undefined) {
        key = obj.$$hashKey = (nextUidFn || nextUid)();
      }
    } else {
      key = obj;
    }
    return objType + ':' + key;
  }
  /**
 * HashMap which can use objects as keys
 */
  function HashMap(array, isolatedUid) {
    if (isolatedUid) {
      var uid = 0;
      this.nextUid = function () {
        return ++uid;
      };
    }
    forEach(array, this.put, this);
  }
  HashMap.prototype = {
    put: function (key, value) {
      this[hashKey(key, this.nextUid)] = value;
    },
    get: function (key) {
      return this[hashKey(key, this.nextUid)];
    },
    remove: function (key) {
      var value = this[key = hashKey(key, this.nextUid)];
      delete this[key];
      return value;
    }
  };
  /**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector function that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *

 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *        {@link angular.module}. The `ng` module must be explicitly added.
 * @returns {function()} Injector function. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document){
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */
  /**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */
  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
  var FN_ARG_SPLIT = /,/;
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm;
  var $injectorMinErr = minErr('$injector');
  function annotate(fn) {
    var $inject, fnText, argDecl, last;
    if (typeof fn === 'function') {
      if (!($inject = fn.$inject)) {
        $inject = [];
        if (fn.length) {
          fnText = fn.toString().replace(STRIP_COMMENTS, '');
          argDecl = fnText.match(FN_ARGS);
          forEach(argDecl[1].split(FN_ARG_SPLIT), function (arg) {
            arg.replace(FN_ARG, function (all, underscore, name) {
              $inject.push(name);
            });
          });
        }
        fn.$inject = $inject;
      }
    } else if (isArray(fn)) {
      last = fn.length - 1;
      assertArgFn(fn[last], 'fn');
      $inject = fn.slice(0, last);
    } else {
      assertArgFn(fn, 'fn', true);
    }
    return $inject;
  }
  ///////////////////////////////////////
  /**
 * @ngdoc service
 * @name $injector
 * @kind function
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector){
 *     return $injector;
 *   }).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. *NOTE:* This does not work with
 * minification, and obfuscation tools since these tools change the argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */
  /**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @return {*} The instance.
 */
  /**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {!Function} fn The function to invoke. Function parameters are injected according to the
 *   {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */
  /**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} Name of the service to query.
 * @returns {boolean} returns true if injector has given service.
 */
  /**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */
  /**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */
  /**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */
  /**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand
 *                            for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function} constructor A class (constructor function) that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */
  /**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {function()} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */
  function createInjector(modulesToLoad) {
    var INSTANTIATING = {}, providerSuffix = 'Provider', path = [], loadedModules = new HashMap([], true), providerCache = {
        $provide: {
          provider: supportObject(provider),
          factory: supportObject(factory),
          service: supportObject(service),
          value: supportObject(value),
          constant: supportObject(constant),
          decorator: decorator
        }
      }, providerInjector = providerCache.$injector = createInternalInjector(providerCache, function () {
        throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
      }), instanceCache = {}, instanceInjector = instanceCache.$injector = createInternalInjector(instanceCache, function (servicename) {
        var provider = providerInjector.get(servicename + providerSuffix);
        return instanceInjector.invoke(provider.$get, provider);
      });
    forEach(loadModules(modulesToLoad), function (fn) {
      instanceInjector.invoke(fn || noop);
    });
    return instanceInjector;
    ////////////////////////////////////
    // $provider
    ////////////////////////////////////
    function supportObject(delegate) {
      return function (key, value) {
        if (isObject(key)) {
          forEach(key, reverseParams(delegate));
        } else {
          return delegate(key, value);
        }
      };
    }
    function provider(name, provider_) {
      assertNotHasOwnProperty(name, 'service');
      if (isFunction(provider_) || isArray(provider_)) {
        provider_ = providerInjector.instantiate(provider_);
      }
      if (!provider_.$get) {
        throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
      }
      return providerCache[name + providerSuffix] = provider_;
    }
    function factory(name, factoryFn) {
      return provider(name, { $get: factoryFn });
    }
    function service(name, constructor) {
      return factory(name, [
        '$injector',
        function ($injector) {
          return $injector.instantiate(constructor);
        }
      ]);
    }
    function value(name, val) {
      return factory(name, valueFn(val));
    }
    function constant(name, value) {
      assertNotHasOwnProperty(name, 'constant');
      providerCache[name] = value;
      instanceCache[name] = value;
    }
    function decorator(serviceName, decorFn) {
      var origProvider = providerInjector.get(serviceName + providerSuffix), orig$get = origProvider.$get;
      origProvider.$get = function () {
        var origInstance = instanceInjector.invoke(orig$get, origProvider);
        return instanceInjector.invoke(decorFn, null, { $delegate: origInstance });
      };
    }
    ////////////////////////////////////
    // Module Loading
    ////////////////////////////////////
    function loadModules(modulesToLoad) {
      var runBlocks = [], moduleFn, invokeQueue, i, ii;
      forEach(modulesToLoad, function (module) {
        if (loadedModules.get(module))
          return;
        loadedModules.put(module, true);
        try {
          if (isString(module)) {
            moduleFn = angularModule(module);
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
            for (invokeQueue = moduleFn._invokeQueue, i = 0, ii = invokeQueue.length; i < ii; i++) {
              var invokeArgs = invokeQueue[i], provider = providerInjector.get(invokeArgs[0]);
              provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
            }
          } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
          } else {
            assertArgFn(module, 'module');
          }
        } catch (e) {
          if (isArray(module)) {
            module = module[module.length - 1];
          }
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
            // Safari & FF's stack traces don't contain error.message content
            // unlike those of Chrome and IE
            // So if stack doesn't contain message, we create a new string that contains both.
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
            /* jshint -W022 */
            e = e.message + '\n' + e.stack;
          }
          throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}', module, e.stack || e.message || e);
        }
      });
      return runBlocks;
    }
    ////////////////////////////////////
    // internal Injector
    ////////////////////////////////////
    function createInternalInjector(cache, factory) {
      function getService(serviceName) {
        if (cache.hasOwnProperty(serviceName)) {
          if (cache[serviceName] === INSTANTIATING) {
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}', serviceName + ' <- ' + path.join(' <- '));
          }
          return cache[serviceName];
        } else {
          try {
            path.unshift(serviceName);
            cache[serviceName] = INSTANTIATING;
            return cache[serviceName] = factory(serviceName);
          } catch (err) {
            if (cache[serviceName] === INSTANTIATING) {
              delete cache[serviceName];
            }
            throw err;
          } finally {
            path.shift();
          }
        }
      }
      function invoke(fn, self, locals) {
        var args = [], $inject = annotate(fn), length, i, key;
        for (i = 0, length = $inject.length; i < length; i++) {
          key = $inject[i];
          if (typeof key !== 'string') {
            throw $injectorMinErr('itkn', 'Incorrect injection token! Expected service name as string, got {0}', key);
          }
          args.push(locals && locals.hasOwnProperty(key) ? locals[key] : getService(key));
        }
        if (isArray(fn)) {
          fn = fn[length];
        }
        // http://jsperf.com/angularjs-invoke-apply-vs-switch
        // #5388
        return fn.apply(self, args);
      }
      function instantiate(Type, locals) {
        var Constructor = function () {
          }, instance, returnedValue;
        // Check if Type is annotated and use just the given function at n-1 as parameter
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
        Constructor.prototype = (isArray(Type) ? Type[Type.length - 1] : Type).prototype;
        instance = new Constructor();
        returnedValue = invoke(Type, instance, locals);
        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
      }
      return {
        invoke: invoke,
        instantiate: instantiate,
        get: getService,
        annotate: annotate,
        has: function (name) {
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
        }
      };
    }
  }
  /**
 * @ngdoc service
 * @name $anchorScroll
 * @kind function
 * @requires $window
 * @requires $location
 * @requires $rootScope
 *
 * @description
 * When called, it checks current value of `$location.hash()` and scrolls to the related element,
 * according to rules specified in
 * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
 *
 * It also watches the `$location.hash()` and scrolls whenever it changes to match any anchor.
 * This can be disabled by calling `$anchorScrollProvider.disableAutoScrolling()`.
 *
 * @example
   <example>
     <file name="index.html">
       <div id="scrollArea" ng-controller="ScrollCtrl">
         <a ng-click="gotoBottom()">Go to bottom</a>
         <a id="bottom"></a> You're at the bottom!
       </div>
     </file>
     <file name="script.js">
       function ScrollCtrl($scope, $location, $anchorScroll) {
         $scope.gotoBottom = function (){
           // set the location.hash to the id of
           // the element you wish to scroll to.
           $location.hash('bottom');

           // call $anchorScroll()
           $anchorScroll();
         };
       }
     </file>
     <file name="style.css">
       #scrollArea {
         height: 350px;
         overflow: auto;
       }

       #bottom {
         display: block;
         margin-top: 2000px;
       }
     </file>
   </example>
 */
  function $AnchorScrollProvider() {
    var autoScrollingEnabled = true;
    this.disableAutoScrolling = function () {
      autoScrollingEnabled = false;
    };
    this.$get = [
      '$window',
      '$location',
      '$rootScope',
      function ($window, $location, $rootScope) {
        var document = $window.document;
        // helper function to get first anchor from a NodeList
        // can't use filter.filter, as it accepts only instances of Array
        // and IE can't convert NodeList to an array using [].slice
        // TODO(vojta): use filter if we change it to accept lists as well
        function getFirstAnchor(list) {
          var result = null;
          forEach(list, function (element) {
            if (!result && lowercase(element.nodeName) === 'a')
              result = element;
          });
          return result;
        }
        function scroll() {
          var hash = $location.hash(), elm;
          // empty hash, scroll to the top of the page
          if (!hash)
            $window.scrollTo(0, 0);  // element with given id
          else if (elm = document.getElementById(hash))
            elm.scrollIntoView();  // first anchor with given name :-D
          else if (elm = getFirstAnchor(document.getElementsByName(hash)))
            elm.scrollIntoView();  // no element and hash == 'top', scroll to the top of the page
          else if (hash === 'top')
            $window.scrollTo(0, 0);
        }
        // does not scroll when user clicks on anchor link that is currently on
        // (no url change, no $location.hash() change), browser native does scroll
        if (autoScrollingEnabled) {
          $rootScope.$watch(function autoScrollWatch() {
            return $location.hash();
          }, function autoScrollWatchAction() {
            $rootScope.$evalAsync(scroll);
          });
        }
        return scroll;
      }
    ];
  }
  var $animateMinErr = minErr('$animate');
  /**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
  var $AnimateProvider = [
      '$provide',
      function ($provide) {
        this.$$selectors = {};
        /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
        this.register = function (name, factory) {
          var key = name + '-animation';
          if (name && name.charAt(0) != '.')
            throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
          this.$$selectors[name.substr(1)] = key;
          $provide.factory(key, factory);
        };
        /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
        this.classNameFilter = function (expression) {
          if (arguments.length === 1) {
            this.$$classNameFilter = expression instanceof RegExp ? expression : null;
          }
          return this.$$classNameFilter;
        };
        this.$get = [
          '$timeout',
          '$$asyncCallback',
          function ($timeout, $$asyncCallback) {
            function async(fn) {
              fn && $$asyncCallback(fn);
            }
            /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
            return {
              enter: function (element, parent, after, done) {
                if (after) {
                  after.after(element);
                } else {
                  if (!parent || !parent[0]) {
                    parent = after.parent();
                  }
                  parent.append(element);
                }
                async(done);
              },
              leave: function (element, done) {
                element.remove();
                async(done);
              },
              move: function (element, parent, after, done) {
                // Do not remove element before insert. Removing will cause data associated with the
                // element to be dropped. Insert will implicitly do the remove.
                this.enter(element, parent, after, done);
              },
              addClass: function (element, className, done) {
                className = isString(className) ? className : isArray(className) ? className.join(' ') : '';
                forEach(element, function (element) {
                  jqLiteAddClass(element, className);
                });
                async(done);
              },
              removeClass: function (element, className, done) {
                className = isString(className) ? className : isArray(className) ? className.join(' ') : '';
                forEach(element, function (element) {
                  jqLiteRemoveClass(element, className);
                });
                async(done);
              },
              setClass: function (element, add, remove, done) {
                forEach(element, function (element) {
                  jqLiteAddClass(element, add);
                  jqLiteRemoveClass(element, remove);
                });
                async(done);
              },
              enabled: noop
            };
          }
        ];
      }
    ];
  function $$AsyncCallbackProvider() {
    this.$get = [
      '$$rAF',
      '$timeout',
      function ($$rAF, $timeout) {
        return $$rAF.supported ? function (fn) {
          return $$rAF(fn);
        } : function (fn) {
          return $timeout(fn, 0, false);
        };
      }
    ];
  }
  /**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
  /**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {function()} XHR XMLHttpRequest constructor.
 * @param {object} $log console.log or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
  function Browser(window, document, $log, $sniffer) {
    var self = this, rawDocument = document[0], location = window.location, history = window.history, setTimeout = window.setTimeout, clearTimeout = window.clearTimeout, pendingDeferIds = {};
    self.isMock = false;
    var outstandingRequestCount = 0;
    var outstandingRequestCallbacks = [];
    // TODO(vojta): remove this temporary api
    self.$$completeOutstandingRequest = completeOutstandingRequest;
    self.$$incOutstandingRequestCount = function () {
      outstandingRequestCount++;
    };
    /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
    function completeOutstandingRequest(fn) {
      try {
        fn.apply(null, sliceArgs(arguments, 1));
      } finally {
        outstandingRequestCount--;
        if (outstandingRequestCount === 0) {
          while (outstandingRequestCallbacks.length) {
            try {
              outstandingRequestCallbacks.pop()();
            } catch (e) {
              $log.error(e);
            }
          }
        }
      }
    }
    /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
    self.notifyWhenNoOutstandingRequests = function (callback) {
      // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
      // at some deterministic time in respect to the test runner's actions. Leaving things up to the
      // regular poller would result in flaky tests.
      forEach(pollFns, function (pollFn) {
        pollFn();
      });
      if (outstandingRequestCount === 0) {
        callback();
      } else {
        outstandingRequestCallbacks.push(callback);
      }
    };
    //////////////////////////////////////////////////////////////
    // Poll Watcher API
    //////////////////////////////////////////////////////////////
    var pollFns = [], pollTimeout;
    /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
    self.addPollFn = function (fn) {
      if (isUndefined(pollTimeout))
        startPoller(100, setTimeout);
      pollFns.push(fn);
      return fn;
    };
    /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
    function startPoller(interval, setTimeout) {
      (function check() {
        forEach(pollFns, function (pollFn) {
          pollFn();
        });
        pollTimeout = setTimeout(check, interval);
      }());
    }
    //////////////////////////////////////////////////////////////
    // URL API
    //////////////////////////////////////////////////////////////
    var lastBrowserUrl = location.href, baseElement = document.find('base'), newLocation = null;
    /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record ?
   */
    self.url = function (url, replace) {
      // Android Browser BFCache causes location, history reference to become stale.
      if (location !== window.location)
        location = window.location;
      if (history !== window.history)
        history = window.history;
      // setter
      if (url) {
        if (lastBrowserUrl == url)
          return;
        lastBrowserUrl = url;
        if ($sniffer.history) {
          if (replace)
            history.replaceState(null, '', url);
          else {
            history.pushState(null, '', url);
            // Crazy Opera Bug: http://my.opera.com/community/forums/topic.dml?id=1185462
            baseElement.attr('href', baseElement.attr('href'));
          }
        } else {
          newLocation = url;
          if (replace) {
            location.replace(url);
          } else {
            location.href = url;
          }
        }
        return self;  // getter
      } else {
        // - newLocation is a workaround for an IE7-9 issue with location.replace and location.href
        //   methods not updating location.href synchronously.
        // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
        return newLocation || location.href.replace(/%27/g, '\'');
      }
    };
    var urlChangeListeners = [], urlChangeInit = false;
    function fireUrlChange() {
      newLocation = null;
      if (lastBrowserUrl == self.url())
        return;
      lastBrowserUrl = self.url();
      forEach(urlChangeListeners, function (listener) {
        listener(self.url());
      });
    }
    /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
    self.onUrlChange = function (callback) {
      // TODO(vojta): refactor to use node's syntax for events
      if (!urlChangeInit) {
        // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
        // don't fire popstate when user change the address bar and don't fire hashchange when url
        // changed by push/replaceState
        // html5 history api - popstate event
        if ($sniffer.history)
          jqLite(window).on('popstate', fireUrlChange);
        // hashchange event
        if ($sniffer.hashchange)
          jqLite(window).on('hashchange', fireUrlChange);  // polling
        else
          self.addPollFn(fireUrlChange);
        urlChangeInit = true;
      }
      urlChangeListeners.push(callback);
      return callback;
    };
    /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
    self.$$checkUrlChange = fireUrlChange;
    //////////////////////////////////////////////////////////////
    // Misc API
    //////////////////////////////////////////////////////////////
    /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
    self.baseHref = function () {
      var href = baseElement.attr('href');
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
    };
    //////////////////////////////////////////////////////////////
    // Cookies API
    //////////////////////////////////////////////////////////////
    var lastCookies = {};
    var lastCookieString = '';
    var cookiePath = self.baseHref();
    /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
    self.cookies = function (name, value) {
      /* global escape: false, unescape: false */
      var cookieLength, cookieArray, cookie, i, index;
      if (name) {
        if (value === undefined) {
          rawDocument.cookie = escape(name) + '=;path=' + cookiePath + ';expires=Thu, 01 Jan 1970 00:00:00 GMT';
        } else {
          if (isString(value)) {
            cookieLength = (rawDocument.cookie = escape(name) + '=' + escape(value) + ';path=' + cookiePath).length + 1;
            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
            // - 300 cookies
            // - 20 cookies per unique domain
            // - 4096 bytes per cookie
            if (cookieLength > 4096) {
              $log.warn('Cookie \'' + name + '\' possibly not set or overflowed because it was too large (' + cookieLength + ' > 4096 bytes)!');
            }
          }
        }
      } else {
        if (rawDocument.cookie !== lastCookieString) {
          lastCookieString = rawDocument.cookie;
          cookieArray = lastCookieString.split('; ');
          lastCookies = {};
          for (i = 0; i < cookieArray.length; i++) {
            cookie = cookieArray[i];
            index = cookie.indexOf('=');
            if (index > 0) {
              //ignore nameless cookies
              name = unescape(cookie.substring(0, index));
              // the first value that is seen for a cookie is the most
              // specific one.  values for the same cookie name that
              // follow are for less specific paths.
              if (lastCookies[name] === undefined) {
                lastCookies[name] = unescape(cookie.substring(index + 1));
              }
            }
          }
        }
        return lastCookies;
      }
    };
    /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
    self.defer = function (fn, delay) {
      var timeoutId;
      outstandingRequestCount++;
      timeoutId = setTimeout(function () {
        delete pendingDeferIds[timeoutId];
        completeOutstandingRequest(fn);
      }, delay || 0);
      pendingDeferIds[timeoutId] = true;
      return timeoutId;
    };
    /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
    self.defer.cancel = function (deferId) {
      if (pendingDeferIds[deferId]) {
        delete pendingDeferIds[deferId];
        clearTimeout(deferId);
        completeOutstandingRequest(noop);
        return true;
      }
      return false;
    };
  }
  function $BrowserProvider() {
    this.$get = [
      '$window',
      '$log',
      '$sniffer',
      '$document',
      function ($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
  function $CacheFactoryProvider() {
    this.$get = function () {
      var caches = {};
      function cacheFactory(cacheId, options) {
        if (cacheId in caches) {
          throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
        }
        var size = 0, stats = extend({}, options, { id: cacheId }), data = {}, capacity = options && options.capacity || Number.MAX_VALUE, lruHash = {}, freshEnd = null, staleEnd = null;
        /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
        return caches[cacheId] = {
          put: function (key, value) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key] || (lruHash[key] = { key: key });
              refresh(lruEntry);
            }
            if (isUndefined(value))
              return;
            if (!(key in data))
              size++;
            data[key] = value;
            if (size > capacity) {
              this.remove(staleEnd.key);
            }
            return value;
          },
          get: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              refresh(lruEntry);
            }
            return data[key];
          },
          remove: function (key) {
            if (capacity < Number.MAX_VALUE) {
              var lruEntry = lruHash[key];
              if (!lruEntry)
                return;
              if (lruEntry == freshEnd)
                freshEnd = lruEntry.p;
              if (lruEntry == staleEnd)
                staleEnd = lruEntry.n;
              link(lruEntry.n, lruEntry.p);
              delete lruHash[key];
            }
            delete data[key];
            size--;
          },
          removeAll: function () {
            data = {};
            size = 0;
            lruHash = {};
            freshEnd = staleEnd = null;
          },
          destroy: function () {
            data = null;
            stats = null;
            lruHash = null;
            delete caches[cacheId];
          },
          info: function () {
            return extend({}, stats, { size: size });
          }
        };
        /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
        function refresh(entry) {
          if (entry != freshEnd) {
            if (!staleEnd) {
              staleEnd = entry;
            } else if (staleEnd == entry) {
              staleEnd = entry.n;
            }
            link(entry.n, entry.p);
            link(entry, freshEnd);
            freshEnd = entry;
            freshEnd.n = null;
          }
        }
        /**
       * bidirectionally links two entries of the LRU linked list
       */
        function link(nextEntry, prevEntry) {
          if (nextEntry != prevEntry) {
            if (nextEntry)
              nextEntry.p = prevEntry;
            //p stands for previous, 'prev' didn't minify
            if (prevEntry)
              prevEntry.n = nextEntry;  //n stands for next, 'next' didn't minify
          }
        }
      }
      /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
      cacheFactory.info = function () {
        var info = {};
        forEach(caches, function (cache, cacheId) {
          info[cacheId] = cache.info();
        });
        return info;
      };
      /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
      cacheFactory.get = function (cacheId) {
        return caches[cacheId];
      };
      return cacheFactory;
    };
  }
  /**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be below the `ng-app` definition.
 *
 * Adding via the $templateCache service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
  function $TemplateCacheProvider() {
    this.$get = [
      '$cacheFactory',
      function ($cacheFactory) {
        return $cacheFactory('templates');
      }
    ];
  }
  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */
  /**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringAlias',
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined).
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional.
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope.
 *    The scope can be overridden by an optional first argument.
 *   `function([scope], cloneLinkingFn)`.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised. The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the default (attributes only) is used.
 *
 * * `E` - Element name: `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * Same as `template` but the template is loaded from the specified URL. Because
 * the template loading is asynchronous the compilation/linking is suspended until the template
 * is loaded.
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * api/ng.$sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#creating-custom-directives_creating-directives_template-expanding-directive
 * Directives Guide} for an example.
 *
 * #### `transclude`
 * compile the content of the element and make it available to the directive.
 * Typically used with {@link ng.directive:ngTransclude
 * ngTransclude}. The advantage of transclusion is that the linking function receives a
 * transclusion function which is pre-bound to the correct scope. In a typical setup the widget
 * creates an `isolate` scope, but the transclusion is not a child, but a sibling of the `isolate`
 * scope. This makes it possible for the widget to have private state, and the transclusion to
 * be bound to the parent (pre-`isolate`) scope.
 *
 * * `true` - transclude the content of the directive.
 * * `'element'` - transclude the whole element including any directives defined at lower priority.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - a controller instance - A controller instance if at least one directive on the
 *     element defines a controller. The controller is shared among all the directives, which allows
 *     the directives to use the controllers as a communication channel.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     The scope can be overridden by an optional first argument. This is the same as the `$transclude`
 *     parameter of directive controllers.
 *     `function([scope], cloneLinkingFn)`.
 *
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked. It is safe to do DOM transformation in the post-linking function.
 *
 * <a name="Attributes"></a>
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives.
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */
  var $compileMinErr = minErr('$compile');
  /**
 * @ngdoc provider
 * @name $compileProvider
 * @kind function
 *
 * @description
 */
  $CompileProvider.$inject = [
    '$provide',
    '$$sanitizeUriProvider'
  ];
  function $CompileProvider($provide, $$sanitizeUriProvider) {
    var hasDirectives = {}, Suffix = 'Directive', COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/, CLASS_DIRECTIVE_REGEXP = /(([\d\w_\-]+)(?:\:([^;]+))?;?)/;
    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
    // The assumption is that future DOM event attribute names will begin with
    // 'on' and be composed of only English letters.
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
    /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
    this.directive = function registerDirective(name, directiveFactory) {
      assertNotHasOwnProperty(name, 'directive');
      if (isString(name)) {
        assertArg(directiveFactory, 'directiveFactory');
        if (!hasDirectives.hasOwnProperty(name)) {
          hasDirectives[name] = [];
          $provide.factory(name + Suffix, [
            '$injector',
            '$exceptionHandler',
            function ($injector, $exceptionHandler) {
              var directives = [];
              forEach(hasDirectives[name], function (directiveFactory, index) {
                try {
                  var directive = $injector.invoke(directiveFactory);
                  if (isFunction(directive)) {
                    directive = { compile: valueFn(directive) };
                  } else if (!directive.compile && directive.link) {
                    directive.compile = valueFn(directive.link);
                  }
                  directive.priority = directive.priority || 0;
                  directive.index = index;
                  directive.name = directive.name || name;
                  directive.require = directive.require || directive.controller && directive.name;
                  directive.restrict = directive.restrict || 'A';
                  directives.push(directive);
                } catch (e) {
                  $exceptionHandler(e);
                }
              });
              return directives;
            }
          ]);
        }
        hasDirectives[name].push(directiveFactory);
      } else {
        forEach(name, reverseParams(registerDirective));
      }
      return this;
    };
    /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
      }
    };
    /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
        return this;
      } else {
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
      }
    };
    this.$get = [
      '$injector',
      '$interpolate',
      '$exceptionHandler',
      '$http',
      '$templateCache',
      '$parse',
      '$controller',
      '$rootScope',
      '$document',
      '$sce',
      '$animate',
      '$$sanitizeUri',
      function ($injector, $interpolate, $exceptionHandler, $http, $templateCache, $parse, $controller, $rootScope, $document, $sce, $animate, $$sanitizeUri) {
        var Attributes = function (element, attr) {
          this.$$element = element;
          this.$attr = attr || {};
        };
        Attributes.prototype = {
          $normalize: directiveNormalize,
          $addClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.addClass(this.$$element, classVal);
            }
          },
          $removeClass: function (classVal) {
            if (classVal && classVal.length > 0) {
              $animate.removeClass(this.$$element, classVal);
            }
          },
          $updateClass: function (newClasses, oldClasses) {
            var toAdd = tokenDifference(newClasses, oldClasses);
            var toRemove = tokenDifference(oldClasses, newClasses);
            if (toAdd.length === 0) {
              $animate.removeClass(this.$$element, toRemove);
            } else if (toRemove.length === 0) {
              $animate.addClass(this.$$element, toAdd);
            } else {
              $animate.setClass(this.$$element, toAdd, toRemove);
            }
          },
          $set: function (key, value, writeAttr, attrName) {
            // TODO: decide whether or not to throw an error if "class"
            //is set through this function since it may cause $updateClass to
            //become unstable.
            var booleanKey = getBooleanAttrName(this.$$element[0], key), normalizedVal, nodeName;
            if (booleanKey) {
              this.$$element.prop(key, value);
              attrName = booleanKey;
            }
            this[key] = value;
            // translate normalized key to actual key
            if (attrName) {
              this.$attr[key] = attrName;
            } else {
              attrName = this.$attr[key];
              if (!attrName) {
                this.$attr[key] = attrName = snake_case(key, '-');
              }
            }
            nodeName = nodeName_(this.$$element);
            // sanitize a[href] and img[src] values
            if (nodeName === 'A' && key === 'href' || nodeName === 'IMG' && key === 'src') {
              this[key] = value = $$sanitizeUri(value, key === 'src');
            }
            if (writeAttr !== false) {
              if (value === null || value === undefined) {
                this.$$element.removeAttr(attrName);
              } else {
                this.$$element.attr(attrName, value);
              }
            }
            // fire observers
            var $$observers = this.$$observers;
            $$observers && forEach($$observers[key], function (fn) {
              try {
                fn(value);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          },
          $observe: function (key, fn) {
            var attrs = this, $$observers = attrs.$$observers || (attrs.$$observers = {}), listeners = $$observers[key] || ($$observers[key] = []);
            listeners.push(fn);
            $rootScope.$evalAsync(function () {
              if (!listeners.$$inter) {
                // no one registered attribute interpolation function, so lets call it manually
                fn(attrs[key]);
              }
            });
            return fn;
          }
        };
        var startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), denormalizeTemplate = startSymbol == '{{' || endSymbol == '}}' ? identity : function denormalizeTemplate(template) {
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
          }, NG_ATTR_BINDING = /^ngAttr[A-Z]/;
        return compile;
        //================================
        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
          if (!($compileNodes instanceof jqLite)) {
            // jquery always rewraps, whereas we need to preserve the original selector so that we can
            // modify it.
            $compileNodes = jqLite($compileNodes);
          }
          // We can not compile top level text elements since text nodes can be merged and we will
          // not be able to attach scope data to them, so we will wrap them in <span>
          forEach($compileNodes, function (node, index) {
            if (node.nodeType == 3 && node.nodeValue.match(/\S+/)) {
              $compileNodes[index] = node = jqLite(node).wrap('<span></span>').parent()[0];
            }
          });
          var compositeLinkFn = compileNodes($compileNodes, transcludeFn, $compileNodes, maxPriority, ignoreDirective, previousCompileContext);
          safeAddClass($compileNodes, 'ng-scope');
          return function publicLinkFn(scope, cloneConnectFn, transcludeControllers, parentBoundTranscludeFn) {
            assertArg(scope, 'scope');
            // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
            // and sometimes changes the structure of the DOM.
            var $linkNode = cloneConnectFn ? JQLitePrototype.clone.call($compileNodes) : $compileNodes;
            forEach(transcludeControllers, function (instance, name) {
              $linkNode.data('$' + name + 'Controller', instance);
            });
            // Attach scope only to non-text nodes.
            for (var i = 0, ii = $linkNode.length; i < ii; i++) {
              var node = $linkNode[i], nodeType = node.nodeType;
              if (nodeType === 1 || nodeType === 9) {
                $linkNode.eq(i).data('$scope', scope);
              }
            }
            if (cloneConnectFn)
              cloneConnectFn($linkNode, scope);
            if (compositeLinkFn)
              compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
            return $linkNode;
          };
        }
        function safeAddClass($element, className) {
          try {
            $element.addClass(className);
          } catch (e) {
          }
        }
        /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective, previousCompileContext) {
          var linkFns = [], attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound;
          for (var i = 0; i < nodeList.length; i++) {
            attrs = new Attributes();
            // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined, ignoreDirective);
            nodeLinkFn = directives.length ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement, null, [], [], previousCompileContext) : null;
            if (nodeLinkFn && nodeLinkFn.scope) {
              safeAddClass(attrs.$$element, 'ng-scope');
            }
            childLinkFn = nodeLinkFn && nodeLinkFn.terminal || !(childNodes = nodeList[i].childNodes) || !childNodes.length ? null : compileNodes(childNodes, nodeLinkFn ? (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement) && nodeLinkFn.transclude : transcludeFn);
            linkFns.push(nodeLinkFn, childLinkFn);
            linkFnFound = linkFnFound || nodeLinkFn || childLinkFn;
            //use the previous context only for the first element in the virtual group
            previousCompileContext = null;
          }
          // return a linking function if we have found anything, null otherwise
          return linkFnFound ? compositeLinkFn : null;
          function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
            var nodeLinkFn, childLinkFn, node, childScope, i, ii, n, childBoundTranscludeFn;
            // copy nodeList so that linking doesn't break due to live list updates.
            var nodeListLength = nodeList.length, stableNodeList = new Array(nodeListLength);
            for (i = 0; i < nodeListLength; i++) {
              stableNodeList[i] = nodeList[i];
            }
            for (i = 0, n = 0, ii = linkFns.length; i < ii; n++) {
              node = stableNodeList[n];
              nodeLinkFn = linkFns[i++];
              childLinkFn = linkFns[i++];
              if (nodeLinkFn) {
                if (nodeLinkFn.scope) {
                  childScope = scope.$new();
                  jqLite.data(node, '$scope', childScope);
                } else {
                  childScope = scope;
                }
                if (nodeLinkFn.transcludeOnThisElement) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
                } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
                  childBoundTranscludeFn = parentBoundTranscludeFn;
                } else if (!parentBoundTranscludeFn && transcludeFn) {
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
                } else {
                  childBoundTranscludeFn = null;
                }
                nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
              } else if (childLinkFn) {
                childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
              }
            }
          }
        }
        function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
          var boundTranscludeFn = function (transcludedScope, cloneFn, controllers) {
            var scopeCreated = false;
            if (!transcludedScope) {
              transcludedScope = scope.$new();
              transcludedScope.$$transcluded = true;
              scopeCreated = true;
            }
            var clone = transcludeFn(transcludedScope, cloneFn, controllers, previousBoundTranscludeFn);
            if (scopeCreated) {
              clone.on('$destroy', function () {
                transcludedScope.$destroy();
              });
            }
            return clone;
          };
          return boundTranscludeFn;
        }
        /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
          var nodeType = node.nodeType, attrsMap = attrs.$attr, match, className;
          switch (nodeType) {
          case 1:
            /* Element */
            // use the node name: <directive>
            addDirective(directives, directiveNormalize(nodeName_(node).toLowerCase()), 'E', maxPriority, ignoreDirective);
            // iterate over the attributes
            for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes, j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
              var attrStartName = false;
              var attrEndName = false;
              attr = nAttrs[j];
              if (!msie || msie >= 8 || attr.specified) {
                name = attr.name;
                value = trim(attr.value);
                // support ngAttr attribute binding
                ngAttrName = directiveNormalize(name);
                if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
                  name = snake_case(ngAttrName.substr(6), '-');
                }
                var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
                if (ngAttrName === directiveNName + 'Start') {
                  attrStartName = name;
                  attrEndName = name.substr(0, name.length - 5) + 'end';
                  name = name.substr(0, name.length - 6);
                }
                nName = directiveNormalize(name.toLowerCase());
                attrsMap[nName] = name;
                if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                  attrs[nName] = value;
                  if (getBooleanAttrName(node, nName)) {
                    attrs[nName] = true;  // presence means true
                  }
                }
                addAttrInterpolateDirective(node, directives, value, nName);
                addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName, attrEndName);
              }
            }
            // use class as directive
            className = node.className;
            if (isString(className) && className !== '') {
              while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
                nName = directiveNormalize(match[2]);
                if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[3]);
                }
                className = className.substr(match.index + match[0].length);
              }
            }
            break;
          case 3:
            /* Text Node */
            addTextInterpolateDirective(directives, node.nodeValue);
            break;
          case 8:
            /* Comment */
            try {
              match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
              if (match) {
                nName = directiveNormalize(match[1]);
                if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                  attrs[nName] = trim(match[2]);
                }
              }
            } catch (e) {
            }
            break;
          }
          directives.sort(byPriority);
          return directives;
        }
        /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
        function groupScan(node, attrStart, attrEnd) {
          var nodes = [];
          var depth = 0;
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
            var startNode = node;
            do {
              if (!node) {
                throw $compileMinErr('uterdir', 'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.', attrStart, attrEnd);
              }
              if (node.nodeType == 1) {
                if (node.hasAttribute(attrStart))
                  depth++;
                if (node.hasAttribute(attrEnd))
                  depth--;
              }
              nodes.push(node);
              node = node.nextSibling;
            } while (depth > 0);
          } else {
            nodes.push(node);
          }
          return jqLite(nodes);
        }
        /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
          return function (scope, element, attrs, controllers, transcludeFn) {
            element = groupScan(element[0], attrStart, attrEnd);
            return linkFn(scope, element, attrs, controllers, transcludeFn);
          };
        }
        /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn, jqCollection, originalReplaceDirective, preLinkFns, postLinkFns, previousCompileContext) {
          previousCompileContext = previousCompileContext || {};
          var terminalPriority = -Number.MAX_VALUE, newScopeDirective, controllerDirectives = previousCompileContext.controllerDirectives, newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective, templateDirective = previousCompileContext.templateDirective, nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective, hasTranscludeDirective = false, hasTemplate = false, hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective, $compileNode = templateAttrs.$$element = jqLite(compileNode), directive, directiveName, $template, replaceDirective = originalReplaceDirective, childTranscludeFn = transcludeFn, linkFn, directiveValue;
          // executes all directives on the current element
          for (var i = 0, ii = directives.length; i < ii; i++) {
            directive = directives[i];
            var attrStart = directive.$$start;
            var attrEnd = directive.$$end;
            // collect multiblock sections
            if (attrStart) {
              $compileNode = groupScan(compileNode, attrStart, attrEnd);
            }
            $template = undefined;
            if (terminalPriority > directive.priority) {
              break;  // prevent further processing of directives
            }
            if (directiveValue = directive.scope) {
              newScopeDirective = newScopeDirective || directive;
              // skip the check for directives with async templates, we'll check the derived sync
              // directive when the template arrives
              if (!directive.templateUrl) {
                assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive, $compileNode);
                if (isObject(directiveValue)) {
                  newIsolateScopeDirective = directive;
                }
              }
            }
            directiveName = directive.name;
            if (!directive.templateUrl && directive.controller) {
              directiveValue = directive.controller;
              controllerDirectives = controllerDirectives || {};
              assertNoDuplicate('\'' + directiveName + '\' controller', controllerDirectives[directiveName], directive, $compileNode);
              controllerDirectives[directiveName] = directive;
            }
            if (directiveValue = directive.transclude) {
              hasTranscludeDirective = true;
              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
              // This option should only be used by directives that know how to safely handle element transclusion,
              // where the transcluded nodes are added or replaced after linking.
              if (!directive.$$tlb) {
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
                nonTlbTranscludeDirective = directive;
              }
              if (directiveValue == 'element') {
                hasElementTranscludeDirective = true;
                terminalPriority = directive.priority;
                $template = $compileNode;
                $compileNode = templateAttrs.$$element = jqLite(document.createComment(' ' + directiveName + ': ' + templateAttrs[directiveName] + ' '));
                compileNode = $compileNode[0];
                replaceWith(jqCollection, sliceArgs($template), compileNode);
                childTranscludeFn = compile($template, transcludeFn, terminalPriority, replaceDirective && replaceDirective.name, { nonTlbTranscludeDirective: nonTlbTranscludeDirective });
              } else {
                $template = jqLite(jqLiteClone(compileNode)).contents();
                $compileNode.empty();
                // clear contents
                childTranscludeFn = compile($template, transcludeFn);
              }
            }
            if (directive.template) {
              hasTemplate = true;
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              directiveValue = isFunction(directive.template) ? directive.template($compileNode, templateAttrs) : directive.template;
              directiveValue = denormalizeTemplate(directiveValue);
              if (directive.replace) {
                replaceDirective = directive;
                if (jqLiteIsTextNode(directiveValue)) {
                  $template = [];
                } else {
                  $template = jqLite(trim(directiveValue));
                }
                compileNode = $template[0];
                if ($template.length != 1 || compileNode.nodeType !== 1) {
                  throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', directiveName, '');
                }
                replaceWith(jqCollection, $compileNode, compileNode);
                var newTemplateAttrs = { $attr: {} };
                // combine directives from the original node and from the template:
                // - take the array of directives for this element
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority
                // - combine directives as: processed + template + unprocessed
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
                if (newIsolateScopeDirective) {
                  markDirectivesAsIsolate(templateDirectives);
                }
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
                ii = directives.length;
              } else {
                $compileNode.html(directiveValue);
              }
            }
            if (directive.templateUrl) {
              hasTemplate = true;
              assertNoDuplicate('template', templateDirective, directive, $compileNode);
              templateDirective = directive;
              if (directive.replace) {
                replaceDirective = directive;
              }
              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode, templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
              ii = directives.length;
            } else if (directive.compile) {
              try {
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
                if (isFunction(linkFn)) {
                  addLinkFns(null, linkFn, attrStart, attrEnd);
                } else if (linkFn) {
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
                }
              } catch (e) {
                $exceptionHandler(e, startingTag($compileNode));
              }
            }
            if (directive.terminal) {
              nodeLinkFn.terminal = true;
              terminalPriority = Math.max(terminalPriority, directive.priority);
            }
          }
          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
          nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
          nodeLinkFn.templateOnThisElement = hasTemplate;
          nodeLinkFn.transclude = childTranscludeFn;
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
          // might be normal or delayed nodeLinkFn depending on if templateUrl is present
          return nodeLinkFn;
          ////////////////////
          function addLinkFns(pre, post, attrStart, attrEnd) {
            if (pre) {
              if (attrStart)
                pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
              pre.require = directive.require;
              pre.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                pre = cloneAndAnnotateFn(pre, { isolateScope: true });
              }
              preLinkFns.push(pre);
            }
            if (post) {
              if (attrStart)
                post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
              post.require = directive.require;
              post.directiveName = directiveName;
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
                post = cloneAndAnnotateFn(post, { isolateScope: true });
              }
              postLinkFns.push(post);
            }
          }
          function getControllers(directiveName, require, $element, elementControllers) {
            var value, retrievalMethod = 'data', optional = false;
            if (isString(require)) {
              while ((value = require.charAt(0)) == '^' || value == '?') {
                require = require.substr(1);
                if (value == '^') {
                  retrievalMethod = 'inheritedData';
                }
                optional = optional || value == '?';
              }
              value = null;
              if (elementControllers && retrievalMethod === 'data') {
                value = elementControllers[require];
              }
              value = value || $element[retrievalMethod]('$' + require + 'Controller');
              if (!value && !optional) {
                throw $compileMinErr('ctreq', 'Controller \'{0}\', required by directive \'{1}\', can\'t be found!', require, directiveName);
              }
              return value;
            } else if (isArray(require)) {
              value = [];
              forEach(require, function (require) {
                value.push(getControllers(directiveName, require, $element, elementControllers));
              });
            }
            return value;
          }
          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
            var attrs, $element, i, ii, linkFn, controller, isolateScope, elementControllers = {}, transcludeFn;
            attrs = compileNode === linkNode ? templateAttrs : shallowCopy(templateAttrs, new Attributes(jqLite(linkNode), templateAttrs.$attr));
            $element = attrs.$$element;
            if (newIsolateScopeDirective) {
              var LOCAL_REGEXP = /^\s*([@=&])(\??)\s*(\w*)\s*$/;
              isolateScope = scope.$new(true);
              if (templateDirective && (templateDirective === newIsolateScopeDirective || templateDirective === newIsolateScopeDirective.$$originalDirective)) {
                $element.data('$isolateScope', isolateScope);
              } else {
                $element.data('$isolateScopeNoTemplate', isolateScope);
              }
              safeAddClass($element, 'ng-isolate-scope');
              forEach(newIsolateScopeDirective.scope, function (definition, scopeName) {
                var match = definition.match(LOCAL_REGEXP) || [], attrName = match[3] || scopeName, optional = match[2] == '?', mode = match[1],
                  // @, =, or &
                  lastValue, parentGet, parentSet, compare;
                isolateScope.$$isolateBindings[scopeName] = mode + attrName;
                switch (mode) {
                case '@':
                  attrs.$observe(attrName, function (value) {
                    isolateScope[scopeName] = value;
                  });
                  attrs.$$observers[attrName].$$scope = scope;
                  if (attrs[attrName]) {
                    // If the attribute has been provided then we trigger an interpolation to ensure
                    // the value is there for use in the link fn
                    isolateScope[scopeName] = $interpolate(attrs[attrName])(scope);
                  }
                  break;
                case '=':
                  if (optional && !attrs[attrName]) {
                    return;
                  }
                  parentGet = $parse(attrs[attrName]);
                  if (parentGet.literal) {
                    compare = equals;
                  } else {
                    compare = function (a, b) {
                      return a === b || a !== a && b !== b;
                    };
                  }
                  parentSet = parentGet.assign || function () {
                    // reset the change, or we will throw this exception on every $digest
                    lastValue = isolateScope[scopeName] = parentGet(scope);
                    throw $compileMinErr('nonassign', 'Expression \'{0}\' used with directive \'{1}\' is non-assignable!', attrs[attrName], newIsolateScopeDirective.name);
                  };
                  lastValue = isolateScope[scopeName] = parentGet(scope);
                  isolateScope.$watch(function parentValueWatch() {
                    var parentValue = parentGet(scope);
                    if (!compare(parentValue, isolateScope[scopeName])) {
                      // we are out of sync and need to copy
                      if (!compare(parentValue, lastValue)) {
                        // parent changed and it has precedence
                        isolateScope[scopeName] = parentValue;
                      } else {
                        // if the parent can be assigned then do so
                        parentSet(scope, parentValue = isolateScope[scopeName]);
                      }
                    }
                    return lastValue = parentValue;
                  }, null, parentGet.literal);
                  break;
                case '&':
                  parentGet = $parse(attrs[attrName]);
                  isolateScope[scopeName] = function (locals) {
                    return parentGet(scope, locals);
                  };
                  break;
                default:
                  throw $compileMinErr('iscp', 'Invalid isolate scope definition for directive \'{0}\'.' + ' Definition: {... {1}: \'{2}\' ...}', newIsolateScopeDirective.name, scopeName, definition);
                }
              });
            }
            transcludeFn = boundTranscludeFn && controllersBoundTransclude;
            if (controllerDirectives) {
              forEach(controllerDirectives, function (directive) {
                var locals = {
                    $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
                    $element: $element,
                    $attrs: attrs,
                    $transclude: transcludeFn
                  }, controllerInstance;
                controller = directive.controller;
                if (controller == '@') {
                  controller = attrs[directive.name];
                }
                controllerInstance = $controller(controller, locals);
                // For directives with element transclusion the element is a comment,
                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
                // clean up (http://bugs.jquery.com/ticket/8335).
                // Instead, we save the controllers for the element in a local hash and attach to .data
                // later, once we have the actual element.
                elementControllers[directive.name] = controllerInstance;
                if (!hasElementTranscludeDirective) {
                  $element.data('$' + directive.name + 'Controller', controllerInstance);
                }
                if (directive.controllerAs) {
                  locals.$scope[directive.controllerAs] = controllerInstance;
                }
              });
            }
            // PRELINKING
            for (i = 0, ii = preLinkFns.length; i < ii; i++) {
              try {
                linkFn = preLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            // RECURSION
            // We only pass the isolate scope, if the isolate directive has a template,
            // otherwise the child elements do not belong to the isolate directive.
            var scopeToChild = scope;
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;
            }
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
            // POSTLINKING
            for (i = postLinkFns.length - 1; i >= 0; i--) {
              try {
                linkFn = postLinkFns[i];
                linkFn(linkFn.isolateScope ? isolateScope : scope, $element, attrs, linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers), transcludeFn);
              } catch (e) {
                $exceptionHandler(e, startingTag($element));
              }
            }
            // This is the function that is injected as `$transclude`.
            function controllersBoundTransclude(scope, cloneAttachFn) {
              var transcludeControllers;
              // no scope passed
              if (arguments.length < 2) {
                cloneAttachFn = scope;
                scope = undefined;
              }
              if (hasElementTranscludeDirective) {
                transcludeControllers = elementControllers;
              }
              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers);
            }
          }
        }
        function markDirectivesAsIsolate(directives) {
          // mark all directives as needing isolate scope.
          for (var j = 0, jj = directives.length; j < jj; j++) {
            directives[j] = inherit(directives[j], { $$isolateScope: true });
          }
        }
        /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName, endAttrName) {
          if (name === ignoreDirective)
            return null;
          var match = null;
          if (hasDirectives.hasOwnProperty(name)) {
            for (var directive, directives = $injector.get(name + Suffix), i = 0, ii = directives.length; i < ii; i++) {
              try {
                directive = directives[i];
                if ((maxPriority === undefined || maxPriority > directive.priority) && directive.restrict.indexOf(location) != -1) {
                  if (startAttrName) {
                    directive = inherit(directive, {
                      $$start: startAttrName,
                      $$end: endAttrName
                    });
                  }
                  tDirectives.push(directive);
                  match = directive;
                }
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          }
          return match;
        }
        /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
        function mergeTemplateAttributes(dst, src) {
          var srcAttr = src.$attr, dstAttr = dst.$attr, $element = dst.$$element;
          // reapply the old attributes to the new element
          forEach(dst, function (value, key) {
            if (key.charAt(0) != '$') {
              if (src[key] && src[key] !== value) {
                value += (key === 'style' ? ';' : ' ') + src[key];
              }
              dst.$set(key, value, true, srcAttr[key]);
            }
          });
          // copy the new attributes on the old attrs object
          forEach(src, function (value, key) {
            if (key == 'class') {
              safeAddClass($element, value);
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
            } else if (key == 'style') {
              $element.attr('style', $element.attr('style') + ';' + value);
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;  // `dst` will never contain hasOwnProperty as DOM parser won't let it.
                                                                                // You will get an "InvalidCharacterError: DOM Exception 5" error if you
                                                                                // have an attribute like "has-own-property" or "data-has-own-property", etc.
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
              dst[key] = value;
              dstAttr[key] = srcAttr[key];
            }
          });
        }
        function compileTemplateUrl(directives, $compileNode, tAttrs, $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [], afterTemplateNodeLinkFn, afterTemplateChildLinkFn, beforeTemplateCompileNode = $compileNode[0], origAsyncDirective = directives.shift(),
            // The fact that we have to copy and patch the directive seems wrong!
            derivedSyncDirective = extend({}, origAsyncDirective, {
              templateUrl: null,
              transclude: null,
              replace: null,
              $$originalDirective: origAsyncDirective
            }), templateUrl = isFunction(origAsyncDirective.templateUrl) ? origAsyncDirective.templateUrl($compileNode, tAttrs) : origAsyncDirective.templateUrl;
          $compileNode.empty();
          $http.get($sce.getTrustedResourceUrl(templateUrl), { cache: $templateCache }).success(function (content) {
            var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
            content = denormalizeTemplate(content);
            if (origAsyncDirective.replace) {
              if (jqLiteIsTextNode(content)) {
                $template = [];
              } else {
                $template = jqLite(trim(content));
              }
              compileNode = $template[0];
              if ($template.length != 1 || compileNode.nodeType !== 1) {
                throw $compileMinErr('tplrt', 'Template for directive \'{0}\' must have exactly one root element. {1}', origAsyncDirective.name, templateUrl);
              }
              tempTemplateAttrs = { $attr: {} };
              replaceWith($rootElement, $compileNode, compileNode);
              var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
              if (isObject(origAsyncDirective.scope)) {
                markDirectivesAsIsolate(templateDirectives);
              }
              directives = templateDirectives.concat(directives);
              mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
            } else {
              compileNode = beforeTemplateCompileNode;
              $compileNode.html(content);
            }
            directives.unshift(derivedSyncDirective);
            afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs, childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns, previousCompileContext);
            forEach($rootElement, function (node, i) {
              if (node == compileNode) {
                $rootElement[i] = $compileNode[0];
              }
            });
            afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
            while (linkQueue.length) {
              var scope = linkQueue.shift(), beforeTemplateLinkNode = linkQueue.shift(), linkRootElement = linkQueue.shift(), boundTranscludeFn = linkQueue.shift(), linkNode = $compileNode[0];
              if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
                var oldClasses = beforeTemplateLinkNode.className;
                if (!(previousCompileContext.hasElementTranscludeDirective && origAsyncDirective.replace)) {
                  // it was cloned therefore we have to clone as well.
                  linkNode = jqLiteClone(compileNode);
                }
                replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
                // Copy in CSS classes from original node
                safeAddClass(jqLite(linkNode), oldClasses);
              }
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              } else {
                childBoundTranscludeFn = boundTranscludeFn;
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement, childBoundTranscludeFn);
            }
            linkQueue = null;
          }).error(function (response, code, headers, config) {
            throw $compileMinErr('tpload', 'Failed to load template: {0}', config.url);
          });
          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
            var childBoundTranscludeFn = boundTranscludeFn;
            if (linkQueue) {
              linkQueue.push(scope);
              linkQueue.push(node);
              linkQueue.push(rootElement);
              linkQueue.push(childBoundTranscludeFn);
            } else {
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              }
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
            }
          };
        }
        /**
     * Sorting function for bound directives.
     */
        function byPriority(a, b) {
          var diff = b.priority - a.priority;
          if (diff !== 0)
            return diff;
          if (a.name !== b.name)
            return a.name < b.name ? -1 : 1;
          return a.index - b.index;
        }
        function assertNoDuplicate(what, previousDirective, directive, element) {
          if (previousDirective) {
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}', previousDirective.name, directive.name, what, startingTag(element));
          }
        }
        function addTextInterpolateDirective(directives, text) {
          var interpolateFn = $interpolate(text, true);
          if (interpolateFn) {
            directives.push({
              priority: 0,
              compile: function textInterpolateCompileFn(templateNode) {
                // when transcluding a template that has bindings in the root
                // then we don't have a parent and should do this in the linkFn
                var parent = templateNode.parent(), hasCompileParent = parent.length;
                if (hasCompileParent)
                  safeAddClass(templateNode.parent(), 'ng-binding');
                return function textInterpolateLinkFn(scope, node) {
                  var parent = node.parent(), bindings = parent.data('$binding') || [];
                  bindings.push(interpolateFn);
                  parent.data('$binding', bindings);
                  if (!hasCompileParent)
                    safeAddClass(parent, 'ng-binding');
                  scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                    node[0].nodeValue = value;
                  });
                };
              }
            });
          }
        }
        function getTrustedContext(node, attrNormalizedName) {
          if (attrNormalizedName == 'srcdoc') {
            return $sce.HTML;
          }
          var tag = nodeName_(node);
          // maction[xlink:href] can source SVG.  It's not limited to <maction>.
          if (attrNormalizedName == 'xlinkHref' || tag == 'FORM' && attrNormalizedName == 'action' || tag != 'IMG' && (attrNormalizedName == 'src' || attrNormalizedName == 'ngSrc')) {
            return $sce.RESOURCE_URL;
          }
        }
        function addAttrInterpolateDirective(node, directives, value, name) {
          var interpolateFn = $interpolate(value, true);
          // no interpolation found -> ignore
          if (!interpolateFn)
            return;
          if (name === 'multiple' && nodeName_(node) === 'SELECT') {
            throw $compileMinErr('selmulti', 'Binding to the \'multiple\' attribute is not supported. Element: {0}', startingTag(node));
          }
          directives.push({
            priority: 100,
            compile: function () {
              return {
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                  var $$observers = attr.$$observers || (attr.$$observers = {});
                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                    throw $compileMinErr('nodomevents', 'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' + 'ng- versions (such as ng-click instead of onclick) instead.');
                  }
                  // we need to interpolate again, in case the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  interpolateFn = $interpolate(attr[name], true, getTrustedContext(node, name));
                  // if attribute was updated so that there is no interpolation going on we don't want to
                  // register any observers
                  if (!interpolateFn)
                    return;
                  // TODO(i): this should likely be attr.$set(name, iterpolateFn(scope) so that we reset the
                  // actual attr value
                  attr[name] = interpolateFn(scope);
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).$watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
                }
              };
            }
          });
        }
        /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
        function replaceWith($rootElement, elementsToRemove, newNode) {
          var firstElementToRemove = elementsToRemove[0], removeCount = elementsToRemove.length, parent = firstElementToRemove.parentNode, i, ii;
          if ($rootElement) {
            for (i = 0, ii = $rootElement.length; i < ii; i++) {
              if ($rootElement[i] == firstElementToRemove) {
                $rootElement[i++] = newNode;
                for (var j = i, j2 = j + removeCount - 1, jj = $rootElement.length; j < jj; j++, j2++) {
                  if (j2 < jj) {
                    $rootElement[j] = $rootElement[j2];
                  } else {
                    delete $rootElement[j];
                  }
                }
                $rootElement.length -= removeCount - 1;
                break;
              }
            }
          }
          if (parent) {
            parent.replaceChild(newNode, firstElementToRemove);
          }
          var fragment = document.createDocumentFragment();
          fragment.appendChild(firstElementToRemove);
          newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
            var element = elementsToRemove[k];
            jqLite(element).remove();
            // must do this way to clean up expando
            fragment.appendChild(element);
            delete elementsToRemove[k];
          }
          elementsToRemove[0] = newNode;
          elementsToRemove.length = 1;
        }
        function cloneAndAnnotateFn(fn, annotation) {
          return extend(function () {
            return fn.apply(null, arguments);
          }, fn, annotation);
        }
      }
    ];
  }
  var PREFIX_REGEXP = /^(x[\:\-_]|data[\:\-_])/i;
  /**
 * Converts all accepted directives format into proper directive name.
 * All of these will become 'myDirective':
 *   my:Directive
 *   my-directive
 *   x-my-directive
 *   data-my:directive
 *
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
  function directiveNormalize(name) {
    return camelCase(name.replace(PREFIX_REGEXP, ''));
  }
  /**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */
  /**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */
  /**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */
  /**
 * Closure compiler type information
 */
  function nodesetLinkingFn(scope, nodeList, rootElement, boundTranscludeFn) {
  }
  function directiveLinkingFn(nodesetLinkingFn, scope, node, rootElement, boundTranscludeFn) {
  }
  function tokenDifference(str1, str2) {
    var values = '', tokens1 = str1.split(/\s+/), tokens2 = str2.split(/\s+/);
    outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j])
            continue outer;
        }
        values += (values.length > 0 ? ' ' : '') + token;
      }
    return values;
  }
  /**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
  function $ControllerProvider() {
    var controllers = {}, CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;
    /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
    this.register = function (name, constructor) {
      assertNotHasOwnProperty(name, 'controller');
      if (isObject(name)) {
        extend(controllers, name);
      } else {
        controllers[name] = constructor;
      }
    };
    this.$get = [
      '$injector',
      '$window',
      function ($injector, $window) {
        /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * check `window[constructor]` on the global `window` object
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
        return function (expression, locals) {
          var instance, match, constructor, identifier;
          if (isString(expression)) {
            match = expression.match(CNTRL_REG), constructor = match[1], identifier = match[3];
            expression = controllers.hasOwnProperty(constructor) ? controllers[constructor] : getter(locals.$scope, constructor, true) || getter($window, constructor, true);
            assertArgFn(expression, constructor, true);
          }
          instance = $injector.instantiate(expression, locals);
          if (identifier) {
            if (!(locals && typeof locals.$scope === 'object')) {
              throw minErr('$controller')('noscp', 'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.', constructor || expression.name, identifier);
            }
            locals.$scope[identifier] = instance;
          }
          return instance;
        };
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
  function $DocumentProvider() {
    this.$get = [
      '$window',
      function (window) {
        return jqLite(window.document);
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function () {
 *     return function (exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
  function $ExceptionHandlerProvider() {
    this.$get = [
      '$log',
      function ($log) {
        return function (exception, cause) {
          $log.error.apply($log, arguments);
        };
      }
    ];
  }
  /**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
  function parseHeaders(headers) {
    var parsed = {}, key, val, i;
    if (!headers)
      return parsed;
    forEach(headers.split('\n'), function (line) {
      i = line.indexOf(':');
      key = lowercase(trim(line.substr(0, i)));
      val = trim(line.substr(i + 1));
      if (key) {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    });
    return parsed;
  }
  /**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
  function headersGetter(headers) {
    var headersObj = isObject(headers) ? headers : undefined;
    return function (name) {
      if (!headersObj)
        headersObj = parseHeaders(headers);
      if (name) {
        return headersObj[lowercase(name)] || null;
      }
      return headersObj;
    };
  }
  /**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers Http headers getter fn.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
  function transformData(data, headers, fns) {
    if (isFunction(fns))
      return fns(data, headers);
    forEach(fns, function (fn) {
      data = fn(data, headers);
    });
    return data;
  }
  function isSuccess(status) {
    return 200 <= status && status < 300;
  }
  /**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
  function $HttpProvider() {
    var JSON_START = /^\s*(\[|\{[^\{])/, JSON_END = /[\}\]]\s*$/, PROTECTION_PREFIX = /^\)\]\}',?\n/, CONTENT_TYPE_APPLICATION_JSON = { 'Content-Type': 'application/json;charset=utf-8' };
    /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   **/
    var defaults = this.defaults = {
        transformResponse: [function (data) {
            if (isString(data)) {
              // strip json vulnerability protection prefix
              data = data.replace(PROTECTION_PREFIX, '');
              if (JSON_START.test(data) && JSON_END.test(data))
                data = fromJson(data);
            }
            return data;
          }],
        transformRequest: [function (d) {
            return isObject(d) && !isFile(d) && !isBlob(d) ? toJson(d) : d;
          }],
        headers: {
          common: { 'Accept': 'application/json, text/plain, */*' },
          post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
          put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
          patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
        },
        xsrfCookieName: 'XSRF-TOKEN',
        xsrfHeaderName: 'X-XSRF-TOKEN'
      };
    /**
   * Are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   */
    var interceptorFactories = this.interceptors = [];
    /**
   * For historical reasons, response interceptors are ordered by the order in which
   * they are applied to the response. (This is the opposite of interceptorFactories)
   */
    var responseInterceptorFactories = this.responseInterceptors = [];
    this.$get = [
      '$httpBackend',
      '$browser',
      '$cacheFactory',
      '$rootScope',
      '$q',
      '$injector',
      function ($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {
        var defaultCache = $cacheFactory('$http');
        /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
        var reversedInterceptors = [];
        forEach(interceptorFactories, function (interceptorFactory) {
          reversedInterceptors.unshift(isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
        });
        forEach(responseInterceptorFactories, function (interceptorFactory, index) {
          var responseFn = isString(interceptorFactory) ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory);
          /**
       * Response interceptors go before "around" interceptors (no real reason, just
       * had to pick one.) But they are already reversed, so we can't use unshift, hence
       * the splice.
       */
          reversedInterceptors.splice(index, 0, {
            response: function (response) {
              return responseFn($q.when(response));
            },
            responseError: function (response) {
              return responseFn($q.reject(response));
            }
          });
        });
        /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * # General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   $http({method: 'GET', url: '/someUrl'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * # Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * # Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * # Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     *
     * # Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transform functions. By default, Angular
     * applies these transformations:
     *
     * Request transformations:
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations:
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     * To globally augment or override the default transforms, modify the
     * `$httpProvider.defaults.transformRequest` and `$httpProvider.defaults.transformResponse`
     * properties. These properties are by default an array of transform functions, which allows you
     * to `push` or `unshift` a new transformation function into the transformation chain. You can
     * also decide to completely override any default transformations by assigning your
     * transformation functions to these properties directly without the array wrapper.  These defaults
     * are again available on the $http factory at run-time, which may be useful if you have run-time
     * services you wish to be involved in your transformations.
     *
     * Similarly, to locally override the request/response transforms, augment the
     * `transformRequest` and/or `transformResponse` properties of the configuration object passed
     * into `$http`.
     *
     *
     * # Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#properties_defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * # Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * # Response interceptors (DEPRECATED)
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication or any kind of synchronous or
     * asynchronous preprocessing of received responses, it is desirable to be able to intercept
     * responses for http requests before they are handed over to the application code that
     * initiated these requests. The response interceptors leverage the {@link ng.$q
     * promise apis} to fulfil this need for both synchronous and asynchronous preprocessing.
     *
     * The interceptors are service factories that are registered with the $httpProvider by
     * adding them to the `$httpProvider.responseInterceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor  — a function that
     * takes a {@link ng.$q promise} and returns the original or a new promise.
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       return promise.then(function(response) {
     *         // do something on success
     *         return response;
     *       }, function(response) {
     *         // do something on error
     *         if (canRecover(response)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(response);
     *       });
     *     }
     *   });
     *
     *   $httpProvider.responseInterceptors.push('myHttpInterceptor');
     *
     *
     *   // register the interceptor via an anonymous factory
     *   $httpProvider.responseInterceptors.push(function($q, dependency1, dependency2) {
     *     return function(promise) {
     *       // same as above
     *     }
     *   });
     * ```
     *
     *
     * # Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ## JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ## Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *    - **transformResponse** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body and headers and returns its transformed (typically deserialized) version.
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
        function $http(requestConfig) {
          var config = {
              method: 'get',
              transformRequest: defaults.transformRequest,
              transformResponse: defaults.transformResponse
            };
          var headers = mergeHeaders(requestConfig);
          extend(config, requestConfig);
          config.headers = headers;
          config.method = uppercase(config.method);
          var serverRequest = function (config) {
            headers = config.headers;
            var reqData = transformData(config.data, headersGetter(headers), config.transformRequest);
            // strip content-type if data is undefined
            if (isUndefined(reqData)) {
              forEach(headers, function (value, header) {
                if (lowercase(header) === 'content-type') {
                  delete headers[header];
                }
              });
            }
            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
              config.withCredentials = defaults.withCredentials;
            }
            // send request
            return sendReq(config, reqData, headers).then(transformResponse, transformResponse);
          };
          var chain = [
              serverRequest,
              undefined
            ];
          var promise = $q.when(config);
          // apply interceptors
          forEach(reversedInterceptors, function (interceptor) {
            if (interceptor.request || interceptor.requestError) {
              chain.unshift(interceptor.request, interceptor.requestError);
            }
            if (interceptor.response || interceptor.responseError) {
              chain.push(interceptor.response, interceptor.responseError);
            }
          });
          while (chain.length) {
            var thenFn = chain.shift();
            var rejectFn = chain.shift();
            promise = promise.then(thenFn, rejectFn);
          }
          promise.success = function (fn) {
            promise.then(function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          promise.error = function (fn) {
            promise.then(null, function (response) {
              fn(response.data, response.status, response.headers, config);
            });
            return promise;
          };
          return promise;
          function transformResponse(response) {
            // make a copy since the response must be cacheable
            var resp = extend({}, response, { data: transformData(response.data, response.headers, config.transformResponse) });
            return isSuccess(response.status) ? resp : $q.reject(resp);
          }
          function mergeHeaders(config) {
            var defHeaders = defaults.headers, reqHeaders = extend({}, config.headers), defHeaderName, lowercaseDefHeaderName, reqHeaderName;
            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
            // using for-in instead of forEach to avoid unecessary iteration after header has been found
            defaultHeadersIteration:
              for (defHeaderName in defHeaders) {
                lowercaseDefHeaderName = lowercase(defHeaderName);
                for (reqHeaderName in reqHeaders) {
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
                    continue defaultHeadersIteration;
                  }
                }
                reqHeaders[defHeaderName] = defHeaders[defHeaderName];
              }
            // execute if header value is a function for merged headers
            execHeaders(reqHeaders);
            return reqHeaders;
            function execHeaders(headers) {
              var headerContent;
              forEach(headers, function (headerFn, header) {
                if (isFunction(headerFn)) {
                  headerContent = headerFn();
                  if (headerContent != null) {
                    headers[header] = headerContent;
                  } else {
                    delete headers[header];
                  }
                }
              });
            }
          }
        }
        $http.pendingRequests = [];
        /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        createShortMethods('get', 'delete', 'head', 'jsonp');
        /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
        createShortMethodsWithData('post', 'put');
        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
        $http.defaults = defaults;
        return $http;
        function createShortMethods(names) {
          forEach(arguments, function (name) {
            $http[name] = function (url, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url
              }));
            };
          });
        }
        function createShortMethodsWithData(name) {
          forEach(arguments, function (name) {
            $http[name] = function (url, data, config) {
              return $http(extend(config || {}, {
                method: name,
                url: url,
                data: data
              }));
            };
          });
        }
        /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
        function sendReq(config, reqData, reqHeaders) {
          var deferred = $q.defer(), promise = deferred.promise, cache, cachedResp, url = buildUrl(config.url, config.params);
          $http.pendingRequests.push(config);
          promise.then(removePendingReq, removePendingReq);
          if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
            cache = isObject(config.cache) ? config.cache : isObject(defaults.cache) ? defaults.cache : defaultCache;
          }
          if (cache) {
            cachedResp = cache.get(url);
            if (isDefined(cachedResp)) {
              if (isPromiseLike(cachedResp)) {
                // cached request has already been sent, but there is no response yet
                cachedResp.then(removePendingReq, removePendingReq);
                return cachedResp;
              } else {
                // serving from cache
                if (isArray(cachedResp)) {
                  resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
                } else {
                  resolvePromise(cachedResp, 200, {}, 'OK');
                }
              }
            } else {
              // put the promise for the non-transformed response into cache as a placeholder
              cache.put(url, promise);
            }
          }
          // if we won't have the response in cache, set the xsrf headers and
          // send the request to the backend
          if (isUndefined(cachedResp)) {
            var xsrfValue = urlIsSameOrigin(config.url) ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName] : undefined;
            if (xsrfValue) {
              reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
            }
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout, config.withCredentials, config.responseType);
          }
          return promise;
          /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
          function done(status, response, headersString, statusText) {
            if (cache) {
              if (isSuccess(status)) {
                cache.put(url, [
                  status,
                  response,
                  parseHeaders(headersString),
                  statusText
                ]);
              } else {
                // remove promise from the cache
                cache.remove(url);
              }
            }
            resolvePromise(response, status, headersString, statusText);
            if (!$rootScope.$$phase)
              $rootScope.$apply();
          }
          /**
       * Resolves the raw $http promise.
       */
          function resolvePromise(response, status, headers, statusText) {
            // normalize internal statuses to 0
            status = Math.max(status, 0);
            (isSuccess(status) ? deferred.resolve : deferred.reject)({
              data: response,
              status: status,
              headers: headersGetter(headers),
              config: config,
              statusText: statusText
            });
          }
          function removePendingReq() {
            var idx = indexOf($http.pendingRequests, config);
            if (idx !== -1)
              $http.pendingRequests.splice(idx, 1);
          }
        }
        function buildUrl(url, params) {
          if (!params)
            return url;
          var parts = [];
          forEachSorted(params, function (value, key) {
            if (value === null || isUndefined(value))
              return;
            if (!isArray(value))
              value = [value];
            forEach(value, function (v) {
              if (isObject(v)) {
                if (isDate(v)) {
                  v = v.toISOString();
                } else {
                  v = toJson(v);
                }
              }
              parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(v));
            });
          });
          if (parts.length > 0) {
            url += (url.indexOf('?') == -1 ? '?' : '&') + parts.join('&');
          }
          return url;
        }
      }
    ];
  }
  function createXhr(method) {
    //if IE and the method is not RFC2616 compliant, or if XMLHttpRequest
    //is not available, try getting an ActiveXObject. Otherwise, use XMLHttpRequest
    //if it is available
    if (msie <= 8 && (!method.match(/^(get|post|head|put|delete|options)$/i) || !window.XMLHttpRequest)) {
      return new window.ActiveXObject('Microsoft.XMLHTTP');
    } else if (window.XMLHttpRequest) {
      return new window.XMLHttpRequest();
    }
    throw minErr('$httpBackend')('noxhr', 'This browser does not support XMLHttpRequest.');
  }
  /**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
  function $HttpBackendProvider() {
    this.$get = [
      '$browser',
      '$window',
      '$document',
      function ($browser, $window, $document) {
        return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
      }
    ];
  }
  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
    var ABORTED = -1;
    // TODO(vojta): fix the signature
    return function (method, url, post, callback, headers, timeout, withCredentials, responseType) {
      var status;
      $browser.$$incOutstandingRequestCount();
      url = url || $browser.url();
      if (lowercase(method) == 'jsonp') {
        var callbackId = '_' + (callbacks.counter++).toString(36);
        callbacks[callbackId] = function (data) {
          callbacks[callbackId].data = data;
          callbacks[callbackId].called = true;
        };
        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId), callbackId, function (status, text) {
            completeRequest(callback, status, callbacks[callbackId].data, '', text);
            callbacks[callbackId] = noop;
          });
      } else {
        var xhr = createXhr(method);
        xhr.open(method, url, true);
        forEach(headers, function (value, key) {
          if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
          }
        });
        // In IE6 and 7, this might be called synchronously when xhr.send below is called and the
        // response is in the cache. the promise api will ensure that to the app code the api is
        // always async
        xhr.onreadystatechange = function () {
          // onreadystatechange might get called multiple times with readyState === 4 on mobile webkit caused by
          // xhrs that are resolved while the app is in the background (see #5426).
          // since calling completeRequest sets the `xhr` variable to null, we just check if it's not null before
          // continuing
          //
          // we can't set xhr.onreadystatechange to undefined or delete it because that breaks IE8 (method=PATCH) and
          // Safari respectively.
          if (xhr && xhr.readyState == 4) {
            var responseHeaders = null, response = null, statusText = '';
            if (status !== ABORTED) {
              responseHeaders = xhr.getAllResponseHeaders();
              // responseText is the old-school way of retrieving response (supported by IE8 & 9)
              // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
              response = 'response' in xhr ? xhr.response : xhr.responseText;
            }
            // Accessing statusText on an aborted xhr object will
            // throw an 'c00c023f error' in IE9 and lower, don't touch it.
            if (!(status === ABORTED && msie < 10)) {
              statusText = xhr.statusText;
            }
            completeRequest(callback, status || xhr.status, response, responseHeaders, statusText);
          }
        };
        if (withCredentials) {
          xhr.withCredentials = true;
        }
        if (responseType) {
          try {
            xhr.responseType = responseType;
          } catch (e) {
            // WebKit added support for the json responseType value on 09/03/2013
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
            // known to throw when setting the value "json" as the response type. Other older
            // browsers implementing the responseType
            //
            // The json response type can be ignored if not supported, because JSON payloads are
            // parsed on the client-side regardless.
            if (responseType !== 'json') {
              throw e;
            }
          }
        }
        xhr.send(post || null);
      }
      if (timeout > 0) {
        var timeoutId = $browserDefer(timeoutRequest, timeout);
      } else if (isPromiseLike(timeout)) {
        timeout.then(timeoutRequest);
      }
      function timeoutRequest() {
        status = ABORTED;
        jsonpDone && jsonpDone();
        xhr && xhr.abort();
      }
      function completeRequest(callback, status, response, headersString, statusText) {
        // cancel timeout and subsequent timeout promise resolution
        timeoutId && $browserDefer.cancel(timeoutId);
        jsonpDone = xhr = null;
        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }
        // normalize IE bug (http://bugs.jquery.com/ticket/1450)
        status = status === 1223 ? 204 : status;
        statusText = statusText || '';
        callback(status, response, headersString, statusText);
        $browser.$$completeOutstandingRequest(noop);
      }
    };
    function jsonpReq(url, callbackId, done) {
      // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:
      // - fetches local scripts via XHR and evals them
      // - adds and immediately removes script elements from the document
      var script = rawDocument.createElement('script'), callback = null;
      script.type = 'text/javascript';
      script.src = url;
      script.async = true;
      callback = function (event) {
        removeEventListenerFn(script, 'load', callback);
        removeEventListenerFn(script, 'error', callback);
        rawDocument.body.removeChild(script);
        script = null;
        var status = -1;
        var text = 'unknown';
        if (event) {
          if (event.type === 'load' && !callbacks[callbackId].called) {
            event = { type: 'error' };
          }
          text = event.type;
          status = event.type === 'error' ? 404 : 200;
        }
        if (done) {
          done(status, text);
        }
      };
      addEventListenerFn(script, 'load', callback);
      addEventListenerFn(script, 'error', callback);
      if (msie <= 8) {
        script.onreadystatechange = function () {
          if (isString(script.readyState) && /loaded|complete/.test(script.readyState)) {
            script.onreadystatechange = null;
            callback({ type: 'load' });
          }
        };
      }
      rawDocument.body.appendChild(script);
      return callback;
    }
  }
  var $interpolateMinErr = minErr('$interpolate');
  /**
 * @ngdoc provider
 * @name $interpolateProvider
 * @kind function
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
  function $InterpolateProvider() {
    var startSymbol = '{{';
    var endSymbol = '}}';
    /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
    this.startSymbol = function (value) {
      if (value) {
        startSymbol = value;
        return this;
      } else {
        return startSymbol;
      }
    };
    /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
    this.endSymbol = function (value) {
      if (value) {
        endSymbol = value;
        return this;
      } else {
        return endSymbol;
      }
    };
    this.$get = [
      '$parse',
      '$exceptionHandler',
      '$sce',
      function ($parse, $exceptionHandler, $sce) {
        var startSymbolLength = startSymbol.length, endSymbolLength = endSymbol.length;
        /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     *    * `context`: an object against which any expressions embedded in the strings are evaluated
     *      against.
     *
     */
        function $interpolate(text, mustHaveExpression, trustedContext) {
          var startIndex, endIndex, index = 0, parts = [], length = text.length, hasInterpolation = false, fn, exp, concat = [];
          while (index < length) {
            if ((startIndex = text.indexOf(startSymbol, index)) != -1 && (endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1) {
              index != startIndex && parts.push(text.substring(index, startIndex));
              parts.push(fn = $parse(exp = text.substring(startIndex + startSymbolLength, endIndex)));
              fn.exp = exp;
              index = endIndex + endSymbolLength;
              hasInterpolation = true;
            } else {
              // we did not find anything, so we have to add the remainder to the parts array
              index != length && parts.push(text.substring(index));
              index = length;
            }
          }
          if (!(length = parts.length)) {
            // we added, nothing, must have been an empty string.
            parts.push('');
            length = 1;
          }
          // Concatenating expressions makes it hard to reason about whether some combination of
          // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
          // single expression be used for iframe[src], object[src], etc., we ensure that the value
          // that's used is assigned or constructed by some JS code somewhere that is more testable or
          // make it obvious that you bound the value to some user controlled value.  This helps reduce
          // the load when auditing for XSS issues.
          if (trustedContext && parts.length > 1) {
            throw $interpolateMinErr('noconcat', 'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' + 'interpolations that concatenate multiple expressions when a trusted value is ' + 'required.  See http://docs.angularjs.org/api/ng.$sce', text);
          }
          if (!mustHaveExpression || hasInterpolation) {
            concat.length = length;
            fn = function (context) {
              try {
                for (var i = 0, ii = length, part; i < ii; i++) {
                  if (typeof (part = parts[i]) == 'function') {
                    part = part(context);
                    if (trustedContext) {
                      part = $sce.getTrusted(trustedContext, part);
                    } else {
                      part = $sce.valueOf(part);
                    }
                    if (part == null) {
                      // null || undefined
                      part = '';
                    } else {
                      switch (typeof part) {
                      case 'string': {
                          break;
                        }
                      case 'number': {
                          part = '' + part;
                          break;
                        }
                      default: {
                          part = toJson(part);
                        }
                      }
                    }
                  }
                  concat[i] = part;
                }
                return concat.join('');
              } catch (err) {
                var newErr = $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
                $exceptionHandler(newErr);
              }
            };
            fn.exp = text;
            fn.parts = parts;
            return fn;
          }
        }
        /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
        $interpolate.startSymbol = function () {
          return startSymbol;
        };
        /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
        $interpolate.endSymbol = function () {
          return endSymbol;
        };
        return $interpolate;
      }
    ];
  }
  function $IntervalProvider() {
    this.$get = [
      '$rootScope',
      '$window',
      '$q',
      function ($rootScope, $window, $q) {
        var intervals = {};
        /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *           stop = $interval(function() {
      *             if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *               $scope.blood_1 = $scope.blood_1 - 3;
      *               $scope.blood_2 = $scope.blood_2 - 4;
      *             } else {
      *               $scope.stopFight();
      *             }
      *           }, 100);
      *         };
      *
      *         $scope.stopFight = function() {
      *           if (angular.isDefined(stop)) {
      *             $interval.cancel(stop);
      *             stop = undefined;
      *           }
      *         };
      *
      *         $scope.resetFight = function() {
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *         };
      *
      *         $scope.$on('$destroy', function() {
      *           // Make sure that the interval is destroyed too
      *           $scope.stopFight();
      *         });
      *       }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.bind('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
        function interval(fn, delay, count, invokeApply) {
          var setInterval = $window.setInterval, clearInterval = $window.clearInterval, deferred = $q.defer(), promise = deferred.promise, iteration = 0, skipApply = isDefined(invokeApply) && !invokeApply;
          count = isDefined(count) ? count : 0;
          promise.then(null, null, fn);
          promise.$$intervalId = setInterval(function tick() {
            deferred.notify(iteration++);
            if (count > 0 && iteration >= count) {
              deferred.resolve(iteration);
              clearInterval(promise.$$intervalId);
              delete intervals[promise.$$intervalId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          intervals[promise.$$intervalId] = deferred;
          return promise;
        }
        /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
        interval.cancel = function (promise) {
          if (promise && promise.$$intervalId in intervals) {
            intervals[promise.$$intervalId].reject('canceled');
            $window.clearInterval(promise.$$intervalId);
            delete intervals[promise.$$intervalId];
            return true;
          }
          return false;
        };
        return interval;
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
  function $LocaleProvider() {
    this.$get = function () {
      return {
        id: 'en-us',
        NUMBER_FORMATS: {
          DECIMAL_SEP: '.',
          GROUP_SEP: ',',
          PATTERNS: [
            {
              minInt: 1,
              minFrac: 0,
              maxFrac: 3,
              posPre: '',
              posSuf: '',
              negPre: '-',
              negSuf: '',
              gSize: 3,
              lgSize: 3
            },
            {
              minInt: 1,
              minFrac: 2,
              maxFrac: 2,
              posPre: '\xa4',
              posSuf: '',
              negPre: '(\xa4',
              negSuf: ')',
              gSize: 3,
              lgSize: 3
            }
          ],
          CURRENCY_SYM: '$'
        },
        DATETIME_FORMATS: {
          MONTH: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(','),
          SHORTMONTH: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
          AMPMS: [
            'AM',
            'PM'
          ],
          medium: 'MMM d, y h:mm:ss a',
          short: 'M/d/yy h:mm a',
          fullDate: 'EEEE, MMMM d, y',
          longDate: 'MMMM d, y',
          mediumDate: 'MMM d, y',
          shortDate: 'M/d/yy',
          mediumTime: 'h:mm:ss a',
          shortTime: 'h:mm a'
        },
        pluralCat: function (num) {
          if (num === 1) {
            return 'one';
          }
          return 'other';
        }
      };
    };
  }
  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/, DEFAULT_PORTS = {
      'http': 80,
      'https': 443,
      'ftp': 21
    };
  var $locationMinErr = minErr('$location');
  /**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
  function encodePath(path) {
    var segments = path.split('/'), i = segments.length;
    while (i--) {
      segments[i] = encodeUriSegment(segments[i]);
    }
    return segments.join('/');
  }
  function parseAbsoluteUrl(absoluteUrl, locationObj, appBase) {
    var parsedUrl = urlResolve(absoluteUrl, appBase);
    locationObj.$$protocol = parsedUrl.protocol;
    locationObj.$$host = parsedUrl.hostname;
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
  }
  function parseAppUrl(relativeUrl, locationObj, appBase) {
    var prefixed = relativeUrl.charAt(0) !== '/';
    if (prefixed) {
      relativeUrl = '/' + relativeUrl;
    }
    var match = urlResolve(relativeUrl, appBase);
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ? match.pathname.substring(1) : match.pathname);
    locationObj.$$search = parseKeyValue(match.search);
    locationObj.$$hash = decodeURIComponent(match.hash);
    // make sure path starts with '/';
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
      locationObj.$$path = '/' + locationObj.$$path;
    }
  }
  /**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
  function beginsWith(begin, whole) {
    if (whole.indexOf(begin) === 0) {
      return whole.substr(begin.length);
    }
  }
  function stripHash(url) {
    var index = url.indexOf('#');
    return index == -1 ? url : url.substr(0, index);
  }
  function stripFile(url) {
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
  }
  /* return the server only (scheme://host:port) */
  function serverBase(url) {
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
  }
  /**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
  function LocationHtml5Url(appBase, basePrefix) {
    this.$$html5 = true;
    basePrefix = basePrefix || '';
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);
    /**
   * Parse given html5 (regular) url string into properties
   * @param {string} newAbsoluteUrl HTML5 url
   * @private
   */
    this.$$parse = function (url) {
      var pathUrl = beginsWith(appBaseNoFile, url);
      if (!isString(pathUrl)) {
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url, appBaseNoFile);
      }
      parseAppUrl(pathUrl, this, appBase);
      if (!this.$$path) {
        this.$$path = '/';
      }
      this.$$compose();
    };
    /**
   * Compose url and update `absUrl` property
   * @private
   */
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1);  // first char is always '/'
    };
    this.$$rewrite = function (url) {
      var appUrl, prevAppUrl;
      if ((appUrl = beginsWith(appBase, url)) !== undefined) {
        prevAppUrl = appUrl;
        if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
          return appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
        } else {
          return appBase + prevAppUrl;
        }
      } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
        return appBaseNoFile + appUrl;
      } else if (appBaseNoFile == url + '/') {
        return appBaseNoFile;
      }
    };
  }
  /**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
  function LocationHashbangUrl(appBase, hashPrefix) {
    var appBaseNoFile = stripFile(appBase);
    parseAbsoluteUrl(appBase, this, appBase);
    /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
    this.$$parse = function (url) {
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
      var withoutHashUrl = withoutBaseUrl.charAt(0) == '#' ? beginsWith(hashPrefix, withoutBaseUrl) : this.$$html5 ? withoutBaseUrl : '';
      if (!isString(withoutHashUrl)) {
        throw $locationMinErr('ihshprfx', 'Invalid url "{0}", missing hash prefix "{1}".', url, hashPrefix);
      }
      parseAppUrl(withoutHashUrl, this, appBase);
      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
      this.$$compose();
      /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
      function removeWindowsDriveName(path, url, base) {
        /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
        var firstPathSegmentMatch;
        //Get the relative path from the input URL.
        if (url.indexOf(base) === 0) {
          url = url.replace(base, '');
        }
        // The input URL intentionally contains a first path segment that ends with a colon.
        if (windowsFilePathExp.exec(url)) {
          return path;
        }
        firstPathSegmentMatch = windowsFilePathExp.exec(path);
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
      }
    };
    /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
    };
    this.$$rewrite = function (url) {
      if (stripHash(appBase) == stripHash(url)) {
        return url;
      }
    };
  }
  /**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {
    this.$$html5 = true;
    LocationHashbangUrl.apply(this, arguments);
    var appBaseNoFile = stripFile(appBase);
    this.$$rewrite = function (url) {
      var appUrl;
      if (appBase == stripHash(url)) {
        return url;
      } else if (appUrl = beginsWith(appBaseNoFile, url)) {
        return appBase + hashPrefix + appUrl;
      } else if (appBaseNoFile === url + '/') {
        return appBaseNoFile;
      }
    };
    this.$$compose = function () {
      var search = toKeyValue(this.$$search), hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
      // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
      this.$$absUrl = appBase + hashPrefix + this.$$url;
    };
  }
  LocationHashbangInHtml5Url.prototype = LocationHashbangUrl.prototype = LocationHtml5Url.prototype = {
    $$html5: false,
    $$replace: false,
    absUrl: locationGetter('$$absUrl'),
    url: function (url) {
      if (isUndefined(url))
        return this.$$url;
      var match = PATH_MATCH.exec(url);
      if (match[1])
        this.path(decodeURIComponent(match[1]));
      if (match[2] || match[1])
        this.search(match[3] || '');
      this.hash(match[5] || '');
      return this;
    },
    protocol: locationGetter('$$protocol'),
    host: locationGetter('$$host'),
    port: locationGetter('$$port'),
    path: locationGetterSetter('$$path', function (path) {
      path = path ? path.toString() : '';
      return path.charAt(0) == '/' ? path : '/' + path;
    }),
    search: function (search, paramValue) {
      switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          // remove object undefined or null properties
          forEach(search, function (value, key) {
            if (value == null)
              delete search[key];
          });
          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg', 'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
      }
      this.$$compose();
      return this;
    },
    hash: locationGetterSetter('$$hash', function (hash) {
      return hash ? hash.toString() : '';
    }),
    replace: function () {
      this.$$replace = true;
      return this;
    }
  };
  function locationGetter(property) {
    return function () {
      return this[property];
    };
  }
  function locationGetterSetter(property, preprocess) {
    return function (value) {
      if (isUndefined(value))
        return this[property];
      this[property] = preprocess(value);
      this.$$compose();
      return this;
    };
  }
  /**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */
  /**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
  function $LocationProvider() {
    var hashPrefix = '', html5Mode = false;
    /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.hashPrefix = function (prefix) {
      if (isDefined(prefix)) {
        hashPrefix = prefix;
        return this;
      } else {
        return hashPrefix;
      }
    };
    /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {boolean=} mode Use HTML5 strategy if available.
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.html5Mode = function (mode) {
      if (isDefined(mode)) {
        html5Mode = mode;
        return this;
      } else {
        return html5Mode;
      }
    };
    /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change. This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#events_$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */
    /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   */
    this.$get = [
      '$rootScope',
      '$browser',
      '$sniffer',
      '$rootElement',
      function ($rootScope, $browser, $sniffer, $rootElement) {
        var $location, LocationMode, baseHref = $browser.baseHref(),
          // if base[href] is undefined, it defaults to ''
          initialUrl = $browser.url(), appBase;
        if (html5Mode) {
          appBase = serverBase(initialUrl) + (baseHref || '/');
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
        } else {
          appBase = stripHash(initialUrl);
          LocationMode = LocationHashbangUrl;
        }
        $location = new LocationMode(appBase, '#' + hashPrefix);
        $location.$$parse($location.$$rewrite(initialUrl));
        var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
        $rootElement.on('click', function (event) {
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
          // currently we open nice url link and redirect then
          if (event.ctrlKey || event.metaKey || event.which == 2)
            return;
          var elm = jqLite(event.target);
          // traverse the DOM up to find first A tag
          while (lowercase(elm[0].nodeName) !== 'a') {
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0])
              return;
          }
          var absHref = elm.prop('href');
          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
            // an animation.
            absHref = urlResolve(absHref.animVal).href;
          }
          // Ignore when url is started with javascript: or mailto:
          if (IGNORE_URI_REGEXP.test(absHref))
            return;
          // Make relative links work in HTML5 mode for legacy browsers (or at least IE8 & 9)
          // The href should be a regular url e.g. /link/somewhere or link/somewhere or ../somewhere or
          // somewhere#anchor or http://example.com/somewhere
          if (LocationMode === LocationHashbangInHtml5Url) {
            // get the actual href attribute - see
            // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
            var href = elm.attr('href') || elm.attr('xlink:href');
            if (href && href.indexOf('://') < 0) {
              // Ignore absolute URLs
              var prefix = '#' + hashPrefix;
              if (href[0] == '/') {
                // absolute path - replace old path
                absHref = appBase + prefix + href;
              } else if (href[0] == '#') {
                // local anchor
                absHref = appBase + prefix + ($location.path() || '/') + href;
              } else {
                // relative path - join with current path
                var stack = $location.path().split('/'), parts = href.split('/');
                if (stack.length === 2 && !stack[1])
                  stack.length = 1;
                for (var i = 0; i < parts.length; i++) {
                  if (parts[i] == '.')
                    continue;
                  else if (parts[i] == '..')
                    stack.pop();
                  else if (parts[i].length)
                    stack.push(parts[i]);
                }
                absHref = appBase + prefix + stack.join('/');
              }
            }
          }
          var rewrittenUrl = $location.$$rewrite(absHref);
          if (absHref && !elm.attr('target') && rewrittenUrl && !event.isDefaultPrevented()) {
            event.preventDefault();
            if (rewrittenUrl != $browser.url()) {
              // update location manually
              $location.$$parse(rewrittenUrl);
              $rootScope.$apply();
              // hack to work around FF6 bug 684208 when scenario runner clicks on links
              window.angular['ff-684208-preventDefault'] = true;
            }
          }
        });
        // rewrite hashbang url <> html5 url
        if ($location.absUrl() != initialUrl) {
          $browser.url($location.absUrl(), true);
        }
        // update $location when $browser url changes
        $browser.onUrlChange(function (newUrl) {
          if ($location.absUrl() != newUrl) {
            $rootScope.$evalAsync(function () {
              var oldUrl = $location.absUrl();
              $location.$$parse(newUrl);
              if ($rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
                $browser.url(oldUrl);
              } else {
                afterLocationChange(oldUrl);
              }
            });
            if (!$rootScope.$$phase)
              $rootScope.$digest();
          }
        });
        // update browser
        var changeCounter = 0;
        $rootScope.$watch(function $locationWatch() {
          var oldUrl = $browser.url();
          var currentReplace = $location.$$replace;
          if (!changeCounter || oldUrl != $location.absUrl()) {
            changeCounter++;
            $rootScope.$evalAsync(function () {
              if ($rootScope.$broadcast('$locationChangeStart', $location.absUrl(), oldUrl).defaultPrevented) {
                $location.$$parse(oldUrl);
              } else {
                $browser.url($location.absUrl(), currentReplace);
                afterLocationChange(oldUrl);
              }
            });
          }
          $location.$$replace = false;
          return changeCounter;
        });
        return $location;
        function afterLocationChange(oldUrl) {
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl);
        }
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
       </div>
     </file>
   </example>
 */
  /**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
  function $LogProvider() {
    var debug = true, self = this;
    /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
    this.debugEnabled = function (flag) {
      if (isDefined(flag)) {
        debug = flag;
        return this;
      } else {
        return debug;
      }
    };
    this.$get = [
      '$window',
      function ($window) {
        return {
          log: consoleLog('log'),
          info: consoleLog('info'),
          warn: consoleLog('warn'),
          error: consoleLog('error'),
          debug: function () {
            var fn = consoleLog('debug');
            return function () {
              if (debug) {
                fn.apply(self, arguments);
              }
            };
          }()
        };
        function formatError(arg) {
          if (arg instanceof Error) {
            if (arg.stack) {
              arg = arg.message && arg.stack.indexOf(arg.message) === -1 ? 'Error: ' + arg.message + '\n' + arg.stack : arg.stack;
            } else if (arg.sourceURL) {
              arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
            }
          }
          return arg;
        }
        function consoleLog(type) {
          var console = $window.console || {}, logFn = console[type] || console.log || noop, hasApply = false;
          // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
          // The reason behind this is that console.log has type "object" in IE8...
          try {
            hasApply = !!logFn.apply;
          } catch (e) {
          }
          if (hasApply) {
            return function () {
              var args = [];
              forEach(arguments, function (arg) {
                args.push(formatError(arg));
              });
              return logFn.apply(console, args);
            };
          }
          // we are IE which either doesn't have window.console => this is noop and we do nothing,
          // or we are IE where console.log doesn't have apply so we log at least first 2 args
          return function (arg1, arg2) {
            logFn(arg1, arg2 == null ? '' : arg2);
          };
        }
      }
    ];
  }
  var $parseMinErr = minErr('$parse');
  var promiseWarningCache = {};
  var promiseWarning;
  // Sandboxing Angular Expressions
  // ------------------------------
  // Angular expressions are generally considered safe because these expressions only have direct
  // access to $scope and locals. However, one can obtain the ability to execute arbitrary JS code by
  // obtaining a reference to native JS functions such as the Function constructor.
  //
  // As an example, consider the following Angular expression:
  //
  //   {}.toString.constructor('alert("evil JS code")')
  //
  // This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
  // against the expression language, but not to prevent exploits that were enabled by exposing
  // sensitive JavaScript or browser apis on Scope. Exposing such objects on a Scope is never a good
  // practice and therefore we are not even trying to protect against interaction with an object
  // explicitly exposed in this way.
  //
  // In general, it is not possible to access a Window object from an angular expression unless a
  // window or some DOM object that has a reference to window is published onto a Scope.
  // Similarly we prevent invocations of function known to be dangerous, as well as assignments to
  // native objects.
  function ensureSafeMemberName(name, fullExpression) {
    if (name === '__defineGetter__' || name === '__defineSetter__' || name === '__lookupGetter__' || name === '__lookupSetter__' || name === '__proto__') {
      throw $parseMinErr('isecfld', 'Attempting to access a disallowed field in Angular expressions! ' + 'Expression: {0}', fullExpression);
    }
    return name;
  }
  function ensureSafeObject(obj, fullExpression) {
    // nifty check if obj is Function that is fast and works across iframes and other contexts
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.document && obj.location && obj.alert && obj.setInterval) {
        throw $parseMinErr('isecwindow', 'Referencing the Window in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj.children && (obj.nodeName || obj.prop && obj.attr && obj.find)) {
        throw $parseMinErr('isecdom', 'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj === Object) {
        throw $parseMinErr('isecobj', 'Referencing Object in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
    return obj;
  }
  var CALL = Function.prototype.call;
  var APPLY = Function.prototype.apply;
  var BIND = Function.prototype.bind;
  function ensureSafeFunction(obj, fullExpression) {
    if (obj) {
      if (obj.constructor === obj) {
        throw $parseMinErr('isecfn', 'Referencing Function in Angular expressions is disallowed! Expression: {0}', fullExpression);
      } else if (obj === CALL || obj === APPLY || BIND && obj === BIND) {
        throw $parseMinErr('isecff', 'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}', fullExpression);
      }
    }
  }
  var OPERATORS = {
      'null': function () {
        return null;
      },
      'true': function () {
        return true;
      },
      'false': function () {
        return false;
      },
      undefined: noop,
      '+': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        if (isDefined(a)) {
          if (isDefined(b)) {
            return a + b;
          }
          return a;
        }
        return isDefined(b) ? b : undefined;
      },
      '-': function (self, locals, a, b) {
        a = a(self, locals);
        b = b(self, locals);
        return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
      },
      '*': function (self, locals, a, b) {
        return a(self, locals) * b(self, locals);
      },
      '/': function (self, locals, a, b) {
        return a(self, locals) / b(self, locals);
      },
      '%': function (self, locals, a, b) {
        return a(self, locals) % b(self, locals);
      },
      '^': function (self, locals, a, b) {
        return a(self, locals) ^ b(self, locals);
      },
      '=': noop,
      '===': function (self, locals, a, b) {
        return a(self, locals) === b(self, locals);
      },
      '!==': function (self, locals, a, b) {
        return a(self, locals) !== b(self, locals);
      },
      '==': function (self, locals, a, b) {
        return a(self, locals) == b(self, locals);
      },
      '!=': function (self, locals, a, b) {
        return a(self, locals) != b(self, locals);
      },
      '<': function (self, locals, a, b) {
        return a(self, locals) < b(self, locals);
      },
      '>': function (self, locals, a, b) {
        return a(self, locals) > b(self, locals);
      },
      '<=': function (self, locals, a, b) {
        return a(self, locals) <= b(self, locals);
      },
      '>=': function (self, locals, a, b) {
        return a(self, locals) >= b(self, locals);
      },
      '&&': function (self, locals, a, b) {
        return a(self, locals) && b(self, locals);
      },
      '||': function (self, locals, a, b) {
        return a(self, locals) || b(self, locals);
      },
      '&': function (self, locals, a, b) {
        return a(self, locals) & b(self, locals);
      },
      '|': function (self, locals, a, b) {
        return b(self, locals)(self, locals, a(self, locals));
      },
      '!': function (self, locals, a) {
        return !a(self, locals);
      }
    };
  /* jshint bitwise: true */
  var ESCAPE = {
      'n': '\n',
      'f': '\f',
      'r': '\r',
      't': '\t',
      'v': '\x0B',
      '\'': '\'',
      '"': '"'
    };
  /////////////////////////////////////////
  /**
 * @constructor
 */
  var Lexer = function (options) {
    this.options = options;
  };
  Lexer.prototype = {
    constructor: Lexer,
    lex: function (text) {
      this.text = text;
      this.index = 0;
      this.ch = undefined;
      this.lastCh = ':';
      // can start regexp
      this.tokens = [];
      while (this.index < this.text.length) {
        this.ch = this.text.charAt(this.index);
        if (this.is('"\'')) {
          this.readString(this.ch);
        } else if (this.isNumber(this.ch) || this.is('.') && this.isNumber(this.peek())) {
          this.readNumber();
        } else if (this.isIdent(this.ch)) {
          this.readIdent();
        } else if (this.is('(){}[].,;:?')) {
          this.tokens.push({
            index: this.index,
            text: this.ch
          });
          this.index++;
        } else if (this.isWhitespace(this.ch)) {
          this.index++;
          continue;
        } else {
          var ch2 = this.ch + this.peek();
          var ch3 = ch2 + this.peek(2);
          var fn = OPERATORS[this.ch];
          var fn2 = OPERATORS[ch2];
          var fn3 = OPERATORS[ch3];
          if (fn3) {
            this.tokens.push({
              index: this.index,
              text: ch3,
              fn: fn3
            });
            this.index += 3;
          } else if (fn2) {
            this.tokens.push({
              index: this.index,
              text: ch2,
              fn: fn2
            });
            this.index += 2;
          } else if (fn) {
            this.tokens.push({
              index: this.index,
              text: this.ch,
              fn: fn
            });
            this.index += 1;
          } else {
            this.throwError('Unexpected next character ', this.index, this.index + 1);
          }
        }
        this.lastCh = this.ch;
      }
      return this.tokens;
    },
    is: function (chars) {
      return chars.indexOf(this.ch) !== -1;
    },
    was: function (chars) {
      return chars.indexOf(this.lastCh) !== -1;
    },
    peek: function (i) {
      var num = i || 1;
      return this.index + num < this.text.length ? this.text.charAt(this.index + num) : false;
    },
    isNumber: function (ch) {
      return '0' <= ch && ch <= '9';
    },
    isWhitespace: function (ch) {
      // IE treats non-breaking space as \u00A0
      return ch === ' ' || ch === '\r' || ch === '\t' || ch === '\n' || ch === '\x0B' || ch === '\xa0';
    },
    isIdent: function (ch) {
      return 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z' || '_' === ch || ch === '$';
    },
    isExpOperator: function (ch) {
      return ch === '-' || ch === '+' || this.isNumber(ch);
    },
    throwError: function (error, start, end) {
      end = end || this.index;
      var colStr = isDefined(start) ? 's ' + start + '-' + this.index + ' [' + this.text.substring(start, end) + ']' : ' ' + end;
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].', error, colStr, this.text);
    },
    readNumber: function () {
      var number = '';
      var start = this.index;
      while (this.index < this.text.length) {
        var ch = lowercase(this.text.charAt(this.index));
        if (ch == '.' || this.isNumber(ch)) {
          number += ch;
        } else {
          var peekCh = this.peek();
          if (ch == 'e' && this.isExpOperator(peekCh)) {
            number += ch;
          } else if (this.isExpOperator(ch) && peekCh && this.isNumber(peekCh) && number.charAt(number.length - 1) == 'e') {
            number += ch;
          } else if (this.isExpOperator(ch) && (!peekCh || !this.isNumber(peekCh)) && number.charAt(number.length - 1) == 'e') {
            this.throwError('Invalid exponent');
          } else {
            break;
          }
        }
        this.index++;
      }
      number = 1 * number;
      this.tokens.push({
        index: start,
        text: number,
        literal: true,
        constant: true,
        fn: function () {
          return number;
        }
      });
    },
    readIdent: function () {
      var parser = this;
      var ident = '';
      var start = this.index;
      var lastDot, peekIndex, methodName, ch;
      while (this.index < this.text.length) {
        ch = this.text.charAt(this.index);
        if (ch === '.' || this.isIdent(ch) || this.isNumber(ch)) {
          if (ch === '.')
            lastDot = this.index;
          ident += ch;
        } else {
          break;
        }
        this.index++;
      }
      //check if this is not a method invocation and if it is back out to last dot
      if (lastDot) {
        peekIndex = this.index;
        while (peekIndex < this.text.length) {
          ch = this.text.charAt(peekIndex);
          if (ch === '(') {
            methodName = ident.substr(lastDot - start + 1);
            ident = ident.substr(0, lastDot - start);
            this.index = peekIndex;
            break;
          }
          if (this.isWhitespace(ch)) {
            peekIndex++;
          } else {
            break;
          }
        }
      }
      var token = {
          index: start,
          text: ident
        };
      // OPERATORS is our own object so we don't need to use special hasOwnPropertyFn
      if (OPERATORS.hasOwnProperty(ident)) {
        token.fn = OPERATORS[ident];
        token.literal = true;
        token.constant = true;
      } else {
        var getter = getterFn(ident, this.options, this.text);
        token.fn = extend(function (self, locals) {
          return getter(self, locals);
        }, {
          assign: function (self, value) {
            return setter(self, ident, value, parser.text, parser.options);
          }
        });
      }
      this.tokens.push(token);
      if (methodName) {
        this.tokens.push({
          index: lastDot,
          text: '.'
        });
        this.tokens.push({
          index: lastDot + 1,
          text: methodName
        });
      }
    },
    readString: function (quote) {
      var start = this.index;
      this.index++;
      var string = '';
      var rawString = quote;
      var escape = false;
      while (this.index < this.text.length) {
        var ch = this.text.charAt(this.index);
        rawString += ch;
        if (escape) {
          if (ch === 'u') {
            var hex = this.text.substring(this.index + 1, this.index + 5);
            if (!hex.match(/[\da-f]{4}/i))
              this.throwError('Invalid unicode escape [\\u' + hex + ']');
            this.index += 4;
            string += String.fromCharCode(parseInt(hex, 16));
          } else {
            var rep = ESCAPE[ch];
            string = string + (rep || ch);
          }
          escape = false;
        } else if (ch === '\\') {
          escape = true;
        } else if (ch === quote) {
          this.index++;
          this.tokens.push({
            index: start,
            text: rawString,
            string: string,
            literal: true,
            constant: true,
            fn: function () {
              return string;
            }
          });
          return;
        } else {
          string += ch;
        }
        this.index++;
      }
      this.throwError('Unterminated quote', start);
    }
  };
  /**
 * @constructor
 */
  var Parser = function (lexer, $filter, options) {
    this.lexer = lexer;
    this.$filter = $filter;
    this.options = options;
  };
  Parser.ZERO = extend(function () {
    return 0;
  }, { constant: true });
  Parser.prototype = {
    constructor: Parser,
    parse: function (text) {
      this.text = text;
      this.tokens = this.lexer.lex(text);
      var value = this.statements();
      if (this.tokens.length !== 0) {
        this.throwError('is an unexpected token', this.tokens[0]);
      }
      value.literal = !!value.literal;
      value.constant = !!value.constant;
      return value;
    },
    primary: function () {
      var primary;
      if (this.expect('(')) {
        primary = this.filterChain();
        this.consume(')');
      } else if (this.expect('[')) {
        primary = this.arrayDeclaration();
      } else if (this.expect('{')) {
        primary = this.object();
      } else {
        var token = this.expect();
        primary = token.fn;
        if (!primary) {
          this.throwError('not a primary expression', token);
        }
        primary.literal = !!token.literal;
        primary.constant = !!token.constant;
      }
      var next, context;
      while (next = this.expect('(', '[', '.')) {
        if (next.text === '(') {
          primary = this.functionCall(primary, context);
          context = null;
        } else if (next.text === '[') {
          context = primary;
          primary = this.objectIndex(primary);
        } else if (next.text === '.') {
          context = primary;
          primary = this.fieldAccess(primary);
        } else {
          this.throwError('IMPOSSIBLE');
        }
      }
      return primary;
    },
    throwError: function (msg, token) {
      throw $parseMinErr('syntax', 'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].', token.text, msg, token.index + 1, this.text, this.text.substring(token.index));
    },
    peekToken: function () {
      if (this.tokens.length === 0)
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
      return this.tokens[0];
    },
    peek: function (e1, e2, e3, e4) {
      if (this.tokens.length > 0) {
        var token = this.tokens[0];
        var t = token.text;
        if (t === e1 || t === e2 || t === e3 || t === e4 || !e1 && !e2 && !e3 && !e4) {
          return token;
        }
      }
      return false;
    },
    expect: function (e1, e2, e3, e4) {
      var token = this.peek(e1, e2, e3, e4);
      if (token) {
        this.tokens.shift();
        return token;
      }
      return false;
    },
    consume: function (e1) {
      if (!this.expect(e1)) {
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
      }
    },
    unaryFn: function (fn, right) {
      return extend(function (self, locals) {
        return fn(self, locals, right);
      }, { constant: right.constant });
    },
    ternaryFn: function (left, middle, right) {
      return extend(function (self, locals) {
        return left(self, locals) ? middle(self, locals) : right(self, locals);
      }, { constant: left.constant && middle.constant && right.constant });
    },
    binaryFn: function (left, fn, right) {
      return extend(function (self, locals) {
        return fn(self, locals, left, right);
      }, { constant: left.constant && right.constant });
    },
    statements: function () {
      var statements = [];
      while (true) {
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
          statements.push(this.filterChain());
        if (!this.expect(';')) {
          // optimize for the common case where there is only one statement.
          // TODO(size): maybe we should not support multiple statements?
          return statements.length === 1 ? statements[0] : function (self, locals) {
            var value;
            for (var i = 0; i < statements.length; i++) {
              var statement = statements[i];
              if (statement) {
                value = statement(self, locals);
              }
            }
            return value;
          };
        }
      }
    },
    filterChain: function () {
      var left = this.expression();
      var token;
      while (true) {
        if (token = this.expect('|')) {
          left = this.binaryFn(left, token.fn, this.filter());
        } else {
          return left;
        }
      }
    },
    filter: function () {
      var token = this.expect();
      var fn = this.$filter(token.text);
      var argsFn = [];
      while (true) {
        if (token = this.expect(':')) {
          argsFn.push(this.expression());
        } else {
          var fnInvoke = function (self, locals, input) {
            var args = [input];
            for (var i = 0; i < argsFn.length; i++) {
              args.push(argsFn[i](self, locals));
            }
            return fn.apply(self, args);
          };
          return function () {
            return fnInvoke;
          };
        }
      }
    },
    expression: function () {
      return this.assignment();
    },
    assignment: function () {
      var left = this.ternary();
      var right;
      var token;
      if (token = this.expect('=')) {
        if (!left.assign) {
          this.throwError('implies assignment but [' + this.text.substring(0, token.index) + '] can not be assigned to', token);
        }
        right = this.ternary();
        return function (scope, locals) {
          return left.assign(scope, right(scope, locals), locals);
        };
      }
      return left;
    },
    ternary: function () {
      var left = this.logicalOR();
      var middle;
      var token;
      if (token = this.expect('?')) {
        middle = this.assignment();
        if (token = this.expect(':')) {
          return this.ternaryFn(left, middle, this.assignment());
        } else {
          this.throwError('expected :', token);
        }
      } else {
        return left;
      }
    },
    logicalOR: function () {
      var left = this.logicalAND();
      var token;
      while (true) {
        if (token = this.expect('||')) {
          left = this.binaryFn(left, token.fn, this.logicalAND());
        } else {
          return left;
        }
      }
    },
    logicalAND: function () {
      var left = this.equality();
      var token;
      if (token = this.expect('&&')) {
        left = this.binaryFn(left, token.fn, this.logicalAND());
      }
      return left;
    },
    equality: function () {
      var left = this.relational();
      var token;
      if (token = this.expect('==', '!=', '===', '!==')) {
        left = this.binaryFn(left, token.fn, this.equality());
      }
      return left;
    },
    relational: function () {
      var left = this.additive();
      var token;
      if (token = this.expect('<', '>', '<=', '>=')) {
        left = this.binaryFn(left, token.fn, this.relational());
      }
      return left;
    },
    additive: function () {
      var left = this.multiplicative();
      var token;
      while (token = this.expect('+', '-')) {
        left = this.binaryFn(left, token.fn, this.multiplicative());
      }
      return left;
    },
    multiplicative: function () {
      var left = this.unary();
      var token;
      while (token = this.expect('*', '/', '%')) {
        left = this.binaryFn(left, token.fn, this.unary());
      }
      return left;
    },
    unary: function () {
      var token;
      if (this.expect('+')) {
        return this.primary();
      } else if (token = this.expect('-')) {
        return this.binaryFn(Parser.ZERO, token.fn, this.unary());
      } else if (token = this.expect('!')) {
        return this.unaryFn(token.fn, this.unary());
      } else {
        return this.primary();
      }
    },
    fieldAccess: function (object) {
      var parser = this;
      var field = this.expect().text;
      var getter = getterFn(field, this.options, this.text);
      return extend(function (scope, locals, self) {
        return getter(self || object(scope, locals));
      }, {
        assign: function (scope, value, locals) {
          var o = object(scope, locals);
          if (!o)
            object.assign(scope, o = {});
          return setter(o, field, value, parser.text, parser.options);
        }
      });
    },
    objectIndex: function (obj) {
      var parser = this;
      var indexFn = this.expression();
      this.consume(']');
      return extend(function (self, locals) {
        var o = obj(self, locals), i = indexFn(self, locals), v, p;
        ensureSafeMemberName(i, parser.text);
        if (!o)
          return undefined;
        v = ensureSafeObject(o[i], parser.text);
        if (v && v.then && parser.options.unwrapPromises) {
          p = v;
          if (!('$$v' in v)) {
            p.$$v = undefined;
            p.then(function (val) {
              p.$$v = val;
            });
          }
          v = v.$$v;
        }
        return v;
      }, {
        assign: function (self, value, locals) {
          var key = ensureSafeMemberName(indexFn(self, locals), parser.text);
          // prevent overwriting of Function.constructor which would break ensureSafeObject check
          var o = ensureSafeObject(obj(self, locals), parser.text);
          if (!o)
            obj.assign(self, o = {});
          return o[key] = value;
        }
      });
    },
    functionCall: function (fn, contextGetter) {
      var argsFn = [];
      if (this.peekToken().text !== ')') {
        do {
          argsFn.push(this.expression());
        } while (this.expect(','));
      }
      this.consume(')');
      var parser = this;
      return function (scope, locals) {
        var args = [];
        var context = contextGetter ? contextGetter(scope, locals) : scope;
        for (var i = 0; i < argsFn.length; i++) {
          args.push(ensureSafeObject(argsFn[i](scope, locals), parser.text));
        }
        var fnPtr = fn(scope, locals, context) || noop;
        ensureSafeObject(context, parser.text);
        ensureSafeFunction(fnPtr, parser.text);
        // IE stupidity! (IE doesn't have apply for some native functions)
        var v = fnPtr.apply ? fnPtr.apply(context, args) : fnPtr(args[0], args[1], args[2], args[3], args[4]);
        return ensureSafeObject(v, parser.text);
      };
    },
    arrayDeclaration: function () {
      var elementFns = [];
      var allConstant = true;
      if (this.peekToken().text !== ']') {
        do {
          if (this.peek(']')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var elementFn = this.expression();
          elementFns.push(elementFn);
          if (!elementFn.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume(']');
      return extend(function (self, locals) {
        var array = [];
        for (var i = 0; i < elementFns.length; i++) {
          array.push(elementFns[i](self, locals));
        }
        return array;
      }, {
        literal: true,
        constant: allConstant
      });
    },
    object: function () {
      var keyValues = [];
      var allConstant = true;
      if (this.peekToken().text !== '}') {
        do {
          if (this.peek('}')) {
            // Support trailing commas per ES5.1.
            break;
          }
          var token = this.expect(), key = token.string || token.text;
          this.consume(':');
          var value = this.expression();
          keyValues.push({
            key: key,
            value: value
          });
          if (!value.constant) {
            allConstant = false;
          }
        } while (this.expect(','));
      }
      this.consume('}');
      return extend(function (self, locals) {
        var object = {};
        for (var i = 0; i < keyValues.length; i++) {
          var keyValue = keyValues[i];
          object[keyValue.key] = keyValue.value(self, locals);
        }
        return object;
      }, {
        literal: true,
        constant: allConstant
      });
    }
  };
  //////////////////////////////////////////////////
  // Parser helper functions
  //////////////////////////////////////////////////
  function setter(obj, path, setValue, fullExp, options) {
    ensureSafeObject(obj, fullExp);
    //needed?
    options = options || {};
    var element = path.split('.'), key;
    for (var i = 0; element.length > 1; i++) {
      key = ensureSafeMemberName(element.shift(), fullExp);
      var propertyObj = ensureSafeObject(obj[key], fullExp);
      if (!propertyObj) {
        propertyObj = {};
        obj[key] = propertyObj;
      }
      obj = propertyObj;
      if (obj.then && options.unwrapPromises) {
        promiseWarning(fullExp);
        if (!('$$v' in obj)) {
          (function (promise) {
            promise.then(function (val) {
              promise.$$v = val;
            });
          }(obj));
        }
        if (obj.$$v === undefined) {
          obj.$$v = {};
        }
        obj = obj.$$v;
      }
    }
    key = ensureSafeMemberName(element.shift(), fullExp);
    ensureSafeObject(obj[key], fullExp);
    obj[key] = setValue;
    return setValue;
  }
  var getterFnCache = {};
  /**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, options) {
    ensureSafeMemberName(key0, fullExp);
    ensureSafeMemberName(key1, fullExp);
    ensureSafeMemberName(key2, fullExp);
    ensureSafeMemberName(key3, fullExp);
    ensureSafeMemberName(key4, fullExp);
    return !options.unwrapPromises ? function cspSafeGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope;
      if (pathVal == null)
        return pathVal;
      pathVal = pathVal[key0];
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key1];
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key2];
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key3];
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key4];
      return pathVal;
    } : function cspSafePromiseEnabledGetter(scope, locals) {
      var pathVal = locals && locals.hasOwnProperty(key0) ? locals : scope, promise;
      if (pathVal == null)
        return pathVal;
      pathVal = pathVal[key0];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key1)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key1];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key2)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key2];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key3)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key3];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      if (!key4)
        return pathVal;
      if (pathVal == null)
        return undefined;
      pathVal = pathVal[key4];
      if (pathVal && pathVal.then) {
        promiseWarning(fullExp);
        if (!('$$v' in pathVal)) {
          promise = pathVal;
          promise.$$v = undefined;
          promise.then(function (val) {
            promise.$$v = val;
          });
        }
        pathVal = pathVal.$$v;
      }
      return pathVal;
    };
  }
  function getterFn(path, options, fullExp) {
    // Check whether the cache has this getter already.
    // We can use hasOwnProperty directly on the cache because we ensure,
    // see below, that the cache never stores a path called 'hasOwnProperty'
    if (getterFnCache.hasOwnProperty(path)) {
      return getterFnCache[path];
    }
    var pathKeys = path.split('.'), pathKeysLength = pathKeys.length, fn;
    // http://jsperf.com/angularjs-parse-getter/6
    if (options.csp) {
      if (pathKeysLength < 6) {
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, options);
      } else {
        fn = function (scope, locals) {
          var i = 0, val;
          do {
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], fullExp, options)(scope, locals);
            locals = undefined;
            // clear after first iteration
            scope = val;
          } while (i < pathKeysLength);
          return val;
        };
      }
    } else {
      var code = 'var p;\n';
      forEach(pathKeys, function (key, index) {
        ensureSafeMemberName(key, fullExp);
        code += 'if(s == null) return undefined;\n' + 's=' + (index ? 's' : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' + (options.unwrapPromises ? 'if (s && s.then) {\n' + ' pw("' + fullExp.replace(/(["\r\n])/g, '\\$1') + '");\n' + ' if (!("$$v" in s)) {\n' + ' p=s;\n' + ' p.$$v = undefined;\n' + ' p.then(function(v) {p.$$v=v;});\n' + '}\n' + ' s=s.$$v\n' + '}\n' : '');
      });
      code += 'return s;';
      /* jshint -W054 */
      var evaledFnGetter = new Function('s', 'k', 'pw', code);
      // s=scope, k=locals, pw=promiseWarning
      /* jshint +W054 */
      evaledFnGetter.toString = valueFn(code);
      fn = options.unwrapPromises ? function (scope, locals) {
        return evaledFnGetter(scope, locals, promiseWarning);
      } : evaledFnGetter;
    }
    // Only cache the value if it's not going to mess up the cache object
    // This is more performant that using Object.prototype.hasOwnProperty.call
    if (path !== 'hasOwnProperty') {
      getterFnCache[path] = fn;
    }
    return fn;
  }
  ///////////////////////////////////
  /**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */
  /**
 * @ngdoc provider
 * @name $parseProvider
 * @kind function
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
  function $ParseProvider() {
    var cache = {};
    var $parseOptions = {
        csp: false,
        unwrapPromises: false,
        logPromiseWarnings: true
      };
    /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name $parseProvider#unwrapPromises
   * @description
   *
   * **This feature is deprecated, see deprecation notes below for more info**
   *
   * If set to true (default is false), $parse will unwrap promises automatically when a promise is
   * found at any part of the expression. In other words, if set to true, the expression will always
   * result in a non-promise value.
   *
   * While the promise is unresolved, it's treated as undefined, but once resolved and fulfilled,
   * the fulfillment value is used in place of the promise while evaluating the expression.
   *
   * **Deprecation notice**
   *
   * This is a feature that didn't prove to be wildly useful or popular, primarily because of the
   * dichotomy between data access in templates (accessed as raw values) and controller code
   * (accessed as promises).
   *
   * In most code we ended up resolving promises manually in controllers anyway and thus unifying
   * the model access there.
   *
   * Other downsides of automatic promise unwrapping:
   *
   * - when building components it's often desirable to receive the raw promises
   * - adds complexity and slows down expression evaluation
   * - makes expression code pre-generation unattractive due to the amount of code that needs to be
   *   generated
   * - makes IDE auto-completion and tool support hard
   *
   * **Warning Logs**
   *
   * If the unwrapping is enabled, Angular will log a warning about each expression that unwraps a
   * promise (to reduce the noise, each expression is logged only once). To disable this logging use
   * `$parseProvider.logPromiseWarnings(false)` api.
   *
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
    this.unwrapPromises = function (value) {
      if (isDefined(value)) {
        $parseOptions.unwrapPromises = !!value;
        return this;
      } else {
        return $parseOptions.unwrapPromises;
      }
    };
    /**
   * @deprecated Promise unwrapping via $parse is deprecated and will be removed in the future.
   *
   * @ngdoc method
   * @name $parseProvider#logPromiseWarnings
   * @description
   *
   * Controls whether Angular should log a warning on any encounter of a promise in an expression.
   *
   * The default is set to `true`.
   *
   * This setting applies only if `$parseProvider.unwrapPromises` setting is set to true as well.
   *
   * @param {boolean=} value New value.
   * @returns {boolean|self} Returns the current setting when used as getter and self if used as
   *                         setter.
   */
    this.logPromiseWarnings = function (value) {
      if (isDefined(value)) {
        $parseOptions.logPromiseWarnings = value;
        return this;
      } else {
        return $parseOptions.logPromiseWarnings;
      }
    };
    this.$get = [
      '$filter',
      '$sniffer',
      '$log',
      function ($filter, $sniffer, $log) {
        $parseOptions.csp = $sniffer.csp;
        promiseWarning = function promiseWarningFn(fullExp) {
          if (!$parseOptions.logPromiseWarnings || promiseWarningCache.hasOwnProperty(fullExp))
            return;
          promiseWarningCache[fullExp] = true;
          $log.warn('[$parse] Promise found in the expression `' + fullExp + '`. ' + 'Automatic unwrapping of promises in Angular expressions is deprecated.');
        };
        return function (exp) {
          var parsedExpression;
          switch (typeof exp) {
          case 'string':
            if (cache.hasOwnProperty(exp)) {
              return cache[exp];
            }
            var lexer = new Lexer($parseOptions);
            var parser = new Parser(lexer, $filter, $parseOptions);
            parsedExpression = parser.parse(exp);
            if (exp !== 'hasOwnProperty') {
              // Only cache the value if it's not going to mess up the cache object
              // This is more performant that using Object.prototype.hasOwnProperty.call
              cache[exp] = parsedExpression;
            }
            return parsedExpression;
          case 'function':
            return exp;
          default:
            return noop;
          }
        };
      }
    ];
  }
  /**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A promise/deferred implementation inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q`, `scope` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise can not be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 *   Because `finally` is a reserved word in JavaScript and reserved keywords are not supported as
 *   property names by ES3, you'll need to invoke the method like `promise['finally'](callback)` to
 *   make your code IE8 and Android 2.x compatible.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 */
  function $QProvider() {
    this.$get = [
      '$rootScope',
      '$exceptionHandler',
      function ($rootScope, $exceptionHandler) {
        return qFactory(function (callback) {
          $rootScope.$evalAsync(callback);
        }, $exceptionHandler);
      }
    ];
  }
  /**
 * Constructs a promise manager.
 *
 * @param {function(Function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
  function qFactory(nextTick, exceptionHandler) {
    /**
   * @ngdoc method
   * @name $q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
    var defer = function () {
      var pending = [], value, deferred;
      deferred = {
        resolve: function (val) {
          if (pending) {
            var callbacks = pending;
            pending = undefined;
            value = ref(val);
            if (callbacks.length) {
              nextTick(function () {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  value.then(callback[0], callback[1], callback[2]);
                }
              });
            }
          }
        },
        reject: function (reason) {
          deferred.resolve(createInternalRejectedPromise(reason));
        },
        notify: function (progress) {
          if (pending) {
            var callbacks = pending;
            if (pending.length) {
              nextTick(function () {
                var callback;
                for (var i = 0, ii = callbacks.length; i < ii; i++) {
                  callback = callbacks[i];
                  callback[2](progress);
                }
              });
            }
          }
        },
        promise: {
          then: function (callback, errback, progressback) {
            var result = defer();
            var wrappedCallback = function (value) {
              try {
                result.resolve((isFunction(callback) ? callback : defaultCallback)(value));
              } catch (e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };
            var wrappedErrback = function (reason) {
              try {
                result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
              } catch (e) {
                result.reject(e);
                exceptionHandler(e);
              }
            };
            var wrappedProgressback = function (progress) {
              try {
                result.notify((isFunction(progressback) ? progressback : defaultCallback)(progress));
              } catch (e) {
                exceptionHandler(e);
              }
            };
            if (pending) {
              pending.push([
                wrappedCallback,
                wrappedErrback,
                wrappedProgressback
              ]);
            } else {
              value.then(wrappedCallback, wrappedErrback, wrappedProgressback);
            }
            return result.promise;
          },
          'catch': function (callback) {
            return this.then(null, callback);
          },
          'finally': function (callback) {
            function makePromise(value, resolved) {
              var result = defer();
              if (resolved) {
                result.resolve(value);
              } else {
                result.reject(value);
              }
              return result.promise;
            }
            function handleCallback(value, isResolved) {
              var callbackOutput = null;
              try {
                callbackOutput = (callback || defaultCallback)();
              } catch (e) {
                return makePromise(e, false);
              }
              if (isPromiseLike(callbackOutput)) {
                return callbackOutput.then(function () {
                  return makePromise(value, isResolved);
                }, function (error) {
                  return makePromise(error, false);
                });
              } else {
                return makePromise(value, isResolved);
              }
            }
            return this.then(function (value) {
              return handleCallback(value, true);
            }, function (error) {
              return handleCallback(error, false);
            });
          }
        }
      };
      return deferred;
    };
    var ref = function (value) {
      if (isPromiseLike(value))
        return value;
      return {
        then: function (callback) {
          var result = defer();
          nextTick(function () {
            result.resolve(callback(value));
          });
          return result.promise;
        }
      };
    };
    /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
    var reject = function (reason) {
      var result = defer();
      result.reject(reason);
      return result.promise;
    };
    var createInternalRejectedPromise = function (reason) {
      return {
        then: function (callback, errback) {
          var result = defer();
          nextTick(function () {
            try {
              result.resolve((isFunction(errback) ? errback : defaultErrback)(reason));
            } catch (e) {
              result.reject(e);
              exceptionHandler(e);
            }
          });
          return result.promise;
        }
      };
    };
    /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */
    var when = function (value, callback, errback, progressback) {
      var result = defer(), done;
      var wrappedCallback = function (value) {
        try {
          return (isFunction(callback) ? callback : defaultCallback)(value);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };
      var wrappedErrback = function (reason) {
        try {
          return (isFunction(errback) ? errback : defaultErrback)(reason);
        } catch (e) {
          exceptionHandler(e);
          return reject(e);
        }
      };
      var wrappedProgressback = function (progress) {
        try {
          return (isFunction(progressback) ? progressback : defaultCallback)(progress);
        } catch (e) {
          exceptionHandler(e);
        }
      };
      nextTick(function () {
        ref(value).then(function (value) {
          if (done)
            return;
          done = true;
          result.resolve(ref(value).then(wrappedCallback, wrappedErrback, wrappedProgressback));
        }, function (reason) {
          if (done)
            return;
          done = true;
          result.resolve(wrappedErrback(reason));
        }, function (progress) {
          if (done)
            return;
          result.notify(wrappedProgressback(progress));
        });
      });
      return result.promise;
    };
    function defaultCallback(value) {
      return value;
    }
    function defaultErrback(reason) {
      return reject(reason);
    }
    /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */
    function all(promises) {
      var deferred = defer(), counter = 0, results = isArray(promises) ? [] : {};
      forEach(promises, function (promise, key) {
        counter++;
        ref(promise).then(function (value) {
          if (results.hasOwnProperty(key))
            return;
          results[key] = value;
          if (!--counter)
            deferred.resolve(results);
        }, function (reason) {
          if (results.hasOwnProperty(key))
            return;
          deferred.reject(reason);
        });
      });
      if (counter === 0) {
        deferred.resolve(results);
      }
      return deferred.promise;
    }
    return {
      defer: defer,
      reject: reject,
      when: when,
      all: all
    };
  }
  function $$RAFProvider() {
    //rAF
    this.$get = [
      '$window',
      '$timeout',
      function ($window, $timeout) {
        var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
        var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
        var rafSupported = !!requestAnimationFrame;
        var raf = rafSupported ? function (fn) {
            var id = requestAnimationFrame(fn);
            return function () {
              cancelAnimationFrame(id);
            };
          } : function (fn) {
            var timer = $timeout(fn, 16.66, false);
            // 1000 / 60 = 16.666
            return function () {
              $timeout.cancel(timer);
            };
          };
        raf.supported = rafSupported;
        return raf;
      }
    ];
  }
  /**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */
  /**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */
  /**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */
  /**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
  function $RootScopeProvider() {
    var TTL = 10;
    var $rootScopeMinErr = minErr('$rootScope');
    var lastDirtyWatch = null;
    this.digestTtl = function (value) {
      if (arguments.length) {
        TTL = value;
      }
      return TTL;
    };
    this.$get = [
      '$injector',
      '$exceptionHandler',
      '$parse',
      '$browser',
      function ($injector, $exceptionHandler, $parse, $browser) {
        /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         child.name = "World";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
        function Scope() {
          this.$id = nextUid();
          this.$$phase = this.$parent = this.$$watchers = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null;
          this['this'] = this.$root = this;
          this.$$destroyed = false;
          this.$$asyncQueue = [];
          this.$$postDigestQueue = [];
          this.$$listeners = {};
          this.$$listenerCount = {};
          this.$$isolateBindings = {};
        }
        /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */
        /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */
        /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */
        Scope.prototype = {
          constructor: Scope,
          $new: function (isolate) {
            var ChildScope, child;
            if (isolate) {
              child = new Scope();
              child.$root = this.$root;
              // ensure that there is just one async queue per $rootScope and its children
              child.$$asyncQueue = this.$$asyncQueue;
              child.$$postDigestQueue = this.$$postDigestQueue;
            } else {
              // Only create a child scope class if somebody asks for one,
              // but cache it to allow the VM to optimize lookups.
              if (!this.$$childScopeClass) {
                this.$$childScopeClass = function () {
                  this.$$watchers = this.$$nextSibling = this.$$childHead = this.$$childTail = null;
                  this.$$listeners = {};
                  this.$$listenerCount = {};
                  this.$id = nextUid();
                  this.$$childScopeClass = null;
                };
                this.$$childScopeClass.prototype = this;
              }
              child = new this.$$childScopeClass();
            }
            child['this'] = child;
            child.$parent = this;
            child.$$prevSibling = this.$$childTail;
            if (this.$$childHead) {
              this.$$childTail.$$nextSibling = child;
              this.$$childTail = child;
            } else {
              this.$$childHead = this.$$childTail = child;
            }
            return child;
          },
          $watch: function (watchExp, listener, objectEquality) {
            var scope = this, get = compileToFn(watchExp, 'watch'), array = scope.$$watchers, watcher = {
                fn: listener,
                last: initWatchVal,
                get: get,
                exp: watchExp,
                eq: !!objectEquality
              };
            lastDirtyWatch = null;
            // in the case user pass string, we need to compile it, do we really need this ?
            if (!isFunction(listener)) {
              var listenFn = compileToFn(listener || noop, 'listener');
              watcher.fn = function (newVal, oldVal, scope) {
                listenFn(scope);
              };
            }
            if (typeof watchExp == 'string' && get.constant) {
              var originalFn = watcher.fn;
              watcher.fn = function (newVal, oldVal, scope) {
                originalFn.call(this, newVal, oldVal, scope);
                arrayRemove(array, watcher);
              };
            }
            if (!array) {
              array = scope.$$watchers = [];
            }
            // we use unshift since we use a while loop in $digest for speed.
            // the while loop reads in reverse order.
            array.unshift(watcher);
            return function deregisterWatch() {
              arrayRemove(array, watcher);
              lastDirtyWatch = null;
            };
          },
          $watchCollection: function (obj, listener) {
            var self = this;
            // the current value, updated on each dirty-check run
            var newValue;
            // a shallow copy of the newValue from the last dirty-check run,
            // updated to match newValue during dirty-check run
            var oldValue;
            // a shallow copy of the newValue from when the last change happened
            var veryOldValue;
            // only track veryOldValue if the listener is asking for it
            var trackVeryOldValue = listener.length > 1;
            var changeDetected = 0;
            var objGetter = $parse(obj);
            var internalArray = [];
            var internalObject = {};
            var initRun = true;
            var oldLength = 0;
            function $watchCollectionWatch() {
              newValue = objGetter(self);
              var newLength, key, bothNaN;
              if (!isObject(newValue)) {
                // if primitive
                if (oldValue !== newValue) {
                  oldValue = newValue;
                  changeDetected++;
                }
              } else if (isArrayLike(newValue)) {
                if (oldValue !== internalArray) {
                  // we are transitioning from something which was not an array into array.
                  oldValue = internalArray;
                  oldLength = oldValue.length = 0;
                  changeDetected++;
                }
                newLength = newValue.length;
                if (oldLength !== newLength) {
                  // if lengths do not match we need to trigger change notification
                  changeDetected++;
                  oldValue.length = oldLength = newLength;
                }
                // copy the items to oldValue and look for changes.
                for (var i = 0; i < newLength; i++) {
                  bothNaN = oldValue[i] !== oldValue[i] && newValue[i] !== newValue[i];
                  if (!bothNaN && oldValue[i] !== newValue[i]) {
                    changeDetected++;
                    oldValue[i] = newValue[i];
                  }
                }
              } else {
                if (oldValue !== internalObject) {
                  // we are transitioning from something which was not an object into object.
                  oldValue = internalObject = {};
                  oldLength = 0;
                  changeDetected++;
                }
                // copy the items to oldValue and look for changes.
                newLength = 0;
                for (key in newValue) {
                  if (newValue.hasOwnProperty(key)) {
                    newLength++;
                    if (oldValue.hasOwnProperty(key)) {
                      bothNaN = oldValue[key] !== oldValue[key] && newValue[key] !== newValue[key];
                      if (!bothNaN && oldValue[key] !== newValue[key]) {
                        changeDetected++;
                        oldValue[key] = newValue[key];
                      }
                    } else {
                      oldLength++;
                      oldValue[key] = newValue[key];
                      changeDetected++;
                    }
                  }
                }
                if (oldLength > newLength) {
                  // we used to have more keys, need to find them and destroy them.
                  changeDetected++;
                  for (key in oldValue) {
                    if (oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key)) {
                      oldLength--;
                      delete oldValue[key];
                    }
                  }
                }
              }
              return changeDetected;
            }
            function $watchCollectionAction() {
              if (initRun) {
                initRun = false;
                listener(newValue, newValue, self);
              } else {
                listener(newValue, veryOldValue, self);
              }
              // make a copy for the next time a collection is changed
              if (trackVeryOldValue) {
                if (!isObject(newValue)) {
                  //primitive
                  veryOldValue = newValue;
                } else if (isArrayLike(newValue)) {
                  veryOldValue = new Array(newValue.length);
                  for (var i = 0; i < newValue.length; i++) {
                    veryOldValue[i] = newValue[i];
                  }
                } else {
                  // if object
                  veryOldValue = {};
                  for (var key in newValue) {
                    if (hasOwnProperty.call(newValue, key)) {
                      veryOldValue[key] = newValue[key];
                    }
                  }
                }
              }
            }
            return this.$watch($watchCollectionWatch, $watchCollectionAction);
          },
          $digest: function () {
            var watch, value, last, watchers, asyncQueue = this.$$asyncQueue, postDigestQueue = this.$$postDigestQueue, length, dirty, ttl = TTL, next, current, target = this, watchLog = [], logIdx, logMsg, asyncTask;
            beginPhase('$digest');
            // Check for changes to browser url that happened in sync before the call to $digest
            $browser.$$checkUrlChange();
            lastDirtyWatch = null;
            do {
              // "while dirty" loop
              dirty = false;
              current = target;
              while (asyncQueue.length) {
                try {
                  asyncTask = asyncQueue.shift();
                  asyncTask.scope.$eval(asyncTask.expression);
                } catch (e) {
                  clearPhase();
                  $exceptionHandler(e);
                }
                lastDirtyWatch = null;
              }
              traverseScopesLoop:
                do {
                  // "traverse the scopes" loop
                  if (watchers = current.$$watchers) {
                    // process our watches
                    length = watchers.length;
                    while (length--) {
                      try {
                        watch = watchers[length];
                        // Most common watches are on primitives, in which case we can short
                        // circuit it with === operator, only when === fails do we use .equals
                        if (watch) {
                          if ((value = watch.get(current)) !== (last = watch.last) && !(watch.eq ? equals(value, last) : typeof value === 'number' && typeof last === 'number' && isNaN(value) && isNaN(last))) {
                            dirty = true;
                            lastDirtyWatch = watch;
                            watch.last = watch.eq ? copy(value, null) : value;
                            watch.fn(value, last === initWatchVal ? value : last, current);
                            if (ttl < 5) {
                              logIdx = 4 - ttl;
                              if (!watchLog[logIdx])
                                watchLog[logIdx] = [];
                              logMsg = isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp;
                              logMsg += '; newVal: ' + toJson(value) + '; oldVal: ' + toJson(last);
                              watchLog[logIdx].push(logMsg);
                            }
                          } else if (watch === lastDirtyWatch) {
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.
                            dirty = false;
                            break traverseScopesLoop;
                          }
                        }
                      } catch (e) {
                        clearPhase();
                        $exceptionHandler(e);
                      }
                    }
                  }
                  // Insanity Warning: scope depth-first traversal
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!
                  // this piece should be kept in sync with the traversal in $broadcast
                  if (!(next = current.$$childHead || current !== target && current.$$nextSibling)) {
                    while (current !== target && !(next = current.$$nextSibling)) {
                      current = current.$parent;
                    }
                  }
                } while (current = next);
              // `break traverseScopesLoop;` takes us to here
              if ((dirty || asyncQueue.length) && !ttl--) {
                clearPhase();
                throw $rootScopeMinErr('infdig', '{0} $digest() iterations reached. Aborting!\n' + 'Watchers fired in the last 5 iterations: {1}', TTL, toJson(watchLog));
              }
            } while (dirty || asyncQueue.length);
            clearPhase();
            while (postDigestQueue.length) {
              try {
                postDigestQueue.shift()();
              } catch (e) {
                $exceptionHandler(e);
              }
            }
          },
          $destroy: function () {
            // we can't destroy the root scope or a scope that has been already destroyed
            if (this.$$destroyed)
              return;
            var parent = this.$parent;
            this.$broadcast('$destroy');
            this.$$destroyed = true;
            if (this === $rootScope)
              return;
            forEach(this.$$listenerCount, bind(null, decrementListenerCount, this));
            // sever all the references to parent scopes (after this cleanup, the current scope should
            // not be retained by any of our references and should be eligible for garbage collection)
            if (parent.$$childHead == this)
              parent.$$childHead = this.$$nextSibling;
            if (parent.$$childTail == this)
              parent.$$childTail = this.$$prevSibling;
            if (this.$$prevSibling)
              this.$$prevSibling.$$nextSibling = this.$$nextSibling;
            if (this.$$nextSibling)
              this.$$nextSibling.$$prevSibling = this.$$prevSibling;
            // All of the code below is bogus code that works around V8's memory leak via optimized code
            // and inline caches.
            //
            // see:
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = this.$root = null;
            // don't reset these to null in case some async task tries to register a listener/watch/task
            this.$$listeners = {};
            this.$$watchers = this.$$asyncQueue = this.$$postDigestQueue = [];
            // prevent NPEs since these methods have references to properties we nulled out
            this.$destroy = this.$digest = this.$apply = noop;
            this.$on = this.$watch = function () {
              return noop;
            };
          },
          $eval: function (expr, locals) {
            return $parse(expr)(this, locals);
          },
          $evalAsync: function (expr) {
            // if we are outside of an $digest loop and this is the first time we are scheduling async
            // task also schedule async auto-flush
            if (!$rootScope.$$phase && !$rootScope.$$asyncQueue.length) {
              $browser.defer(function () {
                if ($rootScope.$$asyncQueue.length) {
                  $rootScope.$digest();
                }
              });
            }
            this.$$asyncQueue.push({
              scope: this,
              expression: expr
            });
          },
          $$postDigest: function (fn) {
            this.$$postDigestQueue.push(fn);
          },
          $apply: function (expr) {
            try {
              beginPhase('$apply');
              return this.$eval(expr);
            } catch (e) {
              $exceptionHandler(e);
            } finally {
              clearPhase();
              try {
                $rootScope.$digest();
              } catch (e) {
                $exceptionHandler(e);
                throw e;
              }
            }
          },
          $on: function (name, listener) {
            var namedListeners = this.$$listeners[name];
            if (!namedListeners) {
              this.$$listeners[name] = namedListeners = [];
            }
            namedListeners.push(listener);
            var current = this;
            do {
              if (!current.$$listenerCount[name]) {
                current.$$listenerCount[name] = 0;
              }
              current.$$listenerCount[name]++;
            } while (current = current.$parent);
            var self = this;
            return function () {
              namedListeners[indexOf(namedListeners, listener)] = null;
              decrementListenerCount(self, 1, name);
            };
          },
          $emit: function (name, args) {
            var empty = [], namedListeners, scope = this, stopPropagation = false, event = {
                name: name,
                targetScope: scope,
                stopPropagation: function () {
                  stopPropagation = true;
                },
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), i, length;
            do {
              namedListeners = scope.$$listeners[name] || empty;
              event.currentScope = scope;
              for (i = 0, length = namedListeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!namedListeners[i]) {
                  namedListeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  //allow all listeners attached to the current scope to run
                  namedListeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              //if any listener on the current scope stops propagation, prevent bubbling
              if (stopPropagation)
                return event;
              //traverse upwards
              scope = scope.$parent;
            } while (scope);
            return event;
          },
          $broadcast: function (name, args) {
            var target = this, current = target, next = target, event = {
                name: name,
                targetScope: target,
                preventDefault: function () {
                  event.defaultPrevented = true;
                },
                defaultPrevented: false
              }, listenerArgs = concat([event], arguments, 1), listeners, i, length;
            //down while you can, then up and next sibling or up and next sibling until back at root
            while (current = next) {
              event.currentScope = current;
              listeners = current.$$listeners[name] || [];
              for (i = 0, length = listeners.length; i < length; i++) {
                // if listeners were deregistered, defragment the array
                if (!listeners[i]) {
                  listeners.splice(i, 1);
                  i--;
                  length--;
                  continue;
                }
                try {
                  listeners[i].apply(null, listenerArgs);
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
              // Insanity Warning: scope depth-first traversal
              // yes, this code is a bit crazy, but it works and we have tests to prove it!
              // this piece should be kept in sync with the traversal in $digest
              // (though it differs due to having the extra check for $$listenerCount)
              if (!(next = current.$$listenerCount[name] && current.$$childHead || current !== target && current.$$nextSibling)) {
                while (current !== target && !(next = current.$$nextSibling)) {
                  current = current.$parent;
                }
              }
            }
            return event;
          }
        };
        var $rootScope = new Scope();
        return $rootScope;
        function beginPhase(phase) {
          if ($rootScope.$$phase) {
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
          }
          $rootScope.$$phase = phase;
        }
        function clearPhase() {
          $rootScope.$$phase = null;
        }
        function compileToFn(exp, name) {
          var fn = $parse(exp);
          assertArgFn(fn, name);
          return fn;
        }
        function decrementListenerCount(current, count, name) {
          do {
            current.$$listenerCount[name] -= count;
            if (current.$$listenerCount[name] === 0) {
              delete current.$$listenerCount[name];
            }
          } while (current = current.$parent);
        }
        /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
        function initWatchVal() {
        }
      }
    ];
  }
  /**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
  function $$SanitizeUriProvider() {
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/, imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file):|data:image\/)/;
    /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.aHrefSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        aHrefSanitizationWhitelist = regexp;
        return this;
      }
      return aHrefSanitizationWhitelist;
    };
    /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
    this.imgSrcSanitizationWhitelist = function (regexp) {
      if (isDefined(regexp)) {
        imgSrcSanitizationWhitelist = regexp;
        return this;
      }
      return imgSrcSanitizationWhitelist;
    };
    this.$get = function () {
      return function sanitizeUri(uri, isImage) {
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
        var normalizedVal;
        // NOTE: urlResolve() doesn't support IE < 8 so we don't sanitize for that case.
        if (!msie || msie >= 8) {
          normalizedVal = urlResolve(uri).href;
          if (normalizedVal !== '' && !normalizedVal.match(regex)) {
            return 'unsafe:' + normalizedVal;
          }
        }
        return uri;
      };
    };
  }
  var $sceMinErr = minErr('$sce');
  var SCE_CONTEXTS = {
      HTML: 'html',
      CSS: 'css',
      URL: 'url',
      RESOURCE_URL: 'resourceUrl',
      JS: 'js'
    };
  // Helper functions follow.
  // Copied from:
  // http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962
  // Prereq: s is a string.
  function escapeForRegexp(s) {
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').replace(/\x08/g, '\\x08');
  }
  function adjustMatcher(matcher) {
    if (matcher === 'self') {
      return matcher;
    } else if (isString(matcher)) {
      // Strings match exactly except for 2 wildcards - '*' and '**'.
      // '*' matches any character except those from the set ':/.?&'.
      // '**' matches any character (like .* in a RegExp).
      // More than 2 *'s raises an error as it's ill defined.
      if (matcher.indexOf('***') > -1) {
        throw $sceMinErr('iwcard', 'Illegal sequence *** in string matcher.  String: {0}', matcher);
      }
      matcher = escapeForRegexp(matcher).replace('\\*\\*', '.*').replace('\\*', '[^:/.?&;]*');
      return new RegExp('^' + matcher + '$');
    } else if (isRegExp(matcher)) {
      // The only other type of matcher allowed is a Regexp.
      // Match entire URL / disallow partial matches.
      // Flags are reset (i.e. no global, ignoreCase or multiline)
      return new RegExp('^' + matcher.source + '$');
    } else {
      throw $sceMinErr('imatcher', 'Matchers may only be "self", string patterns or RegExp objects');
    }
  }
  function adjustMatchers(matchers) {
    var adjustedMatchers = [];
    if (isDefined(matchers)) {
      forEach(matchers, function (matcher) {
        adjustedMatchers.push(adjustMatcher(matcher));
      });
    }
    return adjustedMatchers;
  }
  /**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */
  /**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */
  function $SceDelegateProvider() {
    this.SCE_CONTEXTS = SCE_CONTEXTS;
    // Resource URLs can also be trusted by policy.
    var resourceUrlWhitelist = ['self'], resourceUrlBlacklist = [];
    /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
    this.resourceUrlWhitelist = function (value) {
      if (arguments.length) {
        resourceUrlWhitelist = adjustMatchers(value);
      }
      return resourceUrlWhitelist;
    };
    /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */
    this.resourceUrlBlacklist = function (value) {
      if (arguments.length) {
        resourceUrlBlacklist = adjustMatchers(value);
      }
      return resourceUrlBlacklist;
    };
    this.$get = [
      '$injector',
      function ($injector) {
        var htmlSanitizer = function htmlSanitizer(html) {
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        };
        if ($injector.has('$sanitize')) {
          htmlSanitizer = $injector.get('$sanitize');
        }
        function matchUrl(matcher, parsedUrl) {
          if (matcher === 'self') {
            return urlIsSameOrigin(parsedUrl);
          } else {
            // definitely a regex.  See adjustMatchers()
            return !!matcher.exec(parsedUrl.href);
          }
        }
        function isResourceUrlAllowedByPolicy(url) {
          var parsedUrl = urlResolve(url.toString());
          var i, n, allowed = false;
          // Ensure that at least one item from the whitelist allows this url.
          for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
            if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
              allowed = true;
              break;
            }
          }
          if (allowed) {
            // Ensure that no item from the blacklist blocked this url.
            for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
              if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
                allowed = false;
                break;
              }
            }
          }
          return allowed;
        }
        function generateHolderType(Base) {
          var holderType = function TrustedValueHolderType(trustedValue) {
            this.$$unwrapTrustedValue = function () {
              return trustedValue;
            };
          };
          if (Base) {
            holderType.prototype = new Base();
          }
          holderType.prototype.valueOf = function sceValueOf() {
            return this.$$unwrapTrustedValue();
          };
          holderType.prototype.toString = function sceToString() {
            return this.$$unwrapTrustedValue().toString();
          };
          return holderType;
        }
        var trustedValueHolderBase = generateHolderType(), byType = {};
        byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
        byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
        /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
        function trustAs(type, trustedValue) {
          var Constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (!Constructor) {
            throw $sceMinErr('icontext', 'Attempted to trust a value in invalid context. Context: {0}; Value: {1}', type, trustedValue);
          }
          if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
            return trustedValue;
          }
          // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
          // mutable objects, we ensure here that the value passed in is actually a string.
          if (typeof trustedValue !== 'string') {
            throw $sceMinErr('itype', 'Attempted to trust a non-string value in a content requiring a string: Context: {0}', type);
          }
          return new Constructor(trustedValue);
        }
        /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
        function valueOf(maybeTrusted) {
          if (maybeTrusted instanceof trustedValueHolderBase) {
            return maybeTrusted.$$unwrapTrustedValue();
          } else {
            return maybeTrusted;
          }
        }
        /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
        function getTrusted(type, maybeTrusted) {
          if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
            return maybeTrusted;
          }
          var constructor = byType.hasOwnProperty(type) ? byType[type] : null;
          if (constructor && maybeTrusted instanceof constructor) {
            return maybeTrusted.$$unwrapTrustedValue();
          }
          // If we get here, then we may only take one of two actions.
          // 1. sanitize the value for the requested type, or
          // 2. throw an exception.
          if (type === SCE_CONTEXTS.RESOURCE_URL) {
            if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
              return maybeTrusted;
            } else {
              throw $sceMinErr('insecurl', 'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}', maybeTrusted.toString());
            }
          } else if (type === SCE_CONTEXTS.HTML) {
            return htmlSanitizer(maybeTrusted);
          }
          throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
        }
        return {
          trustAs: trustAs,
          getTrusted: getTrusted,
          valueOf: valueOf
        };
      }
    ];
  }
  /**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */
  /* jshint maxlen: false*/
  /**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE8 in quirks mode is not supported.  In this mode, IE8 allows
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parse $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead for the developer?
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="myAppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   var mySceApp = angular.module('mySceApp', ['ngSanitize']);
 *
 *   mySceApp.controller("myAppController", function myAppController($http, $templateCache, $sce) {
 *     var self = this;
 *     $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *       self.userComments = userComments;
 *     });
 *     self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *         '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *         'sanitization.&quot;">Hover over this text.</span>');
 *   });
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
  /* jshint maxlen: 100 */
  function $SceProvider() {
    var enabled = true;
    /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
    this.enabled = function (value) {
      if (arguments.length) {
        enabled = !!value;
      }
      return enabled;
    };
    /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */
    this.$get = [
      '$parse',
      '$sniffer',
      '$sceDelegate',
      function ($parse, $sniffer, $sceDelegate) {
        // Prereq: Ensure that we're not running in IE8 quirks mode.  In that mode, IE allows
        // the "expression(javascript expression)" syntax which is insecure.
        if (enabled && $sniffer.msie && $sniffer.msieDocumentMode < 8) {
          throw $sceMinErr('iequirks', 'Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks ' + 'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' + 'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
        }
        var sce = shallowCopy(SCE_CONTEXTS);
        /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
        sce.isEnabled = function () {
          return enabled;
        };
        sce.trustAs = $sceDelegate.trustAs;
        sce.getTrusted = $sceDelegate.getTrusted;
        sce.valueOf = $sceDelegate.valueOf;
        if (!enabled) {
          sce.trustAs = sce.getTrusted = function (type, value) {
            return value;
          };
          sce.valueOf = identity;
        }
        /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        sce.parseAs = function sceParseAs(type, expr) {
          var parsed = $parse(expr);
          if (parsed.literal && parsed.constant) {
            return parsed;
          } else {
            return function sceParseAsTrusted(self, locals) {
              return sce.getTrusted(type, parsed(self, locals));
            };
          }
        };
        /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */
        /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parse `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
        // Shorthand delegations.
        var parse = sce.parseAs, getTrusted = sce.getTrusted, trustAs = sce.trustAs;
        forEach(SCE_CONTEXTS, function (enumValue, name) {
          var lName = lowercase(name);
          sce[camelCase('parse_as_' + lName)] = function (expr) {
            return parse(enumValue, expr);
          };
          sce[camelCase('get_trusted_' + lName)] = function (value) {
            return getTrusted(enumValue, value);
          };
          sce[camelCase('trust_as_' + lName)] = function (value) {
            return trustAs(enumValue, value);
          };
        });
        return sce;
      }
    ];
  }
  /**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} hashchange Does the browser support hashchange event ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
  function $SnifferProvider() {
    this.$get = [
      '$window',
      '$document',
      function ($window, $document) {
        var eventSupport = {}, android = int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]), boxee = /Boxee/i.test(($window.navigator || {}).userAgent), document = $document[0] || {}, documentMode = document.documentMode, vendorPrefix, vendorRegex = /^(Moz|webkit|O|ms)(?=[A-Z])/, bodyStyle = document.body && document.body.style, transitions = false, animations = false, match;
        if (bodyStyle) {
          for (var prop in bodyStyle) {
            if (match = vendorRegex.exec(prop)) {
              vendorPrefix = match[0];
              vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
              break;
            }
          }
          if (!vendorPrefix) {
            vendorPrefix = 'WebkitOpacity' in bodyStyle && 'webkit';
          }
          transitions = !!('transition' in bodyStyle || vendorPrefix + 'Transition' in bodyStyle);
          animations = !!('animation' in bodyStyle || vendorPrefix + 'Animation' in bodyStyle);
          if (android && (!transitions || !animations)) {
            transitions = isString(document.body.style.webkitTransition);
            animations = isString(document.body.style.webkitAnimation);
          }
        }
        return {
          history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
          hashchange: 'onhashchange' in $window && (!documentMode || documentMode > 7),
          hasEvent: function (event) {
            // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
            // it. In particular the event is not fired when backspace or delete key are pressed or
            // when cut operation is performed.
            if (event == 'input' && msie == 9)
              return false;
            if (isUndefined(eventSupport[event])) {
              var divElm = document.createElement('div');
              eventSupport[event] = 'on' + event in divElm;
            }
            return eventSupport[event];
          },
          csp: csp(),
          vendorPrefix: vendorPrefix,
          transitions: transitions,
          animations: animations,
          android: android,
          msie: msie,
          msieDocumentMode: documentMode
        };
      }
    ];
  }
  function $TimeoutProvider() {
    this.$get = [
      '$rootScope',
      '$browser',
      '$q',
      '$exceptionHandler',
      function ($rootScope, $browser, $q, $exceptionHandler) {
        var deferreds = {};
        /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
        function timeout(fn, delay, invokeApply) {
          var deferred = $q.defer(), promise = deferred.promise, skipApply = isDefined(invokeApply) && !invokeApply, timeoutId;
          timeoutId = $browser.defer(function () {
            try {
              deferred.resolve(fn());
            } catch (e) {
              deferred.reject(e);
              $exceptionHandler(e);
            } finally {
              delete deferreds[promise.$$timeoutId];
            }
            if (!skipApply)
              $rootScope.$apply();
          }, delay);
          promise.$$timeoutId = timeoutId;
          deferreds[timeoutId] = deferred;
          return promise;
        }
        /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
        timeout.cancel = function (promise) {
          if (promise && promise.$$timeoutId in deferreds) {
            deferreds[promise.$$timeoutId].reject('canceled');
            delete deferreds[promise.$$timeoutId];
            return $browser.defer.cancel(promise.$$timeoutId);
          }
          return false;
        };
        return timeout;
      }
    ];
  }
  // NOTE:  The usage of window and document instead of $window and $document here is
  // deliberate.  This service depends on the specific behavior of anchor nodes created by the
  // browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
  // cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
  // doesn't know about mocked locations and resolves URLs to the real document - which is
  // exactly the behavior needed here.  There is little value is mocking these out for this
  // service.
  var urlParsingNode = document.createElement('a');
  var originUrl = urlResolve(window.location.href, true);
  /**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
  function urlResolve(url, base) {
    var href = url;
    if (msie) {
      // Normalize before parse.  Refer Implementation Notes on why this is
      // done in two steps on IE.
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute('href', href);
    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }
  /**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
  function urlIsSameOrigin(requestUrl) {
    var parsed = isString(requestUrl) ? urlResolve(requestUrl) : requestUrl;
    return parsed.protocol === originUrl.protocol && parsed.host === originUrl.host;
  }
  /**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function ($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
  function $WindowProvider() {
    this.$get = valueFn(window);
  }
  /* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */
  /**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */
  /**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
  $FilterProvider.$inject = ['$provide'];
  function $FilterProvider($provide) {
    var suffix = 'Filter';
    /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
    function register(name, factory) {
      if (isObject(name)) {
        var filters = {};
        forEach(name, function (filter, key) {
          filters[key] = register(key, filter);
        });
        return filters;
      } else {
        return $provide.factory(name + suffix, factory);
      }
    }
    this.register = register;
    this.$get = [
      '$injector',
      function ($injector) {
        return function (name) {
          return $injector.get(name + suffix);
        };
      }
    ];
    ////////////////////////////////////////
    /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */
    register('currency', currencyFilter);
    register('date', dateFilter);
    register('filter', filterFilter);
    register('json', jsonFilter);
    register('limitTo', limitToFilter);
    register('lowercase', lowercaseFilter);
    register('number', numberFilter);
    register('orderBy', orderByFilter);
    register('uppercase', uppercaseFilter);
  }
  /**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is evaluated as an expression and the resulting value is used for substring match against
 *     the contents of the `array`. All strings or objects with string properties in `array` that contain this string
 *     will be returned. The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object. That's equivalent to the simple substring match with a `string`
 *     as described above. The predicate can be negated by prefixing the string with `!`.
 *     For Example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *   - `function(value)`: A predicate function can be used to write arbitrary filters. The function is
 *     called for each element of `array`. The final result is an array of those elements that
 *     the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if the item should be included in filtered result.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(expected, actual)}`.
 *     this is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
  function filterFilter() {
    return function (array, expression, comparator) {
      if (!isArray(array))
        return array;
      var comparatorType = typeof comparator, predicates = [];
      predicates.check = function (value) {
        for (var j = 0; j < predicates.length; j++) {
          if (!predicates[j](value)) {
            return false;
          }
        }
        return true;
      };
      if (comparatorType !== 'function') {
        if (comparatorType === 'boolean' && comparator) {
          comparator = function (obj, text) {
            return angular.equals(obj, text);
          };
        } else {
          comparator = function (obj, text) {
            if (obj && text && typeof obj === 'object' && typeof text === 'object') {
              for (var objKey in obj) {
                if (objKey.charAt(0) !== '$' && hasOwnProperty.call(obj, objKey) && comparator(obj[objKey], text[objKey])) {
                  return true;
                }
              }
              return false;
            }
            text = ('' + text).toLowerCase();
            return ('' + obj).toLowerCase().indexOf(text) > -1;
          };
        }
      }
      var search = function (obj, text) {
        if (typeof text == 'string' && text.charAt(0) === '!') {
          return !search(obj, text.substr(1));
        }
        switch (typeof obj) {
        case 'boolean':
        case 'number':
        case 'string':
          return comparator(obj, text);
        case 'object':
          switch (typeof text) {
          case 'object':
            return comparator(obj, text);
          default:
            for (var objKey in obj) {
              if (objKey.charAt(0) !== '$' && search(obj[objKey], text)) {
                return true;
              }
            }
            break;
          }
          return false;
        case 'array':
          for (var i = 0; i < obj.length; i++) {
            if (search(obj[i], text)) {
              return true;
            }
          }
          return false;
        default:
          return false;
        }
      };
      switch (typeof expression) {
      case 'boolean':
      case 'number':
      case 'string':
        // Set up expression object and fall through
        expression = { $: expression };
      // jshint -W086
      case 'object':
        // jshint +W086
        for (var key in expression) {
          (function (path) {
            if (typeof expression[path] === 'undefined')
              return;
            predicates.push(function (value) {
              return search(path == '$' ? value : value && value[path], expression[path]);
            });
          }(key));
        }
        break;
      case 'function':
        predicates.push(expression);
        break;
      default:
        return array;
      }
      var filtered = [];
      for (var j = 0; j < array.length; j++) {
        var value = array[j];
        if (predicates.check(value)) {
          filtered.push(value);
        }
      }
      return filtered;
    };
  }
  /**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span>{{amount | currency:"USD$"}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('USD$1,234.56');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.binding('amount | currency:"USD$"')).getText()).toBe('(USD$1,234.00)');
       });
     </file>
   </example>
 */
  currencyFilter.$inject = ['$locale'];
  function currencyFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (amount, currencySymbol) {
      if (isUndefined(currencySymbol))
        currencySymbol = formats.CURRENCY_SYM;
      return formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, 2).replace(/\u00A4/g, currencySymbol);
    };
  }
  /**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */
  numberFilter.$inject = ['$locale'];
  function numberFilter($locale) {
    var formats = $locale.NUMBER_FORMATS;
    return function (number, fractionSize) {
      return formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize);
    };
  }
  var DECIMAL_SEP = '.';
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
    if (number == null || !isFinite(number) || isObject(number))
      return '';
    var isNegative = number < 0;
    number = Math.abs(number);
    var numStr = number + '', formatedText = '', parts = [];
    var hasExponent = false;
    if (numStr.indexOf('e') !== -1) {
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {
        numStr = '0';
        number = 0;
      } else {
        formatedText = numStr;
        hasExponent = true;
      }
    }
    if (!hasExponent) {
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;
      // determine fractionSize if it is not specified
      if (isUndefined(fractionSize)) {
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
      }
      // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
      // inspired by:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
      number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);
      if (number === 0) {
        isNegative = false;
      }
      var fraction = ('' + number).split(DECIMAL_SEP);
      var whole = fraction[0];
      fraction = fraction[1] || '';
      var i, pos = 0, lgroup = pattern.lgSize, group = pattern.gSize;
      if (whole.length >= lgroup + group) {
        pos = whole.length - lgroup;
        for (i = 0; i < pos; i++) {
          if ((pos - i) % group === 0 && i !== 0) {
            formatedText += groupSep;
          }
          formatedText += whole.charAt(i);
        }
      }
      for (i = pos; i < whole.length; i++) {
        if ((whole.length - i) % lgroup === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
      // format fraction part.
      while (fraction.length < fractionSize) {
        fraction += '0';
      }
      if (fractionSize && fractionSize !== '0')
        formatedText += decimalSep + fraction.substr(0, fractionSize);
    } else {
      if (fractionSize > 0 && number > -1 && number < 1) {
        formatedText = number.toFixed(fractionSize);
      }
    }
    parts.push(isNegative ? pattern.negPre : pattern.posPre);
    parts.push(formatedText);
    parts.push(isNegative ? pattern.negSuf : pattern.posSuf);
    return parts.join('');
  }
  function padNumber(num, digits, trim) {
    var neg = '';
    if (num < 0) {
      neg = '-';
      num = -num;
    }
    num = '' + num;
    while (num.length < digits)
      num = '0' + num;
    if (trim)
      num = num.substr(num.length - digits);
    return neg + num;
  }
  function dateGetter(name, size, offset, trim) {
    offset = offset || 0;
    return function (date) {
      var value = date['get' + name]();
      if (offset > 0 || value > -offset)
        value += offset;
      if (value === 0 && offset == -12)
        value = 12;
      return padNumber(value, size, trim);
    };
  }
  function dateStrGetter(name, shortForm) {
    return function (date, formats) {
      var value = date['get' + name]();
      var get = uppercase(shortForm ? 'SHORT' + name : name);
      return formats[get][value];
    };
  }
  function timeZoneGetter(date) {
    var zone = -1 * date.getTimezoneOffset();
    var paddedZone = zone >= 0 ? '+' : '';
    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) + padNumber(Math.abs(zone % 60), 2);
    return paddedZone;
  }
  function ampmGetter(date, formats) {
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
  }
  var DATE_FORMATS = {
      yyyy: dateGetter('FullYear', 4),
      yy: dateGetter('FullYear', 2, 0, true),
      y: dateGetter('FullYear', 1),
      MMMM: dateStrGetter('Month'),
      MMM: dateStrGetter('Month', true),
      MM: dateGetter('Month', 2, 1),
      M: dateGetter('Month', 1, 1),
      dd: dateGetter('Date', 2),
      d: dateGetter('Date', 1),
      HH: dateGetter('Hours', 2),
      H: dateGetter('Hours', 1),
      hh: dateGetter('Hours', 2, -12),
      h: dateGetter('Hours', 1, -12),
      mm: dateGetter('Minutes', 2),
      m: dateGetter('Minutes', 1),
      ss: dateGetter('Seconds', 2),
      s: dateGetter('Seconds', 1),
      sss: dateGetter('Milliseconds', 3),
      EEEE: dateStrGetter('Day'),
      EEE: dateStrGetter('Day', true),
      a: ampmGetter,
      Z: timeZoneGetter
    };
  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZE']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z))(.*)/, NUMBER_STRING = /^\-?\d+$/;
  /**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in am/pm, padded (01-12)
 *   * `'h'`: Hour in am/pm, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'.sss' or ',sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: am/pm marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 pm)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 pm)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d,y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 pm)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 pm)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
  dateFilter.$inject = ['$locale'];
  function dateFilter($locale) {
    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    // 1        2       3         4          5          6          7          8  9     10      11
    function jsonStringToDate(string) {
      var match;
      if (match = string.match(R_ISO8601_STR)) {
        var date = new Date(0), tzHour = 0, tzMin = 0, dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear, timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
          tzHour = int(match[9] + match[10]);
          tzMin = int(match[9] + match[11]);
        }
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
        var h = int(match[4] || 0) - tzHour;
        var m = int(match[5] || 0) - tzMin;
        var s = int(match[6] || 0);
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
      }
      return string;
    }
    return function (date, format) {
      var text = '', parts = [], fn, match;
      format = format || 'mediumDate';
      format = $locale.DATETIME_FORMATS[format] || format;
      if (isString(date)) {
        date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
      }
      if (isNumber(date)) {
        date = new Date(date);
      }
      if (!isDate(date)) {
        return date;
      }
      while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
          parts = concat(parts, match, 1);
          format = parts.pop();
        } else {
          parts.push(format);
          format = null;
        }
      }
      forEach(parts, function (value) {
        fn = DATE_FORMATS[value];
        text += fn ? fn(date, $locale.DATETIME_FORMATS) : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
      });
      return text;
    };
  }
  /**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre>{{ {'name':'value'} | json }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.binding("{'name':'value'}")).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
  function jsonFilter() {
    return function (object) {
      return toJson(object, true);
    };
  }
  /**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
  var lowercaseFilter = valueFn(lowercase);
  /**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
  var uppercaseFilter = valueFn(uppercase);
  /**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array or string, as specified by
 * the value and sign (positive or negative) of `limit`.
 *
 * @param {Array|string} input Source array or string to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
       });
     </file>
   </example>
 */
  function limitToFilter() {
    return function (input, limit) {
      if (!isArray(input) && !isString(input))
        return input;
      if (Math.abs(Number(limit)) === Infinity) {
        limit = Number(limit);
      } else {
        limit = int(limit);
      }
      if (isString(input)) {
        //NaN check on limit
        if (limit) {
          return limit >= 0 ? input.slice(0, limit) : input.slice(limit, input.length);
        } else {
          return '';
        }
      }
      var out = [], i, n;
      // if abs(limit) exceeds maximum length, trim it
      if (limit > input.length)
        limit = input.length;
      else if (limit < -input.length)
        limit = -input.length;
      if (limit > 0) {
        i = 0;
        n = limit;
      } else {
        i = input.length + limit;
        n = input.length;
      }
      for (; i < n; i++) {
        out.push(input[i]);
      }
      return out;
    };
  }
  /**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `=`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`).
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
  orderByFilter.$inject = ['$parse'];
  function orderByFilter($parse) {
    return function (array, sortPredicate, reverseOrder) {
      if (!isArrayLike(array))
        return array;
      if (!sortPredicate)
        return array;
      sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
      sortPredicate = map(sortPredicate, function (predicate) {
        var descending = false, get = predicate || identity;
        if (isString(predicate)) {
          if (predicate.charAt(0) == '+' || predicate.charAt(0) == '-') {
            descending = predicate.charAt(0) == '-';
            predicate = predicate.substring(1);
          }
          get = $parse(predicate);
          if (get.constant) {
            var key = get();
            return reverseComparator(function (a, b) {
              return compare(a[key], b[key]);
            }, descending);
          }
        }
        return reverseComparator(function (a, b) {
          return compare(get(a), get(b));
        }, descending);
      });
      var arrayCopy = [];
      for (var i = 0; i < array.length; i++) {
        arrayCopy.push(array[i]);
      }
      return arrayCopy.sort(reverseComparator(comparator, reverseOrder));
      function comparator(o1, o2) {
        for (var i = 0; i < sortPredicate.length; i++) {
          var comp = sortPredicate[i](o1, o2);
          if (comp !== 0)
            return comp;
        }
        return 0;
      }
      function reverseComparator(comp, descending) {
        return toBoolean(descending) ? function (a, b) {
          return comp(b, a);
        } : comp;
      }
      function compare(v1, v2) {
        var t1 = typeof v1;
        var t2 = typeof v2;
        if (t1 == t2) {
          if (isDate(v1) && isDate(v2)) {
            v1 = v1.valueOf();
            v2 = v2.valueOf();
          }
          if (t1 == 'string') {
            v1 = v1.toLowerCase();
            v2 = v2.toLowerCase();
          }
          if (v1 === v2)
            return 0;
          return v1 < v2 ? -1 : 1;
        } else {
          return t1 < t2 ? -1 : 1;
        }
      }
    };
  }
  function ngDirective(directive) {
    if (isFunction(directive)) {
      directive = { link: directive };
    }
    directive.restrict = directive.restrict || 'AC';
    return valueFn(directive);
  }
  /**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
  var htmlAnchorDirective = valueFn({
      restrict: 'E',
      compile: function (element, attr) {
        if (msie <= 8) {
          // turn <a href ng-click="..">link</a> into a stylable link in IE
          // but only if it doesn't have name attribute, in which case it's an anchor
          if (!attr.href && !attr.name) {
            attr.$set('href', '');
          }
          // add a comment node to anchors to workaround IE bug that causes element content to be reset
          // to new attribute content if attribute is updated with value containing @ and element also
          // contains value with @
          // see issue #1949
          element.append(document.createComment('IE fix'));
        }
        if (!attr.href && !attr.xlinkHref && !attr.name) {
          return function (scope, element) {
            // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
            var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ? 'xlink:href' : 'href';
            element.on('click', function (event) {
              // if we have no href url, then don't navigate anywhere.
              if (!element.attr(href)) {
                event.preventDefault();
              }
            });
          };
        }
      }
    });
  /**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error.
 *
 * The `ngHref` directive solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */
  /**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */
  /**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */
  /**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * We shouldn't do this, because it will make the button enabled on Chrome/Firefox but not on IE8 and older IEs:
 * ```html
 * <div ng-init="scope = { isDisabled: false }">
 *  <button disabled="{{scope.isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as disabled. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngDisabled` directive solves this problem for the `disabled` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then special attribute "disabled" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */
  /**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */
  var ngAttributeAliasDirectives = {};
  // boolean attrs are evaluated
  forEach(BOOLEAN_ATTR, function (propName, attrName) {
    // binding to multiple is not supported
    if (propName == 'multiple')
      return;
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 100,
        link: function (scope, element, attr) {
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
            attr.$set(attrName, !!value);
          });
        }
      };
    };
  });
  // ng-src, ng-srcset, ng-href are interpolated
  forEach([
    'src',
    'srcset',
    'href'
  ], function (attrName) {
    var normalized = directiveNormalize('ng-' + attrName);
    ngAttributeAliasDirectives[normalized] = function () {
      return {
        priority: 99,
        link: function (scope, element, attr) {
          var propName = attrName, name = attrName;
          if (attrName === 'href' && toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
            name = 'xlinkHref';
            attr.$attr[name] = 'xlink:href';
            propName = null;
          }
          attr.$observe(normalized, function (value) {
            if (!value) {
              if (attrName === 'href') {
                attr.$set(name, null);
              }
              return;
            }
            attr.$set(name, value);
            // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
            // to set the property as well to achieve the desired effect.
            // we use attr[attrName] value since $set can sanitize the url.
            if (msie && propName)
              element.prop(propName, attr[name]);
          });
        }
      };
    };
  });
  /* global -nullFormCtrl */
  var nullFormCtrl = {
      $addControl: noop,
      $removeControl: noop,
      $setValidity: noop,
      $setDirty: noop,
      $setPristine: noop
    };
  /**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 *
 * @property {Object} $error Is an object hash, containing references to all invalid controls or
 *  forms, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that are invalid for given error name.
 *
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
  //asks for $scope to fool the BC controller module
  FormController.$inject = [
    '$element',
    '$attrs',
    '$scope',
    '$animate'
  ];
  function FormController(element, attrs, $scope, $animate) {
    var form = this, parentForm = element.parent().controller('form') || nullFormCtrl, invalidCount = 0,
      // used to easily determine if we are valid
      errors = form.$error = {}, controls = [];
    // init state
    form.$name = attrs.name || attrs.ngForm;
    form.$dirty = false;
    form.$pristine = true;
    form.$valid = true;
    form.$invalid = false;
    parentForm.$addControl(form);
    // Setup initial state of the control
    element.addClass(PRISTINE_CLASS);
    toggleValidCss(true);
    // convenience method for easy toggling of classes
    function toggleValidCss(isValid, validationErrorKey) {
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
      $animate.setClass(element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
    }
    /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
    form.$addControl = function (control) {
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
      // and not added to the scope.  Now we throw an error.
      assertNotHasOwnProperty(control.$name, 'input');
      controls.push(control);
      if (control.$name) {
        form[control.$name] = control;
      }
    };
    /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
    form.$removeControl = function (control) {
      if (control.$name && form[control.$name] === control) {
        delete form[control.$name];
      }
      forEach(errors, function (queue, validationToken) {
        form.$setValidity(validationToken, true, control);
      });
      arrayRemove(controls, control);
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
    form.$setValidity = function (validationToken, isValid, control) {
      var queue = errors[validationToken];
      if (isValid) {
        if (queue) {
          arrayRemove(queue, control);
          if (!queue.length) {
            invalidCount--;
            if (!invalidCount) {
              toggleValidCss(isValid);
              form.$valid = true;
              form.$invalid = false;
            }
            errors[validationToken] = false;
            toggleValidCss(true, validationToken);
            parentForm.$setValidity(validationToken, true, form);
          }
        }
      } else {
        if (!invalidCount) {
          toggleValidCss(isValid);
        }
        if (queue) {
          if (includes(queue, control))
            return;
        } else {
          errors[validationToken] = queue = [];
          invalidCount++;
          toggleValidCss(false, validationToken);
          parentForm.$setValidity(validationToken, false, form);
        }
        queue.push(control);
        form.$valid = false;
        form.$invalid = true;
      }
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
    form.$setDirty = function () {
      $animate.removeClass(element, PRISTINE_CLASS);
      $animate.addClass(element, DIRTY_CLASS);
      form.$dirty = true;
      form.$pristine = false;
      parentForm.$setDirty();
    };
    /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
    form.$setPristine = function () {
      $animate.removeClass(element, DIRTY_CLASS);
      $animate.addClass(element, PRISTINE_CLASS);
      form.$dirty = false;
      form.$pristine = true;
      forEach(controls, function (control) {
        control.$setPristine();
      });
    };
  }
  /**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */
  /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <tt>userType = {{userType}}</tt><br>
         <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>
         <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
  var formDirectiveFactory = function (isNgForm) {
    return [
      '$timeout',
      function ($timeout) {
        var formDirective = {
            name: 'form',
            restrict: isNgForm ? 'EAC' : 'E',
            controller: FormController,
            compile: function () {
              return {
                pre: function (scope, formElement, attr, controller) {
                  if (!attr.action) {
                    // we can't use jq events because if a form is destroyed during submission the default
                    // action is not prevented. see #1238
                    //
                    // IE 9 is not affected because it doesn't fire a submit event and try to do a full
                    // page reload if the form was destroyed by submission of the form via a click handler
                    // on a button in the form. Looks like an IE9 specific bug.
                    var preventDefaultListener = function (event) {
                      event.preventDefault ? event.preventDefault() : event.returnValue = false;  // IE
                    };
                    addEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                    // unregister the preventDefault listener so that we don't not leak memory but in a
                    // way that will achieve the prevention of the default action.
                    formElement.on('$destroy', function () {
                      $timeout(function () {
                        removeEventListenerFn(formElement[0], 'submit', preventDefaultListener);
                      }, 0, false);
                    });
                  }
                  var parentFormCtrl = formElement.parent().controller('form'), alias = attr.name || attr.ngForm;
                  if (alias) {
                    setter(scope, alias, controller, alias);
                  }
                  if (parentFormCtrl) {
                    formElement.on('$destroy', function () {
                      parentFormCtrl.$removeControl(controller);
                      if (alias) {
                        setter(scope, alias, undefined, alias);
                      }
                      extend(controller, nullFormCtrl);  //stop propagating child destruction handlers upwards
                    });
                  }
                }
              };
            }
          };
        return formDirective;
      }
    ];
  };
  var formDirective = formDirectiveFactory();
  var ngFormDirective = formDirectiveFactory(true);
  /* global VALID_CLASS: true,
    INVALID_CLASS: true,
    PRISTINE_CLASS: true,
    DIRTY_CLASS: true
*/
  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
  var inputType = {
      'text': textInputType,
      'number': numberInputType,
      'url': urlInputType,
      'email': emailInputType,
      'radio': radioInputType,
      'checkbox': checkboxInputType,
      'hidden': noop,
      'button': noop,
      'submit': noop,
      'reset': noop,
      'file': noop
    };
  // A helper function to call $setValidity and return the value / undefined,
  // a pattern that is repeated a lot in the input validation logic.
  function validate(ctrl, validatorName, validity, value) {
    ctrl.$setValidity(validatorName, validity);
    return validity ? value : undefined;
  }
  function testFlags(validity, flags) {
    var i, flag;
    if (flags) {
      for (i = 0; i < flags.length; ++i) {
        flag = flags[i];
        if (validity[flag]) {
          return true;
        }
      }
    }
    return false;
  }
  // Pass validity so that behaviour can be mocked easier.
  function addNativeHtml5Validators(ctrl, validatorName, badFlags, ignoreFlags, validity) {
    if (isObject(validity)) {
      ctrl.$$hasNativeValidators = true;
      var validator = function (value) {
        // Don't overwrite previous validation, don't consider valueMissing to apply (ng-required can
        // perform the required validation)
        if (!ctrl.$error[validatorName] && !testFlags(validity, ignoreFlags) && testFlags(validity, badFlags)) {
          ctrl.$setValidity(validatorName, false);
          return;
        }
        return value;
      };
      ctrl.$parsers.push(validator);
    }
  }
  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    var validity = element.prop(VALIDITY_STATE_PROPERTY);
    var placeholder = element[0].placeholder, noevent = {};
    var type = lowercase(element[0].type);
    ctrl.$$validityState = validity;
    // In composition mode, users are still inputing intermediate text buffer,
    // hold the listener until composition is done.
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
    if (!$sniffer.android) {
      var composing = false;
      element.on('compositionstart', function (data) {
        composing = true;
      });
      element.on('compositionend', function () {
        composing = false;
        listener();
      });
    }
    var listener = function (ev) {
      if (composing)
        return;
      var value = element.val();
      // IE (11 and under) seem to emit an 'input' event if the placeholder value changes.
      // We don't want to dirty the value when this happens, so we abort here. Unfortunately,
      // IE also sends input events for other non-input-related things, (such as focusing on a
      // form control), so this change is not entirely enough to solve this.
      if (msie && (ev || noevent).type === 'input' && element[0].placeholder !== placeholder) {
        placeholder = element[0].placeholder;
        return;
      }
      // By default we will trim the value
      // If the attribute ng-trim exists we will avoid trimming
      // If input type is 'password', the value is never trimmed
      if (type !== 'password' && toBoolean(attr.ngTrim || 'T')) {
        value = trim(value);
      }
      // If a control is suffering from bad input, browsers discard its value, so it may be
      // necessary to revalidate even if the control's value is the same empty value twice in
      // a row.
      var revalidate = validity && ctrl.$$hasNativeValidators;
      if (ctrl.$viewValue !== value || value === '' && revalidate) {
        if (scope.$root.$$phase) {
          ctrl.$setViewValue(value);
        } else {
          scope.$apply(function () {
            ctrl.$setViewValue(value);
          });
        }
      }
    };
    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
    // input event on backspace, delete or cut
    if ($sniffer.hasEvent('input')) {
      element.on('input', listener);
    } else {
      var timeout;
      var deferListener = function () {
        if (!timeout) {
          timeout = $browser.defer(function () {
            listener();
            timeout = null;
          });
        }
      };
      element.on('keydown', function (event) {
        var key = event.keyCode;
        // ignore
        //    command            modifiers                   arrows
        if (key === 91 || 15 < key && key < 19 || 37 <= key && key <= 40)
          return;
        deferListener();
      });
      // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
      if ($sniffer.hasEvent('paste')) {
        element.on('paste cut', deferListener);
      }
    }
    // if user paste into input using mouse on older browser
    // or form autocomplete on newer browser, we need "change" event to catch it
    element.on('change', listener);
    ctrl.$render = function () {
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
    };
    // pattern validator
    var pattern = attr.ngPattern, patternValidator, match;
    if (pattern) {
      var validateRegex = function (regexp, value) {
        return validate(ctrl, 'pattern', ctrl.$isEmpty(value) || regexp.test(value), value);
      };
      match = pattern.match(/^\/(.*)\/([gim]*)$/);
      if (match) {
        pattern = new RegExp(match[1], match[2]);
        patternValidator = function (value) {
          return validateRegex(pattern, value);
        };
      } else {
        patternValidator = function (value) {
          var patternObj = scope.$eval(pattern);
          if (!patternObj || !patternObj.test) {
            throw minErr('ngPattern')('noregexp', 'Expected {0} to be a RegExp but was {1}. Element: {2}', pattern, patternObj, startingTag(element));
          }
          return validateRegex(patternObj, value);
        };
      }
      ctrl.$formatters.push(patternValidator);
      ctrl.$parsers.push(patternValidator);
    }
    // min length validator
    if (attr.ngMinlength) {
      var minlength = int(attr.ngMinlength);
      var minLengthValidator = function (value) {
        return validate(ctrl, 'minlength', ctrl.$isEmpty(value) || value.length >= minlength, value);
      };
      ctrl.$parsers.push(minLengthValidator);
      ctrl.$formatters.push(minLengthValidator);
    }
    // max length validator
    if (attr.ngMaxlength) {
      var maxlength = int(attr.ngMaxlength);
      var maxLengthValidator = function (value) {
        return validate(ctrl, 'maxlength', ctrl.$isEmpty(value) || value.length <= maxlength, value);
      };
      ctrl.$parsers.push(maxLengthValidator);
      ctrl.$formatters.push(maxLengthValidator);
    }
  }
  var numberBadFlags = ['badInput'];
  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    ctrl.$parsers.push(function (value) {
      var empty = ctrl.$isEmpty(value);
      if (empty || NUMBER_REGEXP.test(value)) {
        ctrl.$setValidity('number', true);
        return value === '' ? null : empty ? value : parseFloat(value);
      } else {
        ctrl.$setValidity('number', false);
        return undefined;
      }
    });
    addNativeHtml5Validators(ctrl, 'number', numberBadFlags, null, ctrl.$$validityState);
    ctrl.$formatters.push(function (value) {
      return ctrl.$isEmpty(value) ? '' : '' + value;
    });
    if (attr.min) {
      var minValidator = function (value) {
        var min = parseFloat(attr.min);
        return validate(ctrl, 'min', ctrl.$isEmpty(value) || value >= min, value);
      };
      ctrl.$parsers.push(minValidator);
      ctrl.$formatters.push(minValidator);
    }
    if (attr.max) {
      var maxValidator = function (value) {
        var max = parseFloat(attr.max);
        return validate(ctrl, 'max', ctrl.$isEmpty(value) || value <= max, value);
      };
      ctrl.$parsers.push(maxValidator);
      ctrl.$formatters.push(maxValidator);
    }
    ctrl.$formatters.push(function (value) {
      return validate(ctrl, 'number', ctrl.$isEmpty(value) || isNumber(value), value);
    });
  }
  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var urlValidator = function (value) {
      return validate(ctrl, 'url', ctrl.$isEmpty(value) || URL_REGEXP.test(value), value);
    };
    ctrl.$formatters.push(urlValidator);
    ctrl.$parsers.push(urlValidator);
  }
  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
    textInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var emailValidator = function (value) {
      return validate(ctrl, 'email', ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value), value);
    };
    ctrl.$formatters.push(emailValidator);
    ctrl.$parsers.push(emailValidator);
  }
  function radioInputType(scope, element, attr, ctrl) {
    // make the name unique, if not defined
    if (isUndefined(attr.name)) {
      element.attr('name', nextUid());
    }
    element.on('click', function () {
      if (element[0].checked) {
        scope.$apply(function () {
          ctrl.$setViewValue(attr.value);
        });
      }
    });
    ctrl.$render = function () {
      var value = attr.value;
      element[0].checked = value == ctrl.$viewValue;
    };
    attr.$observe('value', ctrl.$render);
  }
  function checkboxInputType(scope, element, attr, ctrl) {
    var trueValue = attr.ngTrueValue, falseValue = attr.ngFalseValue;
    if (!isString(trueValue))
      trueValue = true;
    if (!isString(falseValue))
      falseValue = false;
    element.on('click', function () {
      scope.$apply(function () {
        ctrl.$setViewValue(element[0].checked);
      });
    });
    ctrl.$render = function () {
      element[0].checked = ctrl.$viewValue;
    };
    // Override the standard `$isEmpty` because a value of `false` means empty in a checkbox.
    ctrl.$isEmpty = function (value) {
      return value !== trueValue;
    };
    ctrl.$formatters.push(function (value) {
      return value === trueValue;
    });
    ctrl.$parsers.push(function (value) {
      return value ? trueValue : falseValue;
    });
  }
  /**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */
  /**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control with angular data-binding. Input control follows HTML5 input types
 * and polyfills the HTML5 validation behavior for older browsers.
 *
 * *NOTE* Not every feature offered is available for all input types.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.binding('{{user}}'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
  var inputDirective = [
      '$browser',
      '$sniffer',
      function ($browser, $sniffer) {
        return {
          restrict: 'E',
          require: '?ngModel',
          link: function (scope, element, attr, ctrl) {
            if (ctrl) {
              (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrl, $sniffer, $browser);
            }
          }
        };
      }
    ];
  var VALID_CLASS = 'ng-valid', INVALID_CLASS = 'ng-invalid', PRISTINE_CLASS = 'ng-pristine', DIRTY_CLASS = 'ng-dirty';
  /**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model, that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM.  Each function is called, in turn, passing the value
       through to the next. The last return value is used to populate the model.
       Used to sanitize / convert the value as well as validation. For validation,
       the parsers should update the validity state using
       {@link ngModel.NgModelController#$setValidity $setValidity()},
       and return `undefined` for invalid values.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. Each function is called, in turn, passing the value through to the
       next. Used to format / convert values for display in the control and validation.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all errors as keys.
 *
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 *
 * @description
 *
 * `NgModelController` provides API for the `ng-model` directive. The controller contains
 * services for data-binding, validation, CSS updates, and value formatting and parsing. It
 * purposefully does not contain any logic which deals with DOM rendering or listening to
 * DOM events. Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding.
 *
 * ## Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * Note that `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.  This will not work on older browsers.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if(!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$apply(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
  var NgModelController = [
      '$scope',
      '$exceptionHandler',
      '$attrs',
      '$element',
      '$parse',
      '$animate',
      function ($scope, $exceptionHandler, $attr, $element, $parse, $animate) {
        this.$viewValue = Number.NaN;
        this.$modelValue = Number.NaN;
        this.$parsers = [];
        this.$formatters = [];
        this.$viewChangeListeners = [];
        this.$pristine = true;
        this.$dirty = false;
        this.$valid = true;
        this.$invalid = false;
        this.$name = $attr.name;
        var ngModelGet = $parse($attr.ngModel), ngModelSet = ngModelGet.assign;
        if (!ngModelSet) {
          throw minErr('ngModel')('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}', $attr.ngModel, startingTag($element));
        }
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   */
        this.$render = noop;
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of the input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value Reference to check.
   * @returns {boolean} True if `value` is empty.
   */
        this.$isEmpty = function (value) {
          return isUndefined(value) || value === '' || value === null || value !== value;
        };
        var parentForm = $element.inheritedData('$formController') || nullFormCtrl, invalidCount = 0,
          // used to easily determine if we are valid
          $error = this.$error = {};
        // keep invalid keys here
        // Setup initial state of the control
        $element.addClass(PRISTINE_CLASS);
        toggleValidCss(true);
        // convenience method for easy toggling of classes
        function toggleValidCss(isValid, validationErrorKey) {
          validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
          $animate.removeClass($element, (isValid ? INVALID_CLASS : VALID_CLASS) + validationErrorKey);
          $animate.addClass($element, (isValid ? VALID_CLASS : INVALID_CLASS) + validationErrorKey);
        }
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notifies the form when the control changes validity. (i.e. it
   * does not notify form if given validator is already marked as invalid).
   *
   * This method should be called by validators - i.e. the parser or formatter functions.
   *
   * @param {string} validationErrorKey Name of the validator. the `validationErrorKey` will assign
   *        to `$error[validationErrorKey]=!isValid` so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true) or invalid (false).
   */
        this.$setValidity = function (validationErrorKey, isValid) {
          // Purposeful use of ! here to cast isValid to boolean in case it is undefined
          // jshint -W018
          if ($error[validationErrorKey] === !isValid)
            return;
          // jshint +W018
          if (isValid) {
            if ($error[validationErrorKey])
              invalidCount--;
            if (!invalidCount) {
              toggleValidCss(true);
              this.$valid = true;
              this.$invalid = false;
            }
          } else {
            toggleValidCss(false);
            this.$invalid = true;
            this.$valid = false;
            invalidCount++;
          }
          $error[validationErrorKey] = !isValid;
          toggleValidCss(isValid, validationErrorKey);
          parentForm.$setValidity(validationErrorKey, isValid, this);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the control to its pristine
   * state (ng-pristine class).
   */
        this.$setPristine = function () {
          this.$dirty = false;
          this.$pristine = true;
          $animate.removeClass($element, DIRTY_CLASS);
          $animate.addClass($element, PRISTINE_CLASS);
        };
        /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when the view value changes, typically from within a DOM event handler.
   * For example {@link ng.directive:input input} and
   * {@link ng.directive:select select} directives call it.
   *
   * It will update the $viewValue, then pass this value through each of the functions in `$parsers`,
   * which includes any validators. The value that comes out of this `$parsers` pipeline, be applied to
   * `$modelValue` and the **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   */
        this.$setViewValue = function (value) {
          this.$viewValue = value;
          // change to dirty
          if (this.$pristine) {
            this.$dirty = true;
            this.$pristine = false;
            $animate.removeClass($element, PRISTINE_CLASS);
            $animate.addClass($element, DIRTY_CLASS);
            parentForm.$setDirty();
          }
          forEach(this.$parsers, function (fn) {
            value = fn(value);
          });
          if (this.$modelValue !== value) {
            this.$modelValue = value;
            ngModelSet($scope, value);
            forEach(this.$viewChangeListeners, function (listener) {
              try {
                listener();
              } catch (e) {
                $exceptionHandler(e);
              }
            });
          }
        };
        // model -> value
        var ctrl = this;
        $scope.$watch(function ngModelWatch() {
          var value = ngModelGet($scope);
          // if scope model value and ngModel value are out of sync
          if (ctrl.$modelValue !== value) {
            var formatters = ctrl.$formatters, idx = formatters.length;
            ctrl.$modelValue = value;
            while (idx--) {
              value = formatters[idx](value);
            }
            if (ctrl.$viewValue !== value) {
              ctrl.$viewValue = value;
              ctrl.$render();
            }
          }
          return value;
        });
      }
    ];
  /**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [https://github.com/angular/angular.js/wiki/Understanding-Scopes]
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid` is set if the model is valid.
 *  - `ng-invalid` is set if the model is invalid.
 *  - `ng-pristine` is set if the model is pristine.
 *  - `ng-dirty` is set if the model is dirty.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 */
  var ngModelDirective = function () {
    return {
      require: [
        'ngModel',
        '^?form'
      ],
      controller: NgModelController,
      link: function (scope, element, attr, ctrls) {
        // notify others, especially parent forms
        var modelCtrl = ctrls[0], formCtrl = ctrls[1] || nullFormCtrl;
        formCtrl.$addControl(modelCtrl);
        scope.$on('$destroy', function () {
          formCtrl.$removeControl(modelCtrl);
        });
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 * The expression is not evaluated when the value change is coming from the model.
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
  var ngChangeDirective = valueFn({
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        ctrl.$viewChangeListeners.push(function () {
          scope.$eval(attr.ngChange);
        });
      }
    });
  var requiredDirective = function () {
    return {
      require: '?ngModel',
      link: function (scope, elm, attr, ctrl) {
        if (!ctrl)
          return;
        attr.required = true;
        // force truthy in case we are on non input element
        var validator = function (value) {
          if (attr.required && ctrl.$isEmpty(value)) {
            ctrl.$setValidity('required', false);
            return;
          } else {
            ctrl.$setValidity('required', true);
            return value;
          }
        };
        ctrl.$formatters.push(validator);
        ctrl.$parsers.unshift(validator);
        attr.$observe('required', function () {
          validator(ctrl.$viewValue);
        });
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The delimiter
 * can be a fixed string (by default a comma) or a regular expression.
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value. If
 *   specified in form `/something/` then the value will be converted into a regular expression.
 *
 * @example
    <example name="ngList-directive" module="listExample">
      <file name="index.html">
       <script>
         angular.module('listExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.names = ['igor', 'misko', 'vojta'];
           }]);
       </script>
       <form name="myForm" ng-controller="ExampleController">
         List: <input name="namesInput" ng-model="names" ng-list required>
         <span class="error" ng-show="myForm.namesInput.$error.required">
           Required!</span>
         <br>
         <tt>names = {{names}}</tt><br/>
         <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
         <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var listInput = element(by.model('names'));
        var names = element(by.binding('{{names}}'));
        var valid = element(by.binding('myForm.namesInput.$valid'));
        var error = element(by.css('span.error'));

        it('should initialize to model', function() {
          expect(names.getText()).toContain('["igor","misko","vojta"]');
          expect(valid.getText()).toContain('true');
          expect(error.getCssValue('display')).toBe('none');
        });

        it('should be invalid if empty', function() {
          listInput.clear();
          listInput.sendKeys('');

          expect(names.getText()).toContain('');
          expect(valid.getText()).toContain('false');
          expect(error.getCssValue('display')).not.toBe('none');        });
      </file>
    </example>
 */
  var ngListDirective = function () {
    return {
      require: 'ngModel',
      link: function (scope, element, attr, ctrl) {
        var match = /\/(.*)\//.exec(attr.ngList), separator = match && new RegExp(match[1]) || attr.ngList || ',';
        var parse = function (viewValue) {
          // If the viewValue is invalid (say required but empty) it will be `undefined`
          if (isUndefined(viewValue))
            return;
          var list = [];
          if (viewValue) {
            forEach(viewValue.split(separator), function (value) {
              if (value)
                list.push(trim(value));
            });
          }
          return list;
        };
        ctrl.$parsers.push(parse);
        ctrl.$formatters.push(function (value) {
          if (isArray(value)) {
            return value.join(', ');
          }
          return undefined;
        });
        // Override the standard $isEmpty because an empty array means the input is empty.
        ctrl.$isEmpty = function (value) {
          return !value || !value.length;
        };
      }
    };
  };
  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
  /**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `input[select]` or `input[radio]`, so
 * that when the element is selected, the `ngModel` of that element is set to the
 * bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using `ng-repeat`, as
 * shown below.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
  var ngValueDirective = function () {
    return {
      priority: 100,
      compile: function (tpl, tplAttr) {
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
          return function ngValueConstantLink(scope, elm, attr) {
            attr.$set('value', scope.$eval(attr.ngValue));
          };
        } else {
          return function ngValueLink(scope, elm, attr) {
            scope.$watch(attr.ngValue, function valueWatchAction(value) {
              attr.$set('value', value);
            });
          };
        }
      }
    };
  };
  /**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
  var ngBindDirective = ngDirective({
      compile: function (templateElement) {
        templateElement.addClass('ng-binding');
        return function (scope, element, attr) {
          element.data('$binding', attr.ngBind);
          scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
            // We are purposefully using == here rather than === because we want to
            // catch when value is "null or undefined"
            // jshint -W041
            element.text(value == undefined ? '' : value);
          });
        };
      }
    });
  /**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function ($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
  var ngBindTemplateDirective = [
      '$interpolate',
      function ($interpolate) {
        return function (scope, element, attr) {
          // TODO: move this to scenario runner
          var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
          element.addClass('ng-binding').data('$binding', interpolateFn);
          attr.$observe('ngBindTemplate', function (value) {
            element.text(value);
          });
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Creates a binding that will innerHTML the result of evaluating the `expression` into the current
 * element in a secure way.  By default, the innerHTML-ed content will be sanitized using the {@link
 * ngSanitize.$sanitize $sanitize} service.  To utilize this functionality, ensure that `$sanitize`
 * is available, for example, by including {@link ngSanitize} in your module's dependencies (not in
 * core Angular.)  You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#Example Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
  var ngBindHtmlDirective = [
      '$sce',
      '$parse',
      function ($sce, $parse) {
        return {
          compile: function (tElement) {
            tElement.addClass('ng-binding');
            return function (scope, element, attr) {
              element.data('$binding', attr.ngBindHtml);
              var parsed = $parse(attr.ngBindHtml);
              function getStringValue() {
                return (parsed(scope) || '').toString();
              }
              scope.$watch(getStringValue, function ngBindHtmlWatchAction(value) {
                element.html($sce.getTrustedHtml(parsed(scope)) || '');
              });
            };
          }
        };
      }
    ];
  function classDirective(name, selector) {
    name = 'ngClass' + name;
    return [
      '$animate',
      function ($animate) {
        return {
          restrict: 'AC',
          link: function (scope, element, attr) {
            var oldVal;
            scope.$watch(attr[name], ngClassWatchAction, true);
            attr.$observe('class', function (value) {
              ngClassWatchAction(scope.$eval(attr[name]));
            });
            if (name !== 'ngClass') {
              scope.$watch('$index', function ($index, old$index) {
                // jshint bitwise: false
                var mod = $index & 1;
                if (mod !== (old$index & 1)) {
                  var classes = arrayClasses(scope.$eval(attr[name]));
                  mod === selector ? addClasses(classes) : removeClasses(classes);
                }
              });
            }
            function addClasses(classes) {
              var newClasses = digestClassCounts(classes, 1);
              attr.$addClass(newClasses);
            }
            function removeClasses(classes) {
              var newClasses = digestClassCounts(classes, -1);
              attr.$removeClass(newClasses);
            }
            function digestClassCounts(classes, count) {
              var classCounts = element.data('$classCounts') || {};
              var classesToUpdate = [];
              forEach(classes, function (className) {
                if (count > 0 || classCounts[className]) {
                  classCounts[className] = (classCounts[className] || 0) + count;
                  if (classCounts[className] === +(count > 0)) {
                    classesToUpdate.push(className);
                  }
                }
              });
              element.data('$classCounts', classCounts);
              return classesToUpdate.join(' ');
            }
            function updateClasses(oldClasses, newClasses) {
              var toAdd = arrayDifference(newClasses, oldClasses);
              var toRemove = arrayDifference(oldClasses, newClasses);
              toRemove = digestClassCounts(toRemove, -1);
              toAdd = digestClassCounts(toAdd, 1);
              if (toAdd.length === 0) {
                $animate.removeClass(element, toRemove);
              } else if (toRemove.length === 0) {
                $animate.addClass(element, toAdd);
              } else {
                $animate.setClass(element, toAdd, toRemove);
              }
            }
            function ngClassWatchAction(newVal) {
              if (selector === true || scope.$index % 2 === selector) {
                var newClasses = arrayClasses(newVal || []);
                if (!oldVal) {
                  addClasses(newClasses);
                } else if (!equals(newVal, oldVal)) {
                  var oldClasses = arrayClasses(oldVal);
                  updateClasses(oldClasses, newClasses);
                }
              }
              oldVal = shallowCopy(newVal);
            }
          }
        };
        function arrayDifference(tokens1, tokens2) {
          var values = [];
          outer:
            for (var i = 0; i < tokens1.length; i++) {
              var token = tokens1[i];
              for (var j = 0; j < tokens2.length; j++) {
                if (token == tokens2[j])
                  continue outer;
              }
              values.push(token);
            }
          return values;
        }
        function arrayClasses(classVal) {
          if (isArray(classVal)) {
            return classVal;
          } else if (isString(classVal)) {
            return classVal.split(' ');
          } else if (isObject(classVal)) {
            var classes = [], i = 0;
            forEach(classVal, function (v, k) {
              if (v) {
                classes = classes.concat(k.split(' '));
              }
            });
            return classes;
          }
          return classVal;
        }
      }
    ];
  }
  /**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * add - happens just before the class is applied to the element
 * remove - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ngAnimate.$animate#addclass $animate.addClass} and
   {@link ngAnimate.$animate#removeclass $animate.removeClass}.
 */
  var ngClassDirective = classDirective('', true);
  /**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassOddDirective = classDirective('Odd', 0);
  /**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
  var ngClassEvenDirective = classDirective('Even', 1);
  /**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they
 * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css
 * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
  var ngCloakDirective = ngDirective({
      compile: function (element, attr) {
        attr.$set('ngCloak', undefined);
        element.removeClass('ng-cloak');
      }
    });
  /**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a globally accessible constructor function or an
 *     {@link guide/expression expression} that on the current scope evaluates to a
 *     constructor function. The controller instance can be published into a scope property
 *     by specifying `as propertyName`.
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
  var ngControllerDirective = [function () {
        return {
          scope: true,
          controller: '@',
          priority: 500
        };
      }];
  /**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
 */
  // ngCsp is not implemented as a proper directive any more, because we need it be processed while we
  // bootstrap the system (before $parse is instantiated), for this reason we just have
  // the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc
  /**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      <span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
  /*
 * A directive that allows creation of custom onclick handlers that are defined as angular
 * expressions and are compiled and executed within the current scope.
 *
 * Events that are handled via these handler are always configured not to propagate further.
 */
  var ngEventDirectives = {};
  // For events that might fire synchronously during DOM manipulation
  // we need to execute their event handlers asynchronously using $evalAsync,
  // so that they are not executed in an inconsistent state.
  var forceAsyncEvents = {
      'blur': true,
      'focus': true
    };
  forEach('click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '), function (eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = [
      '$parse',
      '$rootScope',
      function ($parse, $rootScope) {
        return {
          compile: function ($element, attr) {
            var fn = $parse(attr[directiveName]);
            return function ngEventHandler(scope, element) {
              element.on(eventName, function (event) {
                var callback = function () {
                  fn(scope, { $event: event });
                };
                if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                  scope.$evalAsync(callback);
                } else {
                  scope.$apply(callback);
                }
              });
            };
          }
        };
      }
    ];
  });
  /**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */
  /**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */
  /**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */
  /**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-Prototypal-Inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the ngIf contents change and a new DOM element is created and injected into the ngIf container
 * leave - happens just before the ngIf contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        I'm removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
  var ngIfDirective = [
      '$animate',
      function ($animate) {
        return {
          transclude: 'element',
          priority: 600,
          terminal: true,
          restrict: 'A',
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var block, childScope, previousElements;
            $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
              if (toBoolean(value)) {
                if (!childScope) {
                  childScope = $scope.$new();
                  $transclude(childScope, function (clone) {
                    clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block = { clone: clone };
                    $animate.enter(clone, $element.parent(), $element);
                  });
                }
              } else {
                if (previousElements) {
                  previousElements.remove();
                  previousElements = null;
                }
                if (childScope) {
                  childScope.$destroy();
                  childScope = null;
                }
                if (block) {
                  previousElements = getBlockElements(block.clone);
                  $animate.leave(previousElements, function () {
                    previousElements = null;
                  });
                  block = null;
                }
              }
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * [wrap them](ng.$sce#trustAsResourceUrl) as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <tt>{{template.url}}</tt>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 */
  /**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 */
  var ngIncludeDirective = [
      '$http',
      '$templateCache',
      '$anchorScroll',
      '$animate',
      '$sce',
      function ($http, $templateCache, $anchorScroll, $animate, $sce) {
        return {
          restrict: 'ECA',
          priority: 400,
          terminal: true,
          transclude: 'element',
          controller: angular.noop,
          compile: function (element, attr) {
            var srcExp = attr.ngInclude || attr.src, onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
            return function (scope, $element, $attr, ctrl, $transclude) {
              var changeCounter = 0, currentScope, previousElement, currentElement;
              var cleanupLastIncludeContent = function () {
                if (previousElement) {
                  previousElement.remove();
                  previousElement = null;
                }
                if (currentScope) {
                  currentScope.$destroy();
                  currentScope = null;
                }
                if (currentElement) {
                  $animate.leave(currentElement, function () {
                    previousElement = null;
                  });
                  previousElement = currentElement;
                  currentElement = null;
                }
              };
              scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
                var afterAnimation = function () {
                  if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                    $anchorScroll();
                  }
                };
                var thisChangeId = ++changeCounter;
                if (src) {
                  $http.get(src, { cache: $templateCache }).success(function (response) {
                    if (thisChangeId !== changeCounter)
                      return;
                    var newScope = scope.$new();
                    ctrl.template = response;
                    // Note: This will also link all children of ng-include that were contained in the original
                    // html. If that content contains controllers, ... they could pollute/change the scope.
                    // However, using ng-include on an element with additional content does not make sense...
                    // Note: We can't remove them in the cloneAttchFn of $transclude as that
                    // function is called before linking the content, which would apply child
                    // directives to non existing elements.
                    var clone = $transclude(newScope, function (clone) {
                        cleanupLastIncludeContent();
                        $animate.enter(clone, null, $element, afterAnimation);
                      });
                    currentScope = newScope;
                    currentElement = clone;
                    currentScope.$emit('$includeContentLoaded');
                    scope.$eval(onloadExp);
                  }).error(function () {
                    if (thisChangeId === changeCounter)
                      cleanupLastIncludeContent();
                  });
                  scope.$emit('$includeContentRequested');
                } else {
                  cleanupLastIncludeContent();
                  ctrl.template = null;
                }
              });
            };
          }
        };
      }
    ];
  // This directive is called during the $transclude call of the first `ngInclude` directive.
  // It will replace and compile the content of the element with the loaded template.
  // We need this directive so that the element content is already filled when
  // the link function of another directive on the same element as ngInclude
  // is called.
  var ngIncludeFillContentDirective = [
      '$compile',
      function ($compile) {
        return {
          restrict: 'ECA',
          priority: -400,
          require: 'ngInclude',
          link: function (scope, $element, $attr, ctrl) {
            $element.html(ctrl.template);
            $compile($element.contents())(scope);
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 *   <div ng-init="test1 = (data | orderBy:'name')"></div>
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
  var ngInitDirective = ngDirective({
      priority: 450,
      compile: function () {
        return {
          pre: function (scope, element, attrs) {
            scope.$eval(attrs.ngInit);
          }
        };
      }
    });
  /**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
  var ngNonBindableDirective = ngDirective({
      terminal: true,
      priority: 1000
    });
  /**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
  var ngPluralizeDirective = [
      '$locale',
      '$interpolate',
      function ($locale, $interpolate) {
        var BRACE = /{}/g;
        return {
          restrict: 'EA',
          link: function (scope, element, attr) {
            var numberExp = attr.count, whenExp = attr.$attr.when && element.attr(attr.$attr.when),
              // we have {{}} in attrs
              offset = attr.offset || 0, whens = scope.$eval(whenExp) || {}, whensExpFns = {}, startSymbol = $interpolate.startSymbol(), endSymbol = $interpolate.endSymbol(), isWhen = /^when(Minus)?(.+)$/;
            forEach(attr, function (expression, attributeName) {
              if (isWhen.test(attributeName)) {
                whens[lowercase(attributeName.replace('when', '').replace('Minus', '-'))] = element.attr(attr.$attr[attributeName]);
              }
            });
            forEach(whens, function (expression, key) {
              whensExpFns[key] = $interpolate(expression.replace(BRACE, startSymbol + numberExp + '-' + offset + endSymbol));
            });
            scope.$watch(function ngPluralizeWatch() {
              var value = parseFloat(scope.$eval(numberExp));
              if (!isNaN(value)) {
                //if explicit number rule such as 1, 2, 3... is defined, just use it. Otherwise,
                //check it against pluralization rules in $locale service
                if (!(value in whens))
                  value = $locale.pluralCat(value - offset);
                return whensExpFns[value](scope, element, true);
              } else {
                return '';
              }
            }, function ngPluralizeWatchAction(newVal) {
              element.text(newVal);
            });
          }
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking function
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking function
 *     is specified the ng-repeat associates elements by identity in the collection. It is an error to have
 *     more than one tracking function to resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  Filters should be applied to the expression,
 *     before specifying a tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
  var ngRepeatDirective = [
      '$parse',
      '$animate',
      function ($parse, $animate) {
        var NG_REMOVED = '$$NG_REMOVED';
        var ngRepeatMinErr = minErr('ngRepeat');
        return {
          transclude: 'element',
          priority: 1000,
          terminal: true,
          $$tlb: true,
          link: function ($scope, $element, $attr, ctrl, $transclude) {
            var expression = $attr.ngRepeat;
            var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?\s*$/), trackByExp, trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn, lhs, rhs, valueIdentifier, keyIdentifier, hashFnLocals = { $id: hashKey };
            if (!match) {
              throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.', expression);
            }
            lhs = match[1];
            rhs = match[2];
            trackByExp = match[3];
            if (trackByExp) {
              trackByExpGetter = $parse(trackByExp);
              trackByIdExpFn = function (key, value, index) {
                // assign key, value, and $index to the locals so that they can be used in hash functions
                if (keyIdentifier)
                  hashFnLocals[keyIdentifier] = key;
                hashFnLocals[valueIdentifier] = value;
                hashFnLocals.$index = index;
                return trackByExpGetter($scope, hashFnLocals);
              };
            } else {
              trackByIdArrayFn = function (key, value) {
                return hashKey(value);
              };
              trackByIdObjFn = function (key) {
                return key;
              };
            }
            match = lhs.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/);
            if (!match) {
              throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.', lhs);
            }
            valueIdentifier = match[3] || match[1];
            keyIdentifier = match[2];
            // Store a list of elements from previous run. This is a hash where key is the item from the
            // iterator, and the value is objects with following properties.
            //   - scope: bound scope
            //   - element: previous element.
            //   - index: position
            var lastBlockMap = {};
            //watch props
            $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
              var index, length, previousNode = $element[0],
                // current position of the node
                nextNode,
                // Same as lastBlockMap but it has the current state. It will become the
                // lastBlockMap on the next iteration.
                nextBlockMap = {}, arrayLength, childScope, key, value,
                // key/value of iteration
                trackById, trackByIdFn, collectionKeys, block,
                // last object information {scope, element, id}
                nextBlockOrder = [], elementsToRemove;
              if (isArrayLike(collection)) {
                collectionKeys = collection;
                trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
              } else {
                trackByIdFn = trackByIdExpFn || trackByIdObjFn;
                // if object, extract keys, sort them and use to determine order of iteration over obj props
                collectionKeys = [];
                for (key in collection) {
                  if (collection.hasOwnProperty(key) && key.charAt(0) != '$') {
                    collectionKeys.push(key);
                  }
                }
                collectionKeys.sort();
              }
              arrayLength = collectionKeys.length;
              // locate existing items
              length = nextBlockOrder.length = collectionKeys.length;
              for (index = 0; index < length; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index];
                value = collection[key];
                trackById = trackByIdFn(key, value, index);
                assertNotHasOwnProperty(trackById, '`track by` id');
                if (lastBlockMap.hasOwnProperty(trackById)) {
                  block = lastBlockMap[trackById];
                  delete lastBlockMap[trackById];
                  nextBlockMap[trackById] = block;
                  nextBlockOrder[index] = block;
                } else if (nextBlockMap.hasOwnProperty(trackById)) {
                  // restore lastBlockMap
                  forEach(nextBlockOrder, function (block) {
                    if (block && block.scope)
                      lastBlockMap[block.id] = block;
                  });
                  // This is a duplicate and we need to throw an error
                  throw ngRepeatMinErr('dupes', 'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}', expression, trackById, toJson(value));
                } else {
                  // new never before seen block
                  nextBlockOrder[index] = { id: trackById };
                  nextBlockMap[trackById] = false;
                }
              }
              // remove existing items
              for (key in lastBlockMap) {
                // lastBlockMap is our own object so we don't need to use special hasOwnPropertyFn
                if (lastBlockMap.hasOwnProperty(key)) {
                  block = lastBlockMap[key];
                  elementsToRemove = getBlockElements(block.clone);
                  $animate.leave(elementsToRemove);
                  forEach(elementsToRemove, function (element) {
                    element[NG_REMOVED] = true;
                  });
                  block.scope.$destroy();
                }
              }
              // we are not using forEach for perf reasons (trying to avoid #call)
              for (index = 0, length = collectionKeys.length; index < length; index++) {
                key = collection === collectionKeys ? index : collectionKeys[index];
                value = collection[key];
                block = nextBlockOrder[index];
                if (nextBlockOrder[index - 1])
                  previousNode = getBlockEnd(nextBlockOrder[index - 1]);
                if (block.scope) {
                  // if we have already seen this object, then we need to reuse the
                  // associated scope/element
                  childScope = block.scope;
                  nextNode = previousNode;
                  do {
                    nextNode = nextNode.nextSibling;
                  } while (nextNode && nextNode[NG_REMOVED]);
                  if (getBlockStart(block) != nextNode) {
                    // existing item which got moved
                    $animate.move(getBlockElements(block.clone), null, jqLite(previousNode));
                  }
                  previousNode = getBlockEnd(block);
                } else {
                  // new item which we don't know about
                  childScope = $scope.$new();
                }
                childScope[valueIdentifier] = value;
                if (keyIdentifier)
                  childScope[keyIdentifier] = key;
                childScope.$index = index;
                childScope.$first = index === 0;
                childScope.$last = index === arrayLength - 1;
                childScope.$middle = !(childScope.$first || childScope.$last);
                // jshint bitwise: false
                childScope.$odd = !(childScope.$even = (index & 1) === 0);
                // jshint bitwise: true
                if (!block.scope) {
                  $transclude(childScope, function (clone) {
                    clone[clone.length++] = document.createComment(' end ngRepeat: ' + expression + ' ');
                    $animate.enter(clone, null, jqLite(previousNode));
                    previousNode = clone;
                    block.scope = childScope;
                    // Note: We only need the first/last node of the cloned nodes.
                    // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                    // by a directive with templateUrl when its template arrives.
                    block.clone = clone;
                    nextBlockMap[block.id] = block;
                  });
                }
              }
              lastBlockMap = nextBlockMap;
            });
          }
        };
        function getBlockStart(block) {
          return block.clone[0];
        }
        function getBlockEnd(block) {
          return block.clone[block.clone.length - 1];
        }
      }
    ];
  /**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to false then the `.ng-hide` CSS class is added to the class attribute
 * on the element causing it to become hidden. When true, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * <div class="alert alert-warning">
 * **Note:** Here is a list of values that ngShow will consider as a falsy value (case insensitive):<br />
 * "f" / "0" / "false" / "no" / "n" / "[]"
 * </div>
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
    </file>
    <file name="animations.css">
      .animate-show {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-show.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
  var ngShowDirective = [
      '$animate',
      function ($animate) {
        return function (scope, element, attr) {
          scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
            $animate[toBoolean(value) ? 'removeClass' : 'addClass'](element, 'ng-hide');
          });
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `.ngHide` expression evaluates to true then the `.ng-hide` CSS class is added to the class attribute
 * on the element causing it to become hidden. When false, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * <div class="alert alert-warning">
 * **Note:** Here is a list of values that ngHide will consider as a falsy value (case insensitive):<br />
 * "f" / "0" / "false" / "no" / "n" / "[]"
 * </div>
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display:none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   //this is just another form of hiding an element
 *   display:block!important;
 *   position:absolute;
 *   top:-9999px;
 *   left:-9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition:0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.2.17 (and 1.3.0-beta.11), there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
        line-height:20px;
        opacity:1;
        padding:10px;
        border:1px solid black;
        background:white;
      }

      .animate-hide.ng-hide {
        line-height:0;
        opacity:0;
        padding:0 10px;
      }

      .check-element {
        padding:10px;
        border:1px solid black;
        background:white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
  var ngHideDirective = [
      '$animate',
      function ($animate) {
        return function (scope, element, attr) {
          scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
            $animate[toBoolean(value) ? 'addClass' : 'removeClass'](element, 'ng-hide');
          });
        };
      }
    ];
  /**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
  var ngStyleDirective = ngDirective(function (scope, element, attr) {
      scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
        if (oldStyles && newStyles !== oldStyles) {
          forEach(oldStyles, function (val, style) {
            element.css(style, '');
          });
        }
        if (newStyles)
          element.css(newStyles);
      }, true);
    });
  /**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 800
 * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <tt>selection={{selection}}</tt>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
  var ngSwitchDirective = [
      '$animate',
      function ($animate) {
        return {
          restrict: 'EA',
          require: 'ngSwitch',
          controller: [
            '$scope',
            function ngSwitchController() {
              this.cases = {};
            }
          ],
          link: function (scope, element, attr, ngSwitchController) {
            var watchExpr = attr.ngSwitch || attr.on, selectedTranscludes = [], selectedElements = [], previousElements = [], selectedScopes = [];
            scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
              var i, ii;
              for (i = 0, ii = previousElements.length; i < ii; ++i) {
                previousElements[i].remove();
              }
              previousElements.length = 0;
              for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
                var selected = selectedElements[i];
                selectedScopes[i].$destroy();
                previousElements[i] = selected;
                $animate.leave(selected, function () {
                  previousElements.splice(i, 1);
                });
              }
              selectedElements.length = 0;
              selectedScopes.length = 0;
              if (selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?']) {
                scope.$eval(attr.change);
                forEach(selectedTranscludes, function (selectedTransclude) {
                  var selectedScope = scope.$new();
                  selectedScopes.push(selectedScope);
                  selectedTransclude.transclude(selectedScope, function (caseElement) {
                    var anchor = selectedTransclude.element;
                    selectedElements.push(caseElement);
                    $animate.enter(caseElement, anchor.parent(), anchor);
                  });
                });
              }
            });
          }
        };
      }
    ];
  var ngSwitchWhenDirective = ngDirective({
      transclude: 'element',
      priority: 800,
      require: '^ngSwitch',
      link: function (scope, element, attrs, ctrl, $transclude) {
        ctrl.cases['!' + attrs.ngSwitchWhen] = ctrl.cases['!' + attrs.ngSwitchWhen] || [];
        ctrl.cases['!' + attrs.ngSwitchWhen].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  var ngSwitchDefaultDirective = ngDirective({
      transclude: 'element',
      priority: 800,
      require: '^ngSwitch',
      link: function (scope, element, attr, ctrl, $transclude) {
        ctrl.cases['?'] = ctrl.cases['?'] || [];
        ctrl.cases['?'].push({
          transclude: $transclude,
          element: element
        });
      }
    });
  /**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict AC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<div ng-transclude></div>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"><br>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
  var ngTranscludeDirective = ngDirective({
      link: function ($scope, $element, $attrs, controller, $transclude) {
        if (!$transclude) {
          throw minErr('ngTransclude')('orphan', 'Illegal use of ngTransclude directive in the template! ' + 'No parent directive that requires a transclusion found. ' + 'Element: {0}', startingTag($element));
        }
        $transclude(function (clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    });
  /**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
  var scriptDirective = [
      '$templateCache',
      function ($templateCache) {
        return {
          restrict: 'E',
          terminal: true,
          compile: function (element, attr) {
            if (attr.type == 'text/ng-template') {
              var templateUrl = attr.id,
                // IE is not consistent, in scripts we have to read .text but in other nodes we have to read .textContent
                text = element[0].text;
              $templateCache.put(templateUrl, text);
            }
          }
        };
      }
    ];
  var ngOptionsMinErr = minErr('ngOptions');
  /**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension_expression.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngOptions` provides an iterator facility for the `<option>` element which should be used instead
 * of {@link ng.directive:ngRepeat ngRepeat} when you want the
 * `select` model to be bound to a non-string value. This is because an option element can only
 * be bound to string values at present.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label`  **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light'},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark'},
              {name:'yellow', shade:'light'}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>


          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor}  }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */
  var ngOptionsDirective = valueFn({ terminal: true });
  // jshint maxlen: false
  var selectDirective = [
      '$compile',
      '$parse',
      function ($compile, $parse) {
        //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
        var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/, nullModelCtrl = { $setViewValue: noop };
        // jshint maxlen: 100
        return {
          restrict: 'E',
          require: [
            'select',
            '?ngModel'
          ],
          controller: [
            '$element',
            '$scope',
            '$attrs',
            function ($element, $scope, $attrs) {
              var self = this, optionsMap = {}, ngModelCtrl = nullModelCtrl, nullOption, unknownOption;
              self.databound = $attrs.ngModel;
              self.init = function (ngModelCtrl_, nullOption_, unknownOption_) {
                ngModelCtrl = ngModelCtrl_;
                nullOption = nullOption_;
                unknownOption = unknownOption_;
              };
              self.addOption = function (value) {
                assertNotHasOwnProperty(value, '"option value"');
                optionsMap[value] = true;
                if (ngModelCtrl.$viewValue == value) {
                  $element.val(value);
                  if (unknownOption.parent())
                    unknownOption.remove();
                }
              };
              self.removeOption = function (value) {
                if (this.hasOption(value)) {
                  delete optionsMap[value];
                  if (ngModelCtrl.$viewValue == value) {
                    this.renderUnknownOption(value);
                  }
                }
              };
              self.renderUnknownOption = function (val) {
                var unknownVal = '? ' + hashKey(val) + ' ?';
                unknownOption.val(unknownVal);
                $element.prepend(unknownOption);
                $element.val(unknownVal);
                unknownOption.prop('selected', true);  // needed for IE
              };
              self.hasOption = function (value) {
                return optionsMap.hasOwnProperty(value);
              };
              $scope.$on('$destroy', function () {
                // disable unknown option so that we don't do work when the whole select is being destroyed
                self.renderUnknownOption = noop;
              });
            }
          ],
          link: function (scope, element, attr, ctrls) {
            // if ngModel is not defined, we don't need to do anything
            if (!ctrls[1])
              return;
            var selectCtrl = ctrls[0], ngModelCtrl = ctrls[1], multiple = attr.multiple, optionsExp = attr.ngOptions, nullOption = false,
              // if false, user will not be able to select it (used by ngOptions)
              emptyOption,
              // we can't just jqLite('<option>') since jqLite is not smart enough
              // to create it in <select> and IE barfs otherwise.
              optionTemplate = jqLite(document.createElement('option')), optGroupTemplate = jqLite(document.createElement('optgroup')), unknownOption = optionTemplate.clone();
            // find "null" option
            for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
              if (children[i].value === '') {
                emptyOption = nullOption = children.eq(i);
                break;
              }
            }
            selectCtrl.init(ngModelCtrl, nullOption, unknownOption);
            // required validator
            if (multiple) {
              ngModelCtrl.$isEmpty = function (value) {
                return !value || value.length === 0;
              };
            }
            if (optionsExp)
              setupAsOptions(scope, element, ngModelCtrl);
            else if (multiple)
              setupAsMultiple(scope, element, ngModelCtrl);
            else
              setupAsSingle(scope, element, ngModelCtrl, selectCtrl);
            ////////////////////////////
            function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
              ngModelCtrl.$render = function () {
                var viewValue = ngModelCtrl.$viewValue;
                if (selectCtrl.hasOption(viewValue)) {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  selectElement.val(viewValue);
                  if (viewValue === '')
                    emptyOption.prop('selected', true);  // to make IE9 happy
                } else {
                  if (isUndefined(viewValue) && emptyOption) {
                    selectElement.val('');
                  } else {
                    selectCtrl.renderUnknownOption(viewValue);
                  }
                }
              };
              selectElement.on('change', function () {
                scope.$apply(function () {
                  if (unknownOption.parent())
                    unknownOption.remove();
                  ngModelCtrl.$setViewValue(selectElement.val());
                });
              });
            }
            function setupAsMultiple(scope, selectElement, ctrl) {
              var lastView;
              ctrl.$render = function () {
                var items = new HashMap(ctrl.$viewValue);
                forEach(selectElement.find('option'), function (option) {
                  option.selected = isDefined(items.get(option.value));
                });
              };
              // we have to do it on each watch since ngModel watches reference, but
              // we need to work of an array, so we need to see if anything was inserted/removed
              scope.$watch(function selectMultipleWatch() {
                if (!equals(lastView, ctrl.$viewValue)) {
                  lastView = shallowCopy(ctrl.$viewValue);
                  ctrl.$render();
                }
              });
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var array = [];
                  forEach(selectElement.find('option'), function (option) {
                    if (option.selected) {
                      array.push(option.value);
                    }
                  });
                  ctrl.$setViewValue(array);
                });
              });
            }
            function setupAsOptions(scope, selectElement, ctrl) {
              var match;
              if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
                throw ngOptionsMinErr('iexp', 'Expected expression in form of ' + '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' + ' but got \'{0}\'. Element: {1}', optionsExp, startingTag(selectElement));
              }
              var displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]), track = match[8], trackFn = track ? $parse(match[8]) : null,
                // This is an array of array of existing option groups in DOM.
                // We try to reuse these if possible
                // - optionGroupsCache[0] is the options with no option group
                // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
                optionGroupsCache = [[{
                      element: selectElement,
                      label: ''
                    }]];
              if (nullOption) {
                // compile the element since there might be bindings in it
                $compile(nullOption)(scope);
                // remove the class, which is added automatically because we recompile the element and it
                // becomes the compilation root
                nullOption.removeClass('ng-scope');
                // we need to remove it before calling selectElement.empty() because otherwise IE will
                // remove the label from the element. wtf?
                nullOption.remove();
              }
              // clear contents, we'll add what's needed based on the model
              selectElement.empty();
              selectElement.on('change', function () {
                scope.$apply(function () {
                  var optionGroup, collection = valuesFn(scope) || [], locals = {}, key, value, optionElement, index, groupIndex, length, groupLength, trackIndex;
                  if (multiple) {
                    value = [];
                    for (groupIndex = 0, groupLength = optionGroupsCache.length; groupIndex < groupLength; groupIndex++) {
                      // list of options for that group. (first item has the parent)
                      optionGroup = optionGroupsCache[groupIndex];
                      for (index = 1, length = optionGroup.length; index < length; index++) {
                        if ((optionElement = optionGroup[index].element)[0].selected) {
                          key = optionElement.val();
                          if (keyName)
                            locals[keyName] = key;
                          if (trackFn) {
                            for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                              locals[valueName] = collection[trackIndex];
                              if (trackFn(scope, locals) == key)
                                break;
                            }
                          } else {
                            locals[valueName] = collection[key];
                          }
                          value.push(valueFn(scope, locals));
                        }
                      }
                    }
                  } else {
                    key = selectElement.val();
                    if (key == '?') {
                      value = undefined;
                    } else if (key === '') {
                      value = null;
                    } else {
                      if (trackFn) {
                        for (trackIndex = 0; trackIndex < collection.length; trackIndex++) {
                          locals[valueName] = collection[trackIndex];
                          if (trackFn(scope, locals) == key) {
                            value = valueFn(scope, locals);
                            break;
                          }
                        }
                      } else {
                        locals[valueName] = collection[key];
                        if (keyName)
                          locals[keyName] = key;
                        value = valueFn(scope, locals);
                      }
                    }
                  }
                  ctrl.$setViewValue(value);
                  render();
                });
              });
              ctrl.$render = render;
              scope.$watchCollection(valuesFn, render);
              scope.$watchCollection(function () {
                var locals = {}, values = valuesFn(scope);
                if (values) {
                  var toDisplay = new Array(values.length);
                  for (var i = 0, ii = values.length; i < ii; i++) {
                    locals[valueName] = values[i];
                    toDisplay[i] = displayFn(scope, locals);
                  }
                  return toDisplay;
                }
              }, render);
              if (multiple) {
                scope.$watchCollection(function () {
                  return ctrl.$modelValue;
                }, render);
              }
              function getSelectedSet() {
                var selectedSet = false;
                if (multiple) {
                  var modelValue = ctrl.$modelValue;
                  if (trackFn && isArray(modelValue)) {
                    selectedSet = new HashMap([]);
                    var locals = {};
                    for (var trackIndex = 0; trackIndex < modelValue.length; trackIndex++) {
                      locals[valueName] = modelValue[trackIndex];
                      selectedSet.put(trackFn(scope, locals), modelValue[trackIndex]);
                    }
                  } else {
                    selectedSet = new HashMap(modelValue);
                  }
                }
                return selectedSet;
              }
              function render() {
                // Temporary location for the option groups before we render them
                var optionGroups = { '': [] }, optionGroupNames = [''], optionGroupName, optionGroup, option, existingParent, existingOptions, existingOption, modelValue = ctrl.$modelValue, values = valuesFn(scope) || [], keys = keyName ? sortedKeys(values) : values, key, groupLength, length, groupIndex, index, locals = {}, selected, selectedSet = getSelectedSet(), lastElement, element, label;
                // We now build up the list of options we need (we merge later)
                for (index = 0; length = keys.length, index < length; index++) {
                  key = index;
                  if (keyName) {
                    key = keys[index];
                    if (key.charAt(0) === '$')
                      continue;
                    locals[keyName] = key;
                  }
                  locals[valueName] = values[key];
                  optionGroupName = groupByFn(scope, locals) || '';
                  if (!(optionGroup = optionGroups[optionGroupName])) {
                    optionGroup = optionGroups[optionGroupName] = [];
                    optionGroupNames.push(optionGroupName);
                  }
                  if (multiple) {
                    selected = isDefined(selectedSet.remove(trackFn ? trackFn(scope, locals) : valueFn(scope, locals)));
                  } else {
                    if (trackFn) {
                      var modelCast = {};
                      modelCast[valueName] = modelValue;
                      selected = trackFn(scope, modelCast) === trackFn(scope, locals);
                    } else {
                      selected = modelValue === valueFn(scope, locals);
                    }
                    selectedSet = selectedSet || selected;  // see if at least one item is selected
                  }
                  label = displayFn(scope, locals);
                  // what will be seen by the user
                  // doing displayFn(scope, locals) || '' overwrites zero values
                  label = isDefined(label) ? label : '';
                  optionGroup.push({
                    id: trackFn ? trackFn(scope, locals) : keyName ? keys[index] : index,
                    label: label,
                    selected: selected
                  });
                }
                if (!multiple) {
                  if (nullOption || modelValue === null) {
                    // insert null option if we have a placeholder, or the model is null
                    optionGroups[''].unshift({
                      id: '',
                      label: '',
                      selected: !selectedSet
                    });
                  } else if (!selectedSet) {
                    // option could not be found, we have to insert the undefined item
                    optionGroups[''].unshift({
                      id: '?',
                      label: '',
                      selected: true
                    });
                  }
                }
                // Now we need to update the list of DOM nodes to match the optionGroups we computed above
                for (groupIndex = 0, groupLength = optionGroupNames.length; groupIndex < groupLength; groupIndex++) {
                  // current option group name or '' if no group
                  optionGroupName = optionGroupNames[groupIndex];
                  // list of options for that group. (first item has the parent)
                  optionGroup = optionGroups[optionGroupName];
                  if (optionGroupsCache.length <= groupIndex) {
                    // we need to grow the optionGroups
                    existingParent = {
                      element: optGroupTemplate.clone().attr('label', optionGroupName),
                      label: optionGroup.label
                    };
                    existingOptions = [existingParent];
                    optionGroupsCache.push(existingOptions);
                    selectElement.append(existingParent.element);
                  } else {
                    existingOptions = optionGroupsCache[groupIndex];
                    existingParent = existingOptions[0];
                    // either SELECT (no group) or OPTGROUP element
                    // update the OPTGROUP label if not the same.
                    if (existingParent.label != optionGroupName) {
                      existingParent.element.attr('label', existingParent.label = optionGroupName);
                    }
                  }
                  lastElement = null;
                  // start at the beginning
                  for (index = 0, length = optionGroup.length; index < length; index++) {
                    option = optionGroup[index];
                    if (existingOption = existingOptions[index + 1]) {
                      // reuse elements
                      lastElement = existingOption.element;
                      if (existingOption.label !== option.label) {
                        lastElement.text(existingOption.label = option.label);
                      }
                      if (existingOption.id !== option.id) {
                        lastElement.val(existingOption.id = option.id);
                      }
                      // lastElement.prop('selected') provided by jQuery has side-effects
                      if (lastElement[0].selected !== option.selected) {
                        lastElement.prop('selected', existingOption.selected = option.selected);
                        if (msie) {
                          // See #7692
                          // The selected item wouldn't visually update on IE without this.
                          // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                          lastElement.prop('selected', existingOption.selected);
                        }
                      }
                    } else {
                      // grow elements
                      // if it's a null option
                      if (option.id === '' && nullOption) {
                        // put back the pre-compiled element
                        element = nullOption;
                      } else {
                        // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                        // in this version of jQuery on some browser the .text() returns a string
                        // rather then the element.
                        (element = optionTemplate.clone()).val(option.id).prop('selected', option.selected).attr('selected', option.selected).text(option.label);
                      }
                      existingOptions.push(existingOption = {
                        element: element,
                        label: option.label,
                        id: option.id,
                        selected: option.selected
                      });
                      selectCtrl.addOption(option.label, element);
                      if (lastElement) {
                        lastElement.after(element);
                      } else {
                        existingParent.element.append(element);
                      }
                      lastElement = element;
                    }
                  }
                  // remove any excessive OPTIONs in a group
                  index++;
                  // increment since the existingOptions[0] is parent element not OPTION
                  while (existingOptions.length > index) {
                    option = existingOptions.pop();
                    selectCtrl.removeOption(option.label);
                    option.element.remove();
                  }
                }
                // remove any excessive OPTGROUPs from select
                while (optionGroupsCache.length > groupIndex) {
                  optionGroupsCache.pop()[0].element.remove();
                }
              }
            }
          }
        };
      }
    ];
  var optionDirective = [
      '$interpolate',
      function ($interpolate) {
        var nullSelectCtrl = {
            addOption: noop,
            removeOption: noop
          };
        return {
          restrict: 'E',
          priority: 100,
          compile: function (element, attr) {
            if (isUndefined(attr.value)) {
              var interpolateFn = $interpolate(element.text(), true);
              if (!interpolateFn) {
                attr.$set('value', element.text());
              }
            }
            return function (scope, element, attr) {
              var selectCtrlName = '$selectController', parent = element.parent(), selectCtrl = parent.data(selectCtrlName) || parent.parent().data(selectCtrlName);
              // in case we are in optgroup
              if (selectCtrl && selectCtrl.databound) {
                // For some reason Opera defaults to true and if not overridden this messes up the repeater.
                // We don't want the view to drive the initialization of the model anyway.
                element.prop('selected', false);
              } else {
                selectCtrl = nullSelectCtrl;
              }
              if (interpolateFn) {
                scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
                  attr.$set('value', newVal);
                  if (newVal !== oldVal)
                    selectCtrl.removeOption(oldVal);
                  selectCtrl.addOption(newVal);
                });
              } else {
                selectCtrl.addOption(attr.value);
              }
              element.on('$destroy', function () {
                selectCtrl.removeOption(attr.value);
              });
            };
          }
        };
      }
    ];
  var styleDirective = valueFn({
      restrict: 'E',
      terminal: true
    });
  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }
  //try to bind to jquery now so that one can write angular.element().read()
  //but we will rebind on bootstrap again.
  bindJQuery();
  publishExternalAPI(angular);
  jqLite(document).ready(function () {
    angularInit(document, bootstrap);
  });
}(window, document));
!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}ng\\:form{display:block;}.ng-animate-block-transitions{transition:0s all!important;-webkit-transition:0s all!important;}.ng-hide-add-active,.ng-hide-remove{display:block!important;}</style>');
/**
 * @license AngularJS v1.2.27
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  var $sanitizeMinErr = angular.$$minErr('$sanitize');
  /**
 * @ngdoc module
 * @name ngSanitize
 * @description
 *
 * # ngSanitize
 *
 * The `ngSanitize` module provides functionality to sanitize HTML.
 *
 *
 * <div doc-module-components="ngSanitize"></div>
 *
 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
 */
  /*
 * HTML Parser By Misko Hevery (misko@hevery.com)
 * based on:  HTML Parser By John Resig (ejohn.org)
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 */
  /**
 * @ngdoc service
 * @name $sanitize
 * @kind function
 *
 * @description
 *   The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are
 *   then serialized back to properly escaped html string. This means that no unsafe input can make
 *   it into the returned string, however, since our parser is more strict than a typical browser
 *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
 *   browser, won't make it through the sanitizer.
 *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
 *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
 *
 * @param {string} html Html input.
 * @returns {string} Sanitized html.
 *
 * @example
   <example module="sanitizeExample" deps="angular-sanitize.js">
   <file name="index.html">
     <script>
         angular.module('sanitizeExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
             $scope.snippet =
               '<p style="color:blue">an html\n' +
               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
               'snippet</p>';
             $scope.deliberatelyTrustDangerousSnippet = function() {
               return $sce.trustAsHtml($scope.snippet);
             };
           }]);
     </script>
     <div ng-controller="ExampleController">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getInnerHtml()).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */
  function $SanitizeProvider() {
    this.$get = [
      '$$sanitizeUri',
      function ($$sanitizeUri) {
        return function (html) {
          var buf = [];
          htmlParser(html, htmlSanitizeWriter(buf, function (uri, isImage) {
            return !/^unsafe/.test($$sanitizeUri(uri, isImage));
          }));
          return buf.join('');
        };
      }
    ];
  }
  function sanitizeText(chars) {
    var buf = [];
    var writer = htmlSanitizeWriter(buf, angular.noop);
    writer.chars(chars);
    return buf.join('');
  }
  // Regular Expressions for parsing tags and attributes
  var START_TAG_REGEXP = /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/, END_TAG_REGEXP = /^<\/\s*([\w:-]+)[^>]*>/, ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g, BEGIN_TAG_REGEXP = /^</, BEGING_END_TAGE_REGEXP = /^<\//, COMMENT_REGEXP = /<!--(.*?)-->/g, DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i, CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g, SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
    // Match everything outside of normal chars and " (quote character)
    NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;
  // Good source of info about elements and attributes
  // http://dev.w3.org/html5/spec/Overview.html#semantics
  // http://simon.html5.org/html-elements
  // Safe Void Elements - HTML5
  // http://dev.w3.org/html5/spec/Overview.html#void-elements
  var voidElements = makeMap('area,br,col,hr,img,wbr');
  // Elements that you can, intentionally, leave open (and which close themselves)
  // http://dev.w3.org/html5/spec/Overview.html#optional-tags
  var optionalEndTagBlockElements = makeMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'), optionalEndTagInlineElements = makeMap('rp,rt'), optionalEndTagElements = angular.extend({}, optionalEndTagInlineElements, optionalEndTagBlockElements);
  // Safe Block Elements - HTML5
  var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap('address,article,' + 'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' + 'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul'));
  // Inline Elements - HTML5
  var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap('a,abbr,acronym,b,' + 'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' + 'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));
  // Special Elements (can contain anything)
  var specialElements = makeMap('script,style');
  var validElements = angular.extend({}, voidElements, blockElements, inlineElements, optionalEndTagElements);
  //Attributes that have href and hence need to be sanitized
  var uriAttrs = makeMap('background,cite,href,longdesc,src,usemap');
  var validAttrs = angular.extend({}, uriAttrs, makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' + 'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' + 'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' + 'scope,scrolling,shape,size,span,start,summary,target,title,type,' + 'valign,value,vspace,width'));
  function makeMap(str) {
    var obj = {}, items = str.split(','), i;
    for (i = 0; i < items.length; i++)
      obj[items[i]] = true;
    return obj;
  }
  /**
 * @example
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * @param {string} html string
 * @param {object} handler
 */
  function htmlParser(html, handler) {
    if (typeof html !== 'string') {
      if (html === null || typeof html === 'undefined') {
        html = '';
      } else {
        html = '' + html;
      }
    }
    var index, chars, match, stack = [], last = html, text;
    stack.last = function () {
      return stack[stack.length - 1];
    };
    while (html) {
      text = '';
      chars = true;
      // Make sure we're not in a script or style element
      if (!stack.last() || !specialElements[stack.last()]) {
        // Comment
        if (html.indexOf('<!--') === 0) {
          // comments containing -- are not allowed unless they terminate the comment
          index = html.indexOf('--', 4);
          if (index >= 0 && html.lastIndexOf('-->', index) === index) {
            if (handler.comment)
              handler.comment(html.substring(4, index));
            html = html.substring(index + 3);
            chars = false;
          }  // DOCTYPE
        } else if (DOCTYPE_REGEXP.test(html)) {
          match = html.match(DOCTYPE_REGEXP);
          if (match) {
            html = html.replace(match[0], '');
            chars = false;
          }  // end tag
        } else if (BEGING_END_TAGE_REGEXP.test(html)) {
          match = html.match(END_TAG_REGEXP);
          if (match) {
            html = html.substring(match[0].length);
            match[0].replace(END_TAG_REGEXP, parseEndTag);
            chars = false;
          }  // start tag
        } else if (BEGIN_TAG_REGEXP.test(html)) {
          match = html.match(START_TAG_REGEXP);
          if (match) {
            // We only have a valid start-tag if there is a '>'.
            if (match[4]) {
              html = html.substring(match[0].length);
              match[0].replace(START_TAG_REGEXP, parseStartTag);
            }
            chars = false;
          } else {
            // no ending tag found --- this piece should be encoded as an entity.
            text += '<';
            html = html.substring(1);
          }
        }
        if (chars) {
          index = html.indexOf('<');
          text += index < 0 ? html : html.substring(0, index);
          html = index < 0 ? '' : html.substring(index);
          if (handler.chars)
            handler.chars(decodeEntities(text));
        }
      } else {
        html = html.replace(new RegExp('(.*)<\\s*\\/\\s*' + stack.last() + '[^>]*>', 'i'), function (all, text) {
          text = text.replace(COMMENT_REGEXP, '$1').replace(CDATA_REGEXP, '$1');
          if (handler.chars)
            handler.chars(decodeEntities(text));
          return '';
        });
        parseEndTag('', stack.last());
      }
      if (html == last) {
        throw $sanitizeMinErr('badparse', 'The sanitizer was unable to parse the following block ' + 'of html: {0}', html);
      }
      last = html;
    }
    // Clean up any remaining tags
    parseEndTag();
    function parseStartTag(tag, tagName, rest, unary) {
      tagName = angular.lowercase(tagName);
      if (blockElements[tagName]) {
        while (stack.last() && inlineElements[stack.last()]) {
          parseEndTag('', stack.last());
        }
      }
      if (optionalEndTagElements[tagName] && stack.last() == tagName) {
        parseEndTag('', tagName);
      }
      unary = voidElements[tagName] || !!unary;
      if (!unary)
        stack.push(tagName);
      var attrs = {};
      rest.replace(ATTR_REGEXP, function (match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
        var value = doubleQuotedValue || singleQuotedValue || unquotedValue || '';
        attrs[name] = decodeEntities(value);
      });
      if (handler.start)
        handler.start(tagName, attrs, unary);
    }
    function parseEndTag(tag, tagName) {
      var pos = 0, i;
      tagName = angular.lowercase(tagName);
      if (tagName)
        // Find the closest opened tag of the same type
        for (pos = stack.length - 1; pos >= 0; pos--)
          if (stack[pos] == tagName)
            break;
      if (pos >= 0) {
        // Close all the open elements, up the stack
        for (i = stack.length - 1; i >= pos; i--)
          if (handler.end)
            handler.end(stack[i]);
        // Remove the open elements from the stack
        stack.length = pos;
      }
    }
  }
  var hiddenPre = document.createElement('pre');
  var spaceRe = /^(\s*)([\s\S]*?)(\s*)$/;
  /**
 * decodes all entities into regular string
 * @param value
 * @returns {string} A string with decoded entities.
 */
  function decodeEntities(value) {
    if (!value) {
      return '';
    }
    // Note: IE8 does not preserve spaces at the start/end of innerHTML
    // so we must capture them and reattach them afterward
    var parts = spaceRe.exec(value);
    var spaceBefore = parts[1];
    var spaceAfter = parts[3];
    var content = parts[2];
    if (content) {
      hiddenPre.innerHTML = content.replace(/</g, '&lt;');
      // innerText depends on styling as it doesn't display hidden elements.
      // Therefore, it's better to use textContent not to cause unnecessary
      // reflows. However, IE<9 don't support textContent so the innerText
      // fallback is necessary.
      content = 'textContent' in hiddenPre ? hiddenPre.textContent : hiddenPre.innerText;
    }
    return spaceBefore + content + spaceAfter;
  }
  /**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param value
 * @returns {string} escaped text
 */
  function encodeEntities(value) {
    return value.replace(/&/g, '&amp;').replace(SURROGATE_PAIR_REGEXP, function (value) {
      var hi = value.charCodeAt(0);
      var low = value.charCodeAt(1);
      return '&#' + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ';';
    }).replace(NON_ALPHANUMERIC_REGEXP, function (value) {
      return '&#' + value.charCodeAt(0) + ';';
    }).replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }
  /**
 * create an HTML/XML writer which writes to buffer
 * @param {Array} buf use buf.jain('') to get out sanitized html string
 * @returns {object} in the form of {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * }
 */
  function htmlSanitizeWriter(buf, uriValidator) {
    var ignore = false;
    var out = angular.bind(buf, buf.push);
    return {
      start: function (tag, attrs, unary) {
        tag = angular.lowercase(tag);
        if (!ignore && specialElements[tag]) {
          ignore = tag;
        }
        if (!ignore && validElements[tag] === true) {
          out('<');
          out(tag);
          angular.forEach(attrs, function (value, key) {
            var lkey = angular.lowercase(key);
            var isImage = tag === 'img' && lkey === 'src' || lkey === 'background';
            if (validAttrs[lkey] === true && (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
              out(' ');
              out(key);
              out('="');
              out(encodeEntities(value));
              out('"');
            }
          });
          out(unary ? '/>' : '>');
        }
      },
      end: function (tag) {
        tag = angular.lowercase(tag);
        if (!ignore && validElements[tag] === true) {
          out('</');
          out(tag);
          out('>');
        }
        if (tag == ignore) {
          ignore = false;
        }
      },
      chars: function (chars) {
        if (!ignore) {
          out(encodeEntities(chars));
        }
      }
    };
  }
  // define ngSanitize module and register $sanitize service
  angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);
  /* global sanitizeText: false */
  /**
 * @ngdoc filter
 * @name linky
 * @kind function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
 * @returns {string} Html-linkified text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="linkyExample" deps="angular-sanitize.js">
     <file name="index.html">
       <script>
         angular.module('linkyExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.snippet =
               'Pretty text with some links:\n'+
               'http://angularjs.org/,\n'+
               'mailto:us@somewhere.org,\n'+
               'another@somewhere.org,\n'+
               'and one more: ftp://127.0.0.1/.';
             $scope.snippetWithTarget = 'http://angularjs.org/';
           }]);
       </script>
       <div ng-controller="ExampleController">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Filter</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });
     </file>
   </example>
 */
  angular.module('ngSanitize').filter('linky', [
    '$sanitize',
    function ($sanitize) {
      var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"]/, MAILTO_REGEXP = /^mailto:/;
      return function (text, target) {
        if (!text)
          return text;
        var match;
        var raw = text;
        var html = [];
        var url;
        var i;
        while (match = raw.match(LINKY_URL_REGEXP)) {
          // We can not end in these as they are sometimes found at the end of the sentence
          url = match[0];
          // if we did not match ftp/http/mailto then assume mailto
          if (match[2] == match[3])
            url = 'mailto:' + url;
          i = match.index;
          addText(raw.substr(0, i));
          addLink(url, match[0].replace(MAILTO_REGEXP, ''));
          raw = raw.substring(i + match[0].length);
        }
        addText(raw);
        return $sanitize(html.join(''));
        function addText(text) {
          if (!text) {
            return;
          }
          html.push(sanitizeText(text));
        }
        function addLink(url, text) {
          html.push('<a ');
          if (angular.isDefined(target)) {
            html.push('target="');
            html.push(target);
            html.push('" ');
          }
          html.push('href="');
          html.push(url);
          html.push('">');
          addText(text);
          html.push('</a>');
        }
      };
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.27
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /* jshint maxlen: false */
  /**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * # ngAnimate
 *
 * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
 *
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 *
 * To see animations in action, all that is required is to define the appropriate CSS classes
 * or to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:
 * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
 * by using the `$animate` service.
 *
 * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
 *
 * | Directive                                                 | Supported Animations                               |
 * |---------------------------------------------------------- |----------------------------------------------------|
 * | {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |
 * | {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |
 * | {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |
 * | {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |
 * | {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |
 * | {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |
 * | {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |
 * | {@link ng.directive:form#usage_animations form}                 | add and remove (dirty, pristine, valid, invalid & all other validations)                |
 * | {@link ng.directive:ngModel#usage_animations ngModel}           | add and remove (dirty, pristine, valid, invalid & all other validations)                |
 *
 * You can find out more information about animations upon visiting each directive page.
 *
 * Below is an example of how to apply animations to a directive that supports animation hooks:
 *
 * ```html
 * <style type="text/css">
 * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
 *
 * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
 * .slide.ng-enter.ng-enter-active { } /&#42; terminal animations for enter &#42;/
 * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
 * .slide.ng-leave.ng-leave-active { } /&#42; terminal animations for leave &#42;/
 * </style>
 *
 * <!--
 * the animate service will automatically add .ng-enter and .ng-leave to the element
 * to trigger the CSS transition/animations
 * -->
 * <ANY class="slide" ng-include="..."></ANY>
 * ```
 *
 * Keep in mind that, by default, if an animation is running, any child elements cannot be animated
 * until the parent element's animation has completed. This blocking feature can be overridden by
 * placing the `ng-animate-children` attribute on a parent container tag.
 *
 * ```html
 * <div class="slide-animation" ng-if="on" ng-animate-children>
 *   <div class="fade-animation" ng-if="on">
 *     <div class="explode-animation" ng-if="on">
 *        ...
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * When the `on` expression value changes and an animation is triggered then each of the elements within
 * will all animate without the block being applied to child elements.
 *
 * <h2>CSS-defined Animations</h2>
 * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
 * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
 * and can be used to play along with this naming structure.
 *
 * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
 *
 * ```html
 * <style type="text/css">
 * /&#42;
 *  The animate class is apart of the element and the ng-enter class
 *  is attached to the element once the enter animation event is triggered
 * &#42;/
 * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
 *
 * /&#42;
 *  Keep in mind that you want to combine both CSS
 *  classes together to avoid any CSS-specificity
 *  conflicts
 * &#42;/
 * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
 *
 * ```html
 * <style type="text/css">
 * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
 * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
 *
 * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
 * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
 * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
 * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
 * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
 * has no CSS transition/animation classes applied to it.
 *
 * <h3>CSS Staggering Animations</h3>
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if more than 10ms has passed after the last animation has been fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * <h2>JavaScript-defined Animations</h2>
 * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
 * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
 *
 * ```js
 * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
 * var ngModule = angular.module('YourApp', ['ngAnimate']);
 * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
 * ```
 *
 * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
 * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
 * the element's CSS class attribute value and then run the matching animation event function (if found).
 * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
 * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
 *
 * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
 * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
 * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
 * or transition code that is defined via a stylesheet).
 *
 */
  angular.module('ngAnimate', ['ng']).directive('ngAnimateChildren', function () {
    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
    return function (scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (angular.isString(val) && val.length === 0) {
        //empty attribute
        element.data(NG_ANIMATE_CHILDREN, true);
      } else {
        scope.$watch(val, function (value) {
          element.data(NG_ANIMATE_CHILDREN, !!value);
        });
      }
    };
  }).factory('$$animateReflow', [
    '$$rAF',
    '$document',
    function ($$rAF, $document) {
      var bod = $document[0].body;
      return function (fn) {
        //the returned function acts as the cancellation function
        return $$rAF(function () {
          //the line below will force the browser to perform a repaint
          //so that all the animated elements within the animation frame
          //will be properly updated and drawn on screen. This is
          //required to perform multi-class CSS based animations with
          //Firefox. DO NOT REMOVE THIS LINE.
          var a = bod.offsetWidth + 1;
          fn();
        });
      };
    }
  ]).config([
    '$provide',
    '$animateProvider',
    function ($provide, $animateProvider) {
      var noop = angular.noop;
      var forEach = angular.forEach;
      var selectors = $animateProvider.$$selectors;
      var ELEMENT_NODE = 1;
      var NG_ANIMATE_STATE = '$$ngAnimateState';
      var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
      var NG_ANIMATE_CLASS_NAME = 'ng-animate';
      var rootAnimateState = { running: true };
      function extractElementNode(element) {
        for (var i = 0; i < element.length; i++) {
          var elm = element[i];
          if (elm.nodeType == ELEMENT_NODE) {
            return elm;
          }
        }
      }
      function prepareElement(element) {
        return element && angular.element(element);
      }
      function stripCommentsFromElement(element) {
        return angular.element(extractElementNode(element));
      }
      function isMatchingElement(elm1, elm2) {
        return extractElementNode(elm1) == extractElementNode(elm2);
      }
      $provide.decorator('$animate', [
        '$delegate',
        '$injector',
        '$sniffer',
        '$rootElement',
        '$$asyncCallback',
        '$rootScope',
        '$document',
        function ($delegate, $injector, $sniffer, $rootElement, $$asyncCallback, $rootScope, $document) {
          var globalAnimationCounter = 0;
          $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);
          // disable animations during bootstrap, but once we bootstrapped, wait again
          // for another digest until enabling animations. The reason why we digest twice
          // is because all structural animations (enter, leave and move) all perform a
          // post digest operation before animating. If we only wait for a single digest
          // to pass then the structural animation would render its animation on page load.
          // (which is what we're trying to avoid when the application first boots up.)
          $rootScope.$$postDigest(function () {
            $rootScope.$$postDigest(function () {
              rootAnimateState.running = false;
            });
          });
          var classNameFilter = $animateProvider.classNameFilter();
          var isAnimatableClassName = !classNameFilter ? function () {
              return true;
            } : function (className) {
              return classNameFilter.test(className);
            };
          function blockElementAnimations(element) {
            var data = element.data(NG_ANIMATE_STATE) || {};
            data.running = true;
            element.data(NG_ANIMATE_STATE, data);
          }
          function lookup(name) {
            if (name) {
              var matches = [], flagMap = {}, classes = name.substr(1).split('.');
              //the empty string value is the default animation
              //operation which performs CSS transition and keyframe
              //animations sniffing. This is always included for each
              //element animation procedure if the browser supports
              //transitions and/or keyframe animations. The default
              //animation is added to the top of the list to prevent
              //any previous animations from affecting the element styling
              //prior to the element being animated.
              if ($sniffer.transitions || $sniffer.animations) {
                matches.push($injector.get(selectors['']));
              }
              for (var i = 0; i < classes.length; i++) {
                var klass = classes[i], selectorFactoryName = selectors[klass];
                if (selectorFactoryName && !flagMap[klass]) {
                  matches.push($injector.get(selectorFactoryName));
                  flagMap[klass] = true;
                }
              }
              return matches;
            }
          }
          function animationRunner(element, animationEvent, className) {
            //transcluded directives may sometimes fire an animation using only comment nodes
            //best to catch this early on to prevent any animation operations from occurring
            var node = element[0];
            if (!node) {
              return;
            }
            var isSetClassOperation = animationEvent == 'setClass';
            var isClassBased = isSetClassOperation || animationEvent == 'addClass' || animationEvent == 'removeClass';
            var classNameAdd, classNameRemove;
            if (angular.isArray(className)) {
              classNameAdd = className[0];
              classNameRemove = className[1];
              className = classNameAdd + ' ' + classNameRemove;
            }
            var currentClassName = element.attr('class');
            var classes = currentClassName + ' ' + className;
            if (!isAnimatableClassName(classes)) {
              return;
            }
            var beforeComplete = noop, beforeCancel = [], before = [], afterComplete = noop, afterCancel = [], after = [];
            var animationLookup = (' ' + classes).replace(/\s+/g, '.');
            forEach(lookup(animationLookup), function (animationFactory) {
              var created = registerAnimation(animationFactory, animationEvent);
              if (!created && isSetClassOperation) {
                registerAnimation(animationFactory, 'addClass');
                registerAnimation(animationFactory, 'removeClass');
              }
            });
            function registerAnimation(animationFactory, event) {
              var afterFn = animationFactory[event];
              var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
              if (afterFn || beforeFn) {
                if (event == 'leave') {
                  beforeFn = afterFn;
                  //when set as null then animation knows to skip this phase
                  afterFn = null;
                }
                after.push({
                  event: event,
                  fn: afterFn
                });
                before.push({
                  event: event,
                  fn: beforeFn
                });
                return true;
              }
            }
            function run(fns, cancellations, allCompleteFn) {
              var animations = [];
              forEach(fns, function (animation) {
                animation.fn && animations.push(animation);
              });
              var count = 0;
              function afterAnimationComplete(index) {
                if (cancellations) {
                  (cancellations[index] || noop)();
                  if (++count < animations.length)
                    return;
                  cancellations = null;
                }
                allCompleteFn();
              }
              //The code below adds directly to the array in order to work with
              //both sync and async animations. Sync animations are when the done()
              //operation is called right away. DO NOT REFACTOR!
              forEach(animations, function (animation, index) {
                var progress = function () {
                  afterAnimationComplete(index);
                };
                switch (animation.event) {
                case 'setClass':
                  cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress));
                  break;
                case 'addClass':
                  cancellations.push(animation.fn(element, classNameAdd || className, progress));
                  break;
                case 'removeClass':
                  cancellations.push(animation.fn(element, classNameRemove || className, progress));
                  break;
                default:
                  cancellations.push(animation.fn(element, progress));
                  break;
                }
              });
              if (cancellations && cancellations.length === 0) {
                allCompleteFn();
              }
            }
            return {
              node: node,
              event: animationEvent,
              className: className,
              isClassBased: isClassBased,
              isSetClassOperation: isSetClassOperation,
              before: function (allCompleteFn) {
                beforeComplete = allCompleteFn;
                run(before, beforeCancel, function () {
                  beforeComplete = noop;
                  allCompleteFn();
                });
              },
              after: function (allCompleteFn) {
                afterComplete = allCompleteFn;
                run(after, afterCancel, function () {
                  afterComplete = noop;
                  allCompleteFn();
                });
              },
              cancel: function () {
                if (beforeCancel) {
                  forEach(beforeCancel, function (cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  beforeComplete(true);
                }
                if (afterCancel) {
                  forEach(afterCancel, function (cancelFn) {
                    (cancelFn || noop)(true);
                  });
                  afterComplete(true);
                }
              }
            };
          }
          /**
       * @ngdoc service
       * @name $animate
       * @kind function
       *
       * @description
       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
       * When any of these operations are run, the $animate service
       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
       *
       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
       * will work out of the box without any extra configuration.
       *
       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
       *
       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
       *
       */
          return {
            enter: function (element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);
              blockElementAnimations(element);
              $delegate.enter(element, parentElement, afterElement);
              $rootScope.$$postDigest(function () {
                element = stripCommentsFromElement(element);
                performAnimation('enter', 'ng-enter', element, parentElement, afterElement, noop, doneCallback);
              });
            },
            leave: function (element, doneCallback) {
              element = angular.element(element);
              cancelChildAnimations(element);
              blockElementAnimations(element);
              $rootScope.$$postDigest(function () {
                performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function () {
                  $delegate.leave(element);
                }, doneCallback);
              });
            },
            move: function (element, parentElement, afterElement, doneCallback) {
              element = angular.element(element);
              parentElement = prepareElement(parentElement);
              afterElement = prepareElement(afterElement);
              cancelChildAnimations(element);
              blockElementAnimations(element);
              $delegate.move(element, parentElement, afterElement);
              $rootScope.$$postDigest(function () {
                element = stripCommentsFromElement(element);
                performAnimation('move', 'ng-move', element, parentElement, afterElement, noop, doneCallback);
              });
            },
            addClass: function (element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('addClass', className, element, null, null, function () {
                $delegate.addClass(element, className);
              }, doneCallback);
            },
            removeClass: function (element, className, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('removeClass', className, element, null, null, function () {
                $delegate.removeClass(element, className);
              }, doneCallback);
            },
            setClass: function (element, add, remove, doneCallback) {
              element = angular.element(element);
              element = stripCommentsFromElement(element);
              performAnimation('setClass', [
                add,
                remove
              ], element, null, null, function () {
                $delegate.setClass(element, add, remove);
              }, doneCallback);
            },
            enabled: function (value, element) {
              switch (arguments.length) {
              case 2:
                if (value) {
                  cleanup(element);
                } else {
                  var data = element.data(NG_ANIMATE_STATE) || {};
                  data.disabled = true;
                  element.data(NG_ANIMATE_STATE, data);
                }
                break;
              case 1:
                rootAnimateState.disabled = !value;
                break;
              default:
                value = !rootAnimateState.disabled;
                break;
              }
              return !!value;
            }
          };
          /*
        all animations call this shared animation triggering function internally.
        The animationEvent variable refers to the JavaScript animation event that will be triggered
        and the className value is the name of the animation that will be applied within the
        CSS code. Element, parentElement and afterElement are provided DOM elements for the animation
        and the onComplete callback will be fired once the animation is fully complete.
      */
          function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, doneCallback) {
            var runner = animationRunner(element, animationEvent, className);
            if (!runner) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }
            className = runner.className;
            var elementEvents = angular.element._data(runner.node);
            elementEvents = elementEvents && elementEvents.events;
            if (!parentElement) {
              parentElement = afterElement ? afterElement.parent() : element.parent();
            }
            var ngAnimateState = element.data(NG_ANIMATE_STATE) || {};
            var runningAnimations = ngAnimateState.active || {};
            var totalActiveAnimations = ngAnimateState.totalActive || 0;
            var lastAnimation = ngAnimateState.last;
            //only allow animations if the currently running animation is not structural
            //or if there is no animation running at all
            var skipAnimations;
            if (runner.isClassBased) {
              skipAnimations = ngAnimateState.running || ngAnimateState.disabled || lastAnimation && !lastAnimation.isClassBased;
            }
            //skip the animation if animations are disabled, a parent is already being animated,
            //the element is not currently attached to the document body or then completely close
            //the animation if any matching animations are not found at all.
            //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
            if (skipAnimations || animationsDisabled(element, parentElement)) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              closeAnimation();
              return;
            }
            var skipAnimation = false;
            if (totalActiveAnimations > 0) {
              var animationsToCancel = [];
              if (!runner.isClassBased) {
                if (animationEvent == 'leave' && runningAnimations['ng-leave']) {
                  skipAnimation = true;
                } else {
                  //cancel all animations when a structural animation takes place
                  for (var klass in runningAnimations) {
                    animationsToCancel.push(runningAnimations[klass]);
                    cleanup(element, klass);
                  }
                  runningAnimations = {};
                  totalActiveAnimations = 0;
                }
              } else if (lastAnimation.event == 'setClass') {
                animationsToCancel.push(lastAnimation);
                cleanup(element, className);
              } else if (runningAnimations[className]) {
                var current = runningAnimations[className];
                if (current.event == animationEvent) {
                  skipAnimation = true;
                } else {
                  animationsToCancel.push(current);
                  cleanup(element, className);
                }
              }
              if (animationsToCancel.length > 0) {
                forEach(animationsToCancel, function (operation) {
                  operation.cancel();
                });
              }
            }
            if (runner.isClassBased && !runner.isSetClassOperation && !skipAnimation) {
              skipAnimation = animationEvent == 'addClass' == element.hasClass(className);  //opposite of XOR
            }
            if (skipAnimation) {
              fireDOMOperation();
              fireBeforeCallbackAsync();
              fireAfterCallbackAsync();
              fireDoneCallbackAsync();
              return;
            }
            if (animationEvent == 'leave') {
              //there's no need to ever remove the listener since the element
              //will be removed (destroyed) after the leave animation ends or
              //is cancelled midway
              element.one('$destroy', function (e) {
                var element = angular.element(this);
                var state = element.data(NG_ANIMATE_STATE);
                if (state) {
                  var activeLeaveAnimation = state.active['ng-leave'];
                  if (activeLeaveAnimation) {
                    activeLeaveAnimation.cancel();
                    cleanup(element, 'ng-leave');
                  }
                }
              });
            }
            //the ng-animate class does nothing, but it's here to allow for
            //parent animations to find and cancel child animations when needed
            element.addClass(NG_ANIMATE_CLASS_NAME);
            var localAnimationCount = globalAnimationCounter++;
            totalActiveAnimations++;
            runningAnimations[className] = runner;
            element.data(NG_ANIMATE_STATE, {
              last: runner,
              active: runningAnimations,
              index: localAnimationCount,
              totalActive: totalActiveAnimations
            });
            //first we run the before animations and when all of those are complete
            //then we perform the DOM operation and run the next set of animations
            fireBeforeCallbackAsync();
            runner.before(function (cancelled) {
              var data = element.data(NG_ANIMATE_STATE);
              cancelled = cancelled || !data || !data.active[className] || runner.isClassBased && data.active[className].event != animationEvent;
              fireDOMOperation();
              if (cancelled === true) {
                closeAnimation();
              } else {
                fireAfterCallbackAsync();
                runner.after(closeAnimation);
              }
            });
            function fireDOMCallback(animationPhase) {
              var eventName = '$animate:' + animationPhase;
              if (elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
                $$asyncCallback(function () {
                  element.triggerHandler(eventName, {
                    event: animationEvent,
                    className: className
                  });
                });
              }
            }
            function fireBeforeCallbackAsync() {
              fireDOMCallback('before');
            }
            function fireAfterCallbackAsync() {
              fireDOMCallback('after');
            }
            function fireDoneCallbackAsync() {
              fireDOMCallback('close');
              if (doneCallback) {
                $$asyncCallback(function () {
                  doneCallback();
                });
              }
            }
            //it is less complicated to use a flag than managing and canceling
            //timeouts containing multiple callbacks.
            function fireDOMOperation() {
              if (!fireDOMOperation.hasBeenRun) {
                fireDOMOperation.hasBeenRun = true;
                domOperation();
              }
            }
            function closeAnimation() {
              if (!closeAnimation.hasBeenRun) {
                closeAnimation.hasBeenRun = true;
                var data = element.data(NG_ANIMATE_STATE);
                if (data) {
                  /* only structural animations wait for reflow before removing an
                 animation, but class-based animations don't. An example of this
                 failing would be when a parent HTML tag has a ng-class attribute
                 causing ALL directives below to skip animations during the digest */
                  if (runner && runner.isClassBased) {
                    cleanup(element, className);
                  } else {
                    $$asyncCallback(function () {
                      var data = element.data(NG_ANIMATE_STATE) || {};
                      if (localAnimationCount == data.index) {
                        cleanup(element, className, animationEvent);
                      }
                    });
                    element.data(NG_ANIMATE_STATE, data);
                  }
                }
                fireDoneCallbackAsync();
              }
            }
          }
          function cancelChildAnimations(element) {
            var node = extractElementNode(element);
            if (node) {
              var nodes = angular.isFunction(node.getElementsByClassName) ? node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) : node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
              forEach(nodes, function (element) {
                element = angular.element(element);
                var data = element.data(NG_ANIMATE_STATE);
                if (data && data.active) {
                  forEach(data.active, function (runner) {
                    runner.cancel();
                  });
                }
              });
            }
          }
          function cleanup(element, className) {
            if (isMatchingElement(element, $rootElement)) {
              if (!rootAnimateState.disabled) {
                rootAnimateState.running = false;
                rootAnimateState.structural = false;
              }
            } else if (className) {
              var data = element.data(NG_ANIMATE_STATE) || {};
              var removeAnimations = className === true;
              if (!removeAnimations && data.active && data.active[className]) {
                data.totalActive--;
                delete data.active[className];
              }
              if (removeAnimations || !data.totalActive) {
                element.removeClass(NG_ANIMATE_CLASS_NAME);
                element.removeData(NG_ANIMATE_STATE);
              }
            }
          }
          function animationsDisabled(element, parentElement) {
            if (rootAnimateState.disabled) {
              return true;
            }
            if (isMatchingElement(element, $rootElement)) {
              return rootAnimateState.running;
            }
            var allowChildAnimations, parentRunningAnimation, hasParent;
            do {
              //the element did not reach the root element which means that it
              //is not apart of the DOM. Therefore there is no reason to do
              //any animations on it
              if (parentElement.length === 0)
                break;
              var isRoot = isMatchingElement(parentElement, $rootElement);
              var state = isRoot ? rootAnimateState : parentElement.data(NG_ANIMATE_STATE) || {};
              if (state.disabled) {
                return true;
              }
              //no matter what, for an animation to work it must reach the root element
              //this implies that the element is attached to the DOM when the animation is run
              if (isRoot) {
                hasParent = true;
              }
              //once a flag is found that is strictly false then everything before
              //it will be discarded and all child animations will be restricted
              if (allowChildAnimations !== false) {
                var animateChildrenFlag = parentElement.data(NG_ANIMATE_CHILDREN);
                if (angular.isDefined(animateChildrenFlag)) {
                  allowChildAnimations = animateChildrenFlag;
                }
              }
              parentRunningAnimation = parentRunningAnimation || state.running || state.last && !state.last.isClassBased;
            } while (parentElement = parentElement.parent());
            return !hasParent || !allowChildAnimations && parentRunningAnimation;
          }
        }
      ]);
      $animateProvider.register('', [
        '$window',
        '$sniffer',
        '$timeout',
        '$$animateReflow',
        function ($window, $sniffer, $timeout, $$animateReflow) {
          // Detect proper transitionend/animationend event names.
          var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;
          // If unprefixed events are not supported but webkit-prefixed are, use the latter.
          // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
          // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
          // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
          // Register both events in case `window.onanimationend` is not supported because of that,
          // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
          // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
          // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
          if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
            CSS_PREFIX = '-webkit-';
            TRANSITION_PROP = 'WebkitTransition';
            TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
          } else {
            TRANSITION_PROP = 'transition';
            TRANSITIONEND_EVENT = 'transitionend';
          }
          if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
            CSS_PREFIX = '-webkit-';
            ANIMATION_PROP = 'WebkitAnimation';
            ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
          } else {
            ANIMATION_PROP = 'animation';
            ANIMATIONEND_EVENT = 'animationend';
          }
          var DURATION_KEY = 'Duration';
          var PROPERTY_KEY = 'Property';
          var DELAY_KEY = 'Delay';
          var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
          var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
          var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
          var NG_ANIMATE_BLOCK_CLASS_NAME = 'ng-animate-block-transitions';
          var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
          var CLOSING_TIME_BUFFER = 1.5;
          var ONE_SECOND = 1000;
          var lookupCache = {};
          var parentCounter = 0;
          var animationReflowQueue = [];
          var cancelAnimationReflow;
          function clearCacheAfterReflow() {
            if (!cancelAnimationReflow) {
              cancelAnimationReflow = $$animateReflow(function () {
                animationReflowQueue = [];
                cancelAnimationReflow = null;
                lookupCache = {};
              });
            }
          }
          function afterReflow(element, callback) {
            if (cancelAnimationReflow) {
              cancelAnimationReflow();
            }
            animationReflowQueue.push(callback);
            cancelAnimationReflow = $$animateReflow(function () {
              forEach(animationReflowQueue, function (fn) {
                fn();
              });
              animationReflowQueue = [];
              cancelAnimationReflow = null;
              lookupCache = {};
            });
          }
          var closingTimer = null;
          var closingTimestamp = 0;
          var animationElementQueue = [];
          function animationCloseHandler(element, totalTime) {
            var node = extractElementNode(element);
            element = angular.element(node);
            //this item will be garbage collected by the closing
            //animation timeout
            animationElementQueue.push(element);
            //but it may not need to cancel out the existing timeout
            //if the timestamp is less than the previous one
            var futureTimestamp = Date.now() + totalTime;
            if (futureTimestamp <= closingTimestamp) {
              return;
            }
            $timeout.cancel(closingTimer);
            closingTimestamp = futureTimestamp;
            closingTimer = $timeout(function () {
              closeAllAnimations(animationElementQueue);
              animationElementQueue = [];
            }, totalTime, false);
          }
          function closeAllAnimations(elements) {
            forEach(elements, function (element) {
              var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
              if (elementData) {
                (elementData.closeAnimationFn || noop)();
              }
            });
          }
          function getElementAnimationDetails(element, cacheKey) {
            var data = cacheKey ? lookupCache[cacheKey] : null;
            if (!data) {
              var transitionDuration = 0;
              var transitionDelay = 0;
              var animationDuration = 0;
              var animationDelay = 0;
              var transitionDelayStyle;
              var animationDelayStyle;
              var transitionDurationStyle;
              var transitionPropertyStyle;
              //we want all the styles defined before and after
              forEach(element, function (element) {
                if (element.nodeType == ELEMENT_NODE) {
                  var elementStyles = $window.getComputedStyle(element) || {};
                  transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];
                  transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);
                  transitionPropertyStyle = elementStyles[TRANSITION_PROP + PROPERTY_KEY];
                  transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];
                  transitionDelay = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);
                  animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];
                  animationDelay = Math.max(parseMaxTime(animationDelayStyle), animationDelay);
                  var aDuration = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);
                  if (aDuration > 0) {
                    aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
                  }
                  animationDuration = Math.max(aDuration, animationDuration);
                }
              });
              data = {
                total: 0,
                transitionPropertyStyle: transitionPropertyStyle,
                transitionDurationStyle: transitionDurationStyle,
                transitionDelayStyle: transitionDelayStyle,
                transitionDelay: transitionDelay,
                transitionDuration: transitionDuration,
                animationDelayStyle: animationDelayStyle,
                animationDelay: animationDelay,
                animationDuration: animationDuration
              };
              if (cacheKey) {
                lookupCache[cacheKey] = data;
              }
            }
            return data;
          }
          function parseMaxTime(str) {
            var maxValue = 0;
            var values = angular.isString(str) ? str.split(/\s*,\s*/) : [];
            forEach(values, function (value) {
              maxValue = Math.max(parseFloat(value) || 0, maxValue);
            });
            return maxValue;
          }
          function getCacheKey(element) {
            var parentElement = element.parent();
            var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
            if (!parentID) {
              parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
              parentID = parentCounter;
            }
            return parentID + '-' + extractElementNode(element).getAttribute('class');
          }
          function animateSetup(animationEvent, element, className, calculationDecorator) {
            var cacheKey = getCacheKey(element);
            var eventCacheKey = cacheKey + ' ' + className;
            var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;
            var stagger = {};
            if (itemIndex > 0) {
              var staggerClassName = className + '-stagger';
              var staggerCacheKey = cacheKey + ' ' + staggerClassName;
              var applyClasses = !lookupCache[staggerCacheKey];
              applyClasses && element.addClass(staggerClassName);
              stagger = getElementAnimationDetails(element, staggerCacheKey);
              applyClasses && element.removeClass(staggerClassName);
            }
            /* the animation itself may need to add/remove special CSS classes
         * before calculating the anmation styles */
            calculationDecorator = calculationDecorator || function (fn) {
              return fn();
            };
            element.addClass(className);
            var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};
            var timings = calculationDecorator(function () {
                return getElementAnimationDetails(element, eventCacheKey);
              });
            var transitionDuration = timings.transitionDuration;
            var animationDuration = timings.animationDuration;
            if (transitionDuration === 0 && animationDuration === 0) {
              element.removeClass(className);
              return false;
            }
            element.data(NG_ANIMATE_CSS_DATA_KEY, {
              running: formerData.running || 0,
              itemIndex: itemIndex,
              stagger: stagger,
              timings: timings,
              closeAnimationFn: noop
            });
            //temporarily disable the transition so that the enter styles
            //don't animate twice (this is here to avoid a bug in Chrome/FF).
            var isCurrentlyAnimating = formerData.running > 0 || animationEvent == 'setClass';
            if (transitionDuration > 0) {
              blockTransitions(element, className, isCurrentlyAnimating);
            }
            //staggering keyframe animations work by adjusting the `animation-delay` CSS property
            //on the given element, however, the delay value can only calculated after the reflow
            //since by that time $animate knows how many elements are being animated. Therefore,
            //until the reflow occurs the element needs to be blocked (where the keyframe animation
            //is set to `none 0s`). This blocking mechanism should only be set for when a stagger
            //animation is detected and when the element item index is greater than 0.
            if (animationDuration > 0 && stagger.animationDelay > 0 && stagger.animationDuration === 0) {
              blockKeyframeAnimations(element);
            }
            return true;
          }
          function isStructuralAnimation(className) {
            return className == 'ng-enter' || className == 'ng-move' || className == 'ng-leave';
          }
          function blockTransitions(element, className, isAnimating) {
            if (isStructuralAnimation(className) || !isAnimating) {
              extractElementNode(element).style[TRANSITION_PROP + PROPERTY_KEY] = 'none';
            } else {
              element.addClass(NG_ANIMATE_BLOCK_CLASS_NAME);
            }
          }
          function blockKeyframeAnimations(element) {
            extractElementNode(element).style[ANIMATION_PROP] = 'none 0s';
          }
          function unblockTransitions(element, className) {
            var prop = TRANSITION_PROP + PROPERTY_KEY;
            var node = extractElementNode(element);
            if (node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
            element.removeClass(NG_ANIMATE_BLOCK_CLASS_NAME);
          }
          function unblockKeyframeAnimations(element) {
            var prop = ANIMATION_PROP;
            var node = extractElementNode(element);
            if (node.style[prop] && node.style[prop].length > 0) {
              node.style[prop] = '';
            }
          }
          function animateRun(animationEvent, element, className, activeAnimationComplete) {
            var node = extractElementNode(element);
            var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if (node.getAttribute('class').indexOf(className) == -1 || !elementData) {
              activeAnimationComplete();
              return;
            }
            var activeClassName = '';
            forEach(className.split(' '), function (klass, i) {
              activeClassName += (i > 0 ? ' ' : '') + klass + '-active';
            });
            var stagger = elementData.stagger;
            var timings = elementData.timings;
            var itemIndex = elementData.itemIndex;
            var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
            var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
            var maxDelayTime = maxDelay * ONE_SECOND;
            var startTime = Date.now();
            var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;
            var style = '', appliedStyles = [];
            if (timings.transitionDuration > 0) {
              var propertyStyle = timings.transitionPropertyStyle;
              if (propertyStyle.indexOf('all') == -1) {
                style += CSS_PREFIX + 'transition-property: ' + propertyStyle + ';';
                style += CSS_PREFIX + 'transition-duration: ' + timings.transitionDurationStyle + ';';
                appliedStyles.push(CSS_PREFIX + 'transition-property');
                appliedStyles.push(CSS_PREFIX + 'transition-duration');
              }
            }
            if (itemIndex > 0) {
              if (stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
                var delayStyle = timings.transitionDelayStyle;
                style += CSS_PREFIX + 'transition-delay: ' + prepareStaggerDelay(delayStyle, stagger.transitionDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'transition-delay');
              }
              if (stagger.animationDelay > 0 && stagger.animationDuration === 0) {
                style += CSS_PREFIX + 'animation-delay: ' + prepareStaggerDelay(timings.animationDelayStyle, stagger.animationDelay, itemIndex) + '; ';
                appliedStyles.push(CSS_PREFIX + 'animation-delay');
              }
            }
            if (appliedStyles.length > 0) {
              //the element being animated may sometimes contain comment nodes in
              //the jqLite object, so we're safe to use a single variable to house
              //the styles since there is always only one element being animated
              var oldStyle = node.getAttribute('style') || '';
              node.setAttribute('style', oldStyle + '; ' + style);
            }
            element.on(css3AnimationEvents, onAnimationProgress);
            element.addClass(activeClassName);
            elementData.closeAnimationFn = function () {
              onEnd();
              activeAnimationComplete();
            };
            var staggerTime = itemIndex * (Math.max(stagger.animationDelay, stagger.transitionDelay) || 0);
            var animationTime = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
            var totalTime = (staggerTime + animationTime) * ONE_SECOND;
            elementData.running++;
            animationCloseHandler(element, totalTime);
            return onEnd;
            // This will automatically be called by $animate so
            // there is no need to attach this internally to the
            // timeout done method.
            function onEnd(cancelled) {
              element.off(css3AnimationEvents, onAnimationProgress);
              element.removeClass(activeClassName);
              animateClose(element, className);
              var node = extractElementNode(element);
              for (var i in appliedStyles) {
                node.style.removeProperty(appliedStyles[i]);
              }
            }
            function onAnimationProgress(event) {
              event.stopPropagation();
              var ev = event.originalEvent || event;
              var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();
              /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
              var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));
              /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animations sometimes close off early */
              if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
                activeAnimationComplete();
              }
            }
          }
          function prepareStaggerDelay(delayStyle, staggerDelay, index) {
            var style = '';
            forEach(delayStyle.split(','), function (val, i) {
              style += (i > 0 ? ',' : '') + (index * staggerDelay + parseInt(val, 10)) + 's';
            });
            return style;
          }
          function animateBefore(animationEvent, element, className, calculationDecorator) {
            if (animateSetup(animationEvent, element, className, calculationDecorator)) {
              return function (cancelled) {
                cancelled && animateClose(element, className);
              };
            }
          }
          function animateAfter(animationEvent, element, className, afterAnimationComplete) {
            if (element.data(NG_ANIMATE_CSS_DATA_KEY)) {
              return animateRun(animationEvent, element, className, afterAnimationComplete);
            } else {
              animateClose(element, className);
              afterAnimationComplete();
            }
          }
          function animate(animationEvent, element, className, animationComplete) {
            //If the animateSetup function doesn't bother returning a
            //cancellation function then it means that there is no animation
            //to perform at all
            var preReflowCancellation = animateBefore(animationEvent, element, className);
            if (!preReflowCancellation) {
              clearCacheAfterReflow();
              animationComplete();
              return;
            }
            //There are two cancellation functions: one is before the first
            //reflow animation and the second is during the active state
            //animation. The first function will take care of removing the
            //data from the element which will not make the 2nd animation
            //happen in the first place
            var cancel = preReflowCancellation;
            afterReflow(element, function () {
              unblockTransitions(element, className);
              unblockKeyframeAnimations(element);
              //once the reflow is complete then we point cancel to
              //the new cancellation function which will remove all of the
              //animation properties from the active animation
              cancel = animateAfter(animationEvent, element, className, animationComplete);
            });
            return function (cancelled) {
              (cancel || noop)(cancelled);
            };
          }
          function animateClose(element, className) {
            element.removeClass(className);
            var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
            if (data) {
              if (data.running) {
                data.running--;
              }
              if (!data.running || data.running === 0) {
                element.removeData(NG_ANIMATE_CSS_DATA_KEY);
              }
            }
          }
          return {
            enter: function (element, animationCompleted) {
              return animate('enter', element, 'ng-enter', animationCompleted);
            },
            leave: function (element, animationCompleted) {
              return animate('leave', element, 'ng-leave', animationCompleted);
            },
            move: function (element, animationCompleted) {
              return animate('move', element, 'ng-move', animationCompleted);
            },
            beforeSetClass: function (element, add, remove, animationCompleted) {
              var className = suffixClasses(remove, '-remove') + ' ' + suffixClasses(add, '-add');
              var cancellationMethod = animateBefore('setClass', element, className, function (fn) {
                  /* when classes are removed from an element then the transition style
             * that is applied is the transition defined on the element without the
             * CSS class being there. This is how CSS3 functions outside of ngAnimate.
             * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                  var klass = element.attr('class');
                  element.removeClass(remove);
                  element.addClass(add);
                  var timings = fn();
                  element.attr('class', klass);
                  return timings;
                });
              if (cancellationMethod) {
                afterReflow(element, function () {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            beforeAddClass: function (element, className, animationCompleted) {
              var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), function (fn) {
                  /* when a CSS class is added to an element then the transition style that
             * is applied is the transition defined on the element when the CSS class
             * is added at the time of the animation. This is how CSS3 functions
             * outside of ngAnimate. */
                  element.addClass(className);
                  var timings = fn();
                  element.removeClass(className);
                  return timings;
                });
              if (cancellationMethod) {
                afterReflow(element, function () {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              clearCacheAfterReflow();
              animationCompleted();
            },
            setClass: function (element, add, remove, animationCompleted) {
              remove = suffixClasses(remove, '-remove');
              add = suffixClasses(add, '-add');
              var className = remove + ' ' + add;
              return animateAfter('setClass', element, className, animationCompleted);
            },
            addClass: function (element, className, animationCompleted) {
              return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted);
            },
            beforeRemoveClass: function (element, className, animationCompleted) {
              var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), function (fn) {
                  /* when classes are removed from an element then the transition style
             * that is applied is the transition defined on the element without the
             * CSS class being there. This is how CSS3 functions outside of ngAnimate.
             * http://plnkr.co/edit/j8OzgTNxHTb4n3zLyjGW?p=preview */
                  var klass = element.attr('class');
                  element.removeClass(className);
                  var timings = fn();
                  element.attr('class', klass);
                  return timings;
                });
              if (cancellationMethod) {
                afterReflow(element, function () {
                  unblockTransitions(element, className);
                  unblockKeyframeAnimations(element);
                  animationCompleted();
                });
                return cancellationMethod;
              }
              animationCompleted();
            },
            removeClass: function (element, className, animationCompleted) {
              return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted);
            }
          };
          function suffixClasses(classes, suffix) {
            var className = '';
            classes = angular.isArray(classes) ? classes : classes.split(/\s+/);
            forEach(classes, function (klass, i) {
              if (klass && klass.length > 0) {
                className += (i > 0 ? ' ' : '') + klass + suffix;
              }
            });
            return className;
          }
        }
      ]);
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.27
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
 *
 *
 * <div doc-module-components="ngCookies"></div>
 *
 * See {@link ngCookies.$cookies `$cookies`} and
 * {@link ngCookies.$cookieStore `$cookieStore`} for usage.
 */
  angular.module('ngCookies', ['ng']).factory('$cookies', [
    '$rootScope',
    '$browser',
    function ($rootScope, $browser) {
      var cookies = {}, lastCookies = {}, lastBrowserCookies, runEval = false, copy = angular.copy, isUndefined = angular.isUndefined;
      //creates a poller fn that copies all cookies from the $browser to service & inits the service
      $browser.addPollFn(function () {
        var currentCookies = $browser.cookies();
        if (lastBrowserCookies != currentCookies) {
          //relies on browser.cookies() impl
          lastBrowserCookies = currentCookies;
          copy(currentCookies, lastCookies);
          copy(currentCookies, cookies);
          if (runEval)
            $rootScope.$apply();
        }
      })();
      runEval = true;
      //at the end of each eval, push cookies
      //TODO: this should happen before the "delayed" watches fire, because if some cookies are not
      //      strings or browser refuses to store some cookies, we update the model in the push fn.
      $rootScope.$watch(push);
      return cookies;
      /**
       * Pushes all the cookies from the service to the browser and verifies if all cookies were
       * stored.
       */
      function push() {
        var name, value, browserCookies, updated;
        //delete any cookies deleted in $cookies
        for (name in lastCookies) {
          if (isUndefined(cookies[name])) {
            $browser.cookies(name, undefined);
          }
        }
        //update all cookies updated in $cookies
        for (name in cookies) {
          value = cookies[name];
          if (!angular.isString(value)) {
            value = '' + value;
            cookies[name] = value;
          }
          if (value !== lastCookies[name]) {
            $browser.cookies(name, value);
            updated = true;
          }
        }
        //verify what was actually stored
        if (updated) {
          updated = false;
          browserCookies = $browser.cookies();
          for (name in cookies) {
            if (cookies[name] !== browserCookies[name]) {
              //delete or reset all cookies that the browser dropped from $cookies
              if (isUndefined(browserCookies[name])) {
                delete cookies[name];
              } else {
                cookies[name] = browserCookies[name];
              }
              updated = true;
            }
          }
        }
      }
    }
  ]).factory('$cookieStore', [
    '$cookies',
    function ($cookies) {
      return {
        get: function (key) {
          var value = $cookies[key];
          return value ? angular.fromJson(value) : value;
        },
        put: function (key, value) {
          $cookies[key] = angular.toJson(value);
        },
        remove: function (key) {
          delete $cookies[key];
        }
      };
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.2.27
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  var $resourceMinErr = angular.$$minErr('$resource');
  // Helper functions and regex to lookup a dotted path on an object
  // stopping at undefined/null.  The path must be composed of ASCII
  // identifiers (just like $parse)
  var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;
  function isValidDottedPath(path) {
    return path != null && path !== '' && path !== 'hasOwnProperty' && MEMBER_NAME_REGEX.test('.' + path);
  }
  function lookupDottedPath(obj, path) {
    if (!isValidDottedPath(path)) {
      throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
    }
    var keys = path.split('.');
    for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {
      var key = keys[i];
      obj = obj !== null ? obj[key] : undefined;
    }
    return obj;
  }
  /**
 * Create a shallow copy of an object and clear other fields from the destination
 */
  function shallowClearAndCopy(src, dst) {
    dst = dst || {};
    angular.forEach(dst, function (value, key) {
      delete dst[key];
    });
    for (var key in src) {
      if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
    return dst;
  }
  /**
 * @ngdoc module
 * @name ngResource
 * @description
 *
 * # ngResource
 *
 * The `ngResource` module provides interaction support with RESTful services
 * via the $resource service.
 *
 *
 * <div doc-module-components="ngResource"></div>
 *
 * See {@link ngResource.$resource `$resource`} for usage.
 */
  /**
 * @ngdoc service
 * @name $resource
 * @requires $http
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * @param {string} url A parametrized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If any of the parameter value is a function, it will be executed every time
 *   when a param value needs to be obtained for a request (unless the param was overridden).
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
 *   from the corresponding property on the `data` object (provided when calling an action method).  For
 *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`
 *   will be `data.someProp`.
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom action that should extend
 *   the default set of resource actions. The declaration should be created in the format of {@link
 *   ng.$http#usage_parameters $http.config}:
 *
 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
 *        ...}
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
 *     `DELETE`, `JSONP`, etc).
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be executed every time when a param value needs to
 *     be obtained for a request (unless the param was overridden).
 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *     By default, transformRequest will contain one function that checks if the request data is
 *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
 *     `transformRequest` to an empty array: `transformRequest: []`
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     response body and headers and returns its transformed (typically deserialized) version.
 *     By default, transformResponse will contain one function that checks if the response looks like
 *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set
 *     `transformResponse` to an empty array: `transformResponse: []`
 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
 *     GET request, otherwise if a cache instance built with
 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
 *     caching.
 *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that
 *     should abort the request when resolved.
 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
 *     for more information.
 *   - **`responseType`** - `{string}` - see
 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
 *     with `http response` object. See {@link ng.$http $http interceptors}.
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   { 'get':    {method:'GET'},
 *     'save':   {method:'POST'},
 *     'query':  {method:'GET', isArray:true},
 *     'remove': {method:'DELETE'},
 *     'delete': {method:'DELETE'} };
 *   ```
 *
 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
 *   destination and parameters. When the data is returned from the server then the object is an
 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
 *   read, update, delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId:'@id'});
 *   var user = User.get({userId:123}, function() {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a $resource object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
 *
 *   Success callback is called with (value, responseHeaders) arguments. Error callback is called
 *   with (httpResponse) argument.
 *
 *   Class actions return empty instance (with additional properties below).
 *   Instance actions return promise of the action.
 *
 *   The Resource instances and collection have these additional properties:
 *
 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in
 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is resolved with the {@link ng.$http http response} object, without
 *     the `resource` property.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the interceptor.
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding.
 *
 * @example
 *
 * # Credit card resource
 *
 * ```js
     // Define CreditCard class
     var CreditCard = $resource('/user/:userId/card/:cardId',
      {userId:123, cardId:'@id'}, {
       charge: {method:'POST', params:{charge:true}}
      });

     // We can retrieve a collection from the server
     var cards = CreditCard.query(function() {
       // GET: /user/123/card
       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

       var card = cards[0];
       // each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);
       card.name = "J. Smith";
       // non GET methods are mapped onto the instances
       card.$save();
       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
       // server returns: {id:456, number:'1234', name: 'J. Smith'};

       // our custom method is mapped as well.
       card.$charge({amount:9.99});
       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
     });

     // we can create an instance as well
     var newCard = new CreditCard({number:'0123'});
     newCard.name = "Mike Smith";
     newCard.$save();
     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
     expect(newCard.id).toEqual(789);
 * ```
 *
 * The object returned from this function execution is a resource "class" which has "static" method
 * for each action in the definition.
 *
 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
 * `headers`.
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.

   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
 * in the response that came from the server as well as $http header getter function, so one
 * could rewrite the above example and get access to http headers as:
 *
   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(u, getResponseHeaders){
       u.abc = true;
       u.$save(function(u, putResponseHeaders) {
         //u => saved user object
         //putResponseHeaders => $http header getter
       });
     });
   ```
 *
 * You can also access the raw `$http` promise via the `$promise` property on the object returned
 *
   ```
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123})
         .$promise.then(function(user) {
           $scope.user = user;
         });
   ```

 * # Creating a custom 'PUT' request
 * In this example we create a custom method on our resource to make a PUT request
 * ```js
 *    var app = angular.module('app', ['ngResource', 'ngRoute']);
 *
 *    // Some APIs expect a PUT request in the format URL/object/ID
 *    // Here we are creating an 'update' method
 *    app.factory('Notes', ['$resource', function($resource) {
 *    return $resource('/notes/:id', null,
 *        {
 *            'update': { method:'PUT' }
 *        });
 *    }]);
 *
 *    // In our controller we get the ID from the URL using ngRoute and $routeParams
 *    // We pass in $routeParams and our Notes factory along with $scope
 *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                      function($scope, $routeParams, Notes) {
 *    // First get a note object from the factory
 *    var note = Notes.get({ id:$routeParams.id });
 *    $id = note.id;
 *
 *    // Now call update passing in the ID first then the object you are updating
 *    Notes.update({ id:$id }, note);
 *
 *    // This will PUT /notes/ID with the note object in the request payload
 *    }]);
 * ```
 */
  angular.module('ngResource', ['ng']).factory('$resource', [
    '$http',
    '$q',
    function ($http, $q) {
      var DEFAULT_ACTIONS = {
          'get': { method: 'GET' },
          'save': { method: 'POST' },
          'query': {
            method: 'GET',
            isArray: true
          },
          'remove': { method: 'DELETE' },
          'delete': { method: 'DELETE' }
        };
      var noop = angular.noop, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, isFunction = angular.isFunction;
      /**
     * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
     * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
     * segments:
     *    segment       = *pchar
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).replace(/%26/gi, '&').replace(/%3D/gi, '=').replace(/%2B/gi, '+');
      }
      /**
     * This method is intended for encoding *key* or *value* parts of query component. We need a
     * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
     * have to be encoded per http://tools.ietf.org/html/rfc3986:
     *    query       = *( pchar / "/" / "?" )
     *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
     *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
     *    pct-encoded   = "%" HEXDIG HEXDIG
     *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
     *                     / "*" / "+" / "," / ";" / "="
     */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, pctEncodeSpaces ? '%20' : '+');
      }
      function Route(template, defaults) {
        this.template = template;
        this.defaults = defaults || {};
        this.urlParams = {};
      }
      Route.prototype = {
        setUrlParams: function (config, params, actionUrl) {
          var self = this, url = actionUrl || self.template, val, encodedVal;
          var urlParams = self.urlParams = {};
          forEach(url.split(/\W/), function (param) {
            if (param === 'hasOwnProperty') {
              throw $resourceMinErr('badname', 'hasOwnProperty is not a valid parameter name.');
            }
            if (!new RegExp('^\\d+$').test(param) && param && new RegExp('(^|[^\\\\]):' + param + '(\\W|$)').test(url)) {
              urlParams[param] = true;
            }
          });
          url = url.replace(/\\:/g, ':');
          params = params || {};
          forEach(self.urlParams, function (_, urlParam) {
            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
            if (angular.isDefined(val) && val !== null) {
              encodedVal = encodeUriSegment(val);
              url = url.replace(new RegExp(':' + urlParam + '(\\W|$)', 'g'), function (match, p1) {
                return encodedVal + p1;
              });
            } else {
              url = url.replace(new RegExp('(/?):' + urlParam + '(\\W|$)', 'g'), function (match, leadingSlashes, tail) {
                if (tail.charAt(0) == '/') {
                  return tail;
                } else {
                  return leadingSlashes + tail;
                }
              });
            }
          });
          // strip trailing slashes and set the url
          url = url.replace(/\/+$/, '') || '/';
          // then replace collapse `/.` if found in the last URL path segment before the query
          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
          // replace escaped `/\.` with `/.`
          config.url = url.replace(/\/\\\./, '/.');
          // set params - delegate param encoding to $http
          forEach(params, function (value, key) {
            if (!self.urlParams[key]) {
              config.params = config.params || {};
              config.params[key] = value;
            }
          });
        }
      };
      function resourceFactory(url, paramDefaults, actions) {
        var route = new Route(url);
        actions = extend({}, DEFAULT_ACTIONS, actions);
        function extractParams(data, actionParams) {
          var ids = {};
          actionParams = extend({}, paramDefaults, actionParams);
          forEach(actionParams, function (value, key) {
            if (isFunction(value)) {
              value = value();
            }
            ids[key] = value && value.charAt && value.charAt(0) == '@' ? lookupDottedPath(data, value.substr(1)) : value;
          });
          return ids;
        }
        function defaultResponseInterceptor(response) {
          return response.resource;
        }
        function Resource(value) {
          shallowClearAndCopy(value || {}, this);
        }
        forEach(actions, function (action, name) {
          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);
          Resource[name] = function (a1, a2, a3, a4) {
            var params = {}, data, success, error;
            /* jshint -W086 */
            /* (purposefully fall through case statements) */
            switch (arguments.length) {
            case 4:
              error = a4;
              success = a3;
            //fallthrough
            case 3:
            case 2:
              if (isFunction(a2)) {
                if (isFunction(a1)) {
                  success = a1;
                  error = a2;
                  break;
                }
                success = a2;
                error = a3;  //fallthrough
              } else {
                params = a1;
                data = a2;
                success = a3;
                break;
              }
            case 1:
              if (isFunction(a1))
                success = a1;
              else if (hasBody)
                data = a1;
              else
                params = a1;
              break;
            case 0:
              break;
            default:
              throw $resourceMinErr('badargs', 'Expected up to 4 arguments [params, data, success, error], got {0} arguments', arguments.length);
            }
            /* jshint +W086 */
            /* (purposefully fall through case statements) */
            var isInstanceCall = this instanceof Resource;
            var value = isInstanceCall ? data : action.isArray ? [] : new Resource(data);
            var httpConfig = {};
            var responseInterceptor = action.interceptor && action.interceptor.response || defaultResponseInterceptor;
            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError || undefined;
            forEach(action, function (value, key) {
              if (key != 'params' && key != 'isArray' && key != 'interceptor') {
                httpConfig[key] = copy(value);
              }
            });
            if (hasBody)
              httpConfig.data = data;
            route.setUrlParams(httpConfig, extend({}, extractParams(data, action.params || {}), params), action.url);
            var promise = $http(httpConfig).then(function (response) {
                var data = response.data, promise = value.$promise;
                if (data) {
                  // Need to convert action.isArray to boolean in case it is undefined
                  // jshint -W018
                  if (angular.isArray(data) !== !!action.isArray) {
                    throw $resourceMinErr('badcfg', 'Error in resource configuration. Expected ' + 'response to contain an {0} but got an {1}', action.isArray ? 'array' : 'object', angular.isArray(data) ? 'array' : 'object');
                  }
                  // jshint +W018
                  if (action.isArray) {
                    value.length = 0;
                    forEach(data, function (item) {
                      if (typeof item === 'object') {
                        value.push(new Resource(item));
                      } else {
                        // Valid JSON values may be string literals, and these should not be converted
                        // into objects. These items will not have access to the Resource prototype
                        // methods, but unfortunately there
                        value.push(item);
                      }
                    });
                  } else {
                    shallowClearAndCopy(data, value);
                    value.$promise = promise;
                  }
                }
                value.$resolved = true;
                response.resource = value;
                return response;
              }, function (response) {
                value.$resolved = true;
                (error || noop)(response);
                return $q.reject(response);
              });
            promise = promise.then(function (response) {
              var value = responseInterceptor(response);
              (success || noop)(value, response.headers);
              return value;
            }, responseErrorInterceptor);
            if (!isInstanceCall) {
              // we are creating instance / collection
              // - set the initial promise
              // - return the instance / collection
              value.$promise = promise;
              value.$resolved = false;
              return value;
            }
            // instance call
            return promise;
          };
          Resource.prototype['$' + name] = function (params, success, error) {
            if (isFunction(params)) {
              error = success;
              success = params;
              params = {};
            }
            var result = Resource[name].call(this, params, this, success, error);
            return result.$promise || result;
          };
        });
        Resource.bind = function (additionalParamDefaults) {
          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
        };
        return Resource;
      }
      return resourceFactory;
    }
  ]);
}(window, window.angular));
/**
 * @license AngularJS v1.3.0
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function (window, angular, undefined) {
  'use strict';
  /**
 * @ngdoc module
 * @name ngTouch
 * @description
 *
 * # ngTouch
 *
 * The `ngTouch` module provides touch events and other helpers for touch-enabled devices.
 * The implementation is based on jQuery Mobile touch event handling
 * ([jquerymobile.com](http://jquerymobile.com/)).
 *
 *
 * See {@link ngTouch.$swipe `$swipe`} for usage.
 *
 * <div doc-module-components="ngTouch"></div>
 *
 */
  // define ngTouch module
  /* global -ngTouch */
  var ngTouch = angular.module('ngTouch', []);
  /* global ngTouch: false */
  /**
     * @ngdoc service
     * @name $swipe
     *
     * @description
     * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe
     * behavior, to make implementing swipe-related directives more convenient.
     *
     * Requires the {@link ngTouch `ngTouch`} module to be installed.
     *
     * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by
     * `ngCarousel` in a separate component.
     *
     * # Usage
     * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element
     * which is to be watched for swipes, and an object with four handler functions. See the
     * documentation for `bind` below.
     */
  ngTouch.factory('$swipe', [function () {
      // The total distance in any direction before we make the call on swipe vs. scroll.
      var MOVE_BUFFER_RADIUS = 10;
      var POINTER_EVENTS = {
          'mouse': {
            start: 'mousedown',
            move: 'mousemove',
            end: 'mouseup'
          },
          'touch': {
            start: 'touchstart',
            move: 'touchmove',
            end: 'touchend',
            cancel: 'touchcancel'
          }
        };
      function getCoordinates(event) {
        var touches = event.touches && event.touches.length ? event.touches : [event];
        var e = event.changedTouches && event.changedTouches[0] || event.originalEvent && event.originalEvent.changedTouches && event.originalEvent.changedTouches[0] || touches[0].originalEvent || touches[0];
        return {
          x: e.clientX,
          y: e.clientY
        };
      }
      function getEvents(pointerTypes, eventType) {
        var res = [];
        angular.forEach(pointerTypes, function (pointerType) {
          var eventName = POINTER_EVENTS[pointerType][eventType];
          if (eventName) {
            res.push(eventName);
          }
        });
        return res.join(' ');
      }
      return {
        bind: function (element, eventHandlers, pointerTypes) {
          // Absolute total movement, used to control swipe vs. scroll.
          var totalX, totalY;
          // Coordinates of the start position.
          var startCoords;
          // Last event's position.
          var lastPos;
          // Whether a swipe is active.
          var active = false;
          pointerTypes = pointerTypes || [
            'mouse',
            'touch'
          ];
          element.on(getEvents(pointerTypes, 'start'), function (event) {
            startCoords = getCoordinates(event);
            active = true;
            totalX = 0;
            totalY = 0;
            lastPos = startCoords;
            eventHandlers['start'] && eventHandlers['start'](startCoords, event);
          });
          var events = getEvents(pointerTypes, 'cancel');
          if (events) {
            element.on(events, function (event) {
              active = false;
              eventHandlers['cancel'] && eventHandlers['cancel'](event);
            });
          }
          element.on(getEvents(pointerTypes, 'move'), function (event) {
            if (!active)
              return;
            // Android will send a touchcancel if it thinks we're starting to scroll.
            // So when the total distance (+ or - or both) exceeds 10px in either direction,
            // we either:
            // - On totalX > totalY, we send preventDefault() and treat this as a swipe.
            // - On totalY > totalX, we let the browser handle it as a scroll.
            if (!startCoords)
              return;
            var coords = getCoordinates(event);
            totalX += Math.abs(coords.x - lastPos.x);
            totalY += Math.abs(coords.y - lastPos.y);
            lastPos = coords;
            if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
              return;
            }
            // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.
            if (totalY > totalX) {
              // Allow native scrolling to take over.
              active = false;
              eventHandlers['cancel'] && eventHandlers['cancel'](event);
              return;
            } else {
              // Prevent the browser from scrolling.
              event.preventDefault();
              eventHandlers['move'] && eventHandlers['move'](coords, event);
            }
          });
          element.on(getEvents(pointerTypes, 'end'), function (event) {
            if (!active)
              return;
            active = false;
            eventHandlers['end'] && eventHandlers['end'](getCoordinates(event), event);
          });
        }
      };
    }]);
  /* global ngTouch: false */
  /**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * A more powerful replacement for the default ngClick designed to be used on touchscreen
 * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending
 * the click event. This version handles them immediately, and then prevents the
 * following click event from propagating.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * This directive can fall back to using an ordinary click event, and so works on desktop
 * browsers as well as mobile.
 *
 * This directive also sets the CSS class `ng-click-active` while the element is being held
 * down (by a mouse click or touch) so you can restyle the depressed element if you wish.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate
 * upon tap. (Event object is available as `$event`)
 *
 * @example
    <example module="ngClickExample" deps="angular-touch.js">
      <file name="index.html">
        <button ng-click="count = count + 1" ng-init="count=0">
          Increment
        </button>
        count: {{ count }}
      </file>
      <file name="script.js">
        angular.module('ngClickExample', ['ngTouch']);
      </file>
    </example>
 */
  ngTouch.config([
    '$provide',
    function ($provide) {
      $provide.decorator('ngClickDirective', [
        '$delegate',
        function ($delegate) {
          // drop the default ngClick directive
          $delegate.shift();
          return $delegate;
        }
      ]);
    }
  ]);
  ngTouch.directive('ngClick', [
    '$parse',
    '$timeout',
    '$rootElement',
    function ($parse, $timeout, $rootElement) {
      var TAP_DURATION = 750;
      // Shorter than 750ms is a tap, longer is a taphold or drag.
      var MOVE_TOLERANCE = 12;
      // 12px seems to work in most mobile browsers.
      var PREVENT_DURATION = 2500;
      // 2.5 seconds maximum from preventGhostClick call to click
      var CLICKBUSTER_THRESHOLD = 25;
      // 25 pixels in any dimension is the limit for busting clicks.
      var ACTIVE_CLASS_NAME = 'ng-click-active';
      var lastPreventedTime;
      var touchCoordinates;
      var lastLabelClickCoordinates;
      // TAP EVENTS AND GHOST CLICKS
      //
      // Why tap events?
      // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're
      // double-tapping, and then fire a click event.
      //
      // This delay sucks and makes mobile apps feel unresponsive.
      // So we detect touchstart, touchmove, touchcancel and touchend ourselves and determine when
      // the user has tapped on something.
      //
      // What happens when the browser then generates a click event?
      // The browser, of course, also detects the tap and fires a click after a delay. This results in
      // tapping/clicking twice. We do "clickbusting" to prevent it.
      //
      // How does it work?
      // We attach global touchstart and click handlers, that run during the capture (early) phase.
      // So the sequence for a tap is:
      // - global touchstart: Sets an "allowable region" at the point touched.
      // - element's touchstart: Starts a touch
      // (- touchmove or touchcancel ends the touch, no click follows)
      // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold
      //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().
      // - preventGhostClick() removes the allowable region the global touchstart created.
      // - The browser generates a click event.
      // - The global click handler catches the click, and checks whether it was in an allowable region.
      //     - If preventGhostClick was called, the region will have been removed, the click is busted.
      //     - If the region is still there, the click proceeds normally. Therefore clicks on links and
      //       other elements without ngTap on them work normally.
      //
      // This is an ugly, terrible hack!
      // Yeah, tell me about it. The alternatives are using the slow click events, or making our users
      // deal with the ghost clicks, so I consider this the least of evils. Fortunately Angular
      // encapsulates this ugly logic away from the user.
      //
      // Why not just put click handlers on the element?
      // We do that too, just to be sure. If the tap event caused the DOM to change,
      // it is possible another element is now in that position. To take account for these possibly
      // distinct elements, the handlers are global and care only about coordinates.
      // Checks if the coordinates are close enough to be within the region.
      function hit(x1, y1, x2, y2) {
        return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
      }
      // Checks a list of allowable regions against a click location.
      // Returns true if the click should be allowed.
      // Splices out the allowable region from the list after it has been used.
      function checkAllowableRegions(touchCoordinates, x, y) {
        for (var i = 0; i < touchCoordinates.length; i += 2) {
          if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) {
            touchCoordinates.splice(i, i + 2);
            return true;  // allowable region
          }
        }
        return false;  // No allowable region; bust it.
      }
      // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick
      // was called recently.
      function onClick(event) {
        if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
          return;  // Too old.
        }
        var touches = event.touches && event.touches.length ? event.touches : [event];
        var x = touches[0].clientX;
        var y = touches[0].clientY;
        // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label
        // and on the input element). Depending on the exact browser, this second click we don't want
        // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label
        // click event
        if (x < 1 && y < 1) {
          return;  // offscreen
        }
        if (lastLabelClickCoordinates && lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {
          return;  // input click triggered by label click
        }
        // reset label click coordinates on first subsequent click
        if (lastLabelClickCoordinates) {
          lastLabelClickCoordinates = null;
        }
        // remember label click coordinates to prevent click busting of trigger click event on input
        if (event.target.tagName.toLowerCase() === 'label') {
          lastLabelClickCoordinates = [
            x,
            y
          ];
        }
        // Look for an allowable region containing this click.
        // If we find one, that means it was created by touchstart and not removed by
        // preventGhostClick, so we don't bust it.
        if (checkAllowableRegions(touchCoordinates, x, y)) {
          return;
        }
        // If we didn't find an allowable region, bust the click.
        event.stopPropagation();
        event.preventDefault();
        // Blur focused form elements
        event.target && event.target.blur();
      }
      // Global touchstart handler that creates an allowable region for a click event.
      // This allowable region can be removed by preventGhostClick if we want to bust it.
      function onTouchStart(event) {
        var touches = event.touches && event.touches.length ? event.touches : [event];
        var x = touches[0].clientX;
        var y = touches[0].clientY;
        touchCoordinates.push(x, y);
        $timeout(function () {
          // Remove the allowable region.
          for (var i = 0; i < touchCoordinates.length; i += 2) {
            if (touchCoordinates[i] == x && touchCoordinates[i + 1] == y) {
              touchCoordinates.splice(i, i + 2);
              return;
            }
          }
        }, PREVENT_DURATION, false);
      }
      // On the first call, attaches some event handlers. Then whenever it gets called, it creates a
      // zone around the touchstart where clicks will get busted.
      function preventGhostClick(x, y) {
        if (!touchCoordinates) {
          $rootElement[0].addEventListener('click', onClick, true);
          $rootElement[0].addEventListener('touchstart', onTouchStart, true);
          touchCoordinates = [];
        }
        lastPreventedTime = Date.now();
        checkAllowableRegions(touchCoordinates, x, y);
      }
      // Actual linking function.
      return function (scope, element, attr) {
        var clickHandler = $parse(attr.ngClick), tapping = false, tapElement,
          // Used to blur the element after a tap.
          startTime,
          // Used to check if the tap was held too long.
          touchStartX, touchStartY;
        function resetState() {
          tapping = false;
          element.removeClass(ACTIVE_CLASS_NAME);
        }
        element.on('touchstart', function (event) {
          tapping = true;
          tapElement = event.target ? event.target : event.srcElement;
          // IE uses srcElement.
          // Hack for Safari, which can target text nodes instead of containers.
          if (tapElement.nodeType == 3) {
            tapElement = tapElement.parentNode;
          }
          element.addClass(ACTIVE_CLASS_NAME);
          startTime = Date.now();
          var touches = event.touches && event.touches.length ? event.touches : [event];
          var e = touches[0].originalEvent || touches[0];
          touchStartX = e.clientX;
          touchStartY = e.clientY;
        });
        element.on('touchmove', function (event) {
          resetState();
        });
        element.on('touchcancel', function (event) {
          resetState();
        });
        element.on('touchend', function (event) {
          var diff = Date.now() - startTime;
          var touches = event.changedTouches && event.changedTouches.length ? event.changedTouches : event.touches && event.touches.length ? event.touches : [event];
          var e = touches[0].originalEvent || touches[0];
          var x = e.clientX;
          var y = e.clientY;
          var dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));
          if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {
            // Call preventGhostClick so the clickbuster will catch the corresponding click.
            preventGhostClick(x, y);
            // Blur the focused element (the button, probably) before firing the callback.
            // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.
            // I couldn't get anything to work reliably on Android Chrome.
            if (tapElement) {
              tapElement.blur();
            }
            if (!angular.isDefined(attr.disabled) || attr.disabled === false) {
              element.triggerHandler('click', [event]);
            }
          }
          resetState();
        });
        // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
        // something else nearby.
        element.onclick = function (event) {
        };
        // Actual click handler.
        // There are three different kinds of clicks, only two of which reach this point.
        // - On desktop browsers without touch events, their clicks will always come here.
        // - On mobile browsers, the simulated "fast" click will call this.
        // - But the browser's follow-up slow click will be "busted" before it reaches this handler.
        // Therefore it's safe to use this directive on both mobile and desktop.
        element.on('click', function (event, touchend) {
          scope.$apply(function () {
            clickHandler(scope, { $event: touchend || event });
          });
        });
        element.on('mousedown', function (event) {
          element.addClass(ACTIVE_CLASS_NAME);
        });
        element.on('mousemove mouseup', function (event) {
          element.removeClass(ACTIVE_CLASS_NAME);
        });
      };
    }
  ]);
  /* global ngTouch: false */
  /**
 * @ngdoc directive
 * @name ngSwipeLeft
 *
 * @description
 * Specify custom behavior when an element is swiped to the left on a touchscreen device.
 * A leftward swipe is a quick, right-to-left slide of the finger.
 * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * To disable the mouse click and drag functionality, add `ng-swipe-disable-mouse` to
 * the `ng-swipe-left` or `ng-swipe-right` DOM Element.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate
 * upon left swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeLeftExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeLeftExample', ['ngTouch']);
      </file>
    </example>
 */
  /**
 * @ngdoc directive
 * @name ngSwipeRight
 *
 * @description
 * Specify custom behavior when an element is swiped to the right on a touchscreen device.
 * A rightward swipe is a quick, left-to-right slide of the finger.
 * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate
 * upon right swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeRightExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeRightExample', ['ngTouch']);
      </file>
    </example>
 */
  function makeSwipeDirective(directiveName, direction, eventName) {
    ngTouch.directive(directiveName, [
      '$parse',
      '$swipe',
      function ($parse, $swipe) {
        // The maximum vertical delta for a swipe should be less than 75px.
        var MAX_VERTICAL_DISTANCE = 75;
        // Vertical distance should not be more than a fraction of the horizontal distance.
        var MAX_VERTICAL_RATIO = 0.3;
        // At least a 30px lateral motion is necessary for a swipe.
        var MIN_HORIZONTAL_DISTANCE = 30;
        return function (scope, element, attr) {
          var swipeHandler = $parse(attr[directiveName]);
          var startCoords, valid;
          function validSwipe(coords) {
            // Check that it's within the coordinates.
            // Absolute vertical distance must be within tolerances.
            // Horizontal distance, we take the current X - the starting X.
            // This is negative for leftward swipes and positive for rightward swipes.
            // After multiplying by the direction (-1 for left, +1 for right), legal swipes
            // (ie. same direction as the directive wants) will have a positive delta and
            // illegal ones a negative delta.
            // Therefore this delta must be positive, and larger than the minimum.
            if (!startCoords)
              return false;
            var deltaY = Math.abs(coords.y - startCoords.y);
            var deltaX = (coords.x - startCoords.x) * direction;
            return valid && deltaY < MAX_VERTICAL_DISTANCE && deltaX > 0 && deltaX > MIN_HORIZONTAL_DISTANCE && deltaY / deltaX < MAX_VERTICAL_RATIO;
          }
          var pointerTypes = ['touch'];
          if (!angular.isDefined(attr['ngSwipeDisableMouse'])) {
            pointerTypes.push('mouse');
          }
          $swipe.bind(element, {
            'start': function (coords, event) {
              startCoords = coords;
              valid = true;
            },
            'cancel': function (event) {
              valid = false;
            },
            'end': function (coords, event) {
              if (validSwipe(coords)) {
                scope.$apply(function () {
                  element.triggerHandler(eventName);
                  swipeHandler(scope, { $event: event });
                });
              }
            }
          }, pointerTypes);
        };
      }
    ]);
  }
  // Left is negative X-coordinate, right is positive.
  makeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');
  makeSwipeDirective('ngSwipeRight', 1, 'swiperight');
}(window, window.angular));
/**
 * State-based routing for AngularJS
 * @version v0.2.13
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
/* commonjs package manager support (eg componentjs) */
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  module.exports = 'ui.router';
}
(function (window, angular, undefined) {
  /*jshint globalstrict:true*/
  /*global angular:false*/
  'use strict';
  var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy;
  function inherit(parent, extra) {
    return extend(new (extend(function () {
    }, { prototype: parent }))(), extra);
  }
  function merge(dst) {
    forEach(arguments, function (obj) {
      if (obj !== dst) {
        forEach(obj, function (value, key) {
          if (!dst.hasOwnProperty(key))
            dst[key] = value;
        });
      }
    });
    return dst;
  }
  /**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
  function ancestors(first, second) {
    var path = [];
    for (var n in first.path) {
      if (first.path[n] !== second.path[n])
        break;
      path.push(first.path[n]);
    }
    return path;
  }
  /**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
  function objectKeys(object) {
    if (Object.keys) {
      return Object.keys(object);
    }
    var result = [];
    angular.forEach(object, function (val, key) {
      result.push(key);
    });
    return result;
  }
  /**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
  function indexOf(array, value) {
    if (Array.prototype.indexOf) {
      return array.indexOf(value, Number(arguments[2]) || 0);
    }
    var len = array.length >>> 0, from = Number(arguments[2]) || 0;
    from = from < 0 ? Math.ceil(from) : Math.floor(from);
    if (from < 0)
      from += len;
    for (; from < len; from++) {
      if (from in array && array[from] === value)
        return from;
    }
    return -1;
  }
  /**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
  function inheritParams(currentParams, newParams, $current, $to) {
    var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
    for (var i in parents) {
      if (!parents[i].params)
        continue;
      parentParams = objectKeys(parents[i].params);
      if (!parentParams.length)
        continue;
      for (var j in parentParams) {
        if (indexOf(inheritList, parentParams[j]) >= 0)
          continue;
        inheritList.push(parentParams[j]);
        inherited[parentParams[j]] = currentParams[parentParams[j]];
      }
    }
    return extend({}, inherited, newParams);
  }
  /**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
  function equalForKeys(a, b, keys) {
    if (!keys) {
      keys = [];
      for (var n in a)
        keys.push(n);  // Used instead of Object.keys() for IE8 compatibility
    }
    for (var i = 0; i < keys.length; i++) {
      var k = keys[i];
      if (a[k] != b[k])
        return false;  // Not '===', values aren't necessarily normalized
    }
    return true;
  }
  /**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
  function filterByKeys(keys, values) {
    var filtered = {};
    forEach(keys, function (name) {
      filtered[name] = values[name];
    });
    return filtered;
  }
  // like _.indexBy
  // when you know that your index values will be unique, or you want last-one-in to win
  function indexBy(array, propName) {
    var result = {};
    forEach(array, function (item) {
      result[item[propName]] = item;
    });
    return result;
  }
  // extracted from underscore.js
  // Return a copy of the object only containing the whitelisted properties.
  function pick(obj) {
    var copy = {};
    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    forEach(keys, function (key) {
      if (key in obj)
        copy[key] = obj[key];
    });
    return copy;
  }
  // extracted from underscore.js
  // Return a copy of the object omitting the blacklisted properties.
  function omit(obj) {
    var copy = {};
    var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
    for (var key in obj) {
      if (indexOf(keys, key) == -1)
        copy[key] = obj[key];
    }
    return copy;
  }
  function pluck(collection, key) {
    var result = isArray(collection) ? [] : {};
    forEach(collection, function (val, i) {
      result[i] = isFunction(key) ? key(val) : val[key];
    });
    return result;
  }
  function filter(collection, callback) {
    var array = isArray(collection);
    var result = array ? [] : {};
    forEach(collection, function (val, i) {
      if (callback(val, i)) {
        result[array ? result.length : i] = val;
      }
    });
    return result;
  }
  function map(collection, callback) {
    var result = isArray(collection) ? [] : {};
    forEach(collection, function (val, i) {
      result[i] = callback(val, i);
    });
    return result;
  }
  /**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
  angular.module('ui.router.util', ['ng']);
  /**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
  angular.module('ui.router.router', ['ui.router.util']);
  /**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
  angular.module('ui.router.state', [
    'ui.router.router',
    'ui.router.util'
  ]);
  /**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
  angular.module('ui.router', ['ui.router.state']);
  angular.module('ui.router.compat', ['ui.router']);
  /**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
  $Resolve.$inject = [
    '$q',
    '$injector'
  ];
  function $Resolve($q, $injector) {
    var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
        $$promises: NOTHING,
        $$values: NOTHING
      });
    /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
    this.study = function (invocables) {
      if (!isObject(invocables))
        throw new Error('\'invocables\' must be an object');
      var invocableKeys = objectKeys(invocables || {});
      // Perform a topological sort of invocables to build an ordered plan
      var plan = [], cycle = [], visited = {};
      function visit(value, key) {
        if (visited[key] === VISIT_DONE)
          return;
        cycle.push(key);
        if (visited[key] === VISIT_IN_PROGRESS) {
          cycle.splice(0, indexOf(cycle, key));
          throw new Error('Cyclic dependency: ' + cycle.join(' -> '));
        }
        visited[key] = VISIT_IN_PROGRESS;
        if (isString(value)) {
          plan.push(key, [function () {
              return $injector.get(value);
            }], NO_DEPENDENCIES);
        } else {
          var params = $injector.annotate(value);
          forEach(params, function (param) {
            if (param !== key && invocables.hasOwnProperty(param))
              visit(invocables[param], param);
          });
          plan.push(key, value, params);
        }
        cycle.pop();
        visited[key] = VISIT_DONE;
      }
      forEach(invocables, visit);
      invocables = cycle = visited = null;
      // plan is all that's required
      function isResolve(value) {
        return isObject(value) && value.then && value.$$promises;
      }
      return function (locals, parent, self) {
        if (isResolve(locals) && self === undefined) {
          self = parent;
          parent = locals;
          locals = null;
        }
        if (!locals)
          locals = NO_LOCALS;
        else if (!isObject(locals)) {
          throw new Error('\'locals\' must be an object');
        }
        if (!parent)
          parent = NO_PARENT;
        else if (!isResolve(parent)) {
          throw new Error('\'parent\' must be a promise returned by $resolve.resolve()');
        }
        // To complete the overall resolution, we have to wait for the parent
        // promise and for the promise for each invokable in our plan.
        var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = false;
        function done() {
          // Merge parent values we haven't got yet and publish our own $$values
          if (!--wait) {
            if (!merged)
              merge(values, parent.$$values);
            result.$$values = values;
            result.$$promises = result.$$promises || true;
            // keep for isResolve()
            delete result.$$inheritedValues;
            resolution.resolve(values);
          }
        }
        function fail(reason) {
          result.$$failure = reason;
          resolution.reject(reason);
        }
        // Short-circuit if parent has already failed
        if (isDefined(parent.$$failure)) {
          fail(parent.$$failure);
          return result;
        }
        if (parent.$$inheritedValues) {
          merge(values, omit(parent.$$inheritedValues, invocableKeys));
        }
        // Merge parent values if the parent has already resolved, or merge
        // parent promises and wait if the parent resolve is still in progress.
        extend(promises, parent.$$promises);
        if (parent.$$values) {
          merged = merge(values, omit(parent.$$values, invocableKeys));
          result.$$inheritedValues = omit(parent.$$values, invocableKeys);
          done();
        } else {
          if (parent.$$inheritedValues) {
            result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
          }
          parent.then(done, fail);
        }
        // Process each invocable in the plan, but ignore any where a local of the same name exists.
        for (var i = 0, ii = plan.length; i < ii; i += 3) {
          if (locals.hasOwnProperty(plan[i]))
            done();
          else
            invoke(plan[i], plan[i + 1], plan[i + 2]);
        }
        function invoke(key, invocable, params) {
          // Create a deferred for this invocation. Failures will propagate to the resolution as well.
          var invocation = $q.defer(), waitParams = 0;
          function onfailure(reason) {
            invocation.reject(reason);
            fail(reason);
          }
          // Wait for any parameter that we have a promise for (either from parent or from this
          // resolve; in that case study() will have made sure it's ordered before us in the plan).
          forEach(params, function (dep) {
            if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
              waitParams++;
              promises[dep].then(function (result) {
                values[dep] = result;
                if (!--waitParams)
                  proceed();
              }, onfailure);
            }
          });
          if (!waitParams)
            proceed();
          function proceed() {
            if (isDefined(result.$$failure))
              return;
            try {
              invocation.resolve($injector.invoke(invocable, self, values));
              invocation.promise.then(function (result) {
                values[key] = result;
                done();
              }, onfailure);
            } catch (e) {
              onfailure(e);
            }
          }
          // Publish promise synchronously; invocations further down in the plan may depend on it.
          promises[key] = invocation.promise;
        }
        return result;
      };
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
    this.resolve = function (invocables, locals, parent, self) {
      return this.study(invocables)(locals, parent, self);
    };
  }
  angular.module('ui.router.util').service('$resolve', $Resolve);
  /**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
  $TemplateFactory.$inject = [
    '$http',
    '$templateCache',
    '$injector'
  ];
  function $TemplateFactory($http, $templateCache, $injector) {
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
    this.fromConfig = function (config, params, locals) {
      return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
    this.fromString = function (template, params) {
      return isFunction(template) ? template(params) : template;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
    this.fromUrl = function (url, params) {
      if (isFunction(url))
        url = url(params);
      if (url == null)
        return null;
      else
        return $http.get(url, {
          cache: $templateCache,
          headers: { Accept: 'text/html' }
        }).then(function (response) {
          return response.data;
        });
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
    this.fromProvider = function (provider, params, locals) {
      return $injector.invoke(provider, null, locals || { params: params });
    };
  }
  angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);
  var $$UMFP;
  // reference to $UrlMatcherFactoryProvider
  /**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 * 
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon 
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 * 
 * Examples:
 * 
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when 
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
  function UrlMatcher(pattern, config, parentMatcher) {
    config = extend({ params: {} }, isObject(config) ? config : {});
    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
    //   '*' name
    //   ':' name
    //   '{' name '}'
    //   '{' name ':' regexp '}'
    // The regular expression is somewhat complicated due to the need to allow curly braces
    // inside the regular expression. The placeholder regexp breaks down as follows:
    //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
    //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
    //    [^{}\\]+                       - anything other than curly braces or backslash
    //    \\.                            - a backslash escape
    //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
    var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = '^', last = 0, m, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
    function addParameter(id, type, config, location) {
      paramNames.push(id);
      if (parentParams[id])
        return parentParams[id];
      if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id))
        throw new Error('Invalid parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
      if (params[id])
        throw new Error('Duplicate parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
      params[id] = new $$UMFP.Param(id, type, config, location);
      return params[id];
    }
    function quoteRegExp(string, pattern, squash) {
      var surroundPattern = [
          '',
          ''
        ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, '\\$&');
      if (!pattern)
        return result;
      switch (squash) {
      case false:
        surroundPattern = [
          '(',
          ')'
        ];
        break;
      case true:
        surroundPattern = [
          '?(',
          ')?'
        ];
        break;
      default:
        surroundPattern = [
          '(' + squash + '|',
          ')?'
        ];
        break;
      }
      return result + surroundPattern[0] + pattern + surroundPattern[1];
    }
    this.source = pattern;
    // Split into static segments separated by path parameter placeholders.
    // The number of segments is always 1 more than the number of parameters.
    function matchDetails(m, isSearch) {
      var id, regexp, segment, type, cfg, arrayMode;
      id = m[2] || m[3];
      // IE[78] returns '' for unmatched groups instead of null
      cfg = config.params[id];
      segment = pattern.substring(last, m.index);
      regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
      type = $$UMFP.type(regexp || 'string') || inherit($$UMFP.type('string'), { pattern: new RegExp(regexp) });
      return {
        id: id,
        regexp: regexp,
        segment: segment,
        type: type,
        cfg: cfg
      };
    }
    var p, param, segment;
    while (m = placeholder.exec(pattern)) {
      p = matchDetails(m, false);
      if (p.segment.indexOf('?') >= 0)
        break;
      // we're into the search part
      param = addParameter(p.id, p.type, p.cfg, 'path');
      compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash);
      segments.push(p.segment);
      last = placeholder.lastIndex;
    }
    segment = pattern.substring(last);
    // Find any search parameter names and remove them from the last segment
    var i = segment.indexOf('?');
    if (i >= 0) {
      var search = this.sourceSearch = segment.substring(i);
      segment = segment.substring(0, i);
      this.sourcePath = pattern.substring(0, last + i);
      if (search.length > 0) {
        last = 0;
        while (m = searchPlaceholder.exec(search)) {
          p = matchDetails(m, true);
          param = addParameter(p.id, p.type, p.cfg, 'search');
          last = placeholder.lastIndex;  // check if ?&
        }
      }
    } else {
      this.sourcePath = pattern;
      this.sourceSearch = '';
    }
    compiled += quoteRegExp(segment) + (config.strict === false ? '/?' : '') + '$';
    segments.push(segment);
    this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
    this.prefix = segments[0];
    this.$$paramNames = paramNames;
  }
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
  UrlMatcher.prototype.concat = function (pattern, config) {
    // Because order of search parameters is irrelevant, we can add our own search
    // parameters to the end of the new pattern. Parse the new pattern by itself
    // and then join the bits together, but it's much easier to do this on a string level.
    var defaultConfig = {
        caseInsensitive: $$UMFP.caseInsensitive(),
        strict: $$UMFP.strictMode(),
        squash: $$UMFP.defaultSquashPolicy()
      };
    return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
  };
  UrlMatcher.prototype.toString = function () {
    return this.source;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
  UrlMatcher.prototype.exec = function (path, searchParams) {
    var m = this.regexp.exec(path);
    if (!m)
      return null;
    searchParams = searchParams || {};
    var paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {}, i, j, cfg, paramName;
    if (nPath !== m.length - 1)
      throw new Error('Unbalanced capture group in route \'' + this.source + '\'');
    function decodePathArray(string) {
      function reverseString(str) {
        return str.split('').reverse().join('');
      }
      function unquoteDashes(str) {
        return str.replace(/\\-/, '-');
      }
      var split = reverseString(string).split(/-(?!\\)/);
      var allReversed = map(split, reverseString);
      return map(allReversed, unquoteDashes).reverse();
    }
    for (i = 0; i < nPath; i++) {
      paramName = paramNames[i];
      var param = this.params[paramName];
      var paramVal = m[i + 1];
      // if the param value matches a pre-replace pair, replace the value before decoding.
      for (j = 0; j < param.replace; j++) {
        if (param.replace[j].from === paramVal)
          paramVal = param.replace[j].to;
      }
      if (paramVal && param.array === true)
        paramVal = decodePathArray(paramVal);
      values[paramName] = param.value(paramVal);
    }
    for (; i < nTotal; i++) {
      paramName = paramNames[i];
      values[paramName] = this.params[paramName].value(searchParams[paramName]);
    }
    return values;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 * 
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
  UrlMatcher.prototype.parameters = function (param) {
    if (!isDefined(param))
      return this.$$paramNames;
    return this.params[param] || null;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
  UrlMatcher.prototype.validates = function (params) {
    return this.params.$$validates(params);
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
  UrlMatcher.prototype.format = function (values) {
    values = values || {};
    var segments = this.segments, params = this.parameters(), paramset = this.params;
    if (!this.validates(values))
      return null;
    var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
    function encodeDashes(str) {
      // Replace dashes with encoded "\-"
      return encodeURIComponent(str).replace(/-/g, function (c) {
        return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    for (i = 0; i < nTotal; i++) {
      var isPathParam = i < nPath;
      var name = params[i], param = paramset[name], value = param.value(values[name]);
      var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
      var squash = isDefaultValue ? param.squash : false;
      var encoded = param.type.encode(value);
      if (isPathParam) {
        var nextSegment = segments[i + 1];
        if (squash === false) {
          if (encoded != null) {
            if (isArray(encoded)) {
              result += map(encoded, encodeDashes).join('-');
            } else {
              result += encodeURIComponent(encoded);
            }
          }
          result += nextSegment;
        } else if (squash === true) {
          var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
          result += nextSegment.match(capture)[1];
        } else if (isString(squash)) {
          result += squash + nextSegment;
        }
      } else {
        if (encoded == null || isDefaultValue && squash !== false)
          continue;
        if (!isArray(encoded))
          encoded = [encoded];
        encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
        result += (search ? '&' : '?') + (name + '=' + encoded);
        search = true;
      }
    }
    return result;
  };
  /**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
  function Type(config) {
    extend(this, config);
  }
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
  Type.prototype.is = function (val, key) {
    return true;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
  Type.prototype.encode = function (val, key) {
    return val;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
  Type.prototype.decode = function (val, key) {
    return val;
  };
  /**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
  Type.prototype.equals = function (a, b) {
    return a == b;
  };
  Type.prototype.$subPattern = function () {
    var sub = this.pattern.toString();
    return sub.substr(1, sub.length - 2);
  };
  Type.prototype.pattern = /.*/;
  Type.prototype.toString = function () {
    return '{Type:' + this.name + '}';
  };
  /*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
  Type.prototype.$asArray = function (mode, isSearch) {
    if (!mode)
      return this;
    if (mode === 'auto' && !isSearch)
      throw new Error('\'auto\' array mode is for query parameters only');
    return new ArrayType(this, mode);
    function ArrayType(type, mode) {
      function bindTo(type, callbackName) {
        return function () {
          return type[callbackName].apply(type, arguments);
        };
      }
      // Wrap non-array value as array
      function arrayWrap(val) {
        return isArray(val) ? val : isDefined(val) ? [val] : [];
      }
      // Unwrap array value for "auto" mode. Return undefined for empty array.
      function arrayUnwrap(val) {
        switch (val.length) {
        case 0:
          return undefined;
        case 1:
          return mode === 'auto' ? val[0] : val;
        default:
          return val;
        }
      }
      function falsey(val) {
        return !val;
      }
      // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
      function arrayHandler(callback, allTruthyMode) {
        return function handleArray(val) {
          val = arrayWrap(val);
          var result = map(val, callback);
          if (allTruthyMode === true)
            return filter(result, falsey).length === 0;
          return arrayUnwrap(result);
        };
      }
      // Wraps type (.equals) functions to operate on each value of an array
      function arrayEqualsHandler(callback) {
        return function handleArray(val1, val2) {
          var left = arrayWrap(val1), right = arrayWrap(val2);
          if (left.length !== right.length)
            return false;
          for (var i = 0; i < left.length; i++) {
            if (!callback(left[i], right[i]))
              return false;
          }
          return true;
        };
      }
      this.encode = arrayHandler(bindTo(type, 'encode'));
      this.decode = arrayHandler(bindTo(type, 'decode'));
      this.is = arrayHandler(bindTo(type, 'is'), true);
      this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
      this.pattern = type.pattern;
      this.$arrayMode = mode;
    }
  };
  /**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
  function $UrlMatcherFactory() {
    $$UMFP = this;
    var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;
    function valToString(val) {
      return val != null ? val.toString().replace(/\//g, '%2F') : val;
    }
    function valFromString(val) {
      return val != null ? val.toString().replace(/%2F/g, '/') : val;
    }
    //  TODO: in 1.0, make string .is() return false if value is undefined by default.
    //  function regexpMatches(val) { /*jshint validthis:true */ return isDefined(val) && this.pattern.test(val); }
    function regexpMatches(val) {
      /*jshint validthis:true */
      return this.pattern.test(val);
    }
    var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
        string: {
          encode: valToString,
          decode: valFromString,
          is: regexpMatches,
          pattern: /[^/]*/
        },
        int: {
          encode: valToString,
          decode: function (val) {
            return parseInt(val, 10);
          },
          is: function (val) {
            return isDefined(val) && this.decode(val.toString()) === val;
          },
          pattern: /\d+/
        },
        bool: {
          encode: function (val) {
            return val ? 1 : 0;
          },
          decode: function (val) {
            return parseInt(val, 10) !== 0;
          },
          is: function (val) {
            return val === true || val === false;
          },
          pattern: /0|1/
        },
        date: {
          encode: function (val) {
            if (!this.is(val))
              return undefined;
            return [
              val.getFullYear(),
              ('0' + (val.getMonth() + 1)).slice(-2),
              ('0' + val.getDate()).slice(-2)
            ].join('-');
          },
          decode: function (val) {
            if (this.is(val))
              return val;
            var match = this.capture.exec(val);
            return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
          },
          is: function (val) {
            return val instanceof Date && !isNaN(val.valueOf());
          },
          equals: function (a, b) {
            return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
          },
          pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
          capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
        },
        json: {
          encode: angular.toJson,
          decode: angular.fromJson,
          is: angular.isObject,
          equals: angular.equals,
          pattern: /[^/]*/
        },
        any: {
          encode: angular.identity,
          decode: angular.identity,
          is: angular.identity,
          equals: angular.equals,
          pattern: /.*/
        }
      };
    function getDefaultConfig() {
      return {
        strict: isStrictMode,
        caseInsensitive: isCaseInsensitive
      };
    }
    function isInjectable(value) {
      return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
    }
    /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
    $UrlMatcherFactory.$$getDefaultValue = function (config) {
      if (!isInjectable(config.value))
        return config.value;
      if (!injector)
        throw new Error('Injectable functions cannot be called at configuration time');
      return injector.invoke(config.value);
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
    this.caseInsensitive = function (value) {
      if (isDefined(value))
        isCaseInsensitive = value;
      return isCaseInsensitive;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
    this.strictMode = function (value) {
      if (isDefined(value))
        isStrictMode = value;
      return isStrictMode;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
    this.defaultSquashPolicy = function (value) {
      if (!isDefined(value))
        return defaultSquashPolicy;
      if (value !== true && value !== false && !isString(value))
        throw new Error('Invalid squash policy: ' + value + '. Valid policies: false, true, arbitrary-string');
      defaultSquashPolicy = value;
      return value;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
    this.compile = function (pattern, config) {
      return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
    this.isMatcher = function (o) {
      if (!isObject(o))
        return false;
      var result = true;
      forEach(UrlMatcher.prototype, function (val, name) {
        if (isFunction(val)) {
          result = result && (isDefined(o[name]) && isFunction(o[name]));
        }
      });
      return result;
    };
    /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
    this.type = function (name, definition, definitionFn) {
      if (!isDefined(definition))
        return $types[name];
      if ($types.hasOwnProperty(name))
        throw new Error('A type named \'' + name + '\' has already been defined.');
      $types[name] = new Type(extend({ name: name }, definition));
      if (definitionFn) {
        typeQueue.push({
          name: name,
          def: definitionFn
        });
        if (!enqueue)
          flushTypeQueue();
      }
      return this;
    };
    // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
    function flushTypeQueue() {
      while (typeQueue.length) {
        var type = typeQueue.shift();
        if (type.pattern)
          throw new Error('You cannot override a type\'s .pattern at runtime.');
        angular.extend($types[type.name], injector.invoke(type.def));
      }
    }
    // Register default types. Store them in the prototype of $types.
    forEach(defaultTypes, function (type, name) {
      $types[name] = new Type(extend({ name: name }, type));
    });
    $types = inherit($types, {});
    /* No need to document $get, since it returns this */
    this.$get = [
      '$injector',
      function ($injector) {
        injector = $injector;
        enqueue = false;
        flushTypeQueue();
        forEach(defaultTypes, function (type, name) {
          if (!$types[name])
            $types[name] = new Type(type);
        });
        return this;
      }
    ];
    this.Param = function Param(id, type, config, location) {
      var self = this;
      config = unwrapShorthand(config);
      type = getType(config, type, location);
      var arrayMode = getArrayMode();
      type = arrayMode ? type.$asArray(arrayMode, location === 'search') : type;
      if (type.name === 'string' && !arrayMode && location === 'path' && config.value === undefined)
        config.value = '';
      // for 0.2.x; in 0.3.0+ do not automatically default to ""
      var isOptional = config.value !== undefined;
      var squash = getSquashPolicy(config, isOptional);
      var replace = getReplace(config, arrayMode, isOptional, squash);
      function unwrapShorthand(config) {
        var keys = isObject(config) ? objectKeys(config) : [];
        var isShorthand = indexOf(keys, 'value') === -1 && indexOf(keys, 'type') === -1 && indexOf(keys, 'squash') === -1 && indexOf(keys, 'array') === -1;
        if (isShorthand)
          config = { value: config };
        config.$$fn = isInjectable(config.value) ? config.value : function () {
          return config.value;
        };
        return config;
      }
      function getType(config, urlType, location) {
        if (config.type && urlType)
          throw new Error('Param \'' + id + '\' has two type configurations.');
        if (urlType)
          return urlType;
        if (!config.type)
          return location === 'config' ? $types.any : $types.string;
        return config.type instanceof Type ? config.type : new Type(config.type);
      }
      // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
      function getArrayMode() {
        var arrayDefaults = { array: location === 'search' ? 'auto' : false };
        var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
        return extend(arrayDefaults, arrayParamNomenclature, config).array;
      }
      /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
      function getSquashPolicy(config, isOptional) {
        var squash = config.squash;
        if (!isOptional || squash === false)
          return false;
        if (!isDefined(squash) || squash == null)
          return defaultSquashPolicy;
        if (squash === true || isString(squash))
          return squash;
        throw new Error('Invalid squash policy: \'' + squash + '\'. Valid policies: false, true, or arbitrary string');
      }
      function getReplace(config, arrayMode, isOptional, squash) {
        var replace, configuredKeys, defaultPolicy = [
            {
              from: '',
              to: isOptional || arrayMode ? undefined : ''
            },
            {
              from: null,
              to: isOptional || arrayMode ? undefined : ''
            }
          ];
        replace = isArray(config.replace) ? config.replace : [];
        if (isString(squash))
          replace.push({
            from: squash,
            to: undefined
          });
        configuredKeys = map(replace, function (item) {
          return item.from;
        });
        return filter(defaultPolicy, function (item) {
          return indexOf(configuredKeys, item.from) === -1;
        }).concat(replace);
      }
      /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
      function $$getDefaultValue() {
        if (!injector)
          throw new Error('Injectable functions cannot be called at configuration time');
        return injector.invoke(config.$$fn);
      }
      /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
      function $value(value) {
        function hasReplaceVal(val) {
          return function (obj) {
            return obj.from === val;
          };
        }
        function $replace(value) {
          var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {
              return obj.to;
            });
          return replacement.length ? replacement[0] : value;
        }
        value = $replace(value);
        return isDefined(value) ? self.type.decode(value) : $$getDefaultValue();
      }
      function toString() {
        return '{Param:' + id + ' ' + type + ' squash: \'' + squash + '\' optional: ' + isOptional + '}';
      }
      extend(this, {
        id: id,
        type: type,
        location: location,
        array: arrayMode,
        squash: squash,
        replace: replace,
        isOptional: isOptional,
        value: $value,
        dynamic: undefined,
        config: config,
        toString: toString
      });
    };
    function ParamSet(params) {
      extend(this, params || {});
    }
    ParamSet.prototype = {
      $$new: function () {
        return inherit(this, extend(new ParamSet(), { $$parent: this }));
      },
      $$keys: function () {
        var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype);
        while (parent) {
          chain.push(parent);
          parent = parent.$$parent;
        }
        chain.reverse();
        forEach(chain, function (paramset) {
          forEach(objectKeys(paramset), function (key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1)
              keys.push(key);
          });
        });
        return keys;
      },
      $$values: function (paramValues) {
        var values = {}, self = this;
        forEach(self.$$keys(), function (key) {
          values[key] = self[key].value(paramValues && paramValues[key]);
        });
        return values;
      },
      $$equals: function (paramValues1, paramValues2) {
        var equal = true, self = this;
        forEach(self.$$keys(), function (key) {
          var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
          if (!self[key].type.equals(left, right))
            equal = false;
        });
        return equal;
      },
      $$validates: function $$validate(paramValues) {
        var result = true, isOptional, val, param, self = this;
        forEach(this.$$keys(), function (key) {
          param = self[key];
          val = paramValues[key];
          isOptional = !val && param.isOptional;
          result = result && (isOptional || !!param.type.is(val));
        });
        return result;
      },
      $$parent: undefined
    };
    this.ParamSet = ParamSet;
  }
  // Register as a provider so it's available to other providers
  angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
  angular.module('ui.router.util').run([
    '$urlMatcherFactory',
    function ($urlMatcherFactory) {
    }
  ]);
  /**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
  $UrlRouterProvider.$inject = [
    '$locationProvider',
    '$urlMatcherFactoryProvider'
  ];
  function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
    var rules = [], otherwise = null, interceptDeferred = false, listener;
    // Returns a string that is a prefix of all strings matching the RegExp
    function regExpPrefix(re) {
      var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
      return prefix != null ? prefix[1].replace(/\\(.)/g, '$1') : '';
    }
    // Interpolates matched values into a String.replace()-style pattern
    function interpolate(pattern, match) {
      return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
        return match[what === '$' ? 0 : Number(what)];
      });
    }
    /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
    this.rule = function (rule) {
      if (!isFunction(rule))
        throw new Error('\'rule\' must be a function');
      rules.push(rule);
      return this;
    };
    /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
    this.otherwise = function (rule) {
      if (isString(rule)) {
        var redirect = rule;
        rule = function () {
          return redirect;
        };
      } else if (!isFunction(rule))
        throw new Error('\'rule\' must be a function');
      otherwise = rule;
      return this;
    };
    function handleIfMatch($injector, handler, match) {
      if (!match)
        return false;
      var result = $injector.invoke(handler, handler, { $match: match });
      return isDefined(result) ? result : true;
    }
    /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
    this.when = function (what, handler) {
      var redirect, handlerIsString = isString(handler);
      if (isString(what))
        what = $urlMatcherFactory.compile(what);
      if (!handlerIsString && !isFunction(handler) && !isArray(handler))
        throw new Error('invalid \'handler\' in when()');
      var strategies = {
          matcher: function (what, handler) {
            if (handlerIsString) {
              redirect = $urlMatcherFactory.compile(handler);
              handler = [
                '$match',
                function ($match) {
                  return redirect.format($match);
                }
              ];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
            }, { prefix: isString(what.prefix) ? what.prefix : '' });
          },
          regex: function (what, handler) {
            if (what.global || what.sticky)
              throw new Error('when() RegExp must not be global or sticky');
            if (handlerIsString) {
              redirect = handler;
              handler = [
                '$match',
                function ($match) {
                  return interpolate(redirect, $match);
                }
              ];
            }
            return extend(function ($injector, $location) {
              return handleIfMatch($injector, handler, what.exec($location.path()));
            }, { prefix: regExpPrefix(what) });
          }
        };
      var check = {
          matcher: $urlMatcherFactory.isMatcher(what),
          regex: what instanceof RegExp
        };
      for (var n in check) {
        if (check[n])
          return this.rule(strategies[n](what, handler));
      }
      throw new Error('invalid \'what\' in when()');
    };
    /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
    this.deferIntercept = function (defer) {
      if (defer === undefined)
        defer = true;
      interceptDeferred = defer;
    };
    /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
    this.$get = $get;
    $get.$inject = [
      '$location',
      '$rootScope',
      '$injector',
      '$browser'
    ];
    function $get($location, $rootScope, $injector, $browser) {
      var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;
      function appendBasePath(url, isHtml5, absolute) {
        if (baseHref === '/')
          return url;
        if (isHtml5)
          return baseHref.slice(0, -1) + url;
        if (absolute)
          return baseHref.slice(1) + url;
        return url;
      }
      // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
      function update(evt) {
        if (evt && evt.defaultPrevented)
          return;
        var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
        lastPushedUrl = undefined;
        if (ignoreUpdate)
          return true;
        function check(rule) {
          var handled = rule($injector, $location);
          if (!handled)
            return false;
          if (isString(handled))
            $location.replace().url(handled);
          return true;
        }
        var n = rules.length, i;
        for (i = 0; i < n; i++) {
          if (check(rules[i]))
            return;
        }
        // always check otherwise last to allow dynamic updates to the set of rules
        if (otherwise)
          check(otherwise);
      }
      function listen() {
        listener = listener || $rootScope.$on('$locationChangeSuccess', update);
        return listener;
      }
      if (!interceptDeferred)
        listen();
      return {
        sync: function () {
          update();
        },
        listen: function () {
          return listen();
        },
        update: function (read) {
          if (read) {
            location = $location.url();
            return;
          }
          if ($location.url() === location)
            return;
          $location.url(location);
          $location.replace();
        },
        push: function (urlMatcher, params, options) {
          $location.url(urlMatcher.format(params || {}));
          lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
          if (options && options.replace)
            $location.replace();
        },
        href: function (urlMatcher, params, options) {
          if (!urlMatcher.validates(params))
            return null;
          var isHtml5 = $locationProvider.html5Mode();
          if (angular.isObject(isHtml5)) {
            isHtml5 = isHtml5.enabled;
          }
          var url = urlMatcher.format(params);
          options = options || {};
          if (!isHtml5 && url !== null) {
            url = '#' + $locationProvider.hashPrefix() + url;
          }
          url = appendBasePath(url, isHtml5, options.absolute);
          if (!options.absolute || !url) {
            return url;
          }
          var slash = !isHtml5 && url ? '/' : '', port = $location.port();
          port = port === 80 || port === 443 ? '' : ':' + port;
          return [
            $location.protocol(),
            '://',
            $location.host(),
            port,
            slash,
            url
          ].join('');
        }
      };
    }
  }
  angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);
  /**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
  $StateProvider.$inject = [
    '$urlRouterProvider',
    '$urlMatcherFactoryProvider'
  ];
  function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
    var root, states = {}, $state, queue = {}, abstractKey = 'abstract';
    // Builds state properties from definition passed to registerState()
    var stateBuilder = {
        parent: function (state) {
          if (isDefined(state.parent) && state.parent)
            return findState(state.parent);
          // regex matches any valid composite state name
          // would match "contact.list" but not "contacts"
          var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
          return compositeName ? findState(compositeName[1]) : root;
        },
        data: function (state) {
          if (state.parent && state.parent.data) {
            state.data = state.self.data = extend({}, state.parent.data, state.data);
          }
          return state.data;
        },
        url: function (state) {
          var url = state.url, config = { params: state.params || {} };
          if (isString(url)) {
            if (url.charAt(0) == '^')
              return $urlMatcherFactory.compile(url.substring(1), config);
            return (state.parent.navigable || root).url.concat(url, config);
          }
          if (!url || $urlMatcherFactory.isMatcher(url))
            return url;
          throw new Error('Invalid url \'' + url + '\' in state \'' + state + '\'');
        },
        navigable: function (state) {
          return state.url ? state : state.parent ? state.parent.navigable : null;
        },
        ownParams: function (state) {
          var params = state.url && state.url.params || new $$UMFP.ParamSet();
          forEach(state.params || {}, function (config, id) {
            if (!params[id])
              params[id] = new $$UMFP.Param(id, null, config, 'config');
          });
          return params;
        },
        params: function (state) {
          return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
        },
        views: function (state) {
          var views = {};
          forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
            if (name.indexOf('@') < 0)
              name += '@' + state.parent.name;
            views[name] = view;
          });
          return views;
        },
        path: function (state) {
          return state.parent ? state.parent.path.concat(state) : [];  // exclude root from path
        },
        includes: function (state) {
          var includes = state.parent ? extend({}, state.parent.includes) : {};
          includes[state.name] = true;
          return includes;
        },
        $delegates: {}
      };
    function isRelative(stateName) {
      return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;
    }
    function findState(stateOrName, base) {
      if (!stateOrName)
        return undefined;
      var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name, path = isRelative(name);
      if (path) {
        if (!base)
          throw new Error('No reference point given for path \'' + name + '\'');
        base = findState(base);
        var rel = name.split('.'), i = 0, pathLength = rel.length, current = base;
        for (; i < pathLength; i++) {
          if (rel[i] === '' && i === 0) {
            current = base;
            continue;
          }
          if (rel[i] === '^') {
            if (!current.parent)
              throw new Error('Path \'' + name + '\' not valid for state \'' + base.name + '\'');
            current = current.parent;
            continue;
          }
          break;
        }
        rel = rel.slice(i).join('.');
        name = current.name + (current.name && rel ? '.' : '') + rel;
      }
      var state = states[name];
      if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
        return state;
      }
      return undefined;
    }
    function queueState(parentName, state) {
      if (!queue[parentName]) {
        queue[parentName] = [];
      }
      queue[parentName].push(state);
    }
    function flushQueuedChildren(parentName) {
      var queued = queue[parentName] || [];
      while (queued.length) {
        registerState(queued.shift());
      }
    }
    function registerState(state) {
      // Wrap a new object around the state so we can store our private details easily.
      state = inherit(state, {
        self: state,
        resolve: state.resolve || {},
        toString: function () {
          return this.name;
        }
      });
      var name = state.name;
      if (!isString(name) || name.indexOf('@') >= 0)
        throw new Error('State must have a valid name');
      if (states.hasOwnProperty(name))
        throw new Error('State \'' + name + '\'\' is already defined');
      // Get parent name
      var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : '';
      // If parent is not registered yet, add state to queue and register later
      if (parentName && !states[parentName]) {
        return queueState(parentName, state.self);
      }
      for (var key in stateBuilder) {
        if (isFunction(stateBuilder[key]))
          state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
      }
      states[name] = state;
      // Register the state in the global state list and with $urlRouter if necessary.
      if (!state[abstractKey] && state.url) {
        $urlRouterProvider.when(state.url, [
          '$match',
          '$stateParams',
          function ($match, $stateParams) {
            if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
              $state.transitionTo(state, $match, {
                inherit: true,
                location: false
              });
            }
          }
        ]);
      }
      // Register any queued children
      flushQueuedChildren(name);
      return state;
    }
    // Checks text to see if it looks like a glob.
    function isGlob(text) {
      return text.indexOf('*') > -1;
    }
    // Returns true if glob matches current $state name.
    function doesStateMatchGlob(glob) {
      var globSegments = glob.split('.'), segments = $state.$current.name.split('.');
      //match greedy starts
      if (globSegments[0] === '**') {
        segments = segments.slice(indexOf(segments, globSegments[1]));
        segments.unshift('**');
      }
      //match greedy ends
      if (globSegments[globSegments.length - 1] === '**') {
        segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
        segments.push('**');
      }
      if (globSegments.length != segments.length) {
        return false;
      }
      //match single stars
      for (var i = 0, l = globSegments.length; i < l; i++) {
        if (globSegments[i] === '*') {
          segments[i] = '*';
        }
      }
      return segments.join('') === globSegments.join('');
    }
    // Implicit root state that is always active
    root = registerState({
      name: '',
      url: '^',
      views: null,
      'abstract': true
    });
    root.navigable = null;
    /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
    this.decorator = decorator;
    function decorator(name, func) {
      /*jshint validthis: true */
      if (isString(name) && !isDefined(func)) {
        return stateBuilder[name];
      }
      if (!isFunction(func) || !isString(name)) {
        return this;
      }
      if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
        stateBuilder.$delegates[name] = stateBuilder[name];
      }
      stateBuilder[name] = func;
      return this;
    }
    /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"</pre>
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
    this.state = state;
    function state(name, definition) {
      /*jshint validthis: true */
      if (isObject(name))
        definition = name;
      else
        definition.name = name;
      registerState(definition);
      return this;
    }
    /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
    this.$get = $get;
    $get.$inject = [
      '$rootScope',
      '$q',
      '$view',
      '$injector',
      '$resolve',
      '$stateParams',
      '$urlRouter',
      '$location',
      '$urlMatcherFactory'
    ];
    function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
      var TransitionSuperseded = $q.reject(new Error('transition superseded'));
      var TransitionPrevented = $q.reject(new Error('transition prevented'));
      var TransitionAborted = $q.reject(new Error('transition aborted'));
      var TransitionFailed = $q.reject(new Error('transition failed'));
      // Handles the case where a state which is the target of a transition is not found, and the user
      // can optionally retry or defer the transition
      function handleRedirect(redirect, state, params, options) {
        /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
        var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);
        if (evt.defaultPrevented) {
          $urlRouter.update();
          return TransitionAborted;
        }
        if (!evt.retry) {
          return null;
        }
        // Allow the handler to return a promise to defer state lookup retry
        if (options.$retry) {
          $urlRouter.update();
          return TransitionFailed;
        }
        var retryTransition = $state.transition = $q.when(evt.retry);
        retryTransition.then(function () {
          if (retryTransition !== $state.transition)
            return TransitionSuperseded;
          redirect.options.$retry = true;
          return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
        }, function () {
          return TransitionAborted;
        });
        $urlRouter.update();
        return retryTransition;
      }
      root.locals = {
        resolve: null,
        globals: { $stateParams: {} }
      };
      $state = {
        params: {},
        current: root.self,
        $current: root,
        transition: null
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved, events are not re-fired, 
     * and controllers reinstantiated (bug with controllers reinstantiating right now, fixing soon).
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
      $state.reload = function reload() {
        return $state.transitionTo($state.current, $stateParams, {
          reload: true,
          inherit: false,
          notify: true
        });
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
      $state.go = function go(to, params, options) {
        return $state.transitionTo(to, params, extend({
          inherit: true,
          relative: $state.$current
        }, options));
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
      $state.transitionTo = function transitionTo(to, toParams, options) {
        toParams = toParams || {};
        options = extend({
          location: true,
          inherit: false,
          relative: null,
          notify: true,
          reload: false,
          $retry: false
        }, options || {});
        var from = $state.$current, fromParams = $state.params, fromPath = from.path;
        var evt, toState = findState(to, options.relative);
        if (!isDefined(toState)) {
          var redirect = {
              to: to,
              toParams: toParams,
              options: options
            };
          var redirectResult = handleRedirect(redirect, from.self, fromParams, options);
          if (redirectResult) {
            return redirectResult;
          }
          // Always retry once if the $stateNotFound was not prevented
          // (handles either redirect changed or state lazy-definition)
          to = redirect.to;
          toParams = redirect.toParams;
          options = redirect.options;
          toState = findState(to, options.relative);
          if (!isDefined(toState)) {
            if (!options.relative)
              throw new Error('No such state \'' + to + '\'');
            throw new Error('Could not resolve \'' + to + '\' from state \'' + options.relative + '\'');
          }
        }
        if (toState[abstractKey])
          throw new Error('Cannot transition to abstract state \'' + to + '\'');
        if (options.inherit)
          toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
        if (!toState.params.$$validates(toParams))
          return TransitionFailed;
        toParams = toState.params.$$values(toParams);
        to = toState;
        var toPath = to.path;
        // Starting from the root of the path, keep all levels that haven't changed
        var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
        if (!options.reload) {
          while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
            locals = toLocals[keep] = state.locals;
            keep++;
            state = toPath[keep];
          }
        }
        // If we're going to the same state and all locals are kept, we've got nothing to do.
        // But clear 'transition', as we still want to cancel any other pending transitions.
        // TODO: We may not want to bump 'transition' if we're called from a location change
        // that we've initiated ourselves, because we might accidentally abort a legitimate
        // transition initiated from code?
        if (shouldTriggerReload(to, from, locals, options)) {
          if (to.self.reloadOnSearch !== false)
            $urlRouter.update();
          $state.transition = null;
          return $q.when($state.current);
        }
        // Filter parameters before we pass them to event handlers etc.
        toParams = filterByKeys(to.params.$$keys(), toParams || {});
        // Broadcast start event and cancel the transition if requested
        if (options.notify) {
          /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
          if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
            $urlRouter.update();
            return TransitionPrevented;
          }
        }
        // Resolve locals for the remaining states, but don't update any global state just
        // yet -- if anything fails to resolve the current state needs to remain untouched.
        // We also set up an inheritance chain for the locals here. This allows the view directive
        // to quickly look up the correct definition for each view in the current state. Even
        // though we create the locals object itself outside resolveState(), it is initially
        // empty and gets filled asynchronously. We need to keep track of the promise for the
        // (fully resolved) current locals, and pass this down the chain.
        var resolved = $q.when(locals);
        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
          locals = toLocals[l] = inherit(locals);
          resolved = resolveState(state, toParams, state === to, resolved, locals, options);
        }
        // Once everything is resolved, we are ready to perform the actual transition
        // and return a promise for the new state. We also keep track of what the
        // current promise is, so that we can detect overlapping transitions and
        // keep only the outcome of the last transition.
        var transition = $state.transition = resolved.then(function () {
            var l, entering, exiting;
            if ($state.transition !== transition)
              return TransitionSuperseded;
            // Exit 'from' states not kept
            for (l = fromPath.length - 1; l >= keep; l--) {
              exiting = fromPath[l];
              if (exiting.self.onExit) {
                $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
              }
              exiting.locals = null;
            }
            // Enter 'to' states not kept
            for (l = keep; l < toPath.length; l++) {
              entering = toPath[l];
              entering.locals = toLocals[l];
              if (entering.self.onEnter) {
                $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
              }
            }
            // Run it again, to catch any transitions in callbacks
            if ($state.transition !== transition)
              return TransitionSuperseded;
            // Update globals in $state
            $state.$current = to;
            $state.current = to.self;
            $state.params = toParams;
            copy($state.params, $stateParams);
            $state.transition = null;
            if (options.location && to.navigable) {
              $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                $$avoidResync: true,
                replace: options.location === 'replace'
              });
            }
            if (options.notify) {
              /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
              $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
            }
            $urlRouter.update(true);
            return $state.current;
          }, function (error) {
            if ($state.transition !== transition)
              return TransitionSuperseded;
            $state.transition = null;
            /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
            evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
            if (!evt.defaultPrevented) {
              $urlRouter.update();
            }
            return $q.reject(error);
          });
        return transition;
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
      $state.is = function is(stateOrName, params, options) {
        options = extend({ relative: $state.$current }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state)) {
          return undefined;
        }
        if ($state.$current !== state) {
          return false;
        }
        return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
      $state.includes = function includes(stateOrName, params, options) {
        options = extend({ relative: $state.$current }, options || {});
        if (isString(stateOrName) && isGlob(stateOrName)) {
          if (!doesStateMatchGlob(stateOrName)) {
            return false;
          }
          stateOrName = $state.$current.name;
        }
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state)) {
          return undefined;
        }
        if (!isDefined($state.$current.includes[state.name])) {
          return false;
        }
        return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
      $state.href = function href(stateOrName, params, options) {
        options = extend({
          lossy: true,
          inherit: true,
          absolute: false,
          relative: $state.$current
        }, options || {});
        var state = findState(stateOrName, options.relative);
        if (!isDefined(state))
          return null;
        if (options.inherit)
          params = inheritParams($stateParams, params || {}, $state.$current, state);
        var nav = state && options.lossy ? state.navigable : state;
        if (!nav || nav.url === undefined || nav.url === null) {
          return null;
        }
        return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys(), params || {}), { absolute: options.absolute });
      };
      /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
      $state.get = function (stateOrName, context) {
        if (arguments.length === 0)
          return map(objectKeys(states), function (name) {
            return states[name].self;
          });
        var state = findState(stateOrName, context || $state.$current);
        return state && state.self ? state.self : null;
      };
      function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
        // Make a restricted $stateParams with only the parameters that apply to this state if
        // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
        // we also need $stateParams to be available for any $injector calls we make during the
        // dependency resolution process.
        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);
        var locals = { $stateParams: $stateParams };
        // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
        // We're also including $stateParams in this; that way the parameters are restricted
        // to the set that should be visible to the state, and are independent of when we update
        // the global $state and $stateParams values.
        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
        var promises = [dst.resolve.then(function (globals) {
              dst.globals = globals;
            })];
        if (inherited)
          promises.push(inherited);
        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
          injectables.$template = [function () {
              return $view.load(name, {
                view: view,
                locals: locals,
                params: $stateParams,
                notify: options.notify
              }) || '';
            }];
          promises.push($resolve.resolve(injectables, locals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, locals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });
        // Wait for all the promises and then return the activation object
        return $q.all(promises).then(function (values) {
          return dst;
        });
      }
      return $state;
    }
    function shouldTriggerReload(to, from, locals, options) {
      if (to === from && (locals === from.locals && !options.reload || to.self.reloadOnSearch === false)) {
        return true;
      }
    }
  }
  angular.module('ui.router.state').value('$stateParams', {}).provider('$state', $StateProvider);
  $ViewProvider.$inject = [];
  function $ViewProvider() {
    this.$get = $get;
    /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
    $get.$inject = [
      '$rootScope',
      '$templateFactory'
    ];
    function $get($rootScope, $templateFactory) {
      return {
        load: function load(name, options) {
          var result, defaults = {
              template: null,
              controller: null,
              view: null,
              locals: null,
              notify: true,
              async: true,
              params: {}
            };
          options = extend(defaults, options);
          if (options.view) {
            result = $templateFactory.fromConfig(options.view, options.params, options.locals);
          }
          if (result && options.notify) {
            /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
            $rootScope.$broadcast('$viewContentLoading', options);
          }
          return result;
        }
      };
    }
  }
  angular.module('ui.router.state').provider('$view', $ViewProvider);
  /**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
  function $ViewScrollProvider() {
    var useAnchorScroll = false;
    /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
    this.useAnchorScroll = function () {
      useAnchorScroll = true;
    };
    /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
    this.$get = [
      '$anchorScroll',
      '$timeout',
      function ($anchorScroll, $timeout) {
        if (useAnchorScroll) {
          return $anchorScroll;
        }
        return function ($element) {
          $timeout(function () {
            $element[0].scrollIntoView();
          }, 0, false);
        };
      }
    ];
  }
  angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
  $ViewDirective.$inject = [
    '$state',
    '$injector',
    '$uiViewScroll',
    '$interpolate'
  ];
  function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {
    function getService() {
      return $injector.has ? function (service) {
        return $injector.has(service) ? $injector.get(service) : null;
      } : function (service) {
        try {
          return $injector.get(service);
        } catch (e) {
          return null;
        }
      };
    }
    var service = getService(), $animator = service('$animator'), $animate = service('$animate');
    // Returns a set of DOM manipulation functions based on which Angular version
    // it should use
    function getRenderer(attrs, scope) {
      var statics = function () {
        return {
          enter: function (element, target, cb) {
            target.after(element);
            cb();
          },
          leave: function (element, cb) {
            element.remove();
            cb();
          }
        };
      };
      if ($animate) {
        return {
          enter: function (element, target, cb) {
            var promise = $animate.enter(element, null, target, cb);
            if (promise && promise.then)
              promise.then(cb);
          },
          leave: function (element, cb) {
            var promise = $animate.leave(element, cb);
            if (promise && promise.then)
              promise.then(cb);
          }
        };
      }
      if ($animator) {
        var animate = $animator && $animator(scope, attrs);
        return {
          enter: function (element, target, cb) {
            animate.enter(element, null, target);
            cb();
          },
          leave: function (element, cb) {
            animate.leave(element);
            cb();
          }
        };
      }
      return statics();
    }
    var directive = {
        restrict: 'ECA',
        terminal: true,
        priority: 400,
        transclude: 'element',
        compile: function (tElement, tAttrs, $transclude) {
          return function (scope, $element, attrs) {
            var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || '', autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
            scope.$on('$stateChangeSuccess', function () {
              updateView(false);
            });
            scope.$on('$viewContentLoading', function () {
              updateView(false);
            });
            updateView(true);
            function cleanupLastView() {
              if (previousEl) {
                previousEl.remove();
                previousEl = null;
              }
              if (currentScope) {
                currentScope.$destroy();
                currentScope = null;
              }
              if (currentEl) {
                renderer.leave(currentEl, function () {
                  previousEl = null;
                });
                previousEl = currentEl;
                currentEl = null;
              }
            }
            function updateView(firstTime) {
              var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
              if (!firstTime && previousLocals === latestLocals)
                return;
              // nothing to do
              newScope = scope.$new();
              latestLocals = $state.$current.locals[name];
              var clone = $transclude(newScope, function (clone) {
                  renderer.enter(clone, $element, function onUiViewEnter() {
                    if (currentScope) {
                      currentScope.$emit('$viewContentAnimationEnded');
                    }
                    if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                      $uiViewScroll(clone);
                    }
                  });
                  cleanupLastView();
                });
              currentEl = clone;
              currentScope = newScope;
              /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
              currentScope.$emit('$viewContentLoaded');
              currentScope.$eval(onloadExp);
            }
          };
        }
      };
    return directive;
  }
  $ViewDirectiveFill.$inject = [
    '$compile',
    '$controller',
    '$state',
    '$interpolate'
  ];
  function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
    return {
      restrict: 'ECA',
      priority: -400,
      compile: function (tElement) {
        var initial = tElement.html();
        return function (scope, $element, attrs) {
          var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
          if (!locals) {
            return;
          }
          $element.data('$uiView', {
            name: name,
            state: locals.$$state
          });
          $element.html(locals.$template ? locals.$template : initial);
          var link = $compile($element.contents());
          if (locals.$$controller) {
            locals.$scope = scope;
            var controller = $controller(locals.$$controller, locals);
            if (locals.$$controllerAs) {
              scope[locals.$$controllerAs] = controller;
            }
            $element.data('$ngControllerController', controller);
            $element.children().data('$ngControllerController', controller);
          }
          link(scope);
        };
      }
    };
  }
  /**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
  function getUiViewName(scope, attrs, element, $interpolate) {
    var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
    var inherited = element.inheritedData('$uiView');
    return name.indexOf('@') >= 0 ? name : name + '@' + (inherited ? inherited.state.name : '');
  }
  angular.module('ui.router.state').directive('uiView', $ViewDirective);
  angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
  function parseStateRef(ref, current) {
    var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
    if (preparsed)
      ref = current + '(' + preparsed[1] + ')';
    parsed = ref.replace(/\n/g, ' ').match(/^([^(]+?)\s*(\((.*)\))?$/);
    if (!parsed || parsed.length !== 4)
      throw new Error('Invalid state ref \'' + ref + '\'');
    return {
      state: parsed[1],
      paramExpr: parsed[3] || null
    };
  }
  function stateContext(el) {
    var stateData = el.parent().inheritedData('$uiView');
    if (stateData && stateData.state && stateData.state.name) {
      return stateData.state;
    }
  }
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
  $StateRefDirective.$inject = [
    '$state',
    '$timeout'
  ];
  function $StateRefDirective($state, $timeout) {
    var allowedOptions = [
        'location',
        'inherit',
        'reload'
      ];
    return {
      restrict: 'A',
      require: [
        '?^uiSrefActive',
        '?^uiSrefActiveEq'
      ],
      link: function (scope, element, attrs, uiSrefActive) {
        var ref = parseStateRef(attrs.uiSref, $state.current.name);
        var params = null, url = null, base = stateContext(element) || $state.$current;
        var newHref = null, isAnchor = element.prop('tagName') === 'A';
        var isForm = element[0].nodeName === 'FORM';
        var attr = isForm ? 'action' : 'href', nav = true;
        var options = {
            relative: base,
            inherit: true
          };
        var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};
        angular.forEach(allowedOptions, function (option) {
          if (option in optionsOverride) {
            options[option] = optionsOverride[option];
          }
        });
        var update = function (newVal) {
          if (newVal)
            params = angular.copy(newVal);
          if (!nav)
            return;
          newHref = $state.href(ref.state, params, options);
          var activeDirective = uiSrefActive[1] || uiSrefActive[0];
          if (activeDirective) {
            activeDirective.$$setStateInfo(ref.state, params);
          }
          if (newHref === null) {
            nav = false;
            return false;
          }
          attrs.$set(attr, newHref);
        };
        if (ref.paramExpr) {
          scope.$watch(ref.paramExpr, function (newVal, oldVal) {
            if (newVal !== params)
              update(newVal);
          }, true);
          params = angular.copy(scope.$eval(ref.paramExpr));
        }
        update();
        if (isForm)
          return;
        element.bind('click', function (e) {
          var button = e.which || e.button;
          if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target'))) {
            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
            var transition = $timeout(function () {
                $state.go(ref.state, params, options);
              });
            e.preventDefault();
            // if the state has no URL, ignore one preventDefault from the <a> directive.
            var ignorePreventDefaultCount = isAnchor && !newHref ? 1 : 0;
            e.preventDefault = function () {
              if (ignorePreventDefaultCount-- <= 0)
                $timeout.cancel(transition);
            };
          }
        });
      }
    };
  }
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */
  /**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
  $StateRefActiveDirective.$inject = [
    '$state',
    '$stateParams',
    '$interpolate'
  ];
  function $StateRefActiveDirective($state, $stateParams, $interpolate) {
    return {
      restrict: 'A',
      controller: [
        '$scope',
        '$element',
        '$attrs',
        function ($scope, $element, $attrs) {
          var state, params, activeClass;
          // There probably isn't much point in $observing this
          // uiSrefActive and uiSrefActiveEq share the same directive object with some
          // slight difference in logic routing
          activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);
          // Allow uiSref to communicate with uiSrefActive[Equals]
          this.$$setStateInfo = function (newState, newParams) {
            state = $state.get(newState, stateContext($element));
            params = newParams;
            update();
          };
          $scope.$on('$stateChangeSuccess', update);
          // Update route state
          function update() {
            if (isMatch()) {
              $element.addClass(activeClass);
            } else {
              $element.removeClass(activeClass);
            }
          }
          function isMatch() {
            if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
              return state && $state.is(state.name, params);
            } else {
              return state && $state.includes(state.name, params);
            }
          }
        }
      ]
    };
  }
  angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateRefActiveDirective).directive('uiSrefActiveEq', $StateRefActiveDirective);
  /**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
  $IsStateFilter.$inject = ['$state'];
  function $IsStateFilter($state) {
    var isFilter = function (state) {
      return $state.is(state);
    };
    isFilter.$stateful = true;
    return isFilter;
  }
  /**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
  $IncludedByStateFilter.$inject = ['$state'];
  function $IncludedByStateFilter($state) {
    var includesFilter = function (state) {
      return $state.includes(state);
    };
    includesFilter.$stateful = true;
    return includesFilter;
  }
  angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);
}(window, window.angular));
'use strict';
(function () {
  /**
     * @ngdoc overview
     * @name ngStorage
     */
  angular.module('ngStorage', []).factory('$localStorage', _storageFactory('localStorage')).factory('$sessionStorage', _storageFactory('sessionStorage'));
  function _storageFactory(storageType) {
    return [
      '$rootScope',
      '$window',
      function ($rootScope, $window) {
        // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
        var webStorage = $window[storageType] || (console.warn('This browser does not support Web Storage!'), {}), $storage = {
            $default: function (items) {
              for (var k in items) {
                angular.isDefined($storage[k]) || ($storage[k] = items[k]);
              }
              return $storage;
            },
            $reset: function (items) {
              for (var k in $storage) {
                '$' === k[0] || delete $storage[k];
              }
              return $storage.$default(items);
            }
          }, _last$storage, _debounce;
        for (var i = 0, k; i < webStorage.length; i++) {
          // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
          (k = webStorage.key(i)) && 'ngStorage-' === k.slice(0, 10) && ($storage[k.slice(10)] = angular.fromJson(webStorage.getItem(k)));
        }
        _last$storage = angular.copy($storage);
        $rootScope.$watch(function () {
          _debounce || (_debounce = setTimeout(function () {
            _debounce = null;
            if (!angular.equals($storage, _last$storage)) {
              angular.forEach($storage, function (v, k) {
                angular.isDefined(v) && '$' !== k[0] && webStorage.setItem('ngStorage-' + k, angular.toJson(v));
                delete _last$storage[k];
              });
              for (var k in _last$storage) {
                webStorage.removeItem('ngStorage-' + k);
              }
              _last$storage = angular.copy($storage);
            }
          }, 100));
        });
        // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
        'localStorage' === storageType && $window.addEventListener && $window.addEventListener('storage', function (event) {
          if ('ngStorage-' === event.key.slice(0, 10)) {
            event.newValue ? $storage[event.key.slice(10)] = angular.fromJson(event.newValue) : delete $storage[event.key.slice(10)];
            _last$storage = angular.copy($storage);
            $rootScope.$apply();
          }
        });
        return $storage;
      }
    ];
  }
}());
/**
 * angular-ui-utils - Swiss-Army-Knife of AngularJS tools (with no external dependencies!)
 * @version v0.1.1 - 2014-02-05
 * @link http://angular-ui.github.com
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
'use strict';
angular.module('ui.alias', []).config([
  '$compileProvider',
  'uiAliasConfig',
  function ($compileProvider, uiAliasConfig) {
    uiAliasConfig = uiAliasConfig || {};
    angular.forEach(uiAliasConfig, function (config, alias) {
      if (angular.isString(config)) {
        config = {
          replace: true,
          template: config
        };
      }
      $compileProvider.directive(alias, function () {
        return config;
      });
    });
  }
]);
'use strict';
/**
 * General-purpose Event binding. Bind any event not natively supported by Angular
 * Pass an object with keynames for events to ui-event
 * Allows $event object and $params object to be passed
 *
 * @example <input ui-event="{ focus : 'counter++', blur : 'someCallback()' }">
 * @example <input ui-event="{ myCustomEvent : 'myEventHandler($event, $params)'}">
 *
 * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks
 */
angular.module('ui.event', []).directive('uiEvent', [
  '$parse',
  function ($parse) {
    return function ($scope, elm, attrs) {
      var events = $scope.$eval(attrs.uiEvent);
      angular.forEach(events, function (uiEvent, eventName) {
        var fn = $parse(uiEvent);
        elm.bind(eventName, function (evt) {
          var params = Array.prototype.slice.call(arguments);
          //Take out first paramater (event object);
          params = params.splice(1);
          fn($scope, {
            $event: evt,
            $params: params
          });
          if (!$scope.$$phase) {
            $scope.$apply();
          }
        });
      });
    };
  }
]);
'use strict';
/**
 * A replacement utility for internationalization very similar to sprintf.
 *
 * @param replace {mixed} The tokens to replace depends on type
 *  string: all instances of $0 will be replaced
 *  array: each instance of $0, $1, $2 etc. will be placed with each array item in corresponding order
 *  object: all attributes will be iterated through, with :key being replaced with its corresponding value
 * @return string
 *
 * @example: 'Hello :name, how are you :day'.format({ name:'John', day:'Today' })
 * @example: 'Records $0 to $1 out of $2 total'.format(['10', '20', '3000'])
 * @example: '$0 agrees to all mentions $0 makes in the event that $0 hits a tree while $0 is driving drunk'.format('Bob')
 */
angular.module('ui.format', []).filter('format', function () {
  return function (value, replace) {
    var target = value;
    if (angular.isString(target) && replace !== undefined) {
      if (!angular.isArray(replace) && !angular.isObject(replace)) {
        replace = [replace];
      }
      if (angular.isArray(replace)) {
        var rlen = replace.length;
        var rfx = function (str, i) {
          i = parseInt(i, 10);
          return i >= 0 && i < rlen ? replace[i] : str;
        };
        target = target.replace(/\$([0-9]+)/g, rfx);
      } else {
        angular.forEach(replace, function (value, key) {
          target = target.split(':' + key).join(value);
        });
      }
    }
    return target;
  };
});
'use strict';
/**
 * Wraps the
 * @param text {string} haystack to search through
 * @param search {string} needle to search for
 * @param [caseSensitive] {boolean} optional boolean to use case-sensitive searching
 */
angular.module('ui.highlight', []).filter('highlight', function () {
  return function (text, search, caseSensitive) {
    if (search || angular.isNumber(search)) {
      text = text.toString();
      search = search.toString();
      if (caseSensitive) {
        return text.split(search).join('<span class="ui-match">' + search + '</span>');
      } else {
        return text.replace(new RegExp(search, 'gi'), '<span class="ui-match">$&</span>');
      }
    } else {
      return text;
    }
  };
});
'use strict';
// modeled after: angular-1.0.7/src/ng/directive/ngInclude.js
angular.module('ui.include', []).directive('uiInclude', [
  '$http',
  '$templateCache',
  '$anchorScroll',
  '$compile',
  function ($http, $templateCache, $anchorScroll, $compile) {
    return {
      restrict: 'ECA',
      terminal: true,
      compile: function (element, attr) {
        var srcExp = attr.uiInclude || attr.src, fragExp = attr.fragment || '', onloadExp = attr.onload || '', autoScrollExp = attr.autoscroll;
        return function (scope, element) {
          var changeCounter = 0, childScope;
          var clearContent = function () {
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            element.html('');
          };
          function ngIncludeWatchAction() {
            var thisChangeId = ++changeCounter;
            var src = scope.$eval(srcExp);
            var fragment = scope.$eval(fragExp);
            if (src) {
              $http.get(src, { cache: $templateCache }).success(function (response) {
                if (thisChangeId !== changeCounter) {
                  return;
                }
                if (childScope) {
                  childScope.$destroy();
                }
                childScope = scope.$new();
                var contents;
                if (fragment) {
                  contents = angular.element('<div/>').html(response).find(fragment);
                } else {
                  contents = angular.element('<div/>').html(response).contents();
                }
                element.html(contents);
                $compile(contents)(childScope);
                if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                  $anchorScroll();
                }
                childScope.$emit('$includeContentLoaded');
                scope.$eval(onloadExp);
              }).error(function () {
                if (thisChangeId === changeCounter) {
                  clearContent();
                }
              });
            } else {
              clearContent();
            }
          }
          scope.$watch(fragExp, ngIncludeWatchAction);
          scope.$watch(srcExp, ngIncludeWatchAction);
        };
      }
    };
  }
]);
'use strict';
/**
 * Provides an easy way to toggle a checkboxes indeterminate property
 *
 * @example <input type="checkbox" ui-indeterminate="isUnkown">
 */
angular.module('ui.indeterminate', []).directive('uiIndeterminate', [function () {
    return {
      compile: function (tElm, tAttrs) {
        if (!tAttrs.type || tAttrs.type.toLowerCase() !== 'checkbox') {
          return angular.noop;
        }
        return function ($scope, elm, attrs) {
          $scope.$watch(attrs.uiIndeterminate, function (newVal) {
            elm[0].indeterminate = !!newVal;
          });
        };
      }
    };
  }]);
'use strict';
/**
 * Converts variable-esque naming conventions to something presentational, capitalized words separated by space.
 * @param {String} value The value to be parsed and prettified.
 * @param {String} [inflector] The inflector to use. Default: humanize.
 * @return {String}
 * @example {{ 'Here Is my_phoneNumber' | inflector:'humanize' }} => Here Is My Phone Number
 *          {{ 'Here Is my_phoneNumber' | inflector:'underscore' }} => here_is_my_phone_number
 *          {{ 'Here Is my_phoneNumber' | inflector:'variable' }} => hereIsMyPhoneNumber
 */
angular.module('ui.inflector', []).filter('inflector', function () {
  function ucwords(text) {
    return text.replace(/^([a-z])|\s+([a-z])/g, function ($1) {
      return $1.toUpperCase();
    });
  }
  function breakup(text, separator) {
    return text.replace(/[A-Z]/g, function (match) {
      return separator + match;
    });
  }
  var inflectors = {
      humanize: function (value) {
        return ucwords(breakup(value, ' ').split('_').join(' '));
      },
      underscore: function (value) {
        return value.substr(0, 1).toLowerCase() + breakup(value.substr(1), '_').toLowerCase().split(' ').join('_');
      },
      variable: function (value) {
        value = value.substr(0, 1).toLowerCase() + ucwords(value.split('_').join(' ')).substr(1).split(' ').join('');
        return value;
      }
    };
  return function (text, inflector) {
    if (inflector !== false && angular.isString(text)) {
      inflector = inflector || 'humanize';
      return inflectors[inflector](text);
    } else {
      return text;
    }
  };
});
'use strict';
/**
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular.module('ui.jq', []).value('uiJqConfig', {}).directive('uiJq', [
  'uiJqConfig',
  '$timeout',
  function uiJqInjectingFunction(uiJqConfig, $timeout) {
    return {
      restrict: 'A',
      compile: function uiJqCompilingFunction(tElm, tAttrs) {
        if (!angular.isFunction(tElm[tAttrs.uiJq])) {
          throw new Error('ui-jq: The "' + tAttrs.uiJq + '" function does not exist');
        }
        var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];
        return function uiJqLinkingFunction(scope, elm, attrs) {
          var linkOptions = [];
          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
          if (attrs.uiOptions) {
            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
              linkOptions[0] = angular.extend({}, options, linkOptions[0]);
            }
          } else if (options) {
            linkOptions = [options];
          }
          // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
          if (attrs.ngModel && elm.is('select,input,textarea')) {
            elm.bind('change', function () {
              elm.trigger('input');
            });
          }
          // Call jQuery method and pass relevant options
          function callPlugin() {
            $timeout(function () {
              elm[attrs.uiJq].apply(elm, linkOptions);
            }, 0, false);
          }
          // If ui-refresh is used, re-fire the the method upon every change
          if (attrs.uiRefresh) {
            scope.$watch(attrs.uiRefresh, function () {
              callPlugin();
            });
          }
          callPlugin();
        };
      }
    };
  }
]);
'use strict';
angular.module('ui.keypress', []).factory('keypressHelper', [
  '$parse',
  function keypress($parse) {
    var keysByCode = {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        27: 'esc',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'insert',
        46: 'delete'
      };
    var capitaliseFirstLetter = function (string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };
    return function (mode, scope, elm, attrs) {
      var params, combinations = [];
      params = scope.$eval(attrs['ui' + capitaliseFirstLetter(mode)]);
      // Prepare combinations for simple checking
      angular.forEach(params, function (v, k) {
        var combination, expression;
        expression = $parse(v);
        angular.forEach(k.split(' '), function (variation) {
          combination = {
            expression: expression,
            keys: {}
          };
          angular.forEach(variation.split('-'), function (value) {
            combination.keys[value] = true;
          });
          combinations.push(combination);
        });
      });
      // Check only matching of pressed keys one of the conditions
      elm.bind(mode, function (event) {
        // No need to do that inside the cycle
        var metaPressed = !!(event.metaKey && !event.ctrlKey);
        var altPressed = !!event.altKey;
        var ctrlPressed = !!event.ctrlKey;
        var shiftPressed = !!event.shiftKey;
        var keyCode = event.keyCode;
        // normalize keycodes
        if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {
          keyCode = keyCode - 32;
        }
        // Iterate over prepared combinations
        angular.forEach(combinations, function (combination) {
          var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];
          var metaRequired = !!combination.keys.meta;
          var altRequired = !!combination.keys.alt;
          var ctrlRequired = !!combination.keys.ctrl;
          var shiftRequired = !!combination.keys.shift;
          if (mainKeyPressed && metaRequired === metaPressed && altRequired === altPressed && ctrlRequired === ctrlPressed && shiftRequired === shiftPressed) {
            // Run the function
            scope.$apply(function () {
              combination.expression(scope, { '$event': event });
            });
          }
        });
      });
    };
  }
]);
/**
 * Bind one or more handlers to particular keys or their combination
 * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: "{ keys1: expression1 [, keys2: expression2 [ , ... ]]}". String syntax: ""expression1 on keys1 [ and expression2 on keys2 [ and ... ]]"". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.
 * @example <input ui-keypress="{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}" /> <input ui-keypress="foo = 2 on ctrl-13 and bar('hello') on shift-esc" />
 **/
angular.module('ui.keypress').directive('uiKeydown', [
  'keypressHelper',
  function (keypressHelper) {
    return {
      link: function (scope, elm, attrs) {
        keypressHelper('keydown', scope, elm, attrs);
      }
    };
  }
]);
angular.module('ui.keypress').directive('uiKeypress', [
  'keypressHelper',
  function (keypressHelper) {
    return {
      link: function (scope, elm, attrs) {
        keypressHelper('keypress', scope, elm, attrs);
      }
    };
  }
]);
angular.module('ui.keypress').directive('uiKeyup', [
  'keypressHelper',
  function (keypressHelper) {
    return {
      link: function (scope, elm, attrs) {
        keypressHelper('keyup', scope, elm, attrs);
      }
    };
  }
]);
'use strict';
/*
 Attaches input mask onto input element
 */
angular.module('ui.mask', []).value('uiMaskConfig', {
  'maskDefinitions': {
    '9': /\d/,
    'A': /[a-zA-Z]/,
    '*': /[a-zA-Z0-9]/
  }
}).directive('uiMask', [
  'uiMaskConfig',
  function (maskConfig) {
    return {
      priority: 100,
      require: 'ngModel',
      restrict: 'A',
      compile: function uiMaskCompilingFunction() {
        var options = maskConfig;
        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller) {
          var maskProcessed = false, eventsBound = false, maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,
            // Minimum required length of the value to be considered valid
            minRequiredLength, value, valueMasked, isValid,
            // Vars for initializing/uninitializing
            originalPlaceholder = iAttrs.placeholder, originalMaxlength = iAttrs.maxlength,
            // Vars used exclusively in eventHandler()
            oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;
          function initialize(maskAttr) {
            if (!angular.isDefined(maskAttr)) {
              return uninitialize();
            }
            processRawMask(maskAttr);
            if (!maskProcessed) {
              return uninitialize();
            }
            initializeElement();
            bindEventListeners();
            return true;
          }
          function initPlaceholder(placeholderAttr) {
            if (!angular.isDefined(placeholderAttr)) {
              return;
            }
            maskPlaceholder = placeholderAttr;
            // If the mask is processed, then we need to update the value
            if (maskProcessed) {
              eventHandler();
            }
          }
          function formatter(fromModelValue) {
            if (!maskProcessed) {
              return fromModelValue;
            }
            value = unmaskValue(fromModelValue || '');
            isValid = validateValue(value);
            controller.$setValidity('mask', isValid);
            return isValid && value.length ? maskValue(value) : undefined;
          }
          function parser(fromViewValue) {
            if (!maskProcessed) {
              return fromViewValue;
            }
            value = unmaskValue(fromViewValue || '');
            isValid = validateValue(value);
            // We have to set viewValue manually as the reformatting of the input
            // value performed by eventHandler() doesn't happen until after
            // this parser is called, which causes what the user sees in the input
            // to be out-of-sync with what the controller's $viewValue is set to.
            controller.$viewValue = value.length ? maskValue(value) : '';
            controller.$setValidity('mask', isValid);
            if (value === '' && controller.$error.required !== undefined) {
              controller.$setValidity('required', false);
            }
            return isValid ? value : undefined;
          }
          var linkOptions = {};
          if (iAttrs.uiOptions) {
            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');
            if (angular.isObject(linkOptions[0])) {
              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge
              linkOptions = function (original, current) {
                for (var i in original) {
                  if (Object.prototype.hasOwnProperty.call(original, i)) {
                    if (!current[i]) {
                      current[i] = angular.copy(original[i]);
                    } else {
                      angular.extend(current[i], original[i]);
                    }
                  }
                }
                return current;
              }(options, linkOptions[0]);
            }
          } else {
            linkOptions = options;
          }
          iAttrs.$observe('uiMask', initialize);
          iAttrs.$observe('placeholder', initPlaceholder);
          controller.$formatters.push(formatter);
          controller.$parsers.push(parser);
          function uninitialize() {
            maskProcessed = false;
            unbindEventListeners();
            if (angular.isDefined(originalPlaceholder)) {
              iElement.attr('placeholder', originalPlaceholder);
            } else {
              iElement.removeAttr('placeholder');
            }
            if (angular.isDefined(originalMaxlength)) {
              iElement.attr('maxlength', originalMaxlength);
            } else {
              iElement.removeAttr('maxlength');
            }
            iElement.val(controller.$modelValue);
            controller.$viewValue = controller.$modelValue;
            return false;
          }
          function initializeElement() {
            value = oldValueUnmasked = unmaskValue(controller.$modelValue || '');
            valueMasked = oldValue = maskValue(value);
            isValid = validateValue(value);
            var viewValue = isValid && value.length ? valueMasked : '';
            if (iAttrs.maxlength) {
              // Double maxlength to allow pasting new val at end of mask
              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);
            }
            iElement.attr('placeholder', maskPlaceholder);
            iElement.val(viewValue);
            controller.$viewValue = viewValue;  // Not using $setViewValue so we don't clobber the model value and dirty the form
                                                // without any kind of user interaction.
          }
          function bindEventListeners() {
            if (eventsBound) {
              return;
            }
            iElement.bind('blur', blurHandler);
            iElement.bind('mousedown mouseup', mouseDownUpHandler);
            iElement.bind('input keyup click focus', eventHandler);
            eventsBound = true;
          }
          function unbindEventListeners() {
            if (!eventsBound) {
              return;
            }
            iElement.unbind('blur', blurHandler);
            iElement.unbind('mousedown', mouseDownUpHandler);
            iElement.unbind('mouseup', mouseDownUpHandler);
            iElement.unbind('input', eventHandler);
            iElement.unbind('keyup', eventHandler);
            iElement.unbind('click', eventHandler);
            iElement.unbind('focus', eventHandler);
            eventsBound = false;
          }
          function validateValue(value) {
            // Zero-length value validity is ngRequired's determination
            return value.length ? value.length >= minRequiredLength : true;
          }
          function unmaskValue(value) {
            var valueUnmasked = '', maskPatternsCopy = maskPatterns.slice();
            // Preprocess by stripping mask components from value
            value = value.toString();
            angular.forEach(maskComponents, function (component) {
              value = value.replace(component, '');
            });
            angular.forEach(value.split(''), function (chr) {
              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {
                valueUnmasked += chr;
                maskPatternsCopy.shift();
              }
            });
            return valueUnmasked;
          }
          function maskValue(unmaskedValue) {
            var valueMasked = '', maskCaretMapCopy = maskCaretMap.slice();
            angular.forEach(maskPlaceholder.split(''), function (chr, i) {
              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {
                valueMasked += unmaskedValue.charAt(0) || '_';
                unmaskedValue = unmaskedValue.substr(1);
                maskCaretMapCopy.shift();
              } else {
                valueMasked += chr;
              }
            });
            return valueMasked;
          }
          function getPlaceholderChar(i) {
            var placeholder = iAttrs.placeholder;
            if (typeof placeholder !== 'undefined' && placeholder[i]) {
              return placeholder[i];
            } else {
              return '_';
            }
          }
          // Generate array of mask components that will be stripped from a masked value
          // before processing to prevent mask components from being added to the unmasked value.
          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.
          // If a maskable char is followed by a mask char and has a mask
          // char behind it, we'll split it into it's own component so if
          // a user is aggressively deleting in the input and a char ahead
          // of the maskable char gets deleted, we'll still be able to strip
          // it in the unmaskValue() preprocessing.
          function getMaskComponents() {
            return maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');
          }
          function processRawMask(mask) {
            var characterCount = 0;
            maskCaretMap = [];
            maskPatterns = [];
            maskPlaceholder = '';
            if (typeof mask === 'string') {
              minRequiredLength = 0;
              var isOptional = false, splitMask = mask.split('');
              angular.forEach(splitMask, function (chr, i) {
                if (linkOptions.maskDefinitions[chr]) {
                  maskCaretMap.push(characterCount);
                  maskPlaceholder += getPlaceholderChar(i);
                  maskPatterns.push(linkOptions.maskDefinitions[chr]);
                  characterCount++;
                  if (!isOptional) {
                    minRequiredLength++;
                  }
                } else if (chr === '?') {
                  isOptional = true;
                } else {
                  maskPlaceholder += chr;
                  characterCount++;
                }
              });
            }
            // Caret position immediately following last position is valid.
            maskCaretMap.push(maskCaretMap.slice().pop() + 1);
            maskComponents = getMaskComponents();
            maskProcessed = maskCaretMap.length > 1 ? true : false;
          }
          function blurHandler() {
            oldCaretPosition = 0;
            oldSelectionLength = 0;
            if (!isValid || value.length === 0) {
              valueMasked = '';
              iElement.val('');
              scope.$apply(function () {
                controller.$setViewValue('');
              });
            }
          }
          function mouseDownUpHandler(e) {
            if (e.type === 'mousedown') {
              iElement.bind('mouseout', mouseoutHandler);
            } else {
              iElement.unbind('mouseout', mouseoutHandler);
            }
          }
          iElement.bind('mousedown mouseup', mouseDownUpHandler);
          function mouseoutHandler() {
            /*jshint validthis: true */
            oldSelectionLength = getSelectionLength(this);
            iElement.unbind('mouseout', mouseoutHandler);
          }
          function eventHandler(e) {
            /*jshint validthis: true */
            e = e || {};
            // Allows more efficient minification
            var eventWhich = e.which, eventType = e.type;
            // Prevent shift and ctrl from mucking with old values
            if (eventWhich === 16 || eventWhich === 91) {
              return;
            }
            var val = iElement.val(), valOld = oldValue, valMasked, valUnmasked = unmaskValue(val), valUnmaskedOld = oldValueUnmasked, valAltered = false, caretPos = getCaretPosition(this) || 0, caretPosOld = oldCaretPosition || 0, caretPosDelta = caretPos - caretPosOld, caretPosMin = maskCaretMap[0], caretPosMax = maskCaretMap[valUnmasked.length] || maskCaretMap.slice().shift(), selectionLenOld = oldSelectionLength || 0, isSelected = getSelectionLength(this) > 0, wasSelected = selectionLenOld > 0,
              // Case: Typing a character to overwrite a selection
              isAddition = val.length > valOld.length || selectionLenOld && val.length > valOld.length - selectionLenOld,
              // Case: Delete and backspace behave identically on a selection
              isDeletion = val.length < valOld.length || selectionLenOld && val.length === valOld.length - selectionLenOld, isSelection = eventWhich >= 37 && eventWhich <= 40 && e.shiftKey,
              // Arrow key codes
              isKeyLeftArrow = eventWhich === 37,
              // Necessary due to "input" event not providing a key code
              isKeyBackspace = eventWhich === 8 || eventType !== 'keyup' && isDeletion && caretPosDelta === -1, isKeyDelete = eventWhich === 46 || eventType !== 'keyup' && isDeletion && caretPosDelta === 0 && !wasSelected,
              // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below
              // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of
              // non-mask character. Also applied to click since users are (arguably) more likely to backspace
              // a character when clicking within a filled input.
              caretBumpBack = (isKeyLeftArrow || isKeyBackspace || eventType === 'click') && caretPos > caretPosMin;
            oldSelectionLength = getSelectionLength(this);
            // These events don't require any action
            if (isSelection || isSelected && (eventType === 'click' || eventType === 'keyup')) {
              return;
            }
            // Value Handling
            // ==============
            // User attempted to delete but raw value was unaffected--correct this grievous offense
            if (eventType === 'input' && isDeletion && !wasSelected && valUnmasked === valUnmaskedOld) {
              while (isKeyBackspace && caretPos > caretPosMin && !isValidCaretPosition(caretPos)) {
                caretPos--;
              }
              while (isKeyDelete && caretPos < caretPosMax && maskCaretMap.indexOf(caretPos) === -1) {
                caretPos++;
              }
              var charIndex = maskCaretMap.indexOf(caretPos);
              // Strip out non-mask character that user would have deleted if mask hadn't been in the way.
              valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);
              valAltered = true;
            }
            // Update values
            valMasked = maskValue(valUnmasked);
            oldValue = valMasked;
            oldValueUnmasked = valUnmasked;
            iElement.val(valMasked);
            if (valAltered) {
              // We've altered the raw value after it's been $digest'ed, we need to $apply the new value.
              scope.$apply(function () {
                controller.$setViewValue(valUnmasked);
              });
            }
            // Caret Repositioning
            // ===================
            // Ensure that typing always places caret ahead of typed character in cases where the first char of
            // the input is a mask char and the caret is placed at the 0 position.
            if (isAddition && caretPos <= caretPosMin) {
              caretPos = caretPosMin + 1;
            }
            if (caretBumpBack) {
              caretPos--;
            }
            // Make sure caret is within min and max position limits
            caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;
            // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits
            while (!isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {
              caretPos += caretBumpBack ? -1 : 1;
            }
            if (caretBumpBack && caretPos < caretPosMax || isAddition && !isValidCaretPosition(caretPosOld)) {
              caretPos++;
            }
            oldCaretPosition = caretPos;
            setCaretPosition(this, caretPos);
          }
          function isValidCaretPosition(pos) {
            return maskCaretMap.indexOf(pos) > -1;
          }
          function getCaretPosition(input) {
            if (!input)
              return 0;
            if (input.selectionStart !== undefined) {
              return input.selectionStart;
            } else if (document.selection) {
              // Curse you IE
              input.focus();
              var selection = document.selection.createRange();
              selection.moveStart('character', -input.value.length);
              return selection.text.length;
            }
            return 0;
          }
          function setCaretPosition(input, pos) {
            if (!input)
              return 0;
            if (input.offsetWidth === 0 || input.offsetHeight === 0) {
              return;  // Input's hidden
            }
            if (input.setSelectionRange) {
              input.focus();
              input.setSelectionRange(pos, pos);
            } else if (input.createTextRange) {
              // Curse you IE
              var range = input.createTextRange();
              range.collapse(true);
              range.moveEnd('character', pos);
              range.moveStart('character', pos);
              range.select();
            }
          }
          function getSelectionLength(input) {
            if (!input)
              return 0;
            if (input.selectionStart !== undefined) {
              return input.selectionEnd - input.selectionStart;
            }
            if (document.selection) {
              return document.selection.createRange().text.length;
            }
            return 0;
          }
          // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
          if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function (searchElement) {
              if (this === null) {
                throw new TypeError();
              }
              var t = Object(this);
              var len = t.length >>> 0;
              if (len === 0) {
                return -1;
              }
              var n = 0;
              if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n !== n) {
                  // shortcut for verifying if it's NaN
                  n = 0;
                } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                  n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
              }
              if (n >= len) {
                return -1;
              }
              var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
              for (; k < len; k++) {
                if (k in t && t[k] === searchElement) {
                  return k;
                }
              }
              return -1;
            };
          }
        };
      }
    };
  }
]);
'use strict';
/**
 * Add a clear button to form inputs to reset their value
 */
angular.module('ui.reset', []).value('uiResetConfig', null).directive('uiReset', [
  'uiResetConfig',
  function (uiResetConfig) {
    var resetValue = null;
    if (uiResetConfig !== undefined) {
      resetValue = uiResetConfig;
    }
    return {
      require: 'ngModel',
      link: function (scope, elm, attrs, ctrl) {
        var aElement;
        aElement = angular.element('<a class="ui-reset" />');
        elm.wrap('<span class="ui-resetwrap" />').after(aElement);
        aElement.bind('click', function (e) {
          e.preventDefault();
          scope.$apply(function () {
            if (attrs.uiReset) {
              ctrl.$setViewValue(scope.$eval(attrs.uiReset));
            } else {
              ctrl.$setViewValue(resetValue);
            }
            ctrl.$render();
          });
        });
      }
    };
  }
]);
'use strict';
/**
 * Set a $uiRoute boolean to see if the current route matches
 */
angular.module('ui.route', []).directive('uiRoute', [
  '$location',
  '$parse',
  function ($location, $parse) {
    return {
      restrict: 'AC',
      scope: true,
      compile: function (tElement, tAttrs) {
        var useProperty;
        if (tAttrs.uiRoute) {
          useProperty = 'uiRoute';
        } else if (tAttrs.ngHref) {
          useProperty = 'ngHref';
        } else if (tAttrs.href) {
          useProperty = 'href';
        } else {
          throw new Error('uiRoute missing a route or href property on ' + tElement[0]);
        }
        return function ($scope, elm, attrs) {
          var modelSetter = $parse(attrs.ngModel || attrs.routeModel || '$uiRoute').assign;
          var watcher = angular.noop;
          // Used by href and ngHref
          function staticWatcher(newVal) {
            var hash = newVal.indexOf('#');
            if (hash > -1) {
              newVal = newVal.substr(hash + 1);
            }
            watcher = function watchHref() {
              modelSetter($scope, $location.path().indexOf(newVal) > -1);
            };
            watcher();
          }
          // Used by uiRoute
          function regexWatcher(newVal) {
            var hash = newVal.indexOf('#');
            if (hash > -1) {
              newVal = newVal.substr(hash + 1);
            }
            watcher = function watchRegex() {
              var regexp = new RegExp('^' + newVal + '$', ['i']);
              modelSetter($scope, regexp.test($location.path()));
            };
            watcher();
          }
          switch (useProperty) {
          case 'uiRoute':
            // if uiRoute={{}} this will be undefined, otherwise it will have a value and $observe() never gets triggered
            if (attrs.uiRoute) {
              regexWatcher(attrs.uiRoute);
            } else {
              attrs.$observe('uiRoute', regexWatcher);
            }
            break;
          case 'ngHref':
            // Setup watcher() every time ngHref changes
            if (attrs.ngHref) {
              staticWatcher(attrs.ngHref);
            } else {
              attrs.$observe('ngHref', staticWatcher);
            }
            break;
          case 'href':
            // Setup watcher()
            staticWatcher(attrs.href);
          }
          $scope.$on('$routeChangeSuccess', function () {
            watcher();
          });
          //Added for compatibility with ui-router
          $scope.$on('$stateChangeSuccess', function () {
            watcher();
          });
        };
      }
    };
  }
]);
'use strict';
angular.module('ui.scroll.jqlite', ['ui.scroll']).service('jqLiteExtras', [
  '$log',
  '$window',
  function (console, window) {
    return {
      registerFor: function (element) {
        var convertToPx, css, getMeasurements, getStyle, getWidthHeight, isWindow, scrollTo;
        css = angular.element.prototype.css;
        element.prototype.css = function (name, value) {
          var elem, self;
          self = this;
          elem = self[0];
          if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {
            return css.call(self, name, value);
          }
        };
        isWindow = function (obj) {
          return obj && obj.document && obj.location && obj.alert && obj.setInterval;
        };
        scrollTo = function (self, direction, value) {
          var elem, method, preserve, prop, _ref;
          elem = self[0];
          _ref = {
            top: [
              'scrollTop',
              'pageYOffset',
              'scrollLeft'
            ],
            left: [
              'scrollLeft',
              'pageXOffset',
              'scrollTop'
            ]
          }[direction], method = _ref[0], prop = _ref[1], preserve = _ref[2];
          if (isWindow(elem)) {
            if (angular.isDefined(value)) {
              return elem.scrollTo(self[preserve].call(self), value);
            } else {
              if (prop in elem) {
                return elem[prop];
              } else {
                return elem.document.documentElement[method];
              }
            }
          } else {
            if (angular.isDefined(value)) {
              return elem[method] = value;
            } else {
              return elem[method];
            }
          }
        };
        if (window.getComputedStyle) {
          getStyle = function (elem) {
            return window.getComputedStyle(elem, null);
          };
          convertToPx = function (elem, value) {
            return parseFloat(value);
          };
        } else {
          getStyle = function (elem) {
            return elem.currentStyle;
          };
          convertToPx = function (elem, value) {
            var core_pnum, left, result, rnumnonpx, rs, rsLeft, style;
            core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i');
            if (!rnumnonpx.test(value)) {
              return parseFloat(value);
            } else {
              style = elem.style;
              left = style.left;
              rs = elem.runtimeStyle;
              rsLeft = rs && rs.left;
              if (rs) {
                rs.left = style.left;
              }
              style.left = value;
              result = style.pixelLeft;
              style.left = left;
              if (rsLeft) {
                rs.left = rsLeft;
              }
              return result;
            }
          };
        }
        getMeasurements = function (elem, measure) {
          var base, borderA, borderB, computedMarginA, computedMarginB, computedStyle, dirA, dirB, marginA, marginB, paddingA, paddingB, _ref;
          if (isWindow(elem)) {
            base = document.documentElement[{
              height: 'clientHeight',
              width: 'clientWidth'
            }[measure]];
            return {
              base: base,
              padding: 0,
              border: 0,
              margin: 0
            };
          }
          _ref = {
            width: [
              elem.offsetWidth,
              'Left',
              'Right'
            ],
            height: [
              elem.offsetHeight,
              'Top',
              'Bottom'
            ]
          }[measure], base = _ref[0], dirA = _ref[1], dirB = _ref[2];
          computedStyle = getStyle(elem);
          paddingA = convertToPx(elem, computedStyle['padding' + dirA]) || 0;
          paddingB = convertToPx(elem, computedStyle['padding' + dirB]) || 0;
          borderA = convertToPx(elem, computedStyle['border' + dirA + 'Width']) || 0;
          borderB = convertToPx(elem, computedStyle['border' + dirB + 'Width']) || 0;
          computedMarginA = computedStyle['margin' + dirA];
          computedMarginB = computedStyle['margin' + dirB];
          marginA = convertToPx(elem, computedMarginA) || 0;
          marginB = convertToPx(elem, computedMarginB) || 0;
          return {
            base: base,
            padding: paddingA + paddingB,
            border: borderA + borderB,
            margin: marginA + marginB
          };
        };
        getWidthHeight = function (elem, direction, measure) {
          var computedStyle, measurements, result;
          measurements = getMeasurements(elem, direction);
          if (measurements.base > 0) {
            return {
              base: measurements.base - measurements.padding - measurements.border,
              outer: measurements.base,
              outerfull: measurements.base + measurements.margin
            }[measure];
          } else {
            computedStyle = getStyle(elem);
            result = computedStyle[direction];
            if (result < 0 || result === null) {
              result = elem.style[direction] || 0;
            }
            result = parseFloat(result) || 0;
            return {
              base: result - measurements.padding - measurements.border,
              outer: result,
              outerfull: result + measurements.padding + measurements.border + measurements.margin
            }[measure];
          }
        };
        return angular.forEach({
          before: function (newElem) {
            var children, elem, i, parent, self, _i, _ref;
            self = this;
            elem = self[0];
            parent = self.parent();
            children = parent.contents();
            if (children[0] === elem) {
              return parent.prepend(newElem);
            } else {
              for (i = _i = 1, _ref = children.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                if (children[i] === elem) {
                  angular.element(children[i - 1]).after(newElem);
                  return;
                }
              }
              throw new Error('invalid DOM structure ' + elem.outerHTML);
            }
          },
          height: function (value) {
            var self;
            self = this;
            if (angular.isDefined(value)) {
              if (angular.isNumber(value)) {
                value = value + 'px';
              }
              return css.call(self, 'height', value);
            } else {
              return getWidthHeight(this[0], 'height', 'base');
            }
          },
          outerHeight: function (option) {
            return getWidthHeight(this[0], 'height', option ? 'outerfull' : 'outer');
          },
          offset: function (value) {
            var box, doc, docElem, elem, self, win;
            self = this;
            if (arguments.length) {
              if (value === void 0) {
                return self;
              } else {
                return value;
              }
            }
            box = {
              top: 0,
              left: 0
            };
            elem = self[0];
            doc = elem && elem.ownerDocument;
            if (!doc) {
              return;
            }
            docElem = doc.documentElement;
            if (elem.getBoundingClientRect) {
              box = elem.getBoundingClientRect();
            }
            win = doc.defaultView || doc.parentWindow;
            return {
              top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
              left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
          },
          scrollTop: function (value) {
            return scrollTo(this, 'top', value);
          },
          scrollLeft: function (value) {
            return scrollTo(this, 'left', value);
          }
        }, function (value, key) {
          if (!element.prototype[key]) {
            return element.prototype[key] = value;
          }
        });
      }
    };
  }
]).run([
  '$log',
  '$window',
  'jqLiteExtras',
  function (console, window, jqLiteExtras) {
    if (!window.jQuery) {
      return jqLiteExtras.registerFor(angular.element);
    }
  }
]);
'use strict';
/*

 List of used element methods available in JQuery but not in JQuery Lite

 element.before(elem)
 element.height()
 element.outerHeight(true)
 element.height(value) = only for Top/Bottom padding elements
 element.scrollTop()
 element.scrollTop(value)
 */
angular.module('ui.scroll', []).directive('ngScrollViewport', [
  '$log',
  function () {
    return {
      controller: [
        '$scope',
        '$element',
        function (scope, element) {
          return element;
        }
      ]
    };
  }
]).directive('ngScroll', [
  '$log',
  '$injector',
  '$rootScope',
  '$timeout',
  function (console, $injector, $rootScope, $timeout) {
    return {
      require: ['?^ngScrollViewport'],
      transclude: 'element',
      priority: 1000,
      terminal: true,
      compile: function (element, attr, linker) {
        return function ($scope, $element, $attr, controllers) {
          var adapter, adjustBuffer, adjustRowHeight, bof, bottomVisiblePos, buffer, bufferPadding, bufferSize, clipBottom, clipTop, datasource, datasourceName, enqueueFetch, eof, eventListener, fetch, finalize, first, insert, isDatasource, isLoading, itemName, loading, match, next, pending, reload, removeFromBuffer, resizeHandler, scrollHandler, scrollHeight, shouldLoadBottom, shouldLoadTop, tempScope, topVisiblePos, viewport;
          match = $attr.ngScroll.match(/^\s*(\w+)\s+in\s+(\w+)\s*$/);
          if (!match) {
            throw new Error('Expected ngScroll in form of "item_ in _datasource_" but got "' + $attr.ngScroll + '"');
          }
          itemName = match[1];
          datasourceName = match[2];
          isDatasource = function (datasource) {
            return angular.isObject(datasource) && datasource.get && angular.isFunction(datasource.get);
          };
          datasource = $scope[datasourceName];
          if (!isDatasource(datasource)) {
            datasource = $injector.get(datasourceName);
            if (!isDatasource(datasource)) {
              throw new Error(datasourceName + ' is not a valid datasource');
            }
          }
          bufferSize = Math.max(3, +$attr.bufferSize || 10);
          bufferPadding = function () {
            return viewport.height() * Math.max(0.1, +$attr.padding || 0.1);
          };
          scrollHeight = function (elem) {
            return elem[0].scrollHeight || elem[0].document.documentElement.scrollHeight;
          };
          adapter = null;
          linker(tempScope = $scope.$new(), function (template) {
            var bottomPadding, createPadding, padding, repeaterType, topPadding, viewport;
            repeaterType = template[0].localName;
            if (repeaterType === 'dl') {
              throw new Error('ng-scroll directive does not support <' + template[0].localName + '> as a repeating tag: ' + template[0].outerHTML);
            }
            if (repeaterType !== 'li' && repeaterType !== 'tr') {
              repeaterType = 'div';
            }
            viewport = controllers[0] || angular.element(window);
            viewport.css({
              'overflow-y': 'auto',
              'display': 'block'
            });
            padding = function (repeaterType) {
              var div, result, table;
              switch (repeaterType) {
              case 'tr':
                table = angular.element('<table><tr><td><div></div></td></tr></table>');
                div = table.find('div');
                result = table.find('tr');
                result.paddingHeight = function () {
                  return div.height.apply(div, arguments);
                };
                return result;
              default:
                result = angular.element('<' + repeaterType + '></' + repeaterType + '>');
                result.paddingHeight = result.height;
                return result;
              }
            };
            createPadding = function (padding, element, direction) {
              element[{
                top: 'before',
                bottom: 'after'
              }[direction]](padding);
              return {
                paddingHeight: function () {
                  return padding.paddingHeight.apply(padding, arguments);
                },
                insert: function (element) {
                  return padding[{
                    top: 'after',
                    bottom: 'before'
                  }[direction]](element);
                }
              };
            };
            topPadding = createPadding(padding(repeaterType), element, 'top');
            bottomPadding = createPadding(padding(repeaterType), element, 'bottom');
            tempScope.$destroy();
            return adapter = {
              viewport: viewport,
              topPadding: topPadding.paddingHeight,
              bottomPadding: bottomPadding.paddingHeight,
              append: bottomPadding.insert,
              prepend: topPadding.insert,
              bottomDataPos: function () {
                return scrollHeight(viewport) - bottomPadding.paddingHeight();
              },
              topDataPos: function () {
                return topPadding.paddingHeight();
              }
            };
          });
          viewport = adapter.viewport;
          first = 1;
          next = 1;
          buffer = [];
          pending = [];
          eof = false;
          bof = false;
          loading = datasource.loading || function () {
          };
          isLoading = false;
          removeFromBuffer = function (start, stop) {
            var i, _i;
            for (i = _i = start; start <= stop ? _i < stop : _i > stop; i = start <= stop ? ++_i : --_i) {
              buffer[i].scope.$destroy();
              buffer[i].element.remove();
            }
            return buffer.splice(start, stop - start);
          };
          reload = function () {
            first = 1;
            next = 1;
            removeFromBuffer(0, buffer.length);
            adapter.topPadding(0);
            adapter.bottomPadding(0);
            pending = [];
            eof = false;
            bof = false;
            return adjustBuffer(false);
          };
          bottomVisiblePos = function () {
            return viewport.scrollTop() + viewport.height();
          };
          topVisiblePos = function () {
            return viewport.scrollTop();
          };
          shouldLoadBottom = function () {
            return !eof && adapter.bottomDataPos() < bottomVisiblePos() + bufferPadding();
          };
          clipBottom = function () {
            var bottomHeight, i, itemHeight, overage, _i, _ref;
            bottomHeight = 0;
            overage = 0;
            for (i = _i = _ref = buffer.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
              itemHeight = buffer[i].element.outerHeight(true);
              if (adapter.bottomDataPos() - bottomHeight - itemHeight > bottomVisiblePos() + bufferPadding()) {
                bottomHeight += itemHeight;
                overage++;
                eof = false;
              } else {
                break;
              }
            }
            if (overage > 0) {
              adapter.bottomPadding(adapter.bottomPadding() + bottomHeight);
              removeFromBuffer(buffer.length - overage, buffer.length);
              next -= overage;
              return console.log('clipped off bottom ' + overage + ' bottom padding ' + adapter.bottomPadding());
            }
          };
          shouldLoadTop = function () {
            return !bof && adapter.topDataPos() > topVisiblePos() - bufferPadding();
          };
          clipTop = function () {
            var item, itemHeight, overage, topHeight, _i, _len;
            topHeight = 0;
            overage = 0;
            for (_i = 0, _len = buffer.length; _i < _len; _i++) {
              item = buffer[_i];
              itemHeight = item.element.outerHeight(true);
              if (adapter.topDataPos() + topHeight + itemHeight < topVisiblePos() - bufferPadding()) {
                topHeight += itemHeight;
                overage++;
                bof = false;
              } else {
                break;
              }
            }
            if (overage > 0) {
              adapter.topPadding(adapter.topPadding() + topHeight);
              removeFromBuffer(0, overage);
              first += overage;
              return console.log('clipped off top ' + overage + ' top padding ' + adapter.topPadding());
            }
          };
          enqueueFetch = function (direction, scrolling) {
            if (!isLoading) {
              isLoading = true;
              loading(true);
            }
            if (pending.push(direction) === 1) {
              return fetch(scrolling);
            }
          };
          insert = function (index, item) {
            var itemScope, toBeAppended, wrapper;
            itemScope = $scope.$new();
            itemScope[itemName] = item;
            toBeAppended = index > first;
            itemScope.$index = index;
            if (toBeAppended) {
              itemScope.$index--;
            }
            wrapper = { scope: itemScope };
            linker(itemScope, function (clone) {
              wrapper.element = clone;
              if (toBeAppended) {
                if (index === next) {
                  adapter.append(clone);
                  return buffer.push(wrapper);
                } else {
                  buffer[index - first].element.after(clone);
                  return buffer.splice(index - first + 1, 0, wrapper);
                }
              } else {
                adapter.prepend(clone);
                return buffer.unshift(wrapper);
              }
            });
            return {
              appended: toBeAppended,
              wrapper: wrapper
            };
          };
          adjustRowHeight = function (appended, wrapper) {
            var newHeight;
            if (appended) {
              return adapter.bottomPadding(Math.max(0, adapter.bottomPadding() - wrapper.element.outerHeight(true)));
            } else {
              newHeight = adapter.topPadding() - wrapper.element.outerHeight(true);
              if (newHeight >= 0) {
                return adapter.topPadding(newHeight);
              } else {
                return viewport.scrollTop(viewport.scrollTop() + wrapper.element.outerHeight(true));
              }
            }
          };
          adjustBuffer = function (scrolling, newItems, finalize) {
            var doAdjustment;
            doAdjustment = function () {
              console.log('top {actual=' + adapter.topDataPos() + ' visible from=' + topVisiblePos() + ' bottom {visible through=' + bottomVisiblePos() + ' actual=' + adapter.bottomDataPos() + '}');
              if (shouldLoadBottom()) {
                enqueueFetch(true, scrolling);
              } else {
                if (shouldLoadTop()) {
                  enqueueFetch(false, scrolling);
                }
              }
              if (finalize) {
                return finalize();
              }
            };
            if (newItems) {
              return $timeout(function () {
                var row, _i, _len;
                for (_i = 0, _len = newItems.length; _i < _len; _i++) {
                  row = newItems[_i];
                  adjustRowHeight(row.appended, row.wrapper);
                }
                return doAdjustment();
              });
            } else {
              return doAdjustment();
            }
          };
          finalize = function (scrolling, newItems) {
            return adjustBuffer(scrolling, newItems, function () {
              pending.shift();
              if (pending.length === 0) {
                isLoading = false;
                return loading(false);
              } else {
                return fetch(scrolling);
              }
            });
          };
          fetch = function (scrolling) {
            var direction;
            direction = pending[0];
            if (direction) {
              if (buffer.length && !shouldLoadBottom()) {
                return finalize(scrolling);
              } else {
                return datasource.get(next, bufferSize, function (result) {
                  var item, newItems, _i, _len;
                  newItems = [];
                  if (result.length === 0) {
                    eof = true;
                    adapter.bottomPadding(0);
                    console.log('appended: requested ' + bufferSize + ' records starting from ' + next + ' recieved: eof');
                  } else {
                    clipTop();
                    for (_i = 0, _len = result.length; _i < _len; _i++) {
                      item = result[_i];
                      newItems.push(insert(++next, item));
                    }
                    console.log('appended: requested ' + bufferSize + ' received ' + result.length + ' buffer size ' + buffer.length + ' first ' + first + ' next ' + next);
                  }
                  return finalize(scrolling, newItems);
                });
              }
            } else {
              if (buffer.length && !shouldLoadTop()) {
                return finalize(scrolling);
              } else {
                return datasource.get(first - bufferSize, bufferSize, function (result) {
                  var i, newItems, _i, _ref;
                  newItems = [];
                  if (result.length === 0) {
                    bof = true;
                    adapter.topPadding(0);
                    console.log('prepended: requested ' + bufferSize + ' records starting from ' + (first - bufferSize) + ' recieved: bof');
                  } else {
                    clipBottom();
                    for (i = _i = _ref = result.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
                      newItems.unshift(insert(--first, result[i]));
                    }
                    console.log('prepended: requested ' + bufferSize + ' received ' + result.length + ' buffer size ' + buffer.length + ' first ' + first + ' next ' + next);
                  }
                  return finalize(scrolling, newItems);
                });
              }
            }
          };
          resizeHandler = function () {
            if (!$rootScope.$$phase && !isLoading) {
              adjustBuffer(false);
              return $scope.$apply();
            }
          };
          viewport.bind('resize', resizeHandler);
          scrollHandler = function () {
            if (!$rootScope.$$phase && !isLoading) {
              adjustBuffer(true);
              return $scope.$apply();
            }
          };
          viewport.bind('scroll', scrollHandler);
          $scope.$watch(datasource.revision, function () {
            return reload();
          });
          if (datasource.scope) {
            eventListener = datasource.scope.$new();
          } else {
            eventListener = $scope.$new();
          }
          $scope.$on('$destroy', function () {
            eventListener.$destroy();
            viewport.unbind('resize', resizeHandler);
            return viewport.unbind('scroll', scrollHandler);
          });
          eventListener.$on('update.items', function (event, locator, newItem) {
            var wrapper, _fn, _i, _len, _ref;
            if (angular.isFunction(locator)) {
              _fn = function (wrapper) {
                return locator(wrapper.scope);
              };
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                wrapper = buffer[_i];
                _fn(wrapper);
              }
            } else {
              if (0 <= (_ref = locator - first - 1) && _ref < buffer.length) {
                buffer[locator - first - 1].scope[itemName] = newItem;
              }
            }
            return null;
          });
          eventListener.$on('delete.items', function (event, locator) {
            var i, item, temp, wrapper, _fn, _i, _j, _k, _len, _len1, _len2, _ref;
            if (angular.isFunction(locator)) {
              temp = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                temp.unshift(item);
              }
              _fn = function (wrapper) {
                if (locator(wrapper.scope)) {
                  removeFromBuffer(temp.length - 1 - i, temp.length - i);
                  return next--;
                }
              };
              for (i = _j = 0, _len1 = temp.length; _j < _len1; i = ++_j) {
                wrapper = temp[i];
                _fn(wrapper);
              }
            } else {
              if (0 <= (_ref = locator - first - 1) && _ref < buffer.length) {
                removeFromBuffer(locator - first - 1, locator - first);
                next--;
              }
            }
            for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer(false);
          });
          return eventListener.$on('insert.item', function (event, locator, item) {
            var i, inserted, temp, wrapper, _fn, _i, _j, _k, _len, _len1, _len2, _ref;
            inserted = [];
            if (angular.isFunction(locator)) {
              temp = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                temp.unshift(item);
              }
              _fn = function (wrapper) {
                var j, newItems, _k, _len2, _results;
                if (newItems = locator(wrapper.scope)) {
                  insert = function (index, newItem) {
                    insert(index, newItem);
                    return next++;
                  };
                  if (angular.isArray(newItems)) {
                    _results = [];
                    for (j = _k = 0, _len2 = newItems.length; _k < _len2; j = ++_k) {
                      item = newItems[j];
                      _results.push(inserted.push(insert(i + j, item)));
                    }
                    return _results;
                  } else {
                    return inserted.push(insert(i, newItems));
                  }
                }
              };
              for (i = _j = 0, _len1 = temp.length; _j < _len1; i = ++_j) {
                wrapper = temp[i];
                _fn(wrapper);
              }
            } else {
              if (0 <= (_ref = locator - first - 1) && _ref < buffer.length) {
                inserted.push(insert(locator, item));
                next++;
              }
            }
            for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer(false, inserted);
          });
        };
      }
    };
  }
]);
'use strict';
/**
 * Adds a 'ui-scrollfix' class to the element when the page scrolls past it's position.
 * @param [offset] {int} optional Y-offset to override the detected offset.
 *   Takes 300 (absolute) or -300 or +300 (relative to detected)
 */
angular.module('ui.scrollfix', []).directive('uiScrollfix', [
  '$window',
  function ($window) {
    return {
      require: '^?uiScrollfixTarget',
      link: function (scope, elm, attrs, uiScrollfixTarget) {
        var top = elm[0].offsetTop, $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);
        if (!attrs.uiScrollfix) {
          attrs.uiScrollfix = top;
        } else if (typeof attrs.uiScrollfix === 'string') {
          // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat
          if (attrs.uiScrollfix.charAt(0) === '-') {
            attrs.uiScrollfix = top - parseFloat(attrs.uiScrollfix.substr(1));
          } else if (attrs.uiScrollfix.charAt(0) === '+') {
            attrs.uiScrollfix = top + parseFloat(attrs.uiScrollfix.substr(1));
          }
        }
        function onScroll() {
          // if pageYOffset is defined use it, otherwise use other crap for IE
          var offset;
          if (angular.isDefined($window.pageYOffset)) {
            offset = $window.pageYOffset;
          } else {
            var iebody = document.compatMode && document.compatMode !== 'BackCompat' ? document.documentElement : document.body;
            offset = iebody.scrollTop;
          }
          if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {
            elm.addClass('ui-scrollfix');
          } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {
            elm.removeClass('ui-scrollfix');
          }
        }
        $target.on('scroll', onScroll);
        // Unbind scroll event handler when directive is removed
        scope.$on('$destroy', function () {
          $target.off('scroll', onScroll);
        });
      }
    };
  }
]).directive('uiScrollfixTarget', [function () {
    return {
      controller: [
        '$element',
        function ($element) {
          this.$element = $element;
        }
      ]
    };
  }]);
'use strict';
/**
 * uiShow Directive
 *
 * Adds a 'ui-show' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
angular.module('ui.showhide', []).directive('uiShow', [function () {
    return function (scope, elm, attrs) {
      scope.$watch(attrs.uiShow, function (newVal) {
        if (newVal) {
          elm.addClass('ui-show');
        } else {
          elm.removeClass('ui-show');
        }
      });
    };
  }]).directive('uiHide', [function () {
    return function (scope, elm, attrs) {
      scope.$watch(attrs.uiHide, function (newVal) {
        if (newVal) {
          elm.addClass('ui-hide');
        } else {
          elm.removeClass('ui-hide');
        }
      });
    };
  }]).directive('uiToggle', [function () {
    return function (scope, elm, attrs) {
      scope.$watch(attrs.uiToggle, function (newVal) {
        if (newVal) {
          elm.removeClass('ui-hide').addClass('ui-show');
        } else {
          elm.removeClass('ui-show').addClass('ui-hide');
        }
      });
    };
  }]);
'use strict';
/**
 * Filters out all duplicate items from an array by checking the specified key
 * @param [key] {string} the name of the attribute of each object to compare for uniqueness
 if the key is empty, the entire object will be compared
 if the key === false then no filtering will be performed
 * @return {array}
 */
angular.module('ui.unique', []).filter('unique', [
  '$parse',
  function ($parse) {
    return function (items, filterOn) {
      if (filterOn === false) {
        return items;
      }
      if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
        var newItems = [], get = angular.isString(filterOn) ? $parse(filterOn) : function (item) {
            return item;
          };
        var extractValueToCompare = function (item) {
          return angular.isObject(item) ? get(item) : item;
        };
        angular.forEach(items, function (item) {
          var isDuplicate = false;
          for (var i = 0; i < newItems.length; i++) {
            if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
              isDuplicate = true;
              break;
            }
          }
          if (!isDuplicate) {
            newItems.push(item);
          }
        });
        items = newItems;
      }
      return items;
    };
  }
]);
'use strict';
/**
 * General-purpose validator for ngModel.
 * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using
 * an arbitrary validation function requires creation of a custom formatters and / or parsers.
 * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).
 * A validator function will trigger validation on both model and input changes.
 *
 * @example <input ui-validate=" 'myValidatorFunction($value)' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }">
 * @example <input ui-validate="{ foo : '$value > anotherModel' }" ui-validate-watch=" 'anotherModel' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }" ui-validate-watch=" { foo : 'anotherModel' } ">
 *
 * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.
 * If an object literal is passed a key denotes a validation error key while a value should be a validator function.
 * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.
 */
angular.module('ui.validate', []).directive('uiValidate', function () {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      var validateFn, validators = {}, validateExpr = scope.$eval(attrs.uiValidate);
      if (!validateExpr) {
        return;
      }
      if (angular.isString(validateExpr)) {
        validateExpr = { validator: validateExpr };
      }
      angular.forEach(validateExpr, function (exprssn, key) {
        validateFn = function (valueToValidate) {
          var expression = scope.$eval(exprssn, { '$value': valueToValidate });
          if (angular.isObject(expression) && angular.isFunction(expression.then)) {
            // expression is a promise
            expression.then(function () {
              ctrl.$setValidity(key, true);
            }, function () {
              ctrl.$setValidity(key, false);
            });
            return valueToValidate;
          } else if (expression) {
            // expression is true
            ctrl.$setValidity(key, true);
            return valueToValidate;
          } else {
            // expression is false
            ctrl.$setValidity(key, false);
            return valueToValidate;
          }
        };
        validators[key] = validateFn;
        ctrl.$formatters.push(validateFn);
        ctrl.$parsers.push(validateFn);
      });
      function apply_watch(watch) {
        //string - update all validators on expression change
        if (angular.isString(watch)) {
          scope.$watch(watch, function () {
            angular.forEach(validators, function (validatorFn) {
              validatorFn(ctrl.$modelValue);
            });
          });
          return;
        }
        //array - update all validators on change of any expression
        if (angular.isArray(watch)) {
          angular.forEach(watch, function (expression) {
            scope.$watch(expression, function () {
              angular.forEach(validators, function (validatorFn) {
                validatorFn(ctrl.$modelValue);
              });
            });
          });
          return;
        }
        //object - update appropriate validator
        if (angular.isObject(watch)) {
          angular.forEach(watch, function (expression, validatorKey) {
            //value is string - look after one expression
            if (angular.isString(expression)) {
              scope.$watch(expression, function () {
                validators[validatorKey](ctrl.$modelValue);
              });
            }
            //value is array - look after all expressions in array
            if (angular.isArray(expression)) {
              angular.forEach(expression, function (intExpression) {
                scope.$watch(intExpression, function () {
                  validators[validatorKey](ctrl.$modelValue);
                });
              });
            }
          });
        }
      }
      // Support for ui-validate-watch
      if (attrs.uiValidateWatch) {
        apply_watch(scope.$eval(attrs.uiValidateWatch));
      }
    }
  };
});
angular.module('ui.utils', [
  'ui.event',
  'ui.format',
  'ui.highlight',
  'ui.include',
  'ui.indeterminate',
  'ui.inflector',
  'ui.jq',
  'ui.keypress',
  'ui.mask',
  'ui.reset',
  'ui.route',
  'ui.scrollfix',
  'ui.scroll',
  'ui.scroll.jqlite',
  'ui.showhide',
  'ui.unique',
  'ui.validate'
]);
/**
 * angular-strap
 * @version v2.1.2 - 2014-10-19
 * @link http://mgcrea.github.io/angular-strap
 * @author Olivier Louvignes (olivier@mg-crea.com)
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (window, document, undefined) {
  'use strict';
  // Source: module.js
  angular.module('mgcrea.ngStrap', [
    'mgcrea.ngStrap.modal',
    'mgcrea.ngStrap.aside',
    'mgcrea.ngStrap.alert',
    'mgcrea.ngStrap.button',
    'mgcrea.ngStrap.select',
    'mgcrea.ngStrap.datepicker',
    'mgcrea.ngStrap.timepicker',
    'mgcrea.ngStrap.navbar',
    'mgcrea.ngStrap.tooltip',
    'mgcrea.ngStrap.popover',
    'mgcrea.ngStrap.dropdown',
    'mgcrea.ngStrap.typeahead',
    'mgcrea.ngStrap.scrollspy',
    'mgcrea.ngStrap.affix',
    'mgcrea.ngStrap.tab',
    'mgcrea.ngStrap.collapse'
  ]);
  // Source: alert.js
  // @BUG: following snippet won't compile correctly
  // @TODO: submit issue to core
  // '<span ng-if="title"><strong ng-bind="title"></strong>&nbsp;</span><span ng-bind-html="content"></span>' +
  angular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal']).provider('$alert', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        prefixClass: 'alert',
        prefixEvent: 'alert',
        placement: null,
        template: 'alert/alert.tpl.html',
        container: false,
        element: null,
        backdrop: false,
        keyboard: true,
        show: true,
        duration: false,
        type: false,
        dismissable: true
      };
    this.$get = [
      '$modal',
      '$timeout',
      function ($modal, $timeout) {
        function AlertFactory(config) {
          var $alert = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          $alert = $modal(options);
          // Support scope as string options [/*title, content, */ type, dismissable]
          $alert.$scope.dismissable = !!options.dismissable;
          if (options.type) {
            $alert.$scope.type = options.type;
          }
          // Support auto-close duration
          var show = $alert.show;
          if (options.duration) {
            $alert.show = function () {
              show();
              $timeout(function () {
                $alert.hide();
              }, options.duration * 1000);
            };
          }
          return $alert;
        }
        return AlertFactory;
      }
    ];
  }).directive('bsAlert', [
    '$window',
    '$sce',
    '$alert',
    function ($window, $sce, $alert) {
      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;
      return {
        restrict: 'EAC',
        scope: true,
        link: function postLink(scope, element, attr, transclusion) {
          // Directive options
          var options = {
              scope: scope,
              element: element,
              show: false
            };
          angular.forEach([
            'template',
            'placement',
            'keyboard',
            'html',
            'container',
            'animation',
            'duration',
            'dismissable'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Support scope as data-attrs
          angular.forEach([
            'title',
            'content',
            'type'
          ], function (key) {
            attr[key] && attr.$observe(key, function (newValue, oldValue) {
              scope[key] = $sce.trustAsHtml(newValue);
            });
          });
          // Support scope as an object
          attr.bsAlert && scope.$watch(attr.bsAlert, function (newValue, oldValue) {
            if (angular.isObject(newValue)) {
              angular.extend(scope, newValue);
            } else {
              scope.content = newValue;
            }
          }, true);
          // Initialize alert
          var alert = $alert(options);
          // Trigger
          element.on(attr.trigger || 'click', alert.toggle);
          // Garbage collection
          scope.$on('$destroy', function () {
            if (alert)
              alert.destroy();
            options = null;
            alert = null;
          });
        }
      };
    }
  ]);
  // Source: affix.js
  angular.module('mgcrea.ngStrap.affix', [
    'mgcrea.ngStrap.helpers.dimensions',
    'mgcrea.ngStrap.helpers.debounce'
  ]).provider('$affix', function () {
    var defaults = this.defaults = { offsetTop: 'auto' };
    this.$get = [
      '$window',
      'debounce',
      'dimensions',
      function ($window, debounce, dimensions) {
        var bodyEl = angular.element($window.document.body);
        var windowEl = angular.element($window);
        function AffixFactory(element, config) {
          var $affix = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          var targetEl = options.target;
          // Initial private vars
          var reset = 'affix affix-top affix-bottom', initialAffixTop = 0, initialOffsetTop = 0, offsetTop = 0, offsetBottom = 0, affixed = null, unpin = null;
          var parent = element.parent();
          // Options: custom parent
          if (options.offsetParent) {
            if (options.offsetParent.match(/^\d+$/)) {
              for (var i = 0; i < options.offsetParent * 1 - 1; i++) {
                parent = parent.parent();
              }
            } else {
              parent = angular.element(options.offsetParent);
            }
          }
          $affix.init = function () {
            $affix.$parseOffsets();
            initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;
            // Bind events
            targetEl.on('scroll', $affix.checkPosition);
            targetEl.on('click', $affix.checkPositionWithEventLoop);
            windowEl.on('resize', $affix.$debouncedOnResize);
            // Both of these checkPosition() calls are necessary for the case where
            // the user hits refresh after scrolling to the bottom of the page.
            $affix.checkPosition();
            $affix.checkPositionWithEventLoop();
          };
          $affix.destroy = function () {
            // Unbind events
            targetEl.off('scroll', $affix.checkPosition);
            targetEl.off('click', $affix.checkPositionWithEventLoop);
            windowEl.off('resize', $affix.$debouncedOnResize);
          };
          $affix.checkPositionWithEventLoop = function () {
            setTimeout($affix.checkPosition, 1);
          };
          $affix.checkPosition = function () {
            // if (!this.$element.is(':visible')) return
            var scrollTop = getScrollTop();
            var position = dimensions.offset(element[0]);
            var elementHeight = dimensions.height(element[0]);
            // Get required affix class according to position
            var affix = getRequiredAffixClass(unpin, position, elementHeight);
            // Did affix status changed this last check?
            if (affixed === affix)
              return;
            affixed = affix;
            // Add proper affix class
            element.removeClass(reset).addClass('affix' + (affix !== 'middle' ? '-' + affix : ''));
            if (affix === 'top') {
              unpin = null;
              element.css('position', options.offsetParent ? '' : 'relative');
              element.css('top', '');
            } else if (affix === 'bottom') {
              if (options.offsetUnpin) {
                unpin = -(options.offsetUnpin * 1);
              } else {
                // Calculate unpin threshold when affixed to bottom.
                // Hopefully the browser scrolls pixel by pixel.
                unpin = position.top - scrollTop;
              }
              element.css('position', options.offsetParent ? '' : 'relative');
              element.css('top', options.offsetParent ? '' : bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop + 'px');
            } else {
              // affix === 'middle'
              unpin = null;
              element.css('position', 'fixed');
              element.css('top', initialAffixTop + 'px');
            }
          };
          $affix.$onResize = function () {
            $affix.$parseOffsets();
            $affix.checkPosition();
          };
          $affix.$debouncedOnResize = debounce($affix.$onResize, 50);
          $affix.$parseOffsets = function () {
            var initialPosition = element.css('position');
            // Reset position to calculate correct offsetTop
            element.css('position', options.offsetParent ? '' : 'relative');
            if (options.offsetTop) {
              if (options.offsetTop === 'auto') {
                options.offsetTop = '+0';
              }
              if (options.offsetTop.match(/^[-+]\d+$/)) {
                initialAffixTop = -options.offsetTop * 1;
                if (options.offsetParent) {
                  offsetTop = dimensions.offset(parent[0]).top + options.offsetTop * 1;
                } else {
                  offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + options.offsetTop * 1;
                }
              } else {
                offsetTop = options.offsetTop * 1;
              }
            }
            if (options.offsetBottom) {
              if (options.offsetParent && options.offsetBottom.match(/^[-+]\d+$/)) {
                // add 1 pixel due to rounding problems...
                offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + options.offsetBottom * 1 + 1;
              } else {
                offsetBottom = options.offsetBottom * 1;
              }
            }
            // Bring back the element's position after calculations
            element.css('position', initialPosition);
          };
          // Private methods
          function getRequiredAffixClass(unpin, position, elementHeight) {
            var scrollTop = getScrollTop();
            var scrollHeight = getScrollHeight();
            if (scrollTop <= offsetTop) {
              return 'top';
            } else if (unpin !== null && scrollTop + unpin <= position.top) {
              return 'middle';
            } else if (offsetBottom !== null && position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom) {
              return 'bottom';
            } else {
              return 'middle';
            }
          }
          function getScrollTop() {
            return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;
          }
          function getScrollHeight() {
            return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;
          }
          $affix.init();
          return $affix;
        }
        return AffixFactory;
      }
    ];
  }).directive('bsAffix', [
    '$affix',
    '$window',
    function ($affix, $window) {
      return {
        restrict: 'EAC',
        require: '^?bsAffixTarget',
        link: function postLink(scope, element, attr, affixTarget) {
          var options = {
              scope: scope,
              offsetTop: 'auto',
              target: affixTarget ? affixTarget.$element : angular.element($window)
            };
          angular.forEach([
            'offsetTop',
            'offsetBottom',
            'offsetParent',
            'offsetUnpin'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          var affix = $affix(element, options);
          scope.$on('$destroy', function () {
            affix && affix.destroy();
            options = null;
            affix = null;
          });
        }
      };
    }
  ]).directive('bsAffixTarget', function () {
    return {
      controller: [
        '$element',
        function ($element) {
          this.$element = $element;
        }
      ]
    };
  });
  // Source: aside.js
  angular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal']).provider('$aside', function () {
    var defaults = this.defaults = {
        animation: 'am-fade-and-slide-right',
        prefixClass: 'aside',
        prefixEvent: 'aside',
        placement: 'right',
        template: 'aside/aside.tpl.html',
        contentTemplate: false,
        container: false,
        element: null,
        backdrop: true,
        keyboard: true,
        html: false,
        show: true
      };
    this.$get = [
      '$modal',
      function ($modal) {
        function AsideFactory(config) {
          var $aside = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          $aside = $modal(options);
          return $aside;
        }
        return AsideFactory;
      }
    ];
  }).directive('bsAside', [
    '$window',
    '$sce',
    '$aside',
    function ($window, $sce, $aside) {
      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;
      return {
        restrict: 'EAC',
        scope: true,
        link: function postLink(scope, element, attr, transclusion) {
          // Directive options
          var options = {
              scope: scope,
              element: element,
              show: false
            };
          angular.forEach([
            'template',
            'contentTemplate',
            'placement',
            'backdrop',
            'keyboard',
            'html',
            'container',
            'animation'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Support scope as data-attrs
          angular.forEach([
            'title',
            'content'
          ], function (key) {
            attr[key] && attr.$observe(key, function (newValue, oldValue) {
              scope[key] = $sce.trustAsHtml(newValue);
            });
          });
          // Support scope as an object
          attr.bsAside && scope.$watch(attr.bsAside, function (newValue, oldValue) {
            if (angular.isObject(newValue)) {
              angular.extend(scope, newValue);
            } else {
              scope.content = newValue;
            }
          }, true);
          // Initialize aside
          var aside = $aside(options);
          // Trigger
          element.on(attr.trigger || 'click', aside.toggle);
          // Garbage collection
          scope.$on('$destroy', function () {
            if (aside)
              aside.destroy();
            options = null;
            aside = null;
          });
        }
      };
    }
  ]);
  // Source: button.js
  angular.module('mgcrea.ngStrap.button', []).provider('$button', function () {
    var defaults = this.defaults = {
        activeClass: 'active',
        toggleEvent: 'click'
      };
    this.$get = function () {
      return { defaults: defaults };
    };
  }).directive('bsCheckboxGroup', function () {
    return {
      restrict: 'A',
      require: 'ngModel',
      compile: function postLink(element, attr) {
        element.attr('data-toggle', 'buttons');
        element.removeAttr('ng-model');
        var children = element[0].querySelectorAll('input[type="checkbox"]');
        angular.forEach(children, function (child) {
          var childEl = angular.element(child);
          childEl.attr('bs-checkbox', '');
          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));
        });
      }
    };
  }).directive('bsCheckbox', [
    '$button',
    '$$rAF',
    function ($button, $$rAF) {
      var defaults = $button.defaults;
      var constantValueRegExp = /^(true|false|\d+)$/;
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function postLink(scope, element, attr, controller) {
          var options = defaults;
          // Support label > input[type="checkbox"]
          var isInput = element[0].nodeName === 'INPUT';
          var activeElement = isInput ? element.parent() : element;
          var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;
          if (constantValueRegExp.test(attr.trueValue)) {
            trueValue = scope.$eval(attr.trueValue);
          }
          var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;
          if (constantValueRegExp.test(attr.falseValue)) {
            falseValue = scope.$eval(attr.falseValue);
          }
          // Parse exotic values
          var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';
          if (hasExoticValues) {
            controller.$parsers.push(function (viewValue) {
              // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);
              return viewValue ? trueValue : falseValue;
            });
            // modelValue -> $formatters -> viewValue
            controller.$formatters.push(function (modelValue) {
              // console.warn('$formatter("%s"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);
              return angular.equals(modelValue, trueValue);
            });
            // Fix rendering for exotic values
            scope.$watch(attr.ngModel, function (newValue, oldValue) {
              controller.$render();
            });
          }
          // model -> view
          controller.$render = function () {
            // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);
            var isActive = angular.equals(controller.$modelValue, trueValue);
            $$rAF(function () {
              if (isInput)
                element[0].checked = isActive;
              activeElement.toggleClass(options.activeClass, isActive);
            });
          };
          // view -> model
          element.bind(options.toggleEvent, function () {
            scope.$apply(function () {
              // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);
              if (!isInput) {
                controller.$setViewValue(!activeElement.hasClass('active'));
              }
              if (!hasExoticValues) {
                controller.$render();
              }
            });
          });
        }
      };
    }
  ]).directive('bsRadioGroup', function () {
    return {
      restrict: 'A',
      require: 'ngModel',
      compile: function postLink(element, attr) {
        element.attr('data-toggle', 'buttons');
        element.removeAttr('ng-model');
        var children = element[0].querySelectorAll('input[type="radio"]');
        angular.forEach(children, function (child) {
          angular.element(child).attr('bs-radio', '');
          angular.element(child).attr('ng-model', attr.ngModel);
        });
      }
    };
  }).directive('bsRadio', [
    '$button',
    '$$rAF',
    function ($button, $$rAF) {
      var defaults = $button.defaults;
      var constantValueRegExp = /^(true|false|\d+)$/;
      return {
        restrict: 'A',
        require: 'ngModel',
        link: function postLink(scope, element, attr, controller) {
          var options = defaults;
          // Support `label > input[type="radio"]` markup
          var isInput = element[0].nodeName === 'INPUT';
          var activeElement = isInput ? element.parent() : element;
          var value = constantValueRegExp.test(attr.value) ? scope.$eval(attr.value) : attr.value;
          // model -> view
          controller.$render = function () {
            // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);
            var isActive = angular.equals(controller.$modelValue, value);
            $$rAF(function () {
              if (isInput)
                element[0].checked = isActive;
              activeElement.toggleClass(options.activeClass, isActive);
            });
          };
          // view -> model
          element.bind(options.toggleEvent, function () {
            scope.$apply(function () {
              // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);
              controller.$setViewValue(value);
              controller.$render();
            });
          });
        }
      };
    }
  ]);
  // Source: collapse.js
  angular.module('mgcrea.ngStrap.collapse', []).provider('$collapse', function () {
    var defaults = this.defaults = {
        animation: 'am-collapse',
        disallowToggle: false,
        activeClass: 'in',
        startCollapsed: false
      };
    var controller = this.controller = function ($scope, $element, $attrs) {
        var self = this;
        // Attributes options
        self.$options = angular.copy(defaults);
        angular.forEach([
          'animation',
          'disallowToggle',
          'activeClass',
          'startCollapsed'
        ], function (key) {
          if (angular.isDefined($attrs[key]))
            self.$options[key] = $attrs[key];
        });
        self.$toggles = [];
        self.$targets = [];
        self.$viewChangeListeners = [];
        self.$registerToggle = function (element) {
          self.$toggles.push(element);
        };
        self.$registerTarget = function (element) {
          self.$targets.push(element);
        };
        self.$targets.$active = !self.$options.startCollapsed ? 0 : -1;
        self.$setActive = $scope.$setActive = function (value) {
          if (!self.$options.disallowToggle) {
            self.$targets.$active = self.$targets.$active === value ? -1 : value;
          } else {
            self.$targets.$active = value;
          }
          self.$viewChangeListeners.forEach(function (fn) {
            fn();
          });
        };
      };
    this.$get = function () {
      var $collapse = {};
      $collapse.defaults = defaults;
      $collapse.controller = controller;
      return $collapse;
    };
  }).directive('bsCollapse', [
    '$window',
    '$animate',
    '$collapse',
    function ($window, $animate, $collapse) {
      var defaults = $collapse.defaults;
      return {
        require: [
          '?ngModel',
          'bsCollapse'
        ],
        controller: [
          '$scope',
          '$element',
          '$attrs',
          $collapse.controller
        ],
        link: function postLink(scope, element, attrs, controllers) {
          var ngModelCtrl = controllers[0];
          var bsCollapseCtrl = controllers[1];
          if (ngModelCtrl) {
            // Update the modelValue following
            bsCollapseCtrl.$viewChangeListeners.push(function () {
              ngModelCtrl.$setViewValue(bsCollapseCtrl.$targets.$active);
            });
            // modelValue -> $formatters -> viewValue
            ngModelCtrl.$formatters.push(function (modelValue) {
              // console.warn('$formatter("%s"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);
              if (bsCollapseCtrl.$targets.$active !== modelValue * 1) {
                bsCollapseCtrl.$setActive(modelValue * 1);
              }
              return modelValue;
            });
          }
        }
      };
    }
  ]).directive('bsCollapseToggle', function () {
    return {
      require: [
        '^?ngModel',
        '^bsCollapse'
      ],
      link: function postLink(scope, element, attrs, controllers) {
        var ngModelCtrl = controllers[0];
        var bsCollapseCtrl = controllers[1];
        // Add base attr
        element.attr('data-toggle', 'collapse');
        // Push pane to parent bsCollapse controller
        bsCollapseCtrl.$registerToggle(element);
        element.on('click', function () {
          var index = attrs.bsCollapseToggle || bsCollapseCtrl.$toggles.indexOf(element);
          bsCollapseCtrl.$setActive(index * 1);
          scope.$apply();
        });
      }
    };
  }).directive('bsCollapseTarget', [
    '$animate',
    function ($animate) {
      return {
        require: [
          '^?ngModel',
          '^bsCollapse'
        ],
        link: function postLink(scope, element, attrs, controllers) {
          var ngModelCtrl = controllers[0];
          var bsCollapseCtrl = controllers[1];
          // Add base class
          element.addClass('collapse');
          // Add animation class
          if (bsCollapseCtrl.$options.animation) {
            element.addClass(bsCollapseCtrl.$options.animation);
          }
          // Push pane to parent bsCollapse controller
          bsCollapseCtrl.$registerTarget(element);
          function render() {
            var index = bsCollapseCtrl.$targets.indexOf(element);
            var active = bsCollapseCtrl.$targets.$active;
            $animate[index === active ? 'addClass' : 'removeClass'](element, bsCollapseCtrl.$options.activeClass);
          }
          bsCollapseCtrl.$viewChangeListeners.push(function () {
            render();
          });
          render();
        }
      };
    }
  ]);
  // Source: datepicker.js
  angular.module('mgcrea.ngStrap.datepicker', [
    'mgcrea.ngStrap.helpers.dateParser',
    'mgcrea.ngStrap.tooltip'
  ]).provider('$datepicker', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        prefixClass: 'datepicker',
        placement: 'bottom-left',
        template: 'datepicker/datepicker.tpl.html',
        trigger: 'focus',
        container: false,
        keyboard: true,
        html: false,
        delay: 0,
        useNative: false,
        dateType: 'date',
        dateFormat: 'shortDate',
        modelDateFormat: null,
        dayFormat: 'dd',
        strictFormat: false,
        autoclose: false,
        minDate: -Infinity,
        maxDate: +Infinity,
        startView: 0,
        minView: 0,
        startWeek: 0,
        daysOfWeekDisabled: '',
        iconLeft: 'glyphicon glyphicon-chevron-left',
        iconRight: 'glyphicon glyphicon-chevron-right'
      };
    this.$get = [
      '$window',
      '$document',
      '$rootScope',
      '$sce',
      '$locale',
      'dateFilter',
      'datepickerViews',
      '$tooltip',
      function ($window, $document, $rootScope, $sce, $locale, dateFilter, datepickerViews, $tooltip) {
        var bodyEl = angular.element($window.document.body);
        var isNative = /(ip(a|o)d|iphone|android)/gi.test($window.navigator.userAgent);
        var isTouch = 'createTouch' in $window.document && isNative;
        if (!defaults.lang)
          defaults.lang = $locale.id;
        function DatepickerFactory(element, controller, config) {
          var $datepicker = $tooltip(element, angular.extend({}, defaults, config));
          var parentScope = config.scope;
          var options = $datepicker.$options;
          var scope = $datepicker.$scope;
          if (options.startView)
            options.startView -= options.minView;
          // View vars
          var pickerViews = datepickerViews($datepicker);
          $datepicker.$views = pickerViews.views;
          var viewDate = pickerViews.viewDate;
          scope.$mode = options.startView;
          scope.$iconLeft = options.iconLeft;
          scope.$iconRight = options.iconRight;
          var $picker = $datepicker.$views[scope.$mode];
          // Scope methods
          scope.$select = function (date) {
            $datepicker.select(date);
          };
          scope.$selectPane = function (value) {
            $datepicker.$selectPane(value);
          };
          scope.$toggleMode = function () {
            $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);
          };
          // Public methods
          $datepicker.update = function (date) {
            // console.warn('$datepicker.update() newValue=%o', date);
            if (angular.isDate(date) && !isNaN(date.getTime())) {
              $datepicker.$date = date;
              $picker.update.call($picker, date);
            }
            // Build only if pristine
            $datepicker.$build(true);
          };
          $datepicker.updateDisabledDates = function (dateRanges) {
            options.disabledDateRanges = dateRanges;
            for (var i = 0, l = scope.rows.length; i < l; i++) {
              angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);
            }
          };
          $datepicker.select = function (date, keep) {
            // console.warn('$datepicker.select', date, scope.$mode);
            if (!angular.isDate(controller.$dateValue))
              controller.$dateValue = new Date(date);
            if (!scope.$mode || keep) {
              controller.$setViewValue(angular.copy(date));
              controller.$render();
              if (options.autoclose && !keep) {
                $datepicker.hide(true);
              }
            } else {
              angular.extend(viewDate, {
                year: date.getFullYear(),
                month: date.getMonth(),
                date: date.getDate()
              });
              $datepicker.setMode(scope.$mode - 1);
              $datepicker.$build();
            }
          };
          $datepicker.setMode = function (mode) {
            // console.warn('$datepicker.setMode', mode);
            scope.$mode = mode;
            $picker = $datepicker.$views[scope.$mode];
            $datepicker.$build();
          };
          // Protected methods
          $datepicker.$build = function (pristine) {
            // console.warn('$datepicker.$build() viewDate=%o', viewDate);
            if (pristine === true && $picker.built)
              return;
            if (pristine === false && !$picker.built)
              return;
            $picker.build.call($picker);
          };
          $datepicker.$updateSelected = function () {
            for (var i = 0, l = scope.rows.length; i < l; i++) {
              angular.forEach(scope.rows[i], updateSelected);
            }
          };
          $datepicker.$isSelected = function (date) {
            return $picker.isSelected(date);
          };
          $datepicker.$setDisabledEl = function (el) {
            el.disabled = $picker.isDisabled(el.date);
          };
          $datepicker.$selectPane = function (value) {
            var steps = $picker.steps;
            var targetDate = new Date(Date.UTC(viewDate.year + (steps.year || 0) * value, viewDate.month + (steps.month || 0) * value, viewDate.date + (steps.day || 0) * value));
            angular.extend(viewDate, {
              year: targetDate.getUTCFullYear(),
              month: targetDate.getUTCMonth(),
              date: targetDate.getUTCDate()
            });
            $datepicker.$build();
          };
          $datepicker.$onMouseDown = function (evt) {
            // Prevent blur on mousedown on .dropdown-menu
            evt.preventDefault();
            evt.stopPropagation();
            // Emulate click for mobile devices
            if (isTouch) {
              var targetEl = angular.element(evt.target);
              if (targetEl[0].nodeName.toLowerCase() !== 'button') {
                targetEl = targetEl.parent();
              }
              targetEl.triggerHandler('click');
            }
          };
          $datepicker.$onKeyDown = function (evt) {
            if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey)
              return;
            evt.preventDefault();
            evt.stopPropagation();
            if (evt.keyCode === 13) {
              if (!scope.$mode) {
                return $datepicker.hide(true);
              } else {
                return scope.$apply(function () {
                  $datepicker.setMode(scope.$mode - 1);
                });
              }
            }
            // Navigate with keyboard
            $picker.onKeyDown(evt);
            parentScope.$digest();
          };
          // Private
          function updateSelected(el) {
            el.selected = $datepicker.$isSelected(el.date);
          }
          function focusElement() {
            element[0].focus();
          }
          // Overrides
          var _init = $datepicker.init;
          $datepicker.init = function () {
            if (isNative && options.useNative) {
              element.prop('type', 'date');
              element.css('-webkit-appearance', 'textfield');
              return;
            } else if (isTouch) {
              element.prop('type', 'text');
              element.attr('readonly', 'true');
              element.on('click', focusElement);
            }
            _init();
          };
          var _destroy = $datepicker.destroy;
          $datepicker.destroy = function () {
            if (isNative && options.useNative) {
              element.off('click', focusElement);
            }
            _destroy();
          };
          var _show = $datepicker.show;
          $datepicker.show = function () {
            _show();
            setTimeout(function () {
              $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);
              if (options.keyboard) {
                element.on('keydown', $datepicker.$onKeyDown);
              }
            });
          };
          var _hide = $datepicker.hide;
          $datepicker.hide = function (blur) {
            if (!$datepicker.$isShown)
              return;
            $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);
            if (options.keyboard) {
              element.off('keydown', $datepicker.$onKeyDown);
            }
            _hide(blur);
          };
          return $datepicker;
        }
        DatepickerFactory.defaults = defaults;
        return DatepickerFactory;
      }
    ];
  }).directive('bsDatepicker', [
    '$window',
    '$parse',
    '$q',
    '$locale',
    'dateFilter',
    '$datepicker',
    '$dateParser',
    '$timeout',
    function ($window, $parse, $q, $locale, dateFilter, $datepicker, $dateParser, $timeout) {
      var defaults = $datepicker.defaults;
      var isNative = /(ip(a|o)d|iphone|android)/gi.test($window.navigator.userAgent);
      return {
        restrict: 'EAC',
        require: 'ngModel',
        link: function postLink(scope, element, attr, controller) {
          // Directive options
          var options = {
              scope: scope,
              controller: controller
            };
          angular.forEach([
            'placement',
            'container',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'template',
            'autoclose',
            'dateType',
            'dateFormat',
            'modelDateFormat',
            'dayFormat',
            'strictFormat',
            'startWeek',
            'startDate',
            'useNative',
            'lang',
            'startView',
            'minView',
            'iconLeft',
            'iconRight',
            'daysOfWeekDisabled'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Visibility binding support
          attr.bsShow && scope.$watch(attr.bsShow, function (newValue, oldValue) {
            if (!datepicker || !angular.isDefined(newValue))
              return;
            if (angular.isString(newValue))
              newValue = !!newValue.match(/true|,?(datepicker),?/i);
            newValue === true ? datepicker.show() : datepicker.hide();
          });
          // Initialize datepicker
          var datepicker = $datepicker(element, controller, options);
          options = datepicker.$options;
          // Set expected iOS format
          if (isNative && options.useNative)
            options.dateFormat = 'yyyy-MM-dd';
          // Initialize parser
          var dateParser = $dateParser({
              format: options.dateFormat,
              lang: options.lang,
              strict: options.strictFormat
            });
          // Observe attributes for changes
          angular.forEach([
            'minDate',
            'maxDate'
          ], function (key) {
            // console.warn('attr.$observe(%s)', key, attr[key]);
            angular.isDefined(attr[key]) && attr.$observe(key, function (newValue) {
              // console.warn('attr.$observe(%s)=%o', key, newValue);
              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);
              // Build only if dirty
              !isNaN(datepicker.$options[key]) && datepicker.$build(false);
              validateAgainstMinMaxDate(controller.$dateValue);
            });
          });
          // Watch model for changes
          scope.$watch(attr.ngModel, function (newValue, oldValue) {
            datepicker.update(controller.$dateValue);
          }, true);
          // Normalize undefined/null/empty array,
          // so that we don't treat changing from undefined->null as a change.
          function normalizeDateRanges(ranges) {
            if (!ranges || !ranges.length)
              return null;
            return ranges;
          }
          if (angular.isDefined(attr.disabledDates)) {
            scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {
              disabledRanges = normalizeDateRanges(disabledRanges);
              previousValue = normalizeDateRanges(previousValue);
              if (disabledRanges) {
                datepicker.updateDisabledDates(disabledRanges);
              }
            });
          }
          function validateAgainstMinMaxDate(parsedDate) {
            if (!angular.isDate(parsedDate))
              return;
            var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;
            var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;
            var isValid = isMinValid && isMaxValid;
            controller.$setValidity('date', isValid);
            controller.$setValidity('min', isMinValid);
            controller.$setValidity('max', isMaxValid);
            // Only update the model when we have a valid date
            if (isValid)
              controller.$dateValue = parsedDate;
          }
          // viewValue -> $parsers -> modelValue
          controller.$parsers.unshift(function (viewValue) {
            // console.warn('$parser("%s"): viewValue=%o', element.attr('ng-model'), viewValue);
            // Null values should correctly reset the model value & validity
            if (!viewValue) {
              controller.$setValidity('date', true);
              return;
            }
            var parsedDate = dateParser.parse(viewValue, controller.$dateValue);
            if (!parsedDate || isNaN(parsedDate.getTime())) {
              controller.$setValidity('date', false);
              return;
            } else {
              validateAgainstMinMaxDate(parsedDate);
            }
            if (options.dateType === 'string') {
              return dateFilter(parsedDate, options.modelDateFormat || options.dateFormat);
            } else if (options.dateType === 'number') {
              return controller.$dateValue.getTime();
            } else if (options.dateType === 'iso') {
              return controller.$dateValue.toISOString();
            } else {
              return new Date(controller.$dateValue);
            }
          });
          // modelValue -> $formatters -> viewValue
          controller.$formatters.push(function (modelValue) {
            // console.warn('$formatter("%s"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);
            var date;
            if (angular.isUndefined(modelValue) || modelValue === null) {
              date = NaN;
            } else if (angular.isDate(modelValue)) {
              date = modelValue;
            } else if (options.dateType === 'string') {
              date = dateParser.parse(modelValue, null, options.modelDateFormat);
            } else {
              date = new Date(modelValue);
            }
            // Setup default value?
            // if(isNaN(date.getTime())) {
            //   var today = new Date();
            //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);
            // }
            controller.$dateValue = date;
            return controller.$dateValue;
          });
          // viewValue -> element
          controller.$render = function () {
            // console.warn('$render("%s"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);
            element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.dateFormat));
          };
          // Garbage collection
          scope.$on('$destroy', function () {
            if (datepicker)
              datepicker.destroy();
            options = null;
            datepicker = null;
          });
        }
      };
    }
  ]).provider('datepickerViews', function () {
    var defaults = this.defaults = {
        dayFormat: 'dd',
        daySplit: 7
      };
    // Split array into smaller arrays
    function split(arr, size) {
      var arrays = [];
      while (arr.length > 0) {
        arrays.push(arr.splice(0, size));
      }
      return arrays;
    }
    // Modulus operator
    function mod(n, m) {
      return (n % m + m) % m;
    }
    this.$get = [
      '$locale',
      '$sce',
      'dateFilter',
      '$dateParser',
      function ($locale, $sce, dateFilter, $dateParser) {
        return function (picker) {
          var scope = picker.$scope;
          var options = picker.$options;
          var dateParser = $dateParser();
          var weekDaysMin = $locale.DATETIME_FORMATS.SHORTDAY;
          var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));
          var weekDaysLabelsHtml = $sce.trustAsHtml('<th class="dow text-center">' + weekDaysLabels.join('</th><th class="dow text-center">') + '</th>');
          var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());
          var viewDate = {
              year: startDate.getFullYear(),
              month: startDate.getMonth(),
              date: startDate.getDate()
            };
          var timezoneOffset = startDate.getTimezoneOffset() * 60000;
          var views = [
              {
                format: options.dayFormat,
                split: 7,
                steps: { month: 1 },
                update: function (date, force) {
                  if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {
                    angular.extend(viewDate, {
                      year: picker.$date.getFullYear(),
                      month: picker.$date.getMonth(),
                      date: picker.$date.getDate()
                    });
                    picker.$build();
                  } else if (date.getDate() !== viewDate.date) {
                    viewDate.date = picker.$date.getDate();
                    picker.$updateSelected();
                  }
                },
                build: function () {
                  var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();
                  var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 86400000), firstDateOffset = firstDate.getTimezoneOffset();
                  var today = new Date().toDateString();
                  // Handle daylight time switch
                  if (firstDateOffset !== firstDayOfMonthOffset)
                    firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60000);
                  var days = [], day;
                  for (var i = 0; i < 42; i++) {
                    // < 7 * 6
                    day = new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i);
                    days.push({
                      date: day,
                      isToday: day.toDateString() === today,
                      label: dateFilter(day, this.format),
                      selected: picker.$date && this.isSelected(day),
                      muted: day.getMonth() !== viewDate.month,
                      disabled: this.isDisabled(day)
                    });
                  }
                  scope.title = dateFilter(firstDayOfMonth, 'MMMM yyyy');
                  scope.showLabels = true;
                  scope.labels = weekDaysLabelsHtml;
                  scope.rows = split(days, this.split);
                  this.built = true;
                },
                isSelected: function (date) {
                  return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();
                },
                isDisabled: function (date) {
                  var time = date.getTime();
                  // Disabled because of min/max date.
                  if (time < options.minDate || time > options.maxDate)
                    return true;
                  // Disabled due to being a disabled day of the week
                  if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1)
                    return true;
                  // Disabled because of disabled date range.
                  if (options.disabledDateRanges) {
                    for (var i = 0; i < options.disabledDateRanges.length; i++) {
                      if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {
                        return true;
                      }
                    }
                  }
                  return false;
                },
                onKeyDown: function (evt) {
                  var actualTime = picker.$date.getTime();
                  var newDate;
                  if (evt.keyCode === 37)
                    newDate = new Date(actualTime - 1 * 86400000);
                  else if (evt.keyCode === 38)
                    newDate = new Date(actualTime - 7 * 86400000);
                  else if (evt.keyCode === 39)
                    newDate = new Date(actualTime + 1 * 86400000);
                  else if (evt.keyCode === 40)
                    newDate = new Date(actualTime + 7 * 86400000);
                  if (!this.isDisabled(newDate))
                    picker.select(newDate, true);
                }
              },
              {
                name: 'month',
                format: 'MMM',
                split: 4,
                steps: { year: 1 },
                update: function (date, force) {
                  if (!this.built || date.getFullYear() !== viewDate.year) {
                    angular.extend(viewDate, {
                      year: picker.$date.getFullYear(),
                      month: picker.$date.getMonth(),
                      date: picker.$date.getDate()
                    });
                    picker.$build();
                  } else if (date.getMonth() !== viewDate.month) {
                    angular.extend(viewDate, {
                      month: picker.$date.getMonth(),
                      date: picker.$date.getDate()
                    });
                    picker.$updateSelected();
                  }
                },
                build: function () {
                  var firstMonth = new Date(viewDate.year, 0, 1);
                  var months = [], month;
                  for (var i = 0; i < 12; i++) {
                    month = new Date(viewDate.year, i, 1);
                    months.push({
                      date: month,
                      label: dateFilter(month, this.format),
                      selected: picker.$isSelected(month),
                      disabled: this.isDisabled(month)
                    });
                  }
                  scope.title = dateFilter(month, 'yyyy');
                  scope.showLabels = false;
                  scope.rows = split(months, this.split);
                  this.built = true;
                },
                isSelected: function (date) {
                  return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();
                },
                isDisabled: function (date) {
                  var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);
                  return lastDate < options.minDate || date.getTime() > options.maxDate;
                },
                onKeyDown: function (evt) {
                  var actualMonth = picker.$date.getMonth();
                  var newDate = new Date(picker.$date);
                  if (evt.keyCode === 37)
                    newDate.setMonth(actualMonth - 1);
                  else if (evt.keyCode === 38)
                    newDate.setMonth(actualMonth - 4);
                  else if (evt.keyCode === 39)
                    newDate.setMonth(actualMonth + 1);
                  else if (evt.keyCode === 40)
                    newDate.setMonth(actualMonth + 4);
                  if (!this.isDisabled(newDate))
                    picker.select(newDate, true);
                }
              },
              {
                name: 'year',
                format: 'yyyy',
                split: 4,
                steps: { year: 12 },
                update: function (date, force) {
                  if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {
                    angular.extend(viewDate, {
                      year: picker.$date.getFullYear(),
                      month: picker.$date.getMonth(),
                      date: picker.$date.getDate()
                    });
                    picker.$build();
                  } else if (date.getFullYear() !== viewDate.year) {
                    angular.extend(viewDate, {
                      year: picker.$date.getFullYear(),
                      month: picker.$date.getMonth(),
                      date: picker.$date.getDate()
                    });
                    picker.$updateSelected();
                  }
                },
                build: function () {
                  var firstYear = viewDate.year - viewDate.year % (this.split * 3);
                  var years = [], year;
                  for (var i = 0; i < 12; i++) {
                    year = new Date(firstYear + i, 0, 1);
                    years.push({
                      date: year,
                      label: dateFilter(year, this.format),
                      selected: picker.$isSelected(year),
                      disabled: this.isDisabled(year)
                    });
                  }
                  scope.title = years[0].label + '-' + years[years.length - 1].label;
                  scope.showLabels = false;
                  scope.rows = split(years, this.split);
                  this.built = true;
                },
                isSelected: function (date) {
                  return picker.$date && date.getFullYear() === picker.$date.getFullYear();
                },
                isDisabled: function (date) {
                  var lastDate = +new Date(date.getFullYear() + 1, 0, 0);
                  return lastDate < options.minDate || date.getTime() > options.maxDate;
                },
                onKeyDown: function (evt) {
                  var actualYear = picker.$date.getFullYear(), newDate = new Date(picker.$date);
                  if (evt.keyCode === 37)
                    newDate.setYear(actualYear - 1);
                  else if (evt.keyCode === 38)
                    newDate.setYear(actualYear - 4);
                  else if (evt.keyCode === 39)
                    newDate.setYear(actualYear + 1);
                  else if (evt.keyCode === 40)
                    newDate.setYear(actualYear + 4);
                  if (!this.isDisabled(newDate))
                    picker.select(newDate, true);
                }
              }
            ];
          return {
            views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,
            viewDate: viewDate
          };
        };
      }
    ];
  });
  // Source: date-parser.js
  angular.module('mgcrea.ngStrap.helpers.dateParser', []).provider('$dateParser', [
    '$localeProvider',
    function ($localeProvider) {
      // define a custom ParseDate object to use instead of native Date 
      // to avoid date values wrapping when setting date component values
      function ParseDate() {
        this.year = 1970;
        this.month = 0;
        this.day = 1;
        this.hours = 0;
        this.minutes = 0;
        this.seconds = 0;
        this.milliseconds = 0;
      }
      ParseDate.prototype.setMilliseconds = function (value) {
        this.milliseconds = value;
      };
      ParseDate.prototype.setSeconds = function (value) {
        this.seconds = value;
      };
      ParseDate.prototype.setMinutes = function (value) {
        this.minutes = value;
      };
      ParseDate.prototype.setHours = function (value) {
        this.hours = value;
      };
      ParseDate.prototype.getHours = function () {
        return this.hours;
      };
      ParseDate.prototype.setDate = function (value) {
        this.day = value;
      };
      ParseDate.prototype.setMonth = function (value) {
        this.month = value;
      };
      ParseDate.prototype.setFullYear = function (value) {
        this.year = value;
      };
      ParseDate.prototype.fromDate = function (value) {
        this.year = value.getFullYear();
        this.month = value.getMonth();
        this.day = value.getDate();
        this.hours = value.getHours();
        this.minutes = value.getMinutes();
        this.seconds = value.getSeconds();
        this.milliseconds = value.getMilliseconds();
        return this;
      };
      ParseDate.prototype.toDate = function () {
        return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);
      };
      var proto = ParseDate.prototype;
      function noop() {
      }
      function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      }
      function indexOfCaseInsensitive(array, value) {
        var len = array.length, str = value.toString().toLowerCase();
        for (var i = 0; i < len; i++) {
          if (array[i].toLowerCase() === str) {
            return i;
          }
        }
        return -1;  // Return -1 per the "Array.indexOf()" method.    
      }
      var defaults = this.defaults = {
          format: 'shortDate',
          strict: false
        };
      this.$get = [
        '$locale',
        'dateFilter',
        function ($locale, dateFilter) {
          var DateParserFactory = function (config) {
            var options = angular.extend({}, defaults, config);
            var $dateParser = {};
            var regExpMap = {
                'sss': '[0-9]{3}',
                'ss': '[0-5][0-9]',
                's': options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',
                'mm': '[0-5][0-9]',
                'm': options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',
                'HH': '[01][0-9]|2[0-3]',
                'H': options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',
                'hh': '[0][1-9]|[1][012]',
                'h': options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',
                'a': 'AM|PM',
                'EEEE': $locale.DATETIME_FORMATS.DAY.join('|'),
                'EEE': $locale.DATETIME_FORMATS.SHORTDAY.join('|'),
                'dd': '0[1-9]|[12][0-9]|3[01]',
                'd': options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',
                'MMMM': $locale.DATETIME_FORMATS.MONTH.join('|'),
                'MMM': $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
                'MM': '0[1-9]|1[012]',
                'M': options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',
                'yyyy': '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',
                'yy': '[0-9]{2}',
                'y': options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'
              };
            var setFnMap = {
                'sss': proto.setMilliseconds,
                'ss': proto.setSeconds,
                's': proto.setSeconds,
                'mm': proto.setMinutes,
                'm': proto.setMinutes,
                'HH': proto.setHours,
                'H': proto.setHours,
                'hh': proto.setHours,
                'h': proto.setHours,
                'EEEE': noop,
                'EEE': noop,
                'dd': proto.setDate,
                'd': proto.setDate,
                'a': function (value) {
                  var hours = this.getHours() % 12;
                  return this.setHours(value.match(/pm/i) ? hours + 12 : hours);
                },
                'MMMM': function (value) {
                  return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value));
                },
                'MMM': function (value) {
                  return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value));
                },
                'MM': function (value) {
                  return this.setMonth(1 * value - 1);
                },
                'M': function (value) {
                  return this.setMonth(1 * value - 1);
                },
                'yyyy': proto.setFullYear,
                'yy': function (value) {
                  return this.setFullYear(2000 + 1 * value);
                },
                'y': proto.setFullYear
              };
            var regex, setMap;
            $dateParser.init = function () {
              $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;
              regex = regExpForFormat($dateParser.$format);
              setMap = setMapForFormat($dateParser.$format);
            };
            $dateParser.isValid = function (date) {
              if (angular.isDate(date))
                return !isNaN(date.getTime());
              return regex.test(date);
            };
            $dateParser.parse = function (value, baseDate, format) {
              if (angular.isDate(value))
                value = dateFilter(value, format || $dateParser.$format);
              var formatRegex = format ? regExpForFormat(format) : regex;
              var formatSetMap = format ? setMapForFormat(format) : setMap;
              var matches = formatRegex.exec(value);
              if (!matches)
                return false;
              // use custom ParseDate object to set parsed values
              var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));
              for (var i = 0; i < matches.length - 1; i++) {
                formatSetMap[i] && formatSetMap[i].call(date, matches[i + 1]);
              }
              // convert back to native Date object
              return date.toDate();
            };
            $dateParser.getDateForAttribute = function (key, value) {
              var date;
              if (value === 'today') {
                var today = new Date();
                date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, key === 'minDate' ? 0 : -1);
              } else if (angular.isString(value) && value.match(/^".+"$/)) {
                // Support {{ dateObj }}
                date = new Date(value.substr(1, value.length - 2));
              } else if (isNumeric(value)) {
                date = new Date(parseInt(value, 10));
              } else if (angular.isString(value) && 0 === value.length) {
                // Reset date
                date = key === 'minDate' ? -Infinity : +Infinity;
              } else {
                date = new Date(value);
              }
              return date;
            };
            $dateParser.getTimeForAttribute = function (key, value) {
              var time;
              if (value === 'now') {
                time = new Date().setFullYear(1970, 0, 1);
              } else if (angular.isString(value) && value.match(/^".+"$/)) {
                time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);
              } else if (isNumeric(value)) {
                time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);
              } else if (angular.isString(value) && 0 === value.length) {
                // Reset time
                time = key === 'minTime' ? -Infinity : +Infinity;
              } else {
                time = $dateParser.parse(value, new Date(1970, 0, 1, 0));
              }
              return time;
            };
            // Private functions
            function setMapForFormat(format) {
              var keys = Object.keys(setFnMap), i;
              var map = [], sortedMap = [];
              // Map to setFn
              var clonedFormat = format;
              for (i = 0; i < keys.length; i++) {
                if (format.split(keys[i]).length > 1) {
                  var index = clonedFormat.search(keys[i]);
                  format = format.split(keys[i]).join('');
                  if (setFnMap[keys[i]]) {
                    map[index] = setFnMap[keys[i]];
                  }
                }
              }
              // Sort result map
              angular.forEach(map, function (v) {
                // conditional required since angular.forEach broke around v1.2.21
                // related pr: https://github.com/angular/angular.js/pull/8525
                if (v)
                  sortedMap.push(v);
              });
              return sortedMap;
            }
            function escapeReservedSymbols(text) {
              return text.replace(/\//g, '[\\/]').replace('/-/g', '[-]').replace(/\./g, '[.]').replace(/\\s/g, '[\\s]');
            }
            function regExpForFormat(format) {
              var keys = Object.keys(regExpMap), i;
              var re = format;
              // Abstract replaces to avoid collisions
              for (i = 0; i < keys.length; i++) {
                re = re.split(keys[i]).join('${' + i + '}');
              }
              // Replace abstracted values
              for (i = 0; i < keys.length; i++) {
                re = re.split('${' + i + '}').join('(' + regExpMap[keys[i]] + ')');
              }
              format = escapeReservedSymbols(format);
              return new RegExp('^' + re + '$', ['i']);
            }
            $dateParser.init();
            return $dateParser;
          };
          return DateParserFactory;
        }
      ];
    }
  ]);
  // Source: debounce.js
  angular.module('mgcrea.ngStrap.helpers.debounce', []).factory('debounce', [
    '$timeout',
    function ($timeout) {
      return function (func, wait, immediate) {
        var timeout = null;
        return function () {
          var context = this, args = arguments, callNow = immediate && !timeout;
          if (timeout) {
            $timeout.cancel(timeout);
          }
          timeout = $timeout(function later() {
            timeout = null;
            if (!immediate) {
              func.apply(context, args);
            }
          }, wait, false);
          if (callNow) {
            func.apply(context, args);
          }
          return timeout;
        };
      };
    }
  ]).factory('throttle', [
    '$timeout',
    function ($timeout) {
      return function (func, wait, options) {
        var timeout = null;
        options || (options = {});
        return function () {
          var context = this, args = arguments;
          if (!timeout) {
            if (options.leading !== false) {
              func.apply(context, args);
            }
            timeout = $timeout(function later() {
              timeout = null;
              if (options.trailing !== false) {
                func.apply(context, args);
              }
            }, wait, false);
          }
        };
      };
    }
  ]);
  // Source: dimensions.js
  angular.module('mgcrea.ngStrap.helpers.dimensions', []).factory('dimensions', [
    '$document',
    '$window',
    function ($document, $window) {
      var jqLite = angular.element;
      var fn = {};
      /**
     * Test the element nodeName
     * @param element
     * @param name
     */
      var nodeName = fn.nodeName = function (element, name) {
          return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();
        };
      /**
     * Returns the element computed style
     * @param element
     * @param prop
     * @param extra
     */
      fn.css = function (element, prop, extra) {
        var value;
        if (element.currentStyle) {
          //IE
          value = element.currentStyle[prop];
        } else if (window.getComputedStyle) {
          value = window.getComputedStyle(element)[prop];
        } else {
          value = element.style[prop];
        }
        return extra === true ? parseFloat(value) || 0 : value;
      };
      /**
     * Provides read-only equivalent of jQuery's offset function:
     * @required-by bootstrap-tooltip, bootstrap-affix
     * @url http://api.jquery.com/offset/
     * @param element
     */
      fn.offset = function (element) {
        var boxRect = element.getBoundingClientRect();
        var docElement = element.ownerDocument;
        return {
          width: boxRect.width || element.offsetWidth,
          height: boxRect.height || element.offsetHeight,
          top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),
          left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)
        };
      };
      /**
     * Provides read-only equivalent of jQuery's position function
     * @required-by bootstrap-tooltip, bootstrap-affix
     * @url http://api.jquery.com/offset/
     * @param element
     */
      fn.position = function (element) {
        var offsetParentRect = {
            top: 0,
            left: 0
          }, offsetParentElement, offset;
        // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
        if (fn.css(element, 'position') === 'fixed') {
          // We assume that getBoundingClientRect is available when computed position is fixed
          offset = element.getBoundingClientRect();
        } else {
          // Get *real* offsetParentElement
          offsetParentElement = offsetParent(element);
          offset = fn.offset(element);
          // Get correct offsets
          offset = fn.offset(element);
          if (!nodeName(offsetParentElement, 'html')) {
            offsetParentRect = fn.offset(offsetParentElement);
          }
          // Add offsetParent borders
          offsetParentRect.top += fn.css(offsetParentElement, 'borderTopWidth', true);
          offsetParentRect.left += fn.css(offsetParentElement, 'borderLeftWidth', true);
        }
        // Subtract parent offsets and element margins
        return {
          width: element.offsetWidth,
          height: element.offsetHeight,
          top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),
          left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)
        };
      };
      /**
     * Returns the closest, non-statically positioned offsetParent of a given element
     * @required-by fn.position
     * @param element
     */
      var offsetParent = function offsetParentElement(element) {
        var docElement = element.ownerDocument;
        var offsetParent = element.offsetParent || docElement;
        if (nodeName(offsetParent, '#document'))
          return docElement.documentElement;
        while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {
          offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docElement.documentElement;
      };
      /**
     * Provides equivalent of jQuery's height function
     * @required-by bootstrap-affix
     * @url http://api.jquery.com/height/
     * @param element
     * @param outer
     */
      fn.height = function (element, outer) {
        var value = element.offsetHeight;
        if (outer) {
          value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);
        } else {
          value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);
        }
        return value;
      };
      /**
     * Provides equivalent of jQuery's width function
     * @required-by bootstrap-affix
     * @url http://api.jquery.com/width/
     * @param element
     * @param outer
     */
      fn.width = function (element, outer) {
        var value = element.offsetWidth;
        if (outer) {
          value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);
        } else {
          value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);
        }
        return value;
      };
      return fn;
    }
  ]);
  // Source: parse-options.js
  angular.module('mgcrea.ngStrap.helpers.parseOptions', []).provider('$parseOptions', function () {
    var defaults = this.defaults = { regexp: /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/ };
    this.$get = [
      '$parse',
      '$q',
      function ($parse, $q) {
        function ParseOptionsFactory(attr, config) {
          var $parseOptions = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          $parseOptions.$values = [];
          // Private vars
          var match, displayFn, valueName, keyName, groupByFn, valueFn, valuesFn;
          $parseOptions.init = function () {
            $parseOptions.$match = match = attr.match(options.regexp);
            displayFn = $parse(match[2] || match[1]), valueName = match[4] || match[6], keyName = match[5], groupByFn = $parse(match[3] || ''), valueFn = $parse(match[2] ? match[1] : valueName), valuesFn = $parse(match[7]);
          };
          $parseOptions.valuesFn = function (scope, controller) {
            return $q.when(valuesFn(scope, controller)).then(function (values) {
              $parseOptions.$values = values ? parseValues(values, scope) : {};
              return $parseOptions.$values;
            });
          };
          $parseOptions.displayValue = function (modelValue) {
            var scope = {};
            scope[valueName] = modelValue;
            return displayFn(scope);
          };
          // Private functions
          function parseValues(values, scope) {
            return values.map(function (match, index) {
              var locals = {}, label, value;
              locals[valueName] = match;
              label = displayFn(scope, locals);
              value = valueFn(scope, locals);
              return {
                label: label,
                value: value,
                index: index
              };
            });
          }
          $parseOptions.init();
          return $parseOptions;
        }
        return ParseOptionsFactory;
      }
    ];
  });
  // Source: raf.js
  angular.version.minor < 3 && angular.version.dot < 14 && angular.module('ng').factory('$$rAF', [
    '$window',
    '$timeout',
    function ($window, $timeout) {
      var requestAnimationFrame = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
      var cancelAnimationFrame = $window.cancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelRequestAnimationFrame;
      var rafSupported = !!requestAnimationFrame;
      var raf = rafSupported ? function (fn) {
          var id = requestAnimationFrame(fn);
          return function () {
            cancelAnimationFrame(id);
          };
        } : function (fn) {
          var timer = $timeout(fn, 16.66, false);
          // 1000 / 60 = 16.666
          return function () {
            $timeout.cancel(timer);
          };
        };
      raf.supported = rafSupported;
      return raf;
    }
  ]);
  // .factory('$$animateReflow', function($$rAF, $document) {
  //   var bodyEl = $document[0].body;
  //   return function(fn) {
  //     //the returned function acts as the cancellation function
  //     return $$rAF(function() {
  //       //the line below will force the browser to perform a repaint
  //       //so that all the animated elements within the animation frame
  //       //will be properly updated and drawn on screen. This is
  //       //required to perform multi-class CSS based animations with
  //       //Firefox. DO NOT REMOVE THIS LINE.
  //       var a = bodyEl.offsetWidth + 1;
  //       fn();
  //     });
  //   };
  // });
  // Source: dropdown.js
  angular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip']).provider('$dropdown', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        prefixClass: 'dropdown',
        placement: 'bottom-left',
        template: 'dropdown/dropdown.tpl.html',
        trigger: 'click',
        container: false,
        keyboard: true,
        html: false,
        delay: 0
      };
    this.$get = [
      '$window',
      '$rootScope',
      '$tooltip',
      function ($window, $rootScope, $tooltip) {
        var bodyEl = angular.element($window.document.body);
        var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;
        function DropdownFactory(element, config) {
          var $dropdown = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();
          $dropdown = $tooltip(element, options);
          var parentEl = element.parent();
          // Protected methods
          $dropdown.$onKeyDown = function (evt) {
            if (!/(38|40)/.test(evt.keyCode))
              return;
            evt.preventDefault();
            evt.stopPropagation();
            // Retrieve focused index
            var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));
            if (!items.length)
              return;
            var index;
            angular.forEach(items, function (el, i) {
              if (matchesSelector && matchesSelector.call(el, ':focus'))
                index = i;
            });
            // Navigate with keyboard
            if (evt.keyCode === 38 && index > 0)
              index--;
            else if (evt.keyCode === 40 && index < items.length - 1)
              index++;
            else if (angular.isUndefined(index))
              index = 0;
            items.eq(index)[0].focus();
          };
          // Overrides
          var show = $dropdown.show;
          $dropdown.show = function () {
            show();
            setTimeout(function () {
              options.keyboard && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);
              bodyEl.on('click', onBodyClick);
            });
            parentEl.hasClass('dropdown') && parentEl.addClass('open');
          };
          var hide = $dropdown.hide;
          $dropdown.hide = function () {
            if (!$dropdown.$isShown)
              return;
            options.keyboard && $dropdown.$element.off('keydown', $dropdown.$onKeyDown);
            bodyEl.off('click', onBodyClick);
            parentEl.hasClass('dropdown') && parentEl.removeClass('open');
            hide();
          };
          // Private functions
          function onBodyClick(evt) {
            if (evt.target === element[0])
              return;
            return evt.target !== element[0] && $dropdown.hide();
          }
          return $dropdown;
        }
        return DropdownFactory;
      }
    ];
  }).directive('bsDropdown', [
    '$window',
    '$sce',
    '$dropdown',
    function ($window, $sce, $dropdown) {
      return {
        restrict: 'EAC',
        scope: true,
        link: function postLink(scope, element, attr, transclusion) {
          // Directive options
          var options = { scope: scope };
          angular.forEach([
            'placement',
            'container',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'template'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Support scope as an object
          attr.bsDropdown && scope.$watch(attr.bsDropdown, function (newValue, oldValue) {
            scope.content = newValue;
          }, true);
          // Visibility binding support
          attr.bsShow && scope.$watch(attr.bsShow, function (newValue, oldValue) {
            if (!dropdown || !angular.isDefined(newValue))
              return;
            if (angular.isString(newValue))
              newValue = !!newValue.match(/true|,?(dropdown),?/i);
            newValue === true ? dropdown.show() : dropdown.hide();
          });
          // Initialize dropdown
          var dropdown = $dropdown(element, options);
          // Garbage collection
          scope.$on('$destroy', function () {
            if (dropdown)
              dropdown.destroy();
            options = null;
            dropdown = null;
          });
        }
      };
    }
  ]);
  // Source: modal.js
  angular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.helpers.dimensions']).provider('$modal', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        backdropAnimation: 'am-fade',
        prefixClass: 'modal',
        prefixEvent: 'modal',
        placement: 'top',
        template: 'modal/modal.tpl.html',
        contentTemplate: false,
        container: false,
        element: null,
        backdrop: true,
        keyboard: true,
        html: false,
        show: true
      };
    this.$get = [
      '$window',
      '$rootScope',
      '$compile',
      '$q',
      '$templateCache',
      '$http',
      '$animate',
      '$timeout',
      '$sce',
      'dimensions',
      function ($window, $rootScope, $compile, $q, $templateCache, $http, $animate, $timeout, $sce, dimensions) {
        var forEach = angular.forEach;
        var trim = String.prototype.trim;
        var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;
        var bodyElement = angular.element($window.document.body);
        var htmlReplaceRegExp = /ng-bind="/gi;
        function ModalFactory(config) {
          var $modal = {};
          // Common vars
          var options = $modal.$options = angular.extend({}, defaults, config);
          $modal.$promise = fetchTemplate(options.template);
          var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();
          if (!options.element && !options.container) {
            options.container = 'body';
          }
          // Support scope as string options
          forEach([
            'title',
            'content'
          ], function (key) {
            if (options[key])
              scope[key] = $sce.trustAsHtml(options[key]);
          });
          // Provide scope helpers
          scope.$hide = function () {
            scope.$$postDigest(function () {
              $modal.hide();
            });
          };
          scope.$show = function () {
            scope.$$postDigest(function () {
              $modal.show();
            });
          };
          scope.$toggle = function () {
            scope.$$postDigest(function () {
              $modal.toggle();
            });
          };
          // Support contentTemplate option
          if (options.contentTemplate) {
            $modal.$promise = $modal.$promise.then(function (template) {
              var templateEl = angular.element(template);
              return fetchTemplate(options.contentTemplate).then(function (contentTemplate) {
                var contentEl = findElement('[ng-bind="content"]', templateEl[0]).removeAttr('ng-bind').html(contentTemplate);
                // Drop the default footer as you probably don't want it if you use a custom contentTemplate
                if (!config.template)
                  contentEl.next().remove();
                return templateEl[0].outerHTML;
              });
            });
          }
          // Fetch, compile then initialize modal
          var modalLinker, modalElement;
          var backdropElement = angular.element('<div class="' + options.prefixClass + '-backdrop"/>');
          $modal.$promise.then(function (template) {
            if (angular.isObject(template))
              template = template.data;
            if (options.html)
              template = template.replace(htmlReplaceRegExp, 'ng-bind-html="');
            template = trim.apply(template);
            modalLinker = $compile(template);
            $modal.init();
          });
          $modal.init = function () {
            // Options: show
            if (options.show) {
              scope.$$postDigest(function () {
                $modal.show();
              });
            }
          };
          $modal.destroy = function () {
            // Remove element
            if (modalElement) {
              modalElement.remove();
              modalElement = null;
            }
            if (backdropElement) {
              backdropElement.remove();
              backdropElement = null;
            }
            // Destroy scope
            scope.$destroy();
          };
          $modal.show = function () {
            if (scope.$isShown)
              return;
            if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {
              return;
            }
            var parent;
            if (angular.isElement(options.container)) {
              parent = options.container;
            } else {
              parent = options.container ? findElement(options.container) : null;
            }
            var after = options.container ? null : options.element;
            // Fetch a cloned element linked from template
            modalElement = $modal.$element = modalLinker(scope, function (clonedElement, scope) {
            });
            // Set the initial positioning.
            modalElement.css({ display: 'block' }).addClass(options.placement);
            // Options: animation
            if (options.animation) {
              if (options.backdrop) {
                backdropElement.addClass(options.backdropAnimation);
              }
              modalElement.addClass(options.animation);
            }
            if (options.backdrop) {
              $animate.enter(backdropElement, bodyElement, null);
            }
            // Support v1.3+ $animate
            // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9
            var promise = $animate.enter(modalElement, parent, after, enterAnimateCallback);
            if (promise && promise.then)
              promise.then(enterAnimateCallback);
            scope.$isShown = true;
            scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();
            // Focus once the enter-animation has started
            // Weird PhantomJS bug hack
            var el = modalElement[0];
            requestAnimationFrame(function () {
              el.focus();
            });
            bodyElement.addClass(options.prefixClass + '-open');
            if (options.animation) {
              bodyElement.addClass(options.prefixClass + '-with-' + options.animation);
            }
            // Bind events
            if (options.backdrop) {
              modalElement.on('click', hideOnBackdropClick);
              backdropElement.on('click', hideOnBackdropClick);
            }
            if (options.keyboard) {
              modalElement.on('keyup', $modal.$onKeyUp);
            }
          };
          function enterAnimateCallback() {
            scope.$emit(options.prefixEvent + '.show', $modal);
          }
          $modal.hide = function () {
            if (!scope.$isShown)
              return;
            if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {
              return;
            }
            var promise = $animate.leave(modalElement, leaveAnimateCallback);
            // Support v1.3+ $animate
            // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9
            if (promise && promise.then)
              promise.then(leaveAnimateCallback);
            if (options.backdrop) {
              $animate.leave(backdropElement);
            }
            scope.$isShown = false;
            scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();
            // Unbind events
            if (options.backdrop) {
              modalElement.off('click', hideOnBackdropClick);
              backdropElement.off('click', hideOnBackdropClick);
            }
            if (options.keyboard) {
              modalElement.off('keyup', $modal.$onKeyUp);
            }
          };
          function leaveAnimateCallback() {
            scope.$emit(options.prefixEvent + '.hide', $modal);
            bodyElement.removeClass(options.prefixClass + '-open');
            if (options.animation) {
              bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);
            }
          }
          $modal.toggle = function () {
            scope.$isShown ? $modal.hide() : $modal.show();
          };
          $modal.focus = function () {
            modalElement[0].focus();
          };
          // Protected methods
          $modal.$onKeyUp = function (evt) {
            if (evt.which === 27 && scope.$isShown) {
              $modal.hide();
              evt.stopPropagation();
            }
          };
          // Private methods
          function hideOnBackdropClick(evt) {
            if (evt.target !== evt.currentTarget)
              return;
            options.backdrop === 'static' ? $modal.focus() : $modal.hide();
          }
          return $modal;
        }
        // Helper functions
        function findElement(query, element) {
          return angular.element((element || document).querySelectorAll(query));
        }
        function fetchTemplate(template) {
          return $q.when($templateCache.get(template) || $http.get(template)).then(function (res) {
            if (angular.isObject(res)) {
              $templateCache.put(template, res.data);
              return res.data;
            }
            return res;
          });
        }
        return ModalFactory;
      }
    ];
  }).directive('bsModal', [
    '$window',
    '$sce',
    '$modal',
    function ($window, $sce, $modal) {
      return {
        restrict: 'EAC',
        scope: true,
        link: function postLink(scope, element, attr, transclusion) {
          // Directive options
          var options = {
              scope: scope,
              element: element,
              show: false
            };
          angular.forEach([
            'template',
            'contentTemplate',
            'placement',
            'backdrop',
            'keyboard',
            'html',
            'container',
            'animation'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Support scope as data-attrs
          angular.forEach([
            'title',
            'content'
          ], function (key) {
            attr[key] && attr.$observe(key, function (newValue, oldValue) {
              scope[key] = $sce.trustAsHtml(newValue);
            });
          });
          // Support scope as an object
          attr.bsModal && scope.$watch(attr.bsModal, function (newValue, oldValue) {
            if (angular.isObject(newValue)) {
              angular.extend(scope, newValue);
            } else {
              scope.content = newValue;
            }
          }, true);
          // Initialize modal
          var modal = $modal(options);
          // Trigger
          element.on(attr.trigger || 'click', modal.toggle);
          // Garbage collection
          scope.$on('$destroy', function () {
            if (modal)
              modal.destroy();
            options = null;
            modal = null;
          });
        }
      };
    }
  ]);
  // Source: navbar.js
  angular.module('mgcrea.ngStrap.navbar', []).provider('$navbar', function () {
    var defaults = this.defaults = {
        activeClass: 'active',
        routeAttr: 'data-match-route',
        strict: false
      };
    this.$get = function () {
      return { defaults: defaults };
    };
  }).directive('bsNavbar', [
    '$window',
    '$location',
    '$navbar',
    function ($window, $location, $navbar) {
      var defaults = $navbar.defaults;
      return {
        restrict: 'A',
        link: function postLink(scope, element, attr, controller) {
          // Directive options
          var options = angular.copy(defaults);
          angular.forEach(Object.keys(defaults), function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Watch for the $location
          scope.$watch(function () {
            return $location.path();
          }, function (newValue, oldValue) {
            var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');
            angular.forEach(liElements, function (li) {
              var liElement = angular.element(li);
              var pattern = liElement.attr(options.routeAttr).replace('/', '\\/');
              if (options.strict) {
                pattern = '^' + pattern + '$';
              }
              var regexp = new RegExp(pattern, ['i']);
              if (regexp.test(newValue)) {
                liElement.addClass(options.activeClass);
              } else {
                liElement.removeClass(options.activeClass);
              }
            });
          });
        }
      };
    }
  ]);
  // Source: popover.js
  angular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip']).provider('$popover', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        customClass: '',
        container: false,
        target: false,
        placement: 'right',
        template: 'popover/popover.tpl.html',
        contentTemplate: false,
        trigger: 'click',
        keyboard: true,
        html: false,
        title: '',
        content: '',
        delay: 0
      };
    this.$get = [
      '$tooltip',
      function ($tooltip) {
        function PopoverFactory(element, config) {
          // Common vars
          var options = angular.extend({}, defaults, config);
          var $popover = $tooltip(element, options);
          // Support scope as string options [/*title, */content]
          if (options.content) {
            $popover.$scope.content = options.content;
          }
          return $popover;
        }
        return PopoverFactory;
      }
    ];
  }).directive('bsPopover', [
    '$window',
    '$sce',
    '$popover',
    function ($window, $sce, $popover) {
      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;
      return {
        restrict: 'EAC',
        scope: true,
        link: function postLink(scope, element, attr) {
          // Directive options
          var options = { scope: scope };
          angular.forEach([
            'template',
            'contentTemplate',
            'placement',
            'container',
            'target',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'customClass'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Support scope as data-attrs
          angular.forEach([
            'title',
            'content'
          ], function (key) {
            attr[key] && attr.$observe(key, function (newValue, oldValue) {
              scope[key] = $sce.trustAsHtml(newValue);
              angular.isDefined(oldValue) && requestAnimationFrame(function () {
                popover && popover.$applyPlacement();
              });
            });
          });
          // Support scope as an object
          attr.bsPopover && scope.$watch(attr.bsPopover, function (newValue, oldValue) {
            if (angular.isObject(newValue)) {
              angular.extend(scope, newValue);
            } else {
              scope.content = newValue;
            }
            angular.isDefined(oldValue) && requestAnimationFrame(function () {
              popover && popover.$applyPlacement();
            });
          }, true);
          // Visibility binding support
          attr.bsShow && scope.$watch(attr.bsShow, function (newValue, oldValue) {
            if (!popover || !angular.isDefined(newValue))
              return;
            if (angular.isString(newValue))
              newValue = !!newValue.match(/true|,?(popover),?/i);
            newValue === true ? popover.show() : popover.hide();
          });
          // Initialize popover
          var popover = $popover(element, options);
          // Garbage collection
          scope.$on('$destroy', function () {
            if (popover)
              popover.destroy();
            options = null;
            popover = null;
          });
        }
      };
    }
  ]);
  // Source: scrollspy.js
  angular.module('mgcrea.ngStrap.scrollspy', [
    'mgcrea.ngStrap.helpers.debounce',
    'mgcrea.ngStrap.helpers.dimensions'
  ]).provider('$scrollspy', function () {
    // Pool of registered spies
    var spies = this.$$spies = {};
    var defaults = this.defaults = {
        debounce: 150,
        throttle: 100,
        offset: 100
      };
    this.$get = [
      '$window',
      '$document',
      '$rootScope',
      'dimensions',
      'debounce',
      'throttle',
      function ($window, $document, $rootScope, dimensions, debounce, throttle) {
        var windowEl = angular.element($window);
        var docEl = angular.element($document.prop('documentElement'));
        var bodyEl = angular.element($window.document.body);
        // Helper functions
        function nodeName(element, name) {
          return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();
        }
        function ScrollSpyFactory(config) {
          // Common vars
          var options = angular.extend({}, defaults, config);
          if (!options.element)
            options.element = bodyEl;
          var isWindowSpy = nodeName(options.element, 'body');
          var scrollEl = isWindowSpy ? windowEl : options.element;
          var scrollId = isWindowSpy ? 'window' : options.id;
          // Use existing spy
          if (spies[scrollId]) {
            spies[scrollId].$$count++;
            return spies[scrollId];
          }
          var $scrollspy = {};
          // Private vars
          var unbindViewContentLoaded, unbindIncludeContentLoaded;
          var trackedElements = $scrollspy.$trackedElements = [];
          var sortedElements = [];
          var activeTarget;
          var debouncedCheckPosition;
          var throttledCheckPosition;
          var debouncedCheckOffsets;
          var viewportHeight;
          var scrollTop;
          $scrollspy.init = function () {
            // Setup internal ref counter
            this.$$count = 1;
            // Bind events
            debouncedCheckPosition = debounce(this.checkPosition, options.debounce);
            throttledCheckPosition = throttle(this.checkPosition, options.throttle);
            scrollEl.on('click', this.checkPositionWithEventLoop);
            windowEl.on('resize', debouncedCheckPosition);
            scrollEl.on('scroll', throttledCheckPosition);
            debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);
            unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);
            unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);
            debouncedCheckOffsets();
            // Register spy for reuse
            if (scrollId) {
              spies[scrollId] = $scrollspy;
            }
          };
          $scrollspy.destroy = function () {
            // Check internal ref counter
            this.$$count--;
            if (this.$$count > 0) {
              return;
            }
            // Unbind events
            scrollEl.off('click', this.checkPositionWithEventLoop);
            windowEl.off('resize', debouncedCheckPosition);
            scrollEl.off('scroll', debouncedCheckPosition);
            unbindViewContentLoaded();
            unbindIncludeContentLoaded();
            if (scrollId) {
              delete spies[scrollId];
            }
          };
          $scrollspy.checkPosition = function () {
            // Not ready yet
            if (!sortedElements.length)
              return;
            // Calculate the scroll position
            scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;
            // Calculate the viewport height for use by the components
            viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));
            // Activate first element if scroll is smaller
            if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {
              return $scrollspy.$activateElement(sortedElements[0]);
            }
            // Activate proper element
            for (var i = sortedElements.length; i--;) {
              if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null)
                continue;
              if (activeTarget === sortedElements[i].target)
                continue;
              if (scrollTop < sortedElements[i].offsetTop)
                continue;
              if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop)
                continue;
              return $scrollspy.$activateElement(sortedElements[i]);
            }
          };
          $scrollspy.checkPositionWithEventLoop = function () {
            setTimeout(this.checkPosition, 1);
          };
          // Protected methods
          $scrollspy.$activateElement = function (element) {
            if (activeTarget) {
              var activeElement = $scrollspy.$getTrackedElement(activeTarget);
              if (activeElement) {
                activeElement.source.removeClass('active');
                if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {
                  activeElement.source.parent().parent().removeClass('active');
                }
              }
            }
            activeTarget = element.target;
            element.source.addClass('active');
            if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {
              element.source.parent().parent().addClass('active');
            }
          };
          $scrollspy.$getTrackedElement = function (target) {
            return trackedElements.filter(function (obj) {
              return obj.target === target;
            })[0];
          };
          // Track offsets behavior
          $scrollspy.checkOffsets = function () {
            angular.forEach(trackedElements, function (trackedElement) {
              var targetElement = document.querySelector(trackedElement.target);
              trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;
              if (options.offset && trackedElement.offsetTop !== null)
                trackedElement.offsetTop -= options.offset * 1;
            });
            sortedElements = trackedElements.filter(function (el) {
              return el.offsetTop !== null;
            }).sort(function (a, b) {
              return a.offsetTop - b.offsetTop;
            });
            debouncedCheckPosition();
          };
          $scrollspy.trackElement = function (target, source) {
            trackedElements.push({
              target: target,
              source: source
            });
          };
          $scrollspy.untrackElement = function (target, source) {
            var toDelete;
            for (var i = trackedElements.length; i--;) {
              if (trackedElements[i].target === target && trackedElements[i].source === source) {
                toDelete = i;
                break;
              }
            }
            trackedElements = trackedElements.splice(toDelete, 1);
          };
          $scrollspy.activate = function (i) {
            trackedElements[i].addClass('active');
          };
          // Initialize plugin
          $scrollspy.init();
          return $scrollspy;
        }
        return ScrollSpyFactory;
      }
    ];
  }).directive('bsScrollspy', [
    '$rootScope',
    'debounce',
    'dimensions',
    '$scrollspy',
    function ($rootScope, debounce, dimensions, $scrollspy) {
      return {
        restrict: 'EAC',
        link: function postLink(scope, element, attr) {
          var options = { scope: scope };
          angular.forEach([
            'offset',
            'target'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          var scrollspy = $scrollspy(options);
          scrollspy.trackElement(options.target, element);
          scope.$on('$destroy', function () {
            if (scrollspy) {
              scrollspy.untrackElement(options.target, element);
              scrollspy.destroy();
            }
            options = null;
            scrollspy = null;
          });
        }
      };
    }
  ]).directive('bsScrollspyList', [
    '$rootScope',
    'debounce',
    'dimensions',
    '$scrollspy',
    function ($rootScope, debounce, dimensions, $scrollspy) {
      return {
        restrict: 'A',
        compile: function postLink(element, attr) {
          var children = element[0].querySelectorAll('li > a[href]');
          angular.forEach(children, function (child) {
            var childEl = angular.element(child);
            childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));
          });
        }
      };
    }
  ]);
  // Source: select.js
  angular.module('mgcrea.ngStrap.select', [
    'mgcrea.ngStrap.tooltip',
    'mgcrea.ngStrap.helpers.parseOptions'
  ]).provider('$select', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        prefixClass: 'select',
        prefixEvent: '$select',
        placement: 'bottom-left',
        template: 'select/select.tpl.html',
        trigger: 'focus',
        container: false,
        keyboard: true,
        html: false,
        delay: 0,
        multiple: false,
        allNoneButtons: false,
        sort: true,
        caretHtml: '&nbsp;<span class="caret"></span>',
        placeholder: 'Choose among the following...',
        maxLength: 3,
        maxLengthHtml: 'selected',
        iconCheckmark: 'glyphicon glyphicon-ok'
      };
    this.$get = [
      '$window',
      '$document',
      '$rootScope',
      '$tooltip',
      function ($window, $document, $rootScope, $tooltip) {
        var bodyEl = angular.element($window.document.body);
        var isNative = /(ip(a|o)d|iphone|android)/gi.test($window.navigator.userAgent);
        var isTouch = 'createTouch' in $window.document && isNative;
        function SelectFactory(element, controller, config) {
          var $select = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          $select = $tooltip(element, options);
          var scope = $select.$scope;
          scope.$matches = [];
          scope.$activeIndex = 0;
          scope.$isMultiple = options.multiple;
          scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;
          scope.$iconCheckmark = options.iconCheckmark;
          scope.$activate = function (index) {
            scope.$$postDigest(function () {
              $select.activate(index);
            });
          };
          scope.$select = function (index, evt) {
            scope.$$postDigest(function () {
              $select.select(index);
            });
          };
          scope.$isVisible = function () {
            return $select.$isVisible();
          };
          scope.$isActive = function (index) {
            return $select.$isActive(index);
          };
          scope.$selectAll = function () {
            for (var i = 0; i < scope.$matches.length; i++) {
              if (!scope.$isActive(i)) {
                scope.$select(i);
              }
            }
          };
          scope.$selectNone = function () {
            for (var i = 0; i < scope.$matches.length; i++) {
              if (scope.$isActive(i)) {
                scope.$select(i);
              }
            }
          };
          // Public methods
          $select.update = function (matches) {
            scope.$matches = matches;
            $select.$updateActiveIndex();
          };
          $select.activate = function (index) {
            if (options.multiple) {
              scope.$activeIndex.sort();
              $select.$isActive(index) ? scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1) : scope.$activeIndex.push(index);
              if (options.sort)
                scope.$activeIndex.sort();
            } else {
              scope.$activeIndex = index;
            }
            return scope.$activeIndex;
          };
          $select.select = function (index) {
            var value = scope.$matches[index].value;
            scope.$apply(function () {
              $select.activate(index);
              if (options.multiple) {
                controller.$setViewValue(scope.$activeIndex.map(function (index) {
                  return scope.$matches[index].value;
                }));
              } else {
                controller.$setViewValue(value);
                // Hide if single select
                $select.hide();
              }
            });
            // Emit event
            scope.$emit(options.prefixEvent + '.select', value, index);
          };
          // Protected methods
          $select.$updateActiveIndex = function () {
            if (controller.$modelValue && scope.$matches.length) {
              if (options.multiple && angular.isArray(controller.$modelValue)) {
                scope.$activeIndex = controller.$modelValue.map(function (value) {
                  return $select.$getIndex(value);
                });
              } else {
                scope.$activeIndex = $select.$getIndex(controller.$modelValue);
              }
            } else if (scope.$activeIndex >= scope.$matches.length) {
              scope.$activeIndex = options.multiple ? [] : 0;
            }
          };
          $select.$isVisible = function () {
            if (!options.minLength || !controller) {
              return scope.$matches.length;
            }
            // minLength support
            return scope.$matches.length && controller.$viewValue.length >= options.minLength;
          };
          $select.$isActive = function (index) {
            if (options.multiple) {
              return scope.$activeIndex.indexOf(index) !== -1;
            } else {
              return scope.$activeIndex === index;
            }
          };
          $select.$getIndex = function (value) {
            var l = scope.$matches.length, i = l;
            if (!l)
              return;
            for (i = l; i--;) {
              if (scope.$matches[i].value === value)
                break;
            }
            if (i < 0)
              return;
            return i;
          };
          $select.$onMouseDown = function (evt) {
            // Prevent blur on mousedown on .dropdown-menu
            evt.preventDefault();
            evt.stopPropagation();
            // Emulate click for mobile devices
            if (isTouch) {
              var targetEl = angular.element(evt.target);
              targetEl.triggerHandler('click');
            }
          };
          $select.$onKeyDown = function (evt) {
            if (!/(9|13|38|40)/.test(evt.keyCode))
              return;
            evt.preventDefault();
            evt.stopPropagation();
            // Select with enter
            if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {
              return $select.select(scope.$activeIndex);
            }
            // Navigate with keyboard
            if (evt.keyCode === 38 && scope.$activeIndex > 0)
              scope.$activeIndex--;
            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1)
              scope.$activeIndex++;
            else if (angular.isUndefined(scope.$activeIndex))
              scope.$activeIndex = 0;
            scope.$digest();
          };
          // Overrides
          var _show = $select.show;
          $select.show = function () {
            _show();
            if (options.multiple) {
              $select.$element.addClass('select-multiple');
            }
            setTimeout(function () {
              $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);
              if (options.keyboard) {
                element.on('keydown', $select.$onKeyDown);
              }
            });
          };
          var _hide = $select.hide;
          $select.hide = function () {
            $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);
            if (options.keyboard) {
              element.off('keydown', $select.$onKeyDown);
            }
            _hide(true);
          };
          return $select;
        }
        SelectFactory.defaults = defaults;
        return SelectFactory;
      }
    ];
  }).directive('bsSelect', [
    '$window',
    '$parse',
    '$q',
    '$select',
    '$parseOptions',
    function ($window, $parse, $q, $select, $parseOptions) {
      var defaults = $select.defaults;
      return {
        restrict: 'EAC',
        require: 'ngModel',
        link: function postLink(scope, element, attr, controller) {
          // Directive options
          var options = {
              scope: scope,
              placeholder: defaults.placeholder
            };
          angular.forEach([
            'placement',
            'container',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'template',
            'placeholder',
            'multiple',
            'allNoneButtons',
            'maxLength',
            'maxLengthHtml'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Add support for select markup
          if (element[0].nodeName.toLowerCase() === 'select') {
            var inputEl = element;
            inputEl.css('display', 'none');
            element = angular.element('<button type="button" class="btn btn-default"></button>');
            inputEl.after(element);
          }
          // Build proper ngOptions
          var parsedOptions = $parseOptions(attr.ngOptions);
          // Initialize select
          var select = $select(element, controller, options);
          // Watch ngOptions values before filtering for changes
          var watchedOptions = parsedOptions.$match[7].replace(/\|.+/, '').trim();
          scope.$watch(watchedOptions, function (newValue, oldValue) {
            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);
            parsedOptions.valuesFn(scope, controller).then(function (values) {
              select.update(values);
              controller.$render();
            });
          }, true);
          // Watch model for changes
          scope.$watch(attr.ngModel, function (newValue, oldValue) {
            // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);
            select.$updateActiveIndex();
            controller.$render();
          }, true);
          // Model rendering in view
          controller.$render = function () {
            // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);
            var selected, index;
            if (options.multiple && angular.isArray(controller.$modelValue)) {
              selected = controller.$modelValue.map(function (value) {
                index = select.$getIndex(value);
                return angular.isDefined(index) ? select.$scope.$matches[index].label : false;
              }).filter(angular.isDefined);
              if (selected.length > (options.maxLength || defaults.maxLength)) {
                selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);
              } else {
                selected = selected.join(', ');
              }
            } else {
              index = select.$getIndex(controller.$modelValue);
              selected = angular.isDefined(index) ? select.$scope.$matches[index].label : false;
            }
            element.html((selected ? selected : options.placeholder) + defaults.caretHtml);
          };
          // Garbage collection
          scope.$on('$destroy', function () {
            if (select)
              select.destroy();
            options = null;
            select = null;
          });
        }
      };
    }
  ]);
  // Source: tab.js
  angular.module('mgcrea.ngStrap.tab', []).provider('$tab', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        template: 'tab/tab.tpl.html',
        navClass: 'nav-tabs',
        activeClass: 'active'
      };
    var controller = this.controller = function ($scope, $element, $attrs) {
        var self = this;
        // Attributes options
        self.$options = angular.copy(defaults);
        angular.forEach([
          'animation',
          'navClass',
          'activeClass'
        ], function (key) {
          if (angular.isDefined($attrs[key]))
            self.$options[key] = $attrs[key];
        });
        // Publish options on scope
        $scope.$navClass = self.$options.navClass;
        $scope.$activeClass = self.$options.activeClass;
        self.$panes = $scope.$panes = [];
        self.$viewChangeListeners = [];
        self.$push = function (pane) {
          self.$panes.push(pane);
        };
        self.$remove = function (pane) {
          var index = self.$panes.indexOf(pane);
          var activeIndex = self.$panes.$active;
          // remove pane from $panes array
          self.$panes.splice(index, 1);
          if (index < activeIndex) {
            // we removed a pane before the active pane, so we need to 
            // decrement the active pane index
            activeIndex--;
          } else if (index === activeIndex && activeIndex === self.$panes.length) {
            // we remove the active pane and it was the one at the end,
            // so select the previous one
            activeIndex--;
          }
          self.$setActive(activeIndex);
        };
        self.$panes.$active = 0;
        self.$setActive = $scope.$setActive = function (value) {
          self.$panes.$active = value;
          self.$viewChangeListeners.forEach(function (fn) {
            fn();
          });
        };
      };
    this.$get = function () {
      var $tab = {};
      $tab.defaults = defaults;
      $tab.controller = controller;
      return $tab;
    };
  }).directive('bsTabs', [
    '$window',
    '$animate',
    '$tab',
    function ($window, $animate, $tab) {
      var defaults = $tab.defaults;
      return {
        require: [
          '?ngModel',
          'bsTabs'
        ],
        transclude: true,
        scope: true,
        controller: [
          '$scope',
          '$element',
          '$attrs',
          $tab.controller
        ],
        templateUrl: function (element, attr) {
          return attr.template || defaults.template;
        },
        link: function postLink(scope, element, attrs, controllers) {
          var ngModelCtrl = controllers[0];
          var bsTabsCtrl = controllers[1];
          if (ngModelCtrl) {
            // Update the modelValue following
            bsTabsCtrl.$viewChangeListeners.push(function () {
              ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);
            });
            // modelValue -> $formatters -> viewValue
            ngModelCtrl.$formatters.push(function (modelValue) {
              // console.warn('$formatter("%s"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);
              bsTabsCtrl.$setActive(modelValue * 1);
              return modelValue;
            });
          }
        }
      };
    }
  ]).directive('bsPane', [
    '$window',
    '$animate',
    '$sce',
    function ($window, $animate, $sce) {
      return {
        require: [
          '^?ngModel',
          '^bsTabs'
        ],
        scope: true,
        link: function postLink(scope, element, attrs, controllers) {
          var ngModelCtrl = controllers[0];
          var bsTabsCtrl = controllers[1];
          // Add base class
          element.addClass('tab-pane');
          // Observe title attribute for change
          attrs.$observe('title', function (newValue, oldValue) {
            scope.title = $sce.trustAsHtml(newValue);
          });
          // Add animation class
          if (bsTabsCtrl.$options.animation) {
            element.addClass(bsTabsCtrl.$options.animation);
          }
          // Push pane to parent bsTabs controller
          bsTabsCtrl.$push(scope);
          // remove pane from tab controller when pane is destroyed
          scope.$on('$destroy', function () {
            bsTabsCtrl.$remove(scope);
          });
          function render() {
            var index = bsTabsCtrl.$panes.indexOf(scope);
            var active = bsTabsCtrl.$panes.$active;
            $animate[index === active ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);
          }
          bsTabsCtrl.$viewChangeListeners.push(function () {
            render();
          });
          render();
        }
      };
    }
  ]);
  // Source: timepicker.js
  angular.module('mgcrea.ngStrap.timepicker', [
    'mgcrea.ngStrap.helpers.dateParser',
    'mgcrea.ngStrap.tooltip'
  ]).provider('$timepicker', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        prefixClass: 'timepicker',
        placement: 'bottom-left',
        template: 'timepicker/timepicker.tpl.html',
        trigger: 'focus',
        container: false,
        keyboard: true,
        html: false,
        delay: 0,
        useNative: true,
        timeType: 'date',
        timeFormat: 'shortTime',
        modelTimeFormat: null,
        autoclose: false,
        minTime: -Infinity,
        maxTime: +Infinity,
        length: 5,
        hourStep: 1,
        minuteStep: 5,
        iconUp: 'glyphicon glyphicon-chevron-up',
        iconDown: 'glyphicon glyphicon-chevron-down',
        arrowBehavior: 'pager'
      };
    this.$get = [
      '$window',
      '$document',
      '$rootScope',
      '$sce',
      '$locale',
      'dateFilter',
      '$tooltip',
      '$timeout',
      function ($window, $document, $rootScope, $sce, $locale, dateFilter, $tooltip, $timeout) {
        var bodyEl = angular.element($window.document.body);
        var isNative = /(ip(a|o)d|iphone|android)/gi.test($window.navigator.userAgent);
        var isTouch = 'createTouch' in $window.document && isNative;
        if (!defaults.lang)
          defaults.lang = $locale.id;
        function timepickerFactory(element, controller, config) {
          var $timepicker = $tooltip(element, angular.extend({}, defaults, config));
          var parentScope = config.scope;
          var options = $timepicker.$options;
          var scope = $timepicker.$scope;
          // View vars
          var selectedIndex = 0;
          var startDate = controller.$dateValue || new Date();
          var viewDate = {
              hour: startDate.getHours(),
              meridian: startDate.getHours() < 12,
              minute: startDate.getMinutes(),
              second: startDate.getSeconds(),
              millisecond: startDate.getMilliseconds()
            };
          var format = $locale.DATETIME_FORMATS[options.timeFormat] || options.timeFormat;
          var formats = /(h+)([:\.])?(m+)[ ]?(a?)/i.exec(format).slice(1);
          scope.$iconUp = options.iconUp;
          scope.$iconDown = options.iconDown;
          // Scope methods
          scope.$select = function (date, index) {
            $timepicker.select(date, index);
          };
          scope.$moveIndex = function (value, index) {
            $timepicker.$moveIndex(value, index);
          };
          scope.$switchMeridian = function (date) {
            $timepicker.switchMeridian(date);
          };
          // Public methods
          $timepicker.update = function (date) {
            // console.warn('$timepicker.update() newValue=%o', date);
            if (angular.isDate(date) && !isNaN(date.getTime())) {
              $timepicker.$date = date;
              angular.extend(viewDate, {
                hour: date.getHours(),
                minute: date.getMinutes(),
                second: date.getSeconds(),
                millisecond: date.getMilliseconds()
              });
              $timepicker.$build();
            } else if (!$timepicker.$isBuilt) {
              $timepicker.$build();
            }
          };
          $timepicker.select = function (date, index, keep) {
            // console.warn('$timepicker.select', date, scope.$mode);
            if (!controller.$dateValue || isNaN(controller.$dateValue.getTime()))
              controller.$dateValue = new Date(1970, 0, 1);
            if (!angular.isDate(date))
              date = new Date(date);
            if (index === 0)
              controller.$dateValue.setHours(date.getHours());
            else if (index === 1)
              controller.$dateValue.setMinutes(date.getMinutes());
            controller.$setViewValue(controller.$dateValue);
            controller.$render();
            if (options.autoclose && !keep) {
              $timeout(function () {
                $timepicker.hide(true);
              });
            }
          };
          $timepicker.switchMeridian = function (date) {
            if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {
              return;
            }
            var hours = (date || controller.$dateValue).getHours();
            controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);
            controller.$setViewValue(controller.$dateValue);
            controller.$render();
          };
          // Protected methods
          $timepicker.$build = function () {
            // console.warn('$timepicker.$build() viewDate=%o', viewDate);
            var i, midIndex = scope.midIndex = parseInt(options.length / 2, 10);
            var hours = [], hour;
            for (i = 0; i < options.length; i++) {
              hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);
              hours.push({
                date: hour,
                label: dateFilter(hour, formats[0]),
                selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),
                disabled: $timepicker.$isDisabled(hour, 0)
              });
            }
            var minutes = [], minute;
            for (i = 0; i < options.length; i++) {
              minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);
              minutes.push({
                date: minute,
                label: dateFilter(minute, formats[2]),
                selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),
                disabled: $timepicker.$isDisabled(minute, 1)
              });
            }
            var rows = [];
            for (i = 0; i < options.length; i++) {
              rows.push([
                hours[i],
                minutes[i]
              ]);
            }
            scope.rows = rows;
            scope.showAM = !!formats[3];
            scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;
            scope.timeSeparator = formats[1];
            $timepicker.$isBuilt = true;
          };
          $timepicker.$isSelected = function (date, index) {
            if (!$timepicker.$date)
              return false;
            else if (index === 0) {
              return date.getHours() === $timepicker.$date.getHours();
            } else if (index === 1) {
              return date.getMinutes() === $timepicker.$date.getMinutes();
            }
          };
          $timepicker.$isDisabled = function (date, index) {
            var selectedTime;
            if (index === 0) {
              selectedTime = date.getTime() + viewDate.minute * 60000;
            } else if (index === 1) {
              selectedTime = date.getTime() + viewDate.hour * 3600000;
            }
            return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;
          };
          scope.$arrowAction = function (value, index) {
            if (options.arrowBehavior === 'picker') {
              $timepicker.$setTimeByStep(value, index);
            } else {
              $timepicker.$moveIndex(value, index);
            }
          };
          $timepicker.$setTimeByStep = function (value, index) {
            var newDate = new Date($timepicker.$date);
            var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;
            var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;
            if (index === 0) {
              newDate.setHours(hours - parseInt(options.hourStep, 10) * value);
            } else {
              newDate.setMinutes(minutes - parseInt(options.minuteStep, 10) * value);
            }
            $timepicker.select(newDate, index, true);
            parentScope.$digest();
          };
          $timepicker.$moveIndex = function (value, index) {
            var targetDate;
            if (index === 0) {
              targetDate = new Date(1970, 0, 1, viewDate.hour + value * options.length, viewDate.minute);
              angular.extend(viewDate, { hour: targetDate.getHours() });
            } else if (index === 1) {
              targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + value * options.length * options.minuteStep);
              angular.extend(viewDate, { minute: targetDate.getMinutes() });
            }
            $timepicker.$build();
          };
          $timepicker.$onMouseDown = function (evt) {
            // Prevent blur on mousedown on .dropdown-menu
            if (evt.target.nodeName.toLowerCase() !== 'input')
              evt.preventDefault();
            evt.stopPropagation();
            // Emulate click for mobile devices
            if (isTouch) {
              var targetEl = angular.element(evt.target);
              if (targetEl[0].nodeName.toLowerCase() !== 'button') {
                targetEl = targetEl.parent();
              }
              targetEl.triggerHandler('click');
            }
          };
          $timepicker.$onKeyDown = function (evt) {
            if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey)
              return;
            evt.preventDefault();
            evt.stopPropagation();
            // Close on enter
            if (evt.keyCode === 13)
              return $timepicker.hide(true);
            // Navigate with keyboard
            var newDate = new Date($timepicker.$date);
            var hours = newDate.getHours(), hoursLength = dateFilter(newDate, 'h').length;
            var minutes = newDate.getMinutes(), minutesLength = dateFilter(newDate, 'mm').length;
            var lateralMove = /(37|39)/.test(evt.keyCode);
            var count = 2 + !!formats[3] * 1;
            // Navigate indexes (left, right)
            if (lateralMove) {
              if (evt.keyCode === 37)
                selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;
              else if (evt.keyCode === 39)
                selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;
            }
            // Update values (up, down)
            var selectRange = [
                0,
                hoursLength
              ];
            if (selectedIndex === 0) {
              if (evt.keyCode === 38)
                newDate.setHours(hours - parseInt(options.hourStep, 10));
              else if (evt.keyCode === 40)
                newDate.setHours(hours + parseInt(options.hourStep, 10));
              selectRange = [
                0,
                hoursLength
              ];
            } else if (selectedIndex === 1) {
              if (evt.keyCode === 38)
                newDate.setMinutes(minutes - parseInt(options.minuteStep, 10));
              else if (evt.keyCode === 40)
                newDate.setMinutes(minutes + parseInt(options.minuteStep, 10));
              selectRange = [
                hoursLength + 1,
                hoursLength + 1 + minutesLength
              ];
            } else if (selectedIndex === 2) {
              if (!lateralMove)
                $timepicker.switchMeridian();
              selectRange = [
                hoursLength + 1 + minutesLength + 1,
                hoursLength + 1 + minutesLength + 3
              ];
            }
            $timepicker.select(newDate, selectedIndex, true);
            createSelection(selectRange[0], selectRange[1]);
            parentScope.$digest();
          };
          // Private
          function createSelection(start, end) {
            if (element[0].createTextRange) {
              var selRange = element[0].createTextRange();
              selRange.collapse(true);
              selRange.moveStart('character', start);
              selRange.moveEnd('character', end);
              selRange.select();
            } else if (element[0].setSelectionRange) {
              element[0].setSelectionRange(start, end);
            } else if (angular.isUndefined(element[0].selectionStart)) {
              element[0].selectionStart = start;
              element[0].selectionEnd = end;
            }
          }
          function focusElement() {
            element[0].focus();
          }
          // Overrides
          var _init = $timepicker.init;
          $timepicker.init = function () {
            if (isNative && options.useNative) {
              element.prop('type', 'time');
              element.css('-webkit-appearance', 'textfield');
              return;
            } else if (isTouch) {
              element.prop('type', 'text');
              element.attr('readonly', 'true');
              element.on('click', focusElement);
            }
            _init();
          };
          var _destroy = $timepicker.destroy;
          $timepicker.destroy = function () {
            if (isNative && options.useNative) {
              element.off('click', focusElement);
            }
            _destroy();
          };
          var _show = $timepicker.show;
          $timepicker.show = function () {
            _show();
            setTimeout(function () {
              $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);
              if (options.keyboard) {
                element.on('keydown', $timepicker.$onKeyDown);
              }
            });
          };
          var _hide = $timepicker.hide;
          $timepicker.hide = function (blur) {
            if (!$timepicker.$isShown)
              return;
            $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);
            if (options.keyboard) {
              element.off('keydown', $timepicker.$onKeyDown);
            }
            _hide(blur);
          };
          return $timepicker;
        }
        timepickerFactory.defaults = defaults;
        return timepickerFactory;
      }
    ];
  }).directive('bsTimepicker', [
    '$window',
    '$parse',
    '$q',
    '$locale',
    'dateFilter',
    '$timepicker',
    '$dateParser',
    '$timeout',
    function ($window, $parse, $q, $locale, dateFilter, $timepicker, $dateParser, $timeout) {
      var defaults = $timepicker.defaults;
      var isNative = /(ip(a|o)d|iphone|android)/gi.test($window.navigator.userAgent);
      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;
      return {
        restrict: 'EAC',
        require: 'ngModel',
        link: function postLink(scope, element, attr, controller) {
          // Directive options
          var options = {
              scope: scope,
              controller: controller
            };
          angular.forEach([
            'placement',
            'container',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'template',
            'autoclose',
            'timeType',
            'timeFormat',
            'modelTimeFormat',
            'useNative',
            'hourStep',
            'minuteStep',
            'length',
            'arrowBehavior',
            'iconUp',
            'iconDown'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Visibility binding support
          attr.bsShow && scope.$watch(attr.bsShow, function (newValue, oldValue) {
            if (!timepicker || !angular.isDefined(newValue))
              return;
            if (angular.isString(newValue))
              newValue = !!newValue.match(/true|,?(timepicker),?/i);
            newValue === true ? timepicker.show() : timepicker.hide();
          });
          // Initialize timepicker
          if (isNative && (options.useNative || defaults.useNative))
            options.timeFormat = 'HH:mm';
          var timepicker = $timepicker(element, controller, options);
          options = timepicker.$options;
          // Initialize parser
          var dateParser = $dateParser({
              format: options.timeFormat,
              lang: options.lang
            });
          // Observe attributes for changes
          angular.forEach([
            'minTime',
            'maxTime'
          ], function (key) {
            // console.warn('attr.$observe(%s)', key, attr[key]);
            angular.isDefined(attr[key]) && attr.$observe(key, function (newValue) {
              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);
              !isNaN(timepicker.$options[key]) && timepicker.$build();
            });
          });
          // Watch model for changes
          scope.$watch(attr.ngModel, function (newValue, oldValue) {
            // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);
            timepicker.update(controller.$dateValue);
          }, true);
          // viewValue -> $parsers -> modelValue
          controller.$parsers.unshift(function (viewValue) {
            // console.warn('$parser("%s"): viewValue=%o', element.attr('ng-model'), viewValue);
            // Null values should correctly reset the model value & validity
            if (!viewValue) {
              controller.$setValidity('date', true);
              return;
            }
            var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);
            if (!parsedTime || isNaN(parsedTime.getTime())) {
              controller.$setValidity('date', false);
              return;
            } else {
              var isMinValid = isNaN(options.minTime) || parsedTime.getTime() >= options.minTime;
              var isMaxValid = isNaN(options.maxTime) || parsedTime.getTime() <= options.maxTime;
              var isValid = isMinValid && isMaxValid;
              controller.$setValidity('date', isValid);
              controller.$setValidity('min', isMinValid);
              controller.$setValidity('max', isMaxValid);
              // Only update the model when we have a valid date
              if (!isValid) {
                return;
              }
              controller.$dateValue = parsedTime;
            }
            if (options.timeType === 'string') {
              return dateFilter(parsedTime, options.modelTimeFormat || options.timeFormat);
            } else if (options.timeType === 'number') {
              return controller.$dateValue.getTime();
            } else if (options.timeType === 'iso') {
              return controller.$dateValue.toISOString();
            } else {
              return new Date(controller.$dateValue);
            }
          });
          // modelValue -> $formatters -> viewValue
          controller.$formatters.push(function (modelValue) {
            // console.warn('$formatter("%s"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);
            var date;
            if (angular.isUndefined(modelValue) || modelValue === null) {
              date = NaN;
            } else if (angular.isDate(modelValue)) {
              date = modelValue;
            } else if (options.timeType === 'string') {
              date = dateParser.parse(modelValue, null, options.modelTimeFormat);
            } else {
              date = new Date(modelValue);
            }
            // Setup default value?
            // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);
            controller.$dateValue = date;
            return controller.$dateValue;
          });
          // viewValue -> element
          controller.$render = function () {
            // console.warn('$render("%s"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);
            element.val(!controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : dateFilter(controller.$dateValue, options.timeFormat));
          };
          // Garbage collection
          scope.$on('$destroy', function () {
            if (timepicker)
              timepicker.destroy();
            options = null;
            timepicker = null;
          });
        }
      };
    }
  ]);
  // Source: tooltip.js
  angular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.helpers.dimensions']).provider('$tooltip', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        customClass: '',
        prefixClass: 'tooltip',
        prefixEvent: 'tooltip',
        container: false,
        target: false,
        placement: 'top',
        template: 'tooltip/tooltip.tpl.html',
        contentTemplate: false,
        trigger: 'hover focus',
        keyboard: false,
        html: false,
        show: false,
        title: '',
        type: '',
        delay: 0
      };
    this.$get = [
      '$window',
      '$rootScope',
      '$compile',
      '$q',
      '$templateCache',
      '$http',
      '$animate',
      'dimensions',
      '$$rAF',
      function ($window, $rootScope, $compile, $q, $templateCache, $http, $animate, dimensions, $$rAF) {
        var trim = String.prototype.trim;
        var isTouch = 'createTouch' in $window.document;
        var htmlReplaceRegExp = /ng-bind="/gi;
        function TooltipFactory(element, config) {
          var $tooltip = {};
          // Common vars
          var nodeName = element[0].nodeName.toLowerCase();
          var options = $tooltip.$options = angular.extend({}, defaults, config);
          $tooltip.$promise = fetchTemplate(options.template);
          var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();
          if (options.delay && angular.isString(options.delay)) {
            var split = options.delay.split(',').map(parseFloat);
            options.delay = split.length > 1 ? {
              show: split[0],
              hide: split[1]
            } : split[0];
          }
          // Support scope as string options
          if (options.title) {
            $tooltip.$scope.title = options.title;
          }
          // Provide scope helpers
          scope.$hide = function () {
            scope.$$postDigest(function () {
              $tooltip.hide();
            });
          };
          scope.$show = function () {
            scope.$$postDigest(function () {
              $tooltip.show();
            });
          };
          scope.$toggle = function () {
            scope.$$postDigest(function () {
              $tooltip.toggle();
            });
          };
          $tooltip.$isShown = scope.$isShown = false;
          // Private vars
          var timeout, hoverState;
          // Support contentTemplate option
          if (options.contentTemplate) {
            $tooltip.$promise = $tooltip.$promise.then(function (template) {
              var templateEl = angular.element(template);
              return fetchTemplate(options.contentTemplate).then(function (contentTemplate) {
                var contentEl = findElement('[ng-bind="content"]', templateEl[0]);
                if (!contentEl.length)
                  contentEl = findElement('[ng-bind="title"]', templateEl[0]);
                contentEl.removeAttr('ng-bind').html(contentTemplate);
                return templateEl[0].outerHTML;
              });
            });
          }
          // Fetch, compile then initialize tooltip
          var tipLinker, tipElement, tipTemplate, tipContainer;
          $tooltip.$promise.then(function (template) {
            if (angular.isObject(template))
              template = template.data;
            if (options.html)
              template = template.replace(htmlReplaceRegExp, 'ng-bind-html="');
            template = trim.apply(template);
            tipTemplate = template;
            tipLinker = $compile(template);
            $tooltip.init();
          });
          $tooltip.init = function () {
            // Options: delay
            if (options.delay && angular.isNumber(options.delay)) {
              options.delay = {
                show: options.delay,
                hide: options.delay
              };
            }
            // Replace trigger on touch devices ?
            // if(isTouch && options.trigger === defaults.trigger) {
            //   options.trigger.replace(/hover/g, 'click');
            // }
            // Options : container
            if (options.container === 'self') {
              tipContainer = element;
            } else if (angular.isElement(options.container)) {
              tipContainer = options.container;
            } else if (options.container) {
              tipContainer = findElement(options.container);
            }
            // Options: trigger
            var triggers = options.trigger.split(' ');
            angular.forEach(triggers, function (trigger) {
              if (trigger === 'click') {
                element.on('click', $tooltip.toggle);
              } else if (trigger !== 'manual') {
                element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);
                element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);
                nodeName === 'button' && trigger !== 'hover' && element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);
              }
            });
            // Options: target
            if (options.target) {
              options.target = angular.isElement(options.target) ? options.target : findElement(options.target);
            }
            // Options: show
            if (options.show) {
              scope.$$postDigest(function () {
                options.trigger === 'focus' ? element[0].focus() : $tooltip.show();
              });
            }
          };
          $tooltip.destroy = function () {
            // Unbind events
            var triggers = options.trigger.split(' ');
            for (var i = triggers.length; i--;) {
              var trigger = triggers[i];
              if (trigger === 'click') {
                element.off('click', $tooltip.toggle);
              } else if (trigger !== 'manual') {
                element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);
                element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);
                nodeName === 'button' && trigger !== 'hover' && element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);
              }
            }
            // Remove element
            if (tipElement) {
              tipElement.remove();
              tipElement = null;
            }
            // Cancel pending callbacks
            clearTimeout(timeout);
            // Destroy scope
            scope.$destroy();
          };
          $tooltip.enter = function () {
            clearTimeout(timeout);
            hoverState = 'in';
            if (!options.delay || !options.delay.show) {
              return $tooltip.show();
            }
            timeout = setTimeout(function () {
              if (hoverState === 'in')
                $tooltip.show();
            }, options.delay.show);
          };
          $tooltip.show = function () {
            scope.$emit(options.prefixEvent + '.show.before', $tooltip);
            var parent = options.container ? tipContainer : null;
            var after = options.container ? null : element;
            // Hide any existing tipElement
            if (tipElement)
              tipElement.remove();
            // Fetch a cloned element linked from template
            tipElement = $tooltip.$element = tipLinker(scope, function (clonedElement, scope) {
            });
            // Set the initial positioning.  Make the tooltip invisible
            // so IE doesn't try to focus on it off screen.
            tipElement.css({
              top: '-9999px',
              left: '-9999px',
              display: 'block',
              visibility: 'hidden'
            }).addClass(options.placement);
            // Options: animation
            if (options.animation)
              tipElement.addClass(options.animation);
            // Options: type
            if (options.type)
              tipElement.addClass(options.prefixClass + '-' + options.type);
            // Options: custom classes
            if (options.customClass)
              tipElement.addClass(options.customClass);
            // Support v1.3+ $animate
            // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9
            var promise = $animate.enter(tipElement, parent, after, enterAnimateCallback);
            if (promise && promise.then)
              promise.then(enterAnimateCallback);
            $tooltip.$isShown = scope.$isShown = true;
            scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();
            $$rAF(function () {
              $tooltip.$applyPlacement();
              // Once placed, make the tooltip visible
              tipElement.css({ visibility: 'visible' });
            });
            // var a = bodyEl.offsetWidth + 1; ?
            // Bind events
            if (options.keyboard) {
              if (options.trigger !== 'focus') {
                $tooltip.focus();
                tipElement.on('keyup', $tooltip.$onKeyUp);
              } else {
                element.on('keyup', $tooltip.$onFocusKeyUp);
              }
            }
          };
          function enterAnimateCallback() {
            scope.$emit(options.prefixEvent + '.show', $tooltip);
          }
          $tooltip.leave = function () {
            clearTimeout(timeout);
            hoverState = 'out';
            if (!options.delay || !options.delay.hide) {
              return $tooltip.hide();
            }
            timeout = setTimeout(function () {
              if (hoverState === 'out') {
                $tooltip.hide();
              }
            }, options.delay.hide);
          };
          $tooltip.hide = function (blur) {
            if (!$tooltip.$isShown)
              return;
            scope.$emit(options.prefixEvent + '.hide.before', $tooltip);
            // Support v1.3+ $animate
            // https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9
            var promise = $animate.leave(tipElement, leaveAnimateCallback);
            if (promise && promise.then)
              promise.then(leaveAnimateCallback);
            $tooltip.$isShown = scope.$isShown = false;
            scope.$$phase || scope.$root && scope.$root.$$phase || scope.$digest();
            // Unbind events
            if (options.keyboard && tipElement !== null) {
              tipElement.off('keyup', $tooltip.$onKeyUp);
            }
          };
          function leaveAnimateCallback() {
            scope.$emit(options.prefixEvent + '.hide', $tooltip);
            // Allow to blur the input when hidden, like when pressing enter key
            if (blur && options.trigger === 'focus') {
              return element[0].blur();
            }
          }
          $tooltip.toggle = function () {
            $tooltip.$isShown ? $tooltip.leave() : $tooltip.enter();
          };
          $tooltip.focus = function () {
            tipElement[0].focus();
          };
          // Protected methods
          $tooltip.$applyPlacement = function () {
            if (!tipElement)
              return;
            // Get the position of the tooltip element.
            var elementPosition = getPosition();
            // Get the height and width of the tooltip so we can center it.
            var tipWidth = tipElement.prop('offsetWidth'), tipHeight = tipElement.prop('offsetHeight');
            // Get the tooltip's top and left coordinates to center it with this directive.
            var tipPosition = getCalculatedOffset(options.placement, elementPosition, tipWidth, tipHeight);
            // Now set the calculated positioning.
            tipPosition.top += 'px';
            tipPosition.left += 'px';
            tipElement.css(tipPosition);
          };
          $tooltip.$onKeyUp = function (evt) {
            if (evt.which === 27 && $tooltip.$isShown) {
              $tooltip.hide();
              evt.stopPropagation();
            }
          };
          $tooltip.$onFocusKeyUp = function (evt) {
            if (evt.which === 27) {
              element[0].blur();
              evt.stopPropagation();
            }
          };
          $tooltip.$onFocusElementMouseDown = function (evt) {
            evt.preventDefault();
            evt.stopPropagation();
            // Some browsers do not auto-focus buttons (eg. Safari)
            $tooltip.$isShown ? element[0].blur() : element[0].focus();
          };
          // Private methods
          function getPosition() {
            if (options.container === 'body') {
              return dimensions.offset(options.target[0] || element[0]);
            } else {
              return dimensions.position(options.target[0] || element[0]);
            }
          }
          function getCalculatedOffset(placement, position, actualWidth, actualHeight) {
            var offset;
            var split = placement.split('-');
            switch (split[0]) {
            case 'right':
              offset = {
                top: position.top + position.height / 2 - actualHeight / 2,
                left: position.left + position.width
              };
              break;
            case 'bottom':
              offset = {
                top: position.top + position.height,
                left: position.left + position.width / 2 - actualWidth / 2
              };
              break;
            case 'left':
              offset = {
                top: position.top + position.height / 2 - actualHeight / 2,
                left: position.left - actualWidth
              };
              break;
            default:
              offset = {
                top: position.top - actualHeight,
                left: position.left + position.width / 2 - actualWidth / 2
              };
              break;
            }
            if (!split[1]) {
              return offset;
            }
            // Add support for corners @todo css
            if (split[0] === 'top' || split[0] === 'bottom') {
              switch (split[1]) {
              case 'left':
                offset.left = position.left;
                break;
              case 'right':
                offset.left = position.left + position.width - actualWidth;
              }
            } else if (split[0] === 'left' || split[0] === 'right') {
              switch (split[1]) {
              case 'top':
                offset.top = position.top - actualHeight;
                break;
              case 'bottom':
                offset.top = position.top + position.height;
              }
            }
            return offset;
          }
          return $tooltip;
        }
        // Helper functions
        function findElement(query, element) {
          return angular.element((element || document).querySelectorAll(query));
        }
        function fetchTemplate(template) {
          return $q.when($templateCache.get(template) || $http.get(template)).then(function (res) {
            if (angular.isObject(res)) {
              $templateCache.put(template, res.data);
              return res.data;
            }
            return res;
          });
        }
        return TooltipFactory;
      }
    ];
  }).directive('bsTooltip', [
    '$window',
    '$location',
    '$sce',
    '$tooltip',
    '$$rAF',
    function ($window, $location, $sce, $tooltip, $$rAF) {
      return {
        restrict: 'EAC',
        scope: true,
        link: function postLink(scope, element, attr, transclusion) {
          // Directive options
          var options = { scope: scope };
          angular.forEach([
            'template',
            'contentTemplate',
            'placement',
            'container',
            'target',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'type',
            'customClass'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Observe scope attributes for change
          attr.$observe('title', function (newValue) {
            if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {
              var oldValue = scope.title;
              scope.title = $sce.trustAsHtml(newValue);
              angular.isDefined(oldValue) && $$rAF(function () {
                tooltip && tooltip.$applyPlacement();
              });
            }
          });
          // Support scope as an object
          attr.bsTooltip && scope.$watch(attr.bsTooltip, function (newValue, oldValue) {
            if (angular.isObject(newValue)) {
              angular.extend(scope, newValue);
            } else {
              scope.title = newValue;
            }
            angular.isDefined(oldValue) && $$rAF(function () {
              tooltip && tooltip.$applyPlacement();
            });
          }, true);
          // Visibility binding support
          attr.bsShow && scope.$watch(attr.bsShow, function (newValue, oldValue) {
            if (!tooltip || !angular.isDefined(newValue))
              return;
            if (angular.isString(newValue))
              newValue = !!newValue.match(/true|,?(tooltip),?/i);
            newValue === true ? tooltip.show() : tooltip.hide();
          });
          // Initialize popover
          var tooltip = $tooltip(element, options);
          // Garbage collection
          scope.$on('$destroy', function () {
            if (tooltip)
              tooltip.destroy();
            options = null;
            tooltip = null;
          });
        }
      };
    }
  ]);
  // Source: typeahead.js
  angular.module('mgcrea.ngStrap.typeahead', [
    'mgcrea.ngStrap.tooltip',
    'mgcrea.ngStrap.helpers.parseOptions'
  ]).provider('$typeahead', function () {
    var defaults = this.defaults = {
        animation: 'am-fade',
        prefixClass: 'typeahead',
        prefixEvent: '$typeahead',
        placement: 'bottom-left',
        template: 'typeahead/typeahead.tpl.html',
        trigger: 'focus',
        container: false,
        keyboard: true,
        html: false,
        delay: 0,
        minLength: 1,
        filter: 'filter',
        limit: 6
      };
    this.$get = [
      '$window',
      '$rootScope',
      '$tooltip',
      function ($window, $rootScope, $tooltip) {
        var bodyEl = angular.element($window.document.body);
        function TypeaheadFactory(element, controller, config) {
          var $typeahead = {};
          // Common vars
          var options = angular.extend({}, defaults, config);
          $typeahead = $tooltip(element, options);
          var parentScope = config.scope;
          var scope = $typeahead.$scope;
          scope.$resetMatches = function () {
            scope.$matches = [];
            scope.$activeIndex = 0;
          };
          scope.$resetMatches();
          scope.$activate = function (index) {
            scope.$$postDigest(function () {
              $typeahead.activate(index);
            });
          };
          scope.$select = function (index, evt) {
            scope.$$postDigest(function () {
              $typeahead.select(index);
            });
          };
          scope.$isVisible = function () {
            return $typeahead.$isVisible();
          };
          // Public methods
          $typeahead.update = function (matches) {
            scope.$matches = matches;
            if (scope.$activeIndex >= matches.length) {
              scope.$activeIndex = 0;
            }
          };
          $typeahead.activate = function (index) {
            scope.$activeIndex = index;
          };
          $typeahead.select = function (index) {
            var value = scope.$matches[index].value;
            // console.log('$setViewValue', value);
            controller.$setViewValue(value);
            controller.$render();
            scope.$resetMatches();
            if (parentScope)
              parentScope.$digest();
            // Emit event
            scope.$emit(options.prefixEvent + '.select', value, index);
          };
          // Protected methods
          $typeahead.$isVisible = function () {
            if (!options.minLength || !controller) {
              return !!scope.$matches.length;
            }
            // minLength support
            return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;
          };
          $typeahead.$getIndex = function (value) {
            var l = scope.$matches.length, i = l;
            if (!l)
              return;
            for (i = l; i--;) {
              if (scope.$matches[i].value === value)
                break;
            }
            if (i < 0)
              return;
            return i;
          };
          $typeahead.$onMouseDown = function (evt) {
            // Prevent blur on mousedown
            evt.preventDefault();
            evt.stopPropagation();
          };
          $typeahead.$onKeyDown = function (evt) {
            if (!/(38|40|13)/.test(evt.keyCode))
              return;
            // Let ngSubmit pass if the typeahead tip is hidden
            if ($typeahead.$isVisible()) {
              evt.preventDefault();
              evt.stopPropagation();
            }
            // Select with enter
            if (evt.keyCode === 13 && scope.$matches.length) {
              $typeahead.select(scope.$activeIndex);
            }  // Navigate with keyboard
            else if (evt.keyCode === 38 && scope.$activeIndex > 0)
              scope.$activeIndex--;
            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1)
              scope.$activeIndex++;
            else if (angular.isUndefined(scope.$activeIndex))
              scope.$activeIndex = 0;
            scope.$digest();
          };
          // Overrides
          var show = $typeahead.show;
          $typeahead.show = function () {
            show();
            setTimeout(function () {
              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);
              if (options.keyboard) {
                element.on('keydown', $typeahead.$onKeyDown);
              }
            });
          };
          var hide = $typeahead.hide;
          $typeahead.hide = function () {
            $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);
            if (options.keyboard) {
              element.off('keydown', $typeahead.$onKeyDown);
            }
            hide();
          };
          return $typeahead;
        }
        TypeaheadFactory.defaults = defaults;
        return TypeaheadFactory;
      }
    ];
  }).directive('bsTypeahead', [
    '$window',
    '$parse',
    '$q',
    '$typeahead',
    '$parseOptions',
    function ($window, $parse, $q, $typeahead, $parseOptions) {
      var defaults = $typeahead.defaults;
      return {
        restrict: 'EAC',
        require: 'ngModel',
        link: function postLink(scope, element, attr, controller) {
          // Directive options
          var options = { scope: scope };
          angular.forEach([
            'placement',
            'container',
            'delay',
            'trigger',
            'keyboard',
            'html',
            'animation',
            'template',
            'filter',
            'limit',
            'minLength',
            'watchOptions',
            'selectMode'
          ], function (key) {
            if (angular.isDefined(attr[key]))
              options[key] = attr[key];
          });
          // Build proper ngOptions
          var filter = options.filter || defaults.filter;
          var limit = options.limit || defaults.limit;
          var ngOptions = attr.ngOptions;
          if (filter)
            ngOptions += ' | ' + filter + ':$viewValue';
          if (limit)
            ngOptions += ' | limitTo:' + limit;
          var parsedOptions = $parseOptions(ngOptions);
          // Initialize typeahead
          var typeahead = $typeahead(element, controller, options);
          // Watch options on demand
          if (options.watchOptions) {
            // Watch ngOptions values before filtering for changes, drop function calls
            var watchedOptions = parsedOptions.$match[7].replace(/\|.+/, '').replace(/\(.*\)/g, '').trim();
            scope.$watch(watchedOptions, function (newValue, oldValue) {
              // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);
              parsedOptions.valuesFn(scope, controller).then(function (values) {
                typeahead.update(values);
                controller.$render();
              });
            }, true);
          }
          // Watch model for changes
          scope.$watch(attr.ngModel, function (newValue, oldValue) {
            // console.warn('$watch', element.attr('ng-model'), newValue);
            scope.$modelValue = newValue;
            // Publish modelValue on scope for custom templates
            parsedOptions.valuesFn(scope, controller).then(function (values) {
              // Prevent input with no future prospect if selectMode is truthy
              // @TODO test selectMode
              if (options.selectMode && !values.length && newValue.length > 0) {
                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));
                return;
              }
              if (values.length > limit)
                values = values.slice(0, limit);
              var isVisible = typeahead.$isVisible();
              isVisible && typeahead.update(values);
              // Do not re-queue an update if a correct value has been selected
              if (values.length === 1 && values[0].value === newValue)
                return;
              !isVisible && typeahead.update(values);
              // Queue a new rendering that will leverage collection loading
              controller.$render();
            });
          });
          // modelValue -> $formatters -> viewValue
          controller.$formatters.push(function (modelValue) {
            // console.warn('$formatter("%s"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);
            return parsedOptions.displayValue(modelValue);
          });
          // Model rendering in view
          controller.$render = function () {
            // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);
            if (controller.$isEmpty(controller.$viewValue))
              return element.val('');
            var index = typeahead.$getIndex(controller.$modelValue);
            var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;
            selected = angular.isObject(selected) ? selected.label : selected;
            element.val(selected ? selected.replace(/<(?:.|\n)*?>/gm, '').trim() : '');
          };
          // Garbage collection
          scope.$on('$destroy', function () {
            if (typeahead)
              typeahead.destroy();
            options = null;
            typeahead = null;
          });
        }
      };
    }
  ]);
}(window, document));
/**
 * angular-strap
 * @version v2.1.2 - 2014-10-19
 * @link http://mgcrea.github.io/angular-strap
 * @author Olivier Louvignes (olivier@mg-crea.com)
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (window, document, undefined) {
  'use strict';
  // Source: alert.tpl.js
  angular.module('mgcrea.ngStrap.alert').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('alert/alert.tpl.html', '<div class="alert" ng-class="[type ? \'alert-\' + type : null]"><button type="button" class="close" ng-if="dismissable" ng-click="$hide()">&times;</button> <strong ng-bind="title"></strong>&nbsp;<span ng-bind-html="content"></span></div>');
    }
  ]);
  // Source: aside.tpl.js
  angular.module('mgcrea.ngStrap.aside').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('aside/aside.tpl.html', '<div class="aside" tabindex="-1" role="dialog"><div class="aside-dialog"><div class="aside-content"><div class="aside-header" ng-show="title"><button type="button" class="close" ng-click="$hide()">&times;</button><h4 class="aside-title" ng-bind="title"></h4></div><div class="aside-body" ng-bind="content"></div><div class="aside-footer"><button type="button" class="btn btn-default" ng-click="$hide()">Close</button></div></div></div></div>');
    }
  ]);
  // Source: dropdown.tpl.js
  angular.module('mgcrea.ngStrap.dropdown').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('dropdown/dropdown.tpl.html', '<ul tabindex="-1" class="dropdown-menu" role="menu"><li role="presentation" ng-class="{divider: item.divider}" ng-repeat="item in content"><a role="menuitem" tabindex="-1" ng-href="{{item.href}}" ng-if="!item.divider && item.href" target="{{item.target || \'\'}}" ng-bind="item.text"></a> <a role="menuitem" tabindex="-1" href="javascript:void(0)" ng-if="!item.divider && item.click" ng-click="$eval(item.click);$hide()" ng-bind="item.text"></a></li></ul>');
    }
  ]);
  // Source: datepicker.tpl.js
  angular.module('mgcrea.ngStrap.datepicker').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('datepicker/datepicker.tpl.html', '<div class="dropdown-menu datepicker" ng-class="\'datepicker-mode-\' + $mode" style="max-width: 320px"><table style="table-layout: fixed; height: 100%; width: 100%"><thead><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$selectPane(-1)"><i class="{{$iconLeft}}"></i></button></th><th colspan="{{ rows[0].length - 2 }}"><button tabindex="-1" type="button" class="btn btn-default btn-block text-strong" ng-click="$toggleMode()"><strong style="text-transform: capitalize" ng-bind="title"></strong></button></th><th><button tabindex="-1" type="button" class="btn btn-default pull-right" ng-click="$selectPane(+1)"><i class="{{$iconRight}}"></i></button></th></tr><tr ng-show="showLabels" ng-bind-html="labels"></tr></thead><tbody><tr ng-repeat="(i, row) in rows" height="{{ 100 / rows.length }}%"><td class="text-center" ng-repeat="(j, el) in row"><button tabindex="-1" type="button" class="btn btn-default" style="width: 100%" ng-class="{\'btn-primary\': el.selected, \'btn-info btn-today\': el.isToday && !el.selected}" ng-click="$select(el.date)" ng-disabled="el.disabled"><span ng-class="{\'text-muted\': el.muted}" ng-bind="el.label"></span></button></td></tr></tbody></table></div>');
    }
  ]);
  // Source: modal.tpl.js
  angular.module('mgcrea.ngStrap.modal').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('modal/modal.tpl.html', '<div class="modal" tabindex="-1" role="dialog"><div class="modal-dialog"><div class="modal-content"><div class="modal-header" ng-show="title"><button type="button" class="close" ng-click="$hide()">&times;</button><h4 class="modal-title" ng-bind="title"></h4></div><div class="modal-body" ng-bind="content"></div><div class="modal-footer"><button type="button" class="btn btn-default" ng-click="$hide()">Close</button></div></div></div></div>');
    }
  ]);
  // Source: popover.tpl.js
  angular.module('mgcrea.ngStrap.popover').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('popover/popover.tpl.html', '<div class="popover"><div class="arrow"></div><h3 class="popover-title" ng-bind="title" ng-show="title"></h3><div class="popover-content" ng-bind="content"></div></div>');
    }
  ]);
  // Source: select.tpl.js
  angular.module('mgcrea.ngStrap.select').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('select/select.tpl.html', '<ul tabindex="-1" class="select dropdown-menu" ng-show="$isVisible()" role="select"><li ng-if="$showAllNoneButtons"><div class="btn-group" style="margin-bottom: 5px; margin-left: 5px"><button class="btn btn-default btn-xs" ng-click="$selectAll()">All</button> <button class="btn btn-default btn-xs" ng-click="$selectNone()">None</button></div></li><li role="presentation" ng-repeat="match in $matches" ng-class="{active: $isActive($index)}"><a style="cursor: default" role="menuitem" tabindex="-1" ng-click="$select($index, $event)"><span ng-bind="match.label"></span> <i class="{{$iconCheckmark}} pull-right" ng-if="$isMultiple && $isActive($index)"></i></a></li></ul>');
    }
  ]);
  // Source: tab.tpl.js
  angular.module('mgcrea.ngStrap.tab').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('tab/tab.tpl.html', '<ul class="nav" ng-class="$navClass" role="tablist"><li ng-repeat="$pane in $panes" ng-class="$index == $panes.$active ? $activeClass : \'\'"><a role="tab" data-toggle="tab" ng-click="$setActive($index)" data-index="{{ $index }}" ng-bind-html="$pane.title"></a></li></ul><div ng-transclude class="tab-content"></div>');
    }
  ]);
  // Source: timepicker.tpl.js
  angular.module('mgcrea.ngStrap.timepicker').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('timepicker/timepicker.tpl.html', '<div class="dropdown-menu timepicker" style="min-width: 0px;width: auto"><table height="100%"><thead><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 0)"><i class="{{ $iconUp }}"></i></button></th><th>&nbsp;</th><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 1)"><i class="{{ $iconUp }}"></i></button></th></tr></thead><tbody><tr ng-repeat="(i, row) in rows"><td class="text-center"><button tabindex="-1" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[0].selected}" ng-click="$select(row[0].date, 0)" ng-disabled="row[0].disabled"><span ng-class="{\'text-muted\': row[0].muted}" ng-bind="row[0].label"></span></button></td><td><span ng-bind="i == midIndex ? timeSeparator : \' \'"></span></td><td class="text-center"><button tabindex="-1" ng-if="row[1].date" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[1].selected}" ng-click="$select(row[1].date, 1)" ng-disabled="row[1].disabled"><span ng-class="{\'text-muted\': row[1].muted}" ng-bind="row[1].label"></span></button></td><td ng-if="showAM">&nbsp;</td><td ng-if="showAM"><button tabindex="-1" ng-show="i == midIndex - !isAM * 1" style="width: 100%" type="button" ng-class="{\'btn-primary\': !!isAM}" class="btn btn-default" ng-click="$switchMeridian()" ng-disabled="el.disabled">AM</button> <button tabindex="-1" ng-show="i == midIndex + 1 - !isAM * 1" style="width: 100%" type="button" ng-class="{\'btn-primary\': !isAM}" class="btn btn-default" ng-click="$switchMeridian()" ng-disabled="el.disabled">PM</button></td></tr></tbody><tfoot><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 0)"><i class="{{ $iconDown }}"></i></button></th><th>&nbsp;</th><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 1)"><i class="{{ $iconDown }}"></i></button></th></tr></tfoot></table></div>');
    }
  ]);
  // Source: tooltip.tpl.js
  angular.module('mgcrea.ngStrap.tooltip').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('tooltip/tooltip.tpl.html', '<div class="tooltip in" ng-show="title"><div class="tooltip-arrow"></div><div class="tooltip-inner" ng-bind="title"></div></div>');
    }
  ]);
  // Source: typeahead.tpl.js
  angular.module('mgcrea.ngStrap.typeahead').run([
    '$templateCache',
    function ($templateCache) {
      $templateCache.put('typeahead/typeahead.tpl.html', '<ul tabindex="-1" class="typeahead dropdown-menu" ng-show="$isVisible()" role="select"><li role="presentation" ng-repeat="match in $matches" ng-class="{active: $index == $activeIndex}"><a role="menuitem" tabindex="-1" ng-click="$select($index, $event)" ng-bind="match.label"></a></li></ul>');
    }
  ]);
}(window, document));
/**
 * oclazyload - Load modules on demand (lazy load) with angularJS
 * @version v0.3.8
 * @link https://github.com/ocombe/ocLazyLoad
 * @license MIT
 * @author Olivier Combe <olivier.combe@gmail.com>
 */
(function () {
  'use strict';
  var regModules = ['ng'], regInvokes = [], regConfigs = [], justLoaded = [], ocLazyLoad = angular.module('oc.lazyLoad', ['ng']), broadcast = angular.noop;
  ocLazyLoad.provider('$ocLazyLoad', [
    '$controllerProvider',
    '$provide',
    '$compileProvider',
    '$filterProvider',
    '$injector',
    '$animateProvider',
    function ($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {
      var modules = {}, providers = {
          $controllerProvider: $controllerProvider,
          $compileProvider: $compileProvider,
          $filterProvider: $filterProvider,
          $provide: $provide,
          $injector: $injector,
          $animateProvider: $animateProvider
        }, anchor = document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0], jsLoader, cssLoader, templatesLoader, debug = false, events = false;
      // Let's get the list of loaded modules & components
      init(angular.element(window.document));
      this.$get = [
        '$timeout',
        '$log',
        '$q',
        '$templateCache',
        '$http',
        '$rootElement',
        '$rootScope',
        '$cacheFactory',
        function ($timeout, $log, $q, $templateCache, $http, $rootElement, $rootScope, $cacheFactory) {
          var instanceInjector, filesCache = $cacheFactory('ocLazyLoad');
          if (!debug) {
            $log = {};
            $log['error'] = angular.noop;
            $log['warn'] = angular.noop;
            $log['info'] = angular.noop;
          }
          // Make this lazy because at the moment that $get() is called the instance injector hasn't been assigned to the rootElement yet
          providers.getInstanceInjector = function () {
            return instanceInjector ? instanceInjector : instanceInjector = $rootElement.data('$injector');
          };
          broadcast = function broadcast(eventName, params) {
            if (events) {
              $rootScope.$broadcast(eventName, params);
            }
            if (debug) {
              $log.info(eventName, params);
            }
          };
          /**
				 * Load a js/css file
				 * @param type
				 * @param path
				 * @returns promise
				 */
          var buildElement = function buildElement(type, path, params) {
            var deferred = $q.defer(), el, loaded, cacheBuster = function cacheBuster(url) {
                var dc = new Date().getTime();
                if (url.indexOf('?') >= 0) {
                  if (url.substring(0, url.length - 1) === '&') {
                    return url + '_dc=' + dc;
                  }
                  return url + '&_dc=' + dc;
                } else {
                  return url + '?_dc=' + dc;
                }
              };
            // Store the promise early so the file load can be detected by other parallel lazy loads
            // (ie: multiple routes on one page) a 'true' value isn't sufficient
            // as it causes false positive load results.
            if (angular.isUndefined(filesCache.get(path))) {
              filesCache.put(path, deferred.promise);
            }
            // Switch in case more content types are added later
            switch (type) {
            case 'css':
              el = document.createElement('link');
              el.type = 'text/css';
              el.rel = 'stylesheet';
              el.href = params.cache === false ? cacheBuster(path) : path;
              break;
            case 'js':
              el = document.createElement('script');
              el.src = params.cache === false ? cacheBuster(path) : path;
              break;
            default:
              deferred.reject(new Error('Requested type "' + type + '" is not known. Could not inject "' + path + '"'));
              break;
            }
            el.onload = el['onreadystatechange'] = function (e) {
              if (el['readyState'] && !/^c|loade/.test(el['readyState']) || loaded)
                return;
              el.onload = el['onreadystatechange'] = null;
              loaded = 1;
              broadcast('ocLazyLoad.fileLoaded', path);
              deferred.resolve();
            };
            el.onerror = function (e) {
              deferred.reject(new Error('Unable to load ' + path));
            };
            el.async = 1;
            anchor.insertBefore(el, anchor.lastChild);
            return deferred.promise;
          };
          if (angular.isUndefined(jsLoader)) {
            /**
					 * jsLoader function
					 * @type Function
					 * @param paths array list of js files to load
					 * @param callback to call when everything is loaded. We use a callback and not a promise
					 * @param params object config parameters
					 * because the user can overwrite jsLoader and it will probably not use promises :(
					 */
            jsLoader = function (paths, callback, params) {
              var promises = [];
              angular.forEach(paths, function loading(path) {
                promises.push(buildElement('js', path, params));
              });
              $q.all(promises).then(function success() {
                callback();
              }, function error(err) {
                callback(err);
              });
            };
            jsLoader.ocLazyLoadLoader = true;
          }
          if (angular.isUndefined(cssLoader)) {
            /**
					 * cssLoader function
					 * @type Function
					 * @param paths array list of css files to load
					 * @param callback to call when everything is loaded. We use a callback and not a promise
					 * @param params object config parameters
					 * because the user can overwrite cssLoader and it will probably not use promises :(
					 */
            cssLoader = function (paths, callback, params) {
              var promises = [];
              angular.forEach(paths, function loading(path) {
                promises.push(buildElement('css', path, params));
              });
              $q.all(promises).then(function success() {
                callback();
              }, function error(err) {
                callback(err);
              });
            };
            cssLoader.ocLazyLoadLoader = true;
          }
          if (angular.isUndefined(templatesLoader)) {
            /**
					 * templatesLoader function
					 * @type Function
					 * @param paths array list of css files to load
					 * @param callback to call when everything is loaded. We use a callback and not a promise
					 * @param params object config parameters for $http
					 * because the user can overwrite templatesLoader and it will probably not use promises :(
					 */
            templatesLoader = function (paths, callback, params) {
              if (angular.isString(paths)) {
                paths = [paths];
              }
              var promises = [];
              angular.forEach(paths, function (url) {
                var deferred = $q.defer();
                promises.push(deferred.promise);
                $http.get(url, params).success(function (data) {
                  angular.forEach(angular.element(data), function (node) {
                    if (node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {
                      $templateCache.put(node.id, node.innerHTML);
                    }
                  });
                  if (angular.isUndefined(filesCache.get(url))) {
                    filesCache.put(url, true);
                  }
                  deferred.resolve();
                }).error(function (data) {
                  var err = 'Error load template "' + url + '": ' + data;
                  $log.error(err);
                  deferred.reject(new Error(err));
                });
              });
              return $q.all(promises).then(function success() {
                callback();
              }, function error(err) {
                callback(err);
              });
            };
            templatesLoader.ocLazyLoadLoader = true;
          }
          var filesLoader = function (config, params) {
            var cssFiles = [], templatesFiles = [], jsFiles = [], promises = [], cachePromise = null;
            angular.extend(params || {}, config);
            angular.forEach(params.files, function (path) {
              cachePromise = filesCache.get(path);
              if (angular.isUndefined(cachePromise) || params.cache === false) {
                if (/\.css[^\.]*$/.test(path) && cssFiles.indexOf(path) === -1) {
                  cssFiles.push(path);
                } else if (/\.(htm|html)[^\.]*$/.test(path) && templatesFiles.indexOf(path) === -1) {
                  templatesFiles.push(path);
                } else if (jsFiles.indexOf(path) === -1) {
                  jsFiles.push(path);
                }
              } else if (cachePromise) {
                promises.push(cachePromise);
              }
            });
            if (cssFiles.length > 0) {
              var cssDeferred = $q.defer();
              cssLoader(cssFiles, function (err) {
                if (angular.isDefined(err) && cssLoader.hasOwnProperty('ocLazyLoadLoader')) {
                  $log.error(err);
                  cssDeferred.reject(err);
                } else {
                  cssDeferred.resolve();
                }
              }, params);
              promises.push(cssDeferred.promise);
            }
            if (templatesFiles.length > 0) {
              var templatesDeferred = $q.defer();
              templatesLoader(templatesFiles, function (err) {
                if (angular.isDefined(err) && templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {
                  $log.error(err);
                  templatesDeferred.reject(err);
                } else {
                  templatesDeferred.resolve();
                }
              }, params);
              promises.push(templatesDeferred.promise);
            }
            if (jsFiles.length > 0) {
              var jsDeferred = $q.defer();
              jsLoader(jsFiles, function (err) {
                if (angular.isDefined(err) && jsLoader.hasOwnProperty('ocLazyLoadLoader')) {
                  $log.error(err);
                  jsDeferred.reject(err);
                } else {
                  jsDeferred.resolve();
                }
              }, params);
              promises.push(jsDeferred.promise);
            }
            return $q.all(promises);
          };
          return {
            getModuleConfig: function (name) {
              if (!modules[name]) {
                return null;
              }
              return modules[name];
            },
            setModuleConfig: function (module) {
              modules[module.name] = module;
              return module;
            },
            getModules: function () {
              return regModules;
            },
            loadTemplateFile: function (paths, params) {
              return filesLoader({ files: paths }, params);
            },
            load: function (module, params) {
              var self = this, config = null, moduleCache = [], deferredList = [], deferred = $q.defer(), moduleName, errText;
              if (angular.isUndefined(params)) {
                params = {};
              }
              // If module is an array, break it down
              if (angular.isArray(module)) {
                // Resubmit each entry as a single module
                angular.forEach(module, function (m) {
                  if (m) {
                    deferredList.push(self.load(m, params));
                  }
                });
                // Resolve the promise once everything has loaded
                $q.all(deferredList).then(function success() {
                  deferred.resolve(module);
                }, function error(err) {
                  deferred.reject(err);
                });
                return deferred.promise;
              }
              moduleName = getModuleName(module);
              // Get or Set a configuration depending on what was passed in
              if (typeof module === 'string') {
                config = self.getModuleConfig(module);
                if (!config) {
                  config = { files: [module] };
                  moduleName = null;
                }
              } else if (typeof module === 'object') {
                config = self.setModuleConfig(module);
              }
              if (config === null) {
                errText = 'Module "' + moduleName + '" is not configured, cannot load.';
                $log.error(errText);
                deferred.reject(new Error(errText));
              } else {
                // deprecated
                if (angular.isDefined(config.template)) {
                  if (angular.isUndefined(config.files)) {
                    config.files = [];
                  }
                  if (angular.isString(config.template)) {
                    config.files.push(config.template);
                  } else if (angular.isArray(config.template)) {
                    config.files.concat(config.template);
                  }
                }
              }
              moduleCache.push = function (value) {
                if (this.indexOf(value) === -1) {
                  Array.prototype.push.apply(this, arguments);
                }
              };
              // If this module has been loaded before, re-use it.
              if (angular.isDefined(moduleName) && moduleExists(moduleName) && regModules.indexOf(moduleName) !== -1) {
                moduleCache.push(moduleName);
                // if we don't want to load new files, resolve here
                if (angular.isUndefined(config.files)) {
                  deferred.resolve();
                  return deferred.promise;
                }
              }
              var loadDependencies = function loadDependencies(module) {
                var moduleName, loadedModule, requires, diff, promisesList = [];
                moduleName = getModuleName(module);
                if (moduleName === null) {
                  return $q.when();
                } else {
                  try {
                    loadedModule = getModule(moduleName);
                  } catch (e) {
                    var deferred = $q.defer();
                    $log.error(e.message);
                    deferred.reject(e);
                    return deferred.promise;
                  }
                  requires = getRequires(loadedModule);
                }
                angular.forEach(requires, function (requireEntry) {
                  // If no configuration is provided, try and find one from a previous load.
                  // If there isn't one, bail and let the normal flow run
                  if (typeof requireEntry === 'string') {
                    var config = self.getModuleConfig(requireEntry);
                    if (config === null) {
                      moduleCache.push(requireEntry);
                      // We don't know about this module, but something else might, so push it anyway.
                      return;
                    }
                    requireEntry = config;
                  }
                  // Check if this dependency has been loaded previously
                  if (moduleExists(requireEntry.name)) {
                    if (typeof module !== 'string') {
                      // compare against the already loaded module to see if the new definition adds any new files
                      diff = requireEntry.files.filter(function (n) {
                        return self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0;
                      });
                      // If the module was redefined, advise via the console
                      if (diff.length !== 0) {
                        $log.warn('Module "', moduleName, '" attempted to redefine configuration for dependency. "', requireEntry.name, '"\n Additional Files Loaded:', diff);
                      }
                      // Push everything to the file loader, it will weed out the duplicates.
                      promisesList.push(filesLoader(requireEntry.files, params).then(function () {
                        return loadDependencies(requireEntry);
                      }));
                    }
                    return;
                  } else if (typeof requireEntry === 'object') {
                    if (requireEntry.hasOwnProperty('name') && requireEntry['name']) {
                      // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.
                      self.setModuleConfig(requireEntry);
                      moduleCache.push(requireEntry['name']);
                    }
                    // CSS Loading Handler
                    if (requireEntry.hasOwnProperty('css') && requireEntry['css'].length !== 0) {
                      // Locate the document insertion point
                      angular.forEach(requireEntry['css'], function (path) {
                        buildElement('css', path, params);
                      });
                    }  // CSS End.
                  }
                  // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.
                  if (requireEntry.hasOwnProperty('files') && requireEntry.files.length !== 0) {
                    if (requireEntry.files) {
                      promisesList.push(filesLoader(requireEntry, params).then(function () {
                        return loadDependencies(requireEntry);
                      }));
                    }
                  }
                });
                // Create a wrapper promise to watch the promise list and resolve it once everything is done.
                return $q.all(promisesList);
              };
              filesLoader(config, params).then(function success() {
                if (moduleName === null) {
                  deferred.resolve(module);
                } else {
                  moduleCache.push(moduleName);
                  loadDependencies(moduleName).then(function success() {
                    try {
                      justLoaded = [];
                      register(providers, moduleCache, params);
                    } catch (e) {
                      $log.error(e.message);
                      deferred.reject(e);
                      return;
                    }
                    $timeout(function () {
                      deferred.resolve(module);
                    });
                  }, function error(err) {
                    $timeout(function () {
                      deferred.reject(err);
                    });
                  });
                }
              }, function error(err) {
                deferred.reject(err);
              });
              return deferred.promise;
            }
          };
        }
      ];
      this.config = function (config) {
        if (angular.isDefined(config.jsLoader) || angular.isDefined(config.asyncLoader)) {
          jsLoader = config.jsLoader || config.asyncLoader;
          if (!angular.isFunction(jsLoader)) {
            throw 'The js loader needs to be a function';
          }
        }
        if (angular.isDefined(config.cssLoader)) {
          cssLoader = config.cssLoader;
          if (!angular.isFunction(cssLoader)) {
            throw 'The css loader needs to be a function';
          }
        }
        if (angular.isDefined(config.templatesLoader)) {
          templatesLoader = config.templatesLoader;
          if (!angular.isFunction(templatesLoader)) {
            throw 'The template loader needs to be a function';
          }
        }
        // for bootstrap apps, we need to define the main module name
        if (angular.isDefined(config.loadedModules)) {
          var addRegModule = function (loadedModule) {
            if (regModules.indexOf(loadedModule) < 0) {
              regModules.push(loadedModule);
              angular.forEach(angular.module(loadedModule).requires, addRegModule);
            }
          };
          angular.forEach(config.loadedModules, addRegModule);
        }
        // If we want to define modules configs
        if (angular.isDefined(config.modules)) {
          if (angular.isArray(config.modules)) {
            angular.forEach(config.modules, function (moduleConfig) {
              modules[moduleConfig.name] = moduleConfig;
            });
          } else {
            modules[config.modules.name] = config.modules;
          }
        }
        if (angular.isDefined(config.debug)) {
          debug = config.debug;
        }
        if (angular.isDefined(config.events)) {
          events = config.events;
        }
      };
    }
  ]);
  ocLazyLoad.directive('ocLazyLoad', [
    '$http',
    '$log',
    '$ocLazyLoad',
    '$compile',
    '$timeout',
    '$templateCache',
    '$animate',
    function ($http, $log, $ocLazyLoad, $compile, $timeout, $templateCache, $animate) {
      return {
        restrict: 'A',
        terminal: true,
        priority: 401,
        transclude: 'element',
        controller: angular.noop,
        compile: function (element, attrs) {
          return function ($scope, $element, $attr, ctrl, $transclude) {
            var childScope, evaluated = $scope.$eval($attr.ocLazyLoad), onloadExp = evaluated && evaluated.onload ? evaluated.onload : '';
            /**
						 * Destroy the current scope of this element and empty the html
						 */
            function clearContent() {
              if (childScope) {
                childScope.$destroy();
                childScope = null;
              }
              $element.html('');
            }
            /**
						 * Load a template from cache or url
						 * @param url
						 * @param callback
						 */
            function loadTemplate(url, callback) {
              var view;
              if (typeof (view = $templateCache.get(url)) !== 'undefined') {
                callback(view);
              } else {
                $http.get(url).success(function (data) {
                  $templateCache.put('view:' + url, data);
                  callback(data);
                }).error(function (data) {
                  $log.error('Error load template "' + url + '": ' + data);
                });
              }
            }
            $scope.$watch($attr.ocLazyLoad, function (moduleName) {
              if (angular.isDefined(moduleName)) {
                $ocLazyLoad.load(moduleName).then(function (moduleConfig) {
                  $transclude($scope, function cloneConnectFn(clone) {
                    $animate.enter(clone, null, $element);
                  });
                });
              } else {
                clearContent();
              }
            }, true);
          };
        }  /*link: function($scope, $element, $attr) {

				 }*/
      };
    }
  ]);
  /**
	 * Get the list of required modules/services/... for this module
	 * @param module
	 * @returns {Array}
	 */
  function getRequires(module) {
    var requires = [];
    angular.forEach(module.requires, function (requireModule) {
      if (regModules.indexOf(requireModule) === -1) {
        requires.push(requireModule);
      }
    });
    return requires;
  }
  /**
	 * Check if a module exists and returns it if it does
	 * @param moduleName
	 * @returns {boolean}
	 */
  function moduleExists(moduleName) {
    try {
      return angular.module(moduleName);
    } catch (e) {
      if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {
        return false;
      }
    }
  }
  function getModule(moduleName) {
    try {
      return angular.module(moduleName);
    } catch (e) {
      // this error message really suxx
      if (/No module/.test(e) || e.message.indexOf('$injector:nomod') > -1) {
        e.message = 'The module "' + moduleName + '" that you are trying to load does not exist. ' + e.message;
      }
      throw e;
    }
  }
  function invokeQueue(providers, queue, moduleName, reconfig) {
    if (!queue) {
      return;
    }
    var i, len, args, provider;
    for (i = 0, len = queue.length; i < len; i++) {
      args = queue[i];
      if (angular.isArray(args)) {
        if (providers !== null) {
          if (providers.hasOwnProperty(args[0])) {
            provider = providers[args[0]];
          } else {
            throw new Error('unsupported provider ' + args[0]);
          }
        }
        var isNew = registerInvokeList(args[2][0]);
        if (args[1] !== 'invoke') {
          if (isNew && angular.isDefined(provider)) {
            provider[args[1]].apply(provider, args[2]);
          }
        } else {
          // config block
          var callInvoke = function (fct) {
            var invoked = regConfigs.indexOf(moduleName + '-' + fct);
            if (invoked === -1 || reconfig) {
              if (invoked === -1) {
                regConfigs.push(moduleName + '-' + fct);
              }
              if (angular.isDefined(provider)) {
                provider[args[1]].apply(provider, args[2]);
              }
            }
          };
          if (angular.isFunction(args[2][0])) {
            callInvoke(args[2][0]);
          } else if (angular.isArray(args[2][0])) {
            for (var j = 0, jlen = args[2][0].length; j < jlen; j++) {
              if (angular.isFunction(args[2][0][j])) {
                callInvoke(args[2][0][j]);
              }
            }
          }
        }
      }
    }
  }
  /**
	 * Register a new module and load it
	 * @param providers
	 * @param registerModules
	 * @returns {*}
	 */
  function register(providers, registerModules, params) {
    if (registerModules) {
      var k, moduleName, moduleFn, runBlocks = [];
      for (k = registerModules.length - 1; k >= 0; k--) {
        moduleName = registerModules[k];
        if (typeof moduleName !== 'string') {
          moduleName = getModuleName(moduleName);
        }
        if (!moduleName || justLoaded.indexOf(moduleName) !== -1) {
          continue;
        }
        var newModule = regModules.indexOf(moduleName) === -1;
        moduleFn = angular.module(moduleName);
        if (newModule) {
          // new module
          regModules.push(moduleName);
          register(providers, moduleFn.requires, params);
          runBlocks = runBlocks.concat(moduleFn._runBlocks);
        }
        invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);
        invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig);
        // angular 1.3+
        broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);
        registerModules.pop();
        justLoaded.push(moduleName);
      }
      var instanceInjector = providers.getInstanceInjector();
      angular.forEach(runBlocks, function (fn) {
        instanceInjector.invoke(fn);
      });
    }
  }
  /**
	 * Register an invoke
	 * @param invokeList
	 * @returns {*}
	 */
  function registerInvokeList(invokeList) {
    var newInvoke = false;
    var onInvoke = function (invokeName) {
      newInvoke = true;
      regInvokes.push(invokeName);
      broadcast('ocLazyLoad.componentLoaded', invokeName);
    };
    if (angular.isString(invokeList)) {
      if (regInvokes.indexOf(invokeList) === -1) {
        onInvoke(invokeList);
      }
    } else if (angular.isObject(invokeList)) {
      angular.forEach(invokeList, function (invoke) {
        if (angular.isString(invoke) && regInvokes.indexOf(invoke) === -1) {
          onInvoke(invoke);
        }
      });
    } else {
      return true;
    }
    return newInvoke;
  }
  function getModuleName(module) {
    if (module === null) {
      return null;
    }
    var moduleName = null;
    if (typeof module === 'string') {
      moduleName = module;
    } else if (typeof module === 'object' && module.hasOwnProperty('name') && typeof module.name === 'string') {
      moduleName = module.name;
    }
    return moduleName;
  }
  /**
	 * Get the list of existing registered modules
	 * @param element
	 */
  function init(element) {
    var elements = [element], appElement, moduleName, names = [
        'ng:app',
        'ng-app',
        'x-ng-app',
        'data-ng-app'
      ], NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/;
    function append(elm) {
      return elm && elements.push(elm);
    }
    angular.forEach(names, function (name) {
      names[name] = true;
      append(document.getElementById(name));
      name = name.replace(':', '\\:');
      if (element.querySelectorAll) {
        angular.forEach(element.querySelectorAll('.' + name), append);
        angular.forEach(element.querySelectorAll('.' + name + '\\:'), append);
        angular.forEach(element.querySelectorAll('[' + name + ']'), append);
      }
    });
    //TODO: search the script tags for angular.bootstrap
    angular.forEach(elements, function (elm) {
      if (!appElement) {
        var className = ' ' + element.className + ' ';
        var match = NG_APP_CLASS_REGEXP.exec(className);
        if (match) {
          appElement = elm;
          moduleName = (match[2] || '').replace(/\s+/g, ',');
        } else {
          angular.forEach(elm.attributes, function (attr) {
            if (!appElement && names[attr.name]) {
              appElement = elm;
              moduleName = attr.value;
            }
          });
        }
      }
    });
    if (appElement) {
      (function addReg(moduleName) {
        if (regModules.indexOf(moduleName) === -1) {
          // register existing modules
          regModules.push(moduleName);
          var mainModule = angular.module(moduleName);
          // register existing components (directives, services, ...)
          invokeQueue(null, mainModule._invokeQueue, moduleName);
          invokeQueue(null, mainModule._configBlocks, moduleName);
          // angular 1.3+
          angular.forEach(mainModule.requires, addReg);
        }
      }(moduleName));
    }
  }
  // Array.indexOf polyfill for IE8
  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement, fromIndex) {
      var k;
      // 1. Let O be the result of calling ToObject passing
      //    the this value as the argument.
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }
      var O = Object(this);
      // 2. Let lenValue be the result of calling the Get
      //    internal method of O with the argument "length".
      // 3. Let len be ToUint32(lenValue).
      var len = O.length >>> 0;
      // 4. If len is 0, return -1.
      if (len === 0) {
        return -1;
      }
      // 5. If argument fromIndex was passed let n be
      //    ToInteger(fromIndex); else let n be 0.
      var n = +fromIndex || 0;
      if (Math.abs(n) === Infinity) {
        n = 0;
      }
      // 6. If n >= len, return -1.
      if (n >= len) {
        return -1;
      }
      // 7. If n >= 0, then Let k be n.
      // 8. Else, n<0, Let k be len - abs(n).
      //    If k is less than 0, then let k be 0.
      k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
      // 9. Repeat, while k < len
      while (k < len) {
        // a. Let Pk be ToString(k).
        //   This is implicit for LHS operands of the in operator
        // b. Let kPresent be the result of calling the
        //    HasProperty internal method of O with argument Pk.
        //   This step can be combined with c
        // c. If kPresent is true, then
        //    i.  Let elementK be the result of calling the Get
        //        internal method of O with the argument ToString(k).
        //   ii.  Let same be the result of applying the
        //        Strict Equality Comparison Algorithm to
        //        searchElement and elementK.
        //  iii.  If same is true, return k.
        if (k in O && O[k] === searchElement) {
          return k;
        }
        k++;
      }
      return -1;
    };
  }
}());
/*!
 * angular-translate - v2.2.0 - 2014-06-03
 * http://github.com/PascalPrecht/angular-translate
 * Copyright (c) 2014 ; Licensed MIT
 */
angular.module('pascalprecht.translate', ['ng']).run([
  '$translate',
  function ($translate) {
    var key = $translate.storageKey(), storage = $translate.storage();
    if (storage) {
      if (!storage.get(key)) {
        if (angular.isString($translate.preferredLanguage())) {
          $translate.use($translate.preferredLanguage());
        } else {
          storage.set(key, $translate.use());
        }
      } else {
        $translate.use(storage.get(key));
      }
    } else if (angular.isString($translate.preferredLanguage())) {
      $translate.use($translate.preferredLanguage());
    }
  }
]);
angular.module('pascalprecht.translate').provider('$translate', [
  '$STORAGE_KEY',
  function ($STORAGE_KEY) {
    var $translationTable = {}, $preferredLanguage, $availableLanguageKeys = [], $languageKeyAliases, $fallbackLanguage, $fallbackWasString, $uses, $nextLang, $storageFactory, $storageKey = $STORAGE_KEY, $storagePrefix, $missingTranslationHandlerFactory, $interpolationFactory, $interpolatorFactories = [], $interpolationSanitizationStrategy = false, $loaderFactory, $cloakClassName = 'translate-cloak', $loaderOptions, $notFoundIndicatorLeft, $notFoundIndicatorRight, $postCompilingEnabled = false, NESTED_OBJECT_DELIMITER = '.';
    var getLocale = function () {
      var nav = window.navigator;
      return (nav.language || nav.browserLanguage || nav.systemLanguage || nav.userLanguage || '').split('-').join('_');
    };
    var negotiateLocale = function (preferred) {
      var avail = [], locale = angular.lowercase(preferred), i = 0, n = $availableLanguageKeys.length;
      for (; i < n; i++) {
        avail.push(angular.lowercase($availableLanguageKeys[i]));
      }
      if (avail.indexOf(locale) > -1) {
        return preferred;
      }
      if ($languageKeyAliases) {
        var alias;
        for (var langKeyAlias in $languageKeyAliases) {
          var hasWildcardKey = false;
          var hasExactKey = $languageKeyAliases.hasOwnProperty(langKeyAlias) && angular.lowercase(langKeyAlias) === angular.lowercase(preferred);
          if (langKeyAlias.slice(-1) === '*') {
            hasWildcardKey = langKeyAlias.slice(0, -1) === preferred.slice(0, langKeyAlias.length - 1);
          }
          if (hasExactKey || hasWildcardKey) {
            alias = $languageKeyAliases[langKeyAlias];
            if (avail.indexOf(angular.lowercase(alias)) > -1) {
              return alias;
            }
          }
        }
      }
      var parts = preferred.split('_');
      if (parts.length > 1 && avail.indexOf(angular.lowercase(parts[0])) > -1) {
        return parts[0];
      }
      return preferred;
    };
    var translations = function (langKey, translationTable) {
      if (!langKey && !translationTable) {
        return $translationTable;
      }
      if (langKey && !translationTable) {
        if (angular.isString(langKey)) {
          return $translationTable[langKey];
        }
      } else {
        if (!angular.isObject($translationTable[langKey])) {
          $translationTable[langKey] = {};
        }
        angular.extend($translationTable[langKey], flatObject(translationTable));
      }
      return this;
    };
    this.translations = translations;
    this.cloakClassName = function (name) {
      if (!name) {
        return $cloakClassName;
      }
      $cloakClassName = name;
      return this;
    };
    var flatObject = function (data, path, result, prevKey) {
      var key, keyWithPath, keyWithShortPath, val;
      if (!path) {
        path = [];
      }
      if (!result) {
        result = {};
      }
      for (key in data) {
        if (!data.hasOwnProperty(key)) {
          continue;
        }
        val = data[key];
        if (angular.isObject(val)) {
          flatObject(val, path.concat(key), result, key);
        } else {
          keyWithPath = path.length ? '' + path.join(NESTED_OBJECT_DELIMITER) + NESTED_OBJECT_DELIMITER + key : key;
          if (path.length && key === prevKey) {
            keyWithShortPath = '' + path.join(NESTED_OBJECT_DELIMITER);
            result[keyWithShortPath] = '@:' + keyWithPath;
          }
          result[keyWithPath] = val;
        }
      }
      return result;
    };
    this.addInterpolation = function (factory) {
      $interpolatorFactories.push(factory);
      return this;
    };
    this.useMessageFormatInterpolation = function () {
      return this.useInterpolation('$translateMessageFormatInterpolation');
    };
    this.useInterpolation = function (factory) {
      $interpolationFactory = factory;
      return this;
    };
    this.useSanitizeValueStrategy = function (value) {
      $interpolationSanitizationStrategy = value;
      return this;
    };
    this.preferredLanguage = function (langKey) {
      if (langKey) {
        $preferredLanguage = langKey;
        return this;
      }
      return $preferredLanguage;
    };
    this.translationNotFoundIndicator = function (indicator) {
      this.translationNotFoundIndicatorLeft(indicator);
      this.translationNotFoundIndicatorRight(indicator);
      return this;
    };
    this.translationNotFoundIndicatorLeft = function (indicator) {
      if (!indicator) {
        return $notFoundIndicatorLeft;
      }
      $notFoundIndicatorLeft = indicator;
      return this;
    };
    this.translationNotFoundIndicatorRight = function (indicator) {
      if (!indicator) {
        return $notFoundIndicatorRight;
      }
      $notFoundIndicatorRight = indicator;
      return this;
    };
    this.fallbackLanguage = function (langKey) {
      fallbackStack(langKey);
      return this;
    };
    var fallbackStack = function (langKey) {
      if (langKey) {
        if (angular.isString(langKey)) {
          $fallbackWasString = true;
          $fallbackLanguage = [langKey];
        } else if (angular.isArray(langKey)) {
          $fallbackWasString = false;
          $fallbackLanguage = langKey;
        }
        if (angular.isString($preferredLanguage)) {
          $fallbackLanguage.push($preferredLanguage);
        }
        return this;
      } else {
        if ($fallbackWasString) {
          return $fallbackLanguage[0];
        } else {
          return $fallbackLanguage;
        }
      }
    };
    this.use = function (langKey) {
      if (langKey) {
        if (!$translationTable[langKey] && !$loaderFactory) {
          throw new Error('$translateProvider couldn\'t find translationTable for langKey: \'' + langKey + '\'');
        }
        $uses = langKey;
        return this;
      }
      return $uses;
    };
    var storageKey = function (key) {
      if (!key) {
        if ($storagePrefix) {
          return $storagePrefix + $storageKey;
        }
        return $storageKey;
      }
      $storageKey = key;
    };
    this.storageKey = storageKey;
    this.useUrlLoader = function (url) {
      return this.useLoader('$translateUrlLoader', { url: url });
    };
    this.useStaticFilesLoader = function (options) {
      return this.useLoader('$translateStaticFilesLoader', options);
    };
    this.useLoader = function (loaderFactory, options) {
      $loaderFactory = loaderFactory;
      $loaderOptions = options || {};
      return this;
    };
    this.useLocalStorage = function () {
      return this.useStorage('$translateLocalStorage');
    };
    this.useCookieStorage = function () {
      return this.useStorage('$translateCookieStorage');
    };
    this.useStorage = function (storageFactory) {
      $storageFactory = storageFactory;
      return this;
    };
    this.storagePrefix = function (prefix) {
      if (!prefix) {
        return prefix;
      }
      $storagePrefix = prefix;
      return this;
    };
    this.useMissingTranslationHandlerLog = function () {
      return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
    };
    this.useMissingTranslationHandler = function (factory) {
      $missingTranslationHandlerFactory = factory;
      return this;
    };
    this.usePostCompiling = function (value) {
      $postCompilingEnabled = !!value;
      return this;
    };
    this.determinePreferredLanguage = function (fn) {
      var locale = fn && angular.isFunction(fn) ? fn() : getLocale();
      if (!$availableLanguageKeys.length) {
        $preferredLanguage = locale;
      } else {
        $preferredLanguage = negotiateLocale(locale);
      }
      return this;
    };
    this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
      if (languageKeys) {
        $availableLanguageKeys = languageKeys;
        if (aliases) {
          $languageKeyAliases = aliases;
        }
        return this;
      }
      return $availableLanguageKeys;
    };
    this.$get = [
      '$log',
      '$injector',
      '$rootScope',
      '$q',
      function ($log, $injector, $rootScope, $q) {
        var Storage, defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'), pendingLoader = false, interpolatorHashMap = {}, langPromises = {}, fallbackIndex, startFallbackIteration;
        var $translate = function (translationId, interpolateParams, interpolationId) {
          if (angular.isArray(translationId)) {
            var translateAll = function (translationIds) {
              var results = {};
              var promises = [];
              var translate = function (translationId) {
                var deferred = $q.defer();
                var regardless = function (value) {
                  results[translationId] = value;
                  deferred.resolve([
                    translationId,
                    value
                  ]);
                };
                $translate(translationId, interpolateParams, interpolationId).then(regardless, regardless);
                return deferred.promise;
              };
              for (var i = 0, c = translationIds.length; i < c; i++) {
                promises.push(translate(translationIds[i]));
              }
              return $q.all(promises).then(function () {
                return results;
              });
            };
            return translateAll(translationId);
          }
          var deferred = $q.defer();
          if (translationId) {
            translationId = translationId.trim();
          }
          var promiseToWaitFor = function () {
              var promise = $preferredLanguage ? langPromises[$preferredLanguage] : langPromises[$uses];
              fallbackIndex = 0;
              if ($storageFactory && !promise) {
                var langKey = Storage.get($storageKey);
                promise = langPromises[langKey];
                if ($fallbackLanguage && $fallbackLanguage.length) {
                  var index = indexOf($fallbackLanguage, langKey);
                  fallbackIndex = index > -1 ? index += 1 : 0;
                  $fallbackLanguage.push($preferredLanguage);
                }
              }
              return promise;
            }();
          if (!promiseToWaitFor) {
            determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
          } else {
            promiseToWaitFor.then(function () {
              determineTranslation(translationId, interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
            }, deferred.reject);
          }
          return deferred.promise;
        };
        var indexOf = function (array, searchElement) {
          for (var i = 0, len = array.length; i < len; i++) {
            if (array[i] === searchElement) {
              return i;
            }
          }
          return -1;
        };
        var applyNotFoundIndicators = function (translationId) {
          if ($notFoundIndicatorLeft) {
            translationId = [
              $notFoundIndicatorLeft,
              translationId
            ].join(' ');
          }
          if ($notFoundIndicatorRight) {
            translationId = [
              translationId,
              $notFoundIndicatorRight
            ].join(' ');
          }
          return translationId;
        };
        var useLanguage = function (key) {
          $uses = key;
          $rootScope.$emit('$translateChangeSuccess');
          if ($storageFactory) {
            Storage.set($translate.storageKey(), $uses);
          }
          defaultInterpolator.setLocale($uses);
          angular.forEach(interpolatorHashMap, function (interpolator, id) {
            interpolatorHashMap[id].setLocale($uses);
          });
          $rootScope.$emit('$translateChangeEnd');
        };
        var loadAsync = function (key) {
          if (!key) {
            throw 'No language key specified for loading.';
          }
          var deferred = $q.defer();
          $rootScope.$emit('$translateLoadingStart');
          pendingLoader = true;
          $injector.get($loaderFactory)(angular.extend($loaderOptions, { key: key })).then(function (data) {
            var translationTable = {};
            $rootScope.$emit('$translateLoadingSuccess');
            if (angular.isArray(data)) {
              angular.forEach(data, function (table) {
                angular.extend(translationTable, flatObject(table));
              });
            } else {
              angular.extend(translationTable, flatObject(data));
            }
            pendingLoader = false;
            deferred.resolve({
              key: key,
              table: translationTable
            });
            $rootScope.$emit('$translateLoadingEnd');
          }, function (key) {
            $rootScope.$emit('$translateLoadingError');
            deferred.reject(key);
            $rootScope.$emit('$translateLoadingEnd');
          });
          return deferred.promise;
        };
        if ($storageFactory) {
          Storage = $injector.get($storageFactory);
          if (!Storage.get || !Storage.set) {
            throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or set() method!');
          }
        }
        if (angular.isFunction(defaultInterpolator.useSanitizeValueStrategy)) {
          defaultInterpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);
        }
        if ($interpolatorFactories.length) {
          angular.forEach($interpolatorFactories, function (interpolatorFactory) {
            var interpolator = $injector.get(interpolatorFactory);
            interpolator.setLocale($preferredLanguage || $uses);
            if (angular.isFunction(interpolator.useSanitizeValueStrategy)) {
              interpolator.useSanitizeValueStrategy($interpolationSanitizationStrategy);
            }
            interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
          });
        }
        var getTranslationTable = function (langKey) {
          var deferred = $q.defer();
          if ($translationTable.hasOwnProperty(langKey)) {
            deferred.resolve($translationTable[langKey]);
            return deferred.promise;
          } else {
            langPromises[langKey].then(function (data) {
              translations(data.key, data.table);
              deferred.resolve(data.table);
            }, deferred.reject);
          }
          return deferred.promise;
        };
        var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator) {
          var deferred = $q.defer();
          getTranslationTable(langKey).then(function (translationTable) {
            if (translationTable.hasOwnProperty(translationId)) {
              Interpolator.setLocale(langKey);
              deferred.resolve(Interpolator.interpolate(translationTable[translationId], interpolateParams));
              Interpolator.setLocale($uses);
            } else {
              deferred.reject();
            }
          }, deferred.reject);
          return deferred.promise;
        };
        var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator) {
          var result, translationTable = $translationTable[langKey];
          if (translationTable.hasOwnProperty(translationId)) {
            Interpolator.setLocale(langKey);
            result = Interpolator.interpolate(translationTable[translationId], interpolateParams);
            Interpolator.setLocale($uses);
          }
          return result;
        };
        var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
          var deferred = $q.defer();
          if (fallbackLanguageIndex < $fallbackLanguage.length) {
            var langKey = $fallbackLanguage[fallbackLanguageIndex];
            getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator).then(function (translation) {
              deferred.resolve(translation);
            }, function () {
              var nextFallbackLanguagePromise = resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
              deferred.resolve(nextFallbackLanguagePromise);
            });
          } else {
            if ($missingTranslationHandlerFactory) {
              var resultString = $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
              if (resultString !== undefined) {
                deferred.resolve(resultString);
              } else {
                deferred.resolve(translationId);
              }
            } else {
              deferred.resolve(translationId);
            }
          }
          return deferred.promise;
        };
        var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
          var result;
          if (fallbackLanguageIndex < $fallbackLanguage.length) {
            var langKey = $fallbackLanguage[fallbackLanguageIndex];
            result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator);
            if (!result) {
              result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
            }
          }
          return result;
        };
        var fallbackTranslation = function (translationId, interpolateParams, Interpolator) {
          return resolveForFallbackLanguage(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);
        };
        var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator) {
          return resolveForFallbackLanguageInstant(startFallbackIteration > 0 ? startFallbackIteration : fallbackIndex, translationId, interpolateParams, Interpolator);
        };
        var determineTranslation = function (translationId, interpolateParams, interpolationId) {
          var deferred = $q.defer();
          var table = $uses ? $translationTable[$uses] : $translationTable, Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;
          if (table && table.hasOwnProperty(translationId)) {
            var translation = table[translationId];
            if (translation.substr(0, 2) === '@:') {
              $translate(translation.substr(2), interpolateParams, interpolationId).then(deferred.resolve, deferred.reject);
            } else {
              deferred.resolve(Interpolator.interpolate(translation, interpolateParams));
            }
          } else {
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
            }
            if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
              fallbackTranslation(translationId, interpolateParams, Interpolator).then(function (translation) {
                deferred.resolve(translation);
              }, function (_translationId) {
                deferred.reject(applyNotFoundIndicators(_translationId));
              });
            } else {
              deferred.reject(applyNotFoundIndicators(translationId));
            }
          }
          return deferred.promise;
        };
        var determineTranslationInstant = function (translationId, interpolateParams, interpolationId) {
          var result, table = $uses ? $translationTable[$uses] : $translationTable, Interpolator = interpolationId ? interpolatorHashMap[interpolationId] : defaultInterpolator;
          if (table && table.hasOwnProperty(translationId)) {
            var translation = table[translationId];
            if (translation.substr(0, 2) === '@:') {
              result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId);
            } else {
              result = Interpolator.interpolate(translation, interpolateParams);
            }
          } else {
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
            }
            if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
              fallbackIndex = 0;
              result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator);
            } else {
              result = applyNotFoundIndicators(translationId);
            }
          }
          return result;
        };
        $translate.preferredLanguage = function () {
          return $preferredLanguage;
        };
        $translate.cloakClassName = function () {
          return $cloakClassName;
        };
        $translate.fallbackLanguage = function (langKey) {
          if (langKey !== undefined && langKey !== null) {
            fallbackStack(langKey);
            if ($loaderFactory) {
              if ($fallbackLanguage && $fallbackLanguage.length) {
                for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                  if (!langPromises[$fallbackLanguage[i]]) {
                    langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
                  }
                }
              }
            }
            $translate.use($translate.use());
          }
          if ($fallbackWasString) {
            return $fallbackLanguage[0];
          } else {
            return $fallbackLanguage;
          }
        };
        $translate.useFallbackLanguage = function (langKey) {
          if (langKey !== undefined && langKey !== null) {
            if (!langKey) {
              startFallbackIteration = 0;
            } else {
              var langKeyPosition = indexOf($fallbackLanguage, langKey);
              if (langKeyPosition > -1) {
                startFallbackIteration = langKeyPosition;
              }
            }
          }
        };
        $translate.proposedLanguage = function () {
          return $nextLang;
        };
        $translate.storage = function () {
          return Storage;
        };
        $translate.use = function (key) {
          if (!key) {
            return $uses;
          }
          var deferred = $q.defer();
          $rootScope.$emit('$translateChangeStart');
          var aliasedKey = negotiateLocale(key);
          if (aliasedKey) {
            key = aliasedKey;
          }
          if (!$translationTable[key] && $loaderFactory) {
            $nextLang = key;
            langPromises[key] = loadAsync(key).then(function (translation) {
              translations(translation.key, translation.table);
              deferred.resolve(translation.key);
              if ($nextLang === key) {
                useLanguage(translation.key);
                $nextLang = undefined;
              }
            }, function (key) {
              $nextLang = undefined;
              $rootScope.$emit('$translateChangeError');
              deferred.reject(key);
              $rootScope.$emit('$translateChangeEnd');
            });
          } else {
            deferred.resolve(key);
            useLanguage(key);
          }
          return deferred.promise;
        };
        $translate.storageKey = function () {
          return storageKey();
        };
        $translate.isPostCompilingEnabled = function () {
          return $postCompilingEnabled;
        };
        $translate.refresh = function (langKey) {
          if (!$loaderFactory) {
            throw new Error('Couldn\'t refresh translation table, no loader registered!');
          }
          var deferred = $q.defer();
          function resolve() {
            deferred.resolve();
            $rootScope.$emit('$translateRefreshEnd');
          }
          function reject() {
            deferred.reject();
            $rootScope.$emit('$translateRefreshEnd');
          }
          $rootScope.$emit('$translateRefreshStart');
          if (!langKey) {
            var tables = [];
            if ($fallbackLanguage && $fallbackLanguage.length) {
              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                tables.push(loadAsync($fallbackLanguage[i]));
              }
            }
            if ($uses) {
              tables.push(loadAsync($uses));
            }
            $q.all(tables).then(function (tableData) {
              angular.forEach(tableData, function (data) {
                if ($translationTable[data.key]) {
                  delete $translationTable[data.key];
                }
                translations(data.key, data.table);
              });
              if ($uses) {
                useLanguage($uses);
              }
              resolve();
            });
          } else if ($translationTable[langKey]) {
            loadAsync(langKey).then(function (data) {
              translations(data.key, data.table);
              if (langKey === $uses) {
                useLanguage($uses);
              }
              resolve();
            }, reject);
          } else {
            reject();
          }
          return deferred.promise;
        };
        $translate.instant = function (translationId, interpolateParams, interpolationId) {
          if (translationId === null || angular.isUndefined(translationId)) {
            return translationId;
          }
          if (angular.isArray(translationId)) {
            var results = {};
            for (var i = 0, c = translationId.length; i < c; i++) {
              results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId);
            }
            return results;
          }
          if (angular.isString(translationId) && translationId.length < 1) {
            return translationId;
          }
          if (translationId) {
            translationId = translationId.trim();
          }
          var result, possibleLangKeys = [];
          if ($preferredLanguage) {
            possibleLangKeys.push($preferredLanguage);
          }
          if ($uses) {
            possibleLangKeys.push($uses);
          }
          if ($fallbackLanguage && $fallbackLanguage.length) {
            possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
          }
          for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
            var possibleLangKey = possibleLangKeys[j];
            if ($translationTable[possibleLangKey]) {
              if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
                result = determineTranslationInstant(translationId, interpolateParams, interpolationId);
              }
            }
            if (typeof result !== 'undefined') {
              break;
            }
          }
          if (!result && result !== '') {
            result = translationId;
            if ($missingTranslationHandlerFactory && !pendingLoader) {
              $injector.get($missingTranslationHandlerFactory)(translationId, $uses);
            }
          }
          return result;
        };
        if ($loaderFactory) {
          if (angular.equals($translationTable, {})) {
            $translate.use($translate.use());
          }
          if ($fallbackLanguage && $fallbackLanguage.length) {
            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
              langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
            }
          }
        }
        return $translate;
      }
    ];
  }
]);
angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', [
  '$interpolate',
  function ($interpolate) {
    var $translateInterpolator = {}, $locale, $identifier = 'default', $sanitizeValueStrategy = null, sanitizeValueStrategies = {
        escaped: function (params) {
          var result = {};
          for (var key in params) {
            if (params.hasOwnProperty(key)) {
              result[key] = angular.element('<div></div>').text(params[key]).html();
            }
          }
          return result;
        }
      };
    var sanitizeParams = function (params) {
      var result;
      if (angular.isFunction(sanitizeValueStrategies[$sanitizeValueStrategy])) {
        result = sanitizeValueStrategies[$sanitizeValueStrategy](params);
      } else {
        result = params;
      }
      return result;
    };
    $translateInterpolator.setLocale = function (locale) {
      $locale = locale;
    };
    $translateInterpolator.getInterpolationIdentifier = function () {
      return $identifier;
    };
    $translateInterpolator.useSanitizeValueStrategy = function (value) {
      $sanitizeValueStrategy = value;
      return this;
    };
    $translateInterpolator.interpolate = function (string, interpolateParams) {
      if ($sanitizeValueStrategy) {
        interpolateParams = sanitizeParams(interpolateParams);
      }
      return $interpolate(string)(interpolateParams || {});
    };
    return $translateInterpolator;
  }
]);
angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');
angular.module('pascalprecht.translate').directive('translate', [
  '$translate',
  '$q',
  '$interpolate',
  '$compile',
  '$parse',
  '$rootScope',
  function ($translate, $q, $interpolate, $compile, $parse, $rootScope) {
    return {
      restrict: 'AE',
      scope: true,
      compile: function (tElement, tAttr) {
        var translateValuesExist = tAttr.translateValues ? tAttr.translateValues : undefined;
        var translateInterpolation = tAttr.translateInterpolation ? tAttr.translateInterpolation : undefined;
        var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);
        return function linkFn(scope, iElement, iAttr) {
          scope.interpolateParams = {};
          iAttr.$observe('translate', function (translationId) {
            if (angular.equals(translationId, '') || !angular.isDefined(translationId)) {
              scope.translationId = $interpolate(iElement.text().replace(/^\s+|\s+$/g, ''))(scope.$parent);
            } else {
              scope.translationId = translationId;
            }
          });
          iAttr.$observe('translateDefault', function (value) {
            scope.defaultText = value;
          });
          if (translateValuesExist) {
            iAttr.$observe('translateValues', function (interpolateParams) {
              if (interpolateParams) {
                scope.$parent.$watch(function () {
                  angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
                });
              }
            });
          }
          if (translateValueExist) {
            var fn = function (attrName) {
              iAttr.$observe(attrName, function (value) {
                scope.interpolateParams[angular.lowercase(attrName.substr(14, 1)) + attrName.substr(15)] = value;
              });
            };
            for (var attr in iAttr) {
              if (iAttr.hasOwnProperty(attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
                fn(attr);
              }
            }
          }
          var applyElementContent = function (value, scope, successful) {
            if (!successful && typeof scope.defaultText !== 'undefined') {
              value = scope.defaultText;
            }
            iElement.html(value);
            var globallyEnabled = $translate.isPostCompilingEnabled();
            var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
            var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
            if (globallyEnabled && !locallyDefined || locallyEnabled) {
              $compile(iElement.contents())(scope);
            }
          };
          var updateTranslationFn = function () {
              if (!translateValuesExist && !translateValueExist) {
                return function () {
                  var unwatch = scope.$watch('translationId', function (value) {
                      if (scope.translationId && value) {
                        $translate(value, {}, translateInterpolation).then(function (translation) {
                          applyElementContent(translation, scope, true);
                          unwatch();
                        }, function (translationId) {
                          applyElementContent(translationId, scope, false);
                          unwatch();
                        });
                      }
                    }, true);
                };
              } else {
                return function () {
                  var updateTranslations = function () {
                    if (scope.translationId && scope.interpolateParams) {
                      $translate(scope.translationId, scope.interpolateParams, translateInterpolation).then(function (translation) {
                        applyElementContent(translation, scope, true);
                      }, function (translationId) {
                        applyElementContent(translationId, scope, false);
                      });
                    }
                  };
                  scope.$watch('interpolateParams', updateTranslations, true);
                  scope.$watch('translationId', updateTranslations);
                };
              }
            }();
          var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslationFn);
          updateTranslationFn();
          scope.$on('$destroy', unbind);
        };
      }
    };
  }
]);
angular.module('pascalprecht.translate').directive('translateCloak', [
  '$rootScope',
  '$translate',
  function ($rootScope, $translate) {
    return {
      compile: function (tElement) {
        $rootScope.$on('$translateLoadingSuccess', function () {
          tElement.removeClass($translate.cloakClassName());
        });
        tElement.addClass($translate.cloakClassName());
      }
    };
  }
]);
angular.module('pascalprecht.translate').filter('translate', [
  '$parse',
  '$translate',
  function ($parse, $translate) {
    return function (translationId, interpolateParams, interpolation) {
      if (!angular.isObject(interpolateParams)) {
        interpolateParams = $parse(interpolateParams)(this);
      }
      return $translate.instant(translationId, interpolateParams, interpolation);
    };
  }
]);
angular.module('pascalprecht.translate').factory('$translateStaticFilesLoader', [
  '$q',
  '$http',
  function ($q, $http) {
    return function (options) {
      if (!options || (!angular.isString(options.prefix) || !angular.isString(options.suffix))) {
        throw new Error('Couldn\'t load static files, no prefix or suffix specified!');
      }
      var deferred = $q.defer();
      $http({
        url: [
          options.prefix,
          options.key,
          options.suffix
        ].join(''),
        method: 'GET',
        params: ''
      }).success(function (data) {
        deferred.resolve(data);
      }).error(function (data) {
        deferred.reject(options.key);
      });
      return deferred.promise;
    };
  }
]);
angular.module('pascalprecht.translate').factory('$translateCookieStorage', [
  '$cookieStore',
  function ($cookieStore) {
    var $translateCookieStorage = {
        get: function (name) {
          return $cookieStore.get(name);
        },
        set: function (name, value) {
          $cookieStore.put(name, value);
        }
      };
    return $translateCookieStorage;
  }
]);
angular.module('pascalprecht.translate').factory('$translateLocalStorage', [
  '$window',
  '$translateCookieStorage',
  function ($window, $translateCookieStorage) {
    // Setup adapter
    var localStorageAdapter = function () {
        var langKey;
        return {
          get: function (name) {
            if (!langKey) {
              langKey = $window.localStorage.getItem(name);
            }
            return langKey;
          },
          set: function (name, value) {
            langKey = value;
            $window.localStorage.setItem(name, value);
          }
        };
      }();
    var hasLocalStorageSupport = 'localStorage' in $window && $window.localStorage !== null;
    if (hasLocalStorageSupport) {
      var testKey = 'pascalprecht.translate.storageTest';
      try {
        $window.localStorage.setItem(testKey, 'foo');
        $window.localStorage.removeItem(testKey);
      } catch (e) {
        hasLocalStorageSupport = false;
      }
    }
    var $translateLocalStorage = hasLocalStorageSupport ? localStorageAdapter : $translateCookieStorage;
    return $translateLocalStorage;
  }
]);
/*! 
 * angular-loading-bar v0.6.0
 * https://chieffancypants.github.io/angular-loading-bar
 * Copyright (c) 2014 Wes Cruver
 * License: MIT
 */
/*
 * angular-loading-bar
 *
 * intercepts XHR requests and creates a loading bar.
 * Based on the excellent nprogress work by rstacruz (more info in readme)
 *
 * (c) 2013 Wes Cruver
 * License: MIT
 */
(function () {
  'use strict';
  // Alias the loading bar for various backwards compatibilities since the project has matured:
  angular.module('angular-loading-bar', ['cfp.loadingBarInterceptor']);
  angular.module('chieffancypants.loadingBar', ['cfp.loadingBarInterceptor']);
  /**
 * loadingBarInterceptor service
 *
 * Registers itself as an Angular interceptor and listens for XHR requests.
 */
  angular.module('cfp.loadingBarInterceptor', ['cfp.loadingBar']).config([
    '$httpProvider',
    function ($httpProvider) {
      var interceptor = [
          '$q',
          '$cacheFactory',
          '$timeout',
          '$rootScope',
          'cfpLoadingBar',
          function ($q, $cacheFactory, $timeout, $rootScope, cfpLoadingBar) {
            /**
       * The total number of requests made
       */
            var reqsTotal = 0;
            /**
       * The number of requests completed (either successfully or not)
       */
            var reqsCompleted = 0;
            /**
       * The amount of time spent fetching before showing the loading bar
       */
            var latencyThreshold = cfpLoadingBar.latencyThreshold;
            /**
       * $timeout handle for latencyThreshold
       */
            var startTimeout;
            /**
       * calls cfpLoadingBar.complete() which removes the
       * loading bar from the DOM.
       */
            function setComplete() {
              $timeout.cancel(startTimeout);
              cfpLoadingBar.complete();
              reqsCompleted = 0;
              reqsTotal = 0;
            }
            /**
       * Determine if the response has already been cached
       * @param  {Object}  config the config option from the request
       * @return {Boolean} retrns true if cached, otherwise false
       */
            function isCached(config) {
              var cache;
              var defaultCache = $cacheFactory.get('$http');
              var defaults = $httpProvider.defaults;
              // Choose the proper cache source. Borrowed from angular: $http service
              if ((config.cache || defaults.cache) && config.cache !== false && (config.method === 'GET' || config.method === 'JSONP')) {
                cache = angular.isObject(config.cache) ? config.cache : angular.isObject(defaults.cache) ? defaults.cache : defaultCache;
              }
              var cached = cache !== undefined ? cache.get(config.url) !== undefined : false;
              if (config.cached !== undefined && cached !== config.cached) {
                return config.cached;
              }
              config.cached = cached;
              return cached;
            }
            return {
              'request': function (config) {
                // Check to make sure this request hasn't already been cached and that
                // the requester didn't explicitly ask us to ignore this request:
                if (!config.ignoreLoadingBar && !isCached(config)) {
                  $rootScope.$broadcast('cfpLoadingBar:loading', { url: config.url });
                  if (reqsTotal === 0) {
                    startTimeout = $timeout(function () {
                      cfpLoadingBar.start();
                    }, latencyThreshold);
                  }
                  reqsTotal++;
                  cfpLoadingBar.set(reqsCompleted / reqsTotal);
                }
                return config;
              },
              'response': function (response) {
                if (!response.config.ignoreLoadingBar && !isCached(response.config)) {
                  reqsCompleted++;
                  $rootScope.$broadcast('cfpLoadingBar:loaded', { url: response.config.url });
                  if (reqsCompleted >= reqsTotal) {
                    setComplete();
                  } else {
                    cfpLoadingBar.set(reqsCompleted / reqsTotal);
                  }
                }
                return response;
              },
              'responseError': function (rejection) {
                if (!rejection.config.ignoreLoadingBar && !isCached(rejection.config)) {
                  reqsCompleted++;
                  $rootScope.$broadcast('cfpLoadingBar:loaded', { url: rejection.config.url });
                  if (reqsCompleted >= reqsTotal) {
                    setComplete();
                  } else {
                    cfpLoadingBar.set(reqsCompleted / reqsTotal);
                  }
                }
                return $q.reject(rejection);
              }
            };
          }
        ];
      $httpProvider.interceptors.push(interceptor);
    }
  ]);
  /**
 * Loading Bar
 *
 * This service handles adding and removing the actual element in the DOM.
 * Generally, best practices for DOM manipulation is to take place in a
 * directive, but because the element itself is injected in the DOM only upon
 * XHR requests, and it's likely needed on every view, the best option is to
 * use a service.
 */
  angular.module('cfp.loadingBar', []).provider('cfpLoadingBar', function () {
    this.includeSpinner = true;
    this.includeBar = true;
    this.latencyThreshold = 100;
    this.startSize = 0.02;
    this.parentSelector = 'body';
    this.spinnerTemplate = '<div id="loading-bar-spinner"><div class="spinner-icon"></div></div>';
    this.loadingBarTemplate = '<div id="loading-bar"><div class="bar"><div class="peg"></div></div></div>';
    this.$get = [
      '$injector',
      '$document',
      '$timeout',
      '$rootScope',
      function ($injector, $document, $timeout, $rootScope) {
        var $animate;
        var $parentSelector = this.parentSelector, loadingBarContainer = angular.element(this.loadingBarTemplate), loadingBar = loadingBarContainer.find('div').eq(0), spinner = angular.element(this.spinnerTemplate);
        var incTimeout, completeTimeout, started = false, status = 0;
        var includeSpinner = this.includeSpinner;
        var includeBar = this.includeBar;
        var startSize = this.startSize;
        /**
       * Inserts the loading bar element into the dom, and sets it to 2%
       */
        function _start() {
          if (!$animate) {
            $animate = $injector.get('$animate');
          }
          var $parent = $document.find($parentSelector).eq(0);
          $timeout.cancel(completeTimeout);
          // do not continually broadcast the started event:
          if (started) {
            return;
          }
          $rootScope.$broadcast('cfpLoadingBar:started');
          started = true;
          if (includeBar) {
            $animate.enter(loadingBarContainer, $parent);
          }
          if (includeSpinner) {
            $animate.enter(spinner, $parent);
          }
          _set(startSize);
        }
        /**
       * Set the loading bar's width to a certain percent.
       *
       * @param n any value between 0 and 1
       */
        function _set(n) {
          if (!started) {
            return;
          }
          var pct = n * 100 + '%';
          loadingBar.css('width', pct);
          status = n;
          // increment loadingbar to give the illusion that there is always
          // progress but make sure to cancel the previous timeouts so we don't
          // have multiple incs running at the same time.
          $timeout.cancel(incTimeout);
          incTimeout = $timeout(function () {
            _inc();
          }, 250);
        }
        /**
       * Increments the loading bar by a random amount
       * but slows down as it progresses
       */
        function _inc() {
          if (_status() >= 1) {
            return;
          }
          var rnd = 0;
          // TODO: do this mathmatically instead of through conditions
          var stat = _status();
          if (stat >= 0 && stat < 0.25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3) / 100;
          } else if (stat >= 0.25 && stat < 0.65) {
            // increment between 0 - 3%
            rnd = Math.random() * 3 / 100;
          } else if (stat >= 0.65 && stat < 0.9) {
            // increment between 0 - 2%
            rnd = Math.random() * 2 / 100;
          } else if (stat >= 0.9 && stat < 0.99) {
            // finally, increment it .5 %
            rnd = 0.005;
          } else {
            // after 99%, don't increment:
            rnd = 0;
          }
          var pct = _status() + rnd;
          _set(pct);
        }
        function _status() {
          return status;
        }
        function _completeAnimation() {
          status = 0;
          started = false;
        }
        function _complete() {
          if (!$animate) {
            $animate = $injector.get('$animate');
          }
          $rootScope.$broadcast('cfpLoadingBar:completed');
          _set(1);
          $timeout.cancel(completeTimeout);
          // Attempt to aggregate any start/complete calls within 500ms:
          completeTimeout = $timeout(function () {
            var promise = $animate.leave(loadingBarContainer, _completeAnimation);
            if (promise && promise.then) {
              promise.then(_completeAnimation);
            }
            $animate.leave(spinner);
          }, 500);
        }
        return {
          start: _start,
          set: _set,
          status: _status,
          inc: _inc,
          complete: _complete,
          includeSpinner: this.includeSpinner,
          latencyThreshold: this.latencyThreshold,
          parentSelector: this.parentSelector,
          startSize: this.startSize
        };
      }
    ];  //
  });  // wtf javascript. srsly
}());
//
/**
 * @license Angular UI Tree v2.1.5
 * (c) 2010-2014. https://github.com/JimLiu/angular-ui-tree
 * License: MIT
 */
(function () {
  'use strict';
  angular.module('ui.tree', []).constant('treeConfig', {
    treeClass: 'angular-ui-tree',
    emptyTreeClass: 'angular-ui-tree-empty',
    hiddenClass: 'angular-ui-tree-hidden',
    nodesClass: 'angular-ui-tree-nodes',
    nodeClass: 'angular-ui-tree-node',
    handleClass: 'angular-ui-tree-handle',
    placeHolderClass: 'angular-ui-tree-placeholder',
    dragClass: 'angular-ui-tree-drag',
    dragThreshold: 3,
    levelThreshold: 30
  });
}());
(function () {
  'use strict';
  angular.module('ui.tree').factory('$uiTreeHelper', [
    '$document',
    '$window',
    function ($document, $window) {
      return {
        nodesData: {},
        setNodeAttribute: function (scope, attrName, val) {
          var data = this.nodesData[scope.$modelValue.$$hashKey];
          if (!data) {
            data = {};
            this.nodesData[scope.$modelValue.$$hashKey] = data;
          }
          data[attrName] = val;
        },
        getNodeAttribute: function (scope, attrName) {
          var data = this.nodesData[scope.$modelValue.$$hashKey];
          if (data) {
            return data[attrName];
          }
          return null;
        },
        nodrag: function (targetElm) {
          return typeof targetElm.attr('data-nodrag') != 'undefined';
        },
        eventObj: function (e) {
          var obj = e;
          if (e.targetTouches !== undefined) {
            obj = e.targetTouches.item(0);
          } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {
            obj = e.originalEvent.targetTouches.item(0);
          }
          return obj;
        },
        dragInfo: function (node) {
          return {
            source: node,
            sourceInfo: {
              nodeScope: node,
              index: node.index(),
              nodesScope: node.$parentNodesScope
            },
            index: node.index(),
            siblings: node.siblings().slice(0),
            parent: node.$parentNodesScope,
            moveTo: function (parent, siblings, index) {
              // Move the node to a new position
              this.parent = parent;
              this.siblings = siblings.slice(0);
              var i = this.siblings.indexOf(this.source);
              // If source node is in the target nodes
              if (i > -1) {
                this.siblings.splice(i, 1);
                if (this.source.index() < index) {
                  index--;
                }
              }
              this.siblings.splice(index, 0, this.source);
              this.index = index;
            },
            parentNode: function () {
              return this.parent.$nodeScope;
            },
            prev: function () {
              if (this.index > 0) {
                return this.siblings[this.index - 1];
              }
              return null;
            },
            next: function () {
              if (this.index < this.siblings.length - 1) {
                return this.siblings[this.index + 1];
              }
              return null;
            },
            isDirty: function () {
              return this.source.$parentNodesScope != this.parent || this.source.index() != this.index;
            },
            eventArgs: function (elements, pos) {
              return {
                source: this.sourceInfo,
                dest: {
                  index: this.index,
                  nodesScope: this.parent
                },
                elements: elements,
                pos: pos
              };
            },
            apply: function () {
              var nodeData = this.source.$modelValue;
              this.source.remove();
              this.parent.insertNode(this.index, nodeData);
            }
          };
        },
        height: function (element) {
          return element.prop('scrollHeight');
        },
        width: function (element) {
          return element.prop('scrollWidth');
        },
        offset: function (element) {
          var boundingClientRect = element[0].getBoundingClientRect();
          return {
            width: element.prop('offsetWidth'),
            height: element.prop('offsetHeight'),
            top: boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),
            left: boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)
          };
        },
        positionStarted: function (e, target) {
          var pos = {};
          pos.offsetX = e.pageX - this.offset(target).left;
          pos.offsetY = e.pageY - this.offset(target).top;
          pos.startX = pos.lastX = e.pageX;
          pos.startY = pos.lastY = e.pageY;
          pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;
          pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;
          return pos;
        },
        positionMoved: function (e, pos, firstMoving) {
          // mouse position last events
          pos.lastX = pos.nowX;
          pos.lastY = pos.nowY;
          // mouse position this events
          pos.nowX = e.pageX;
          pos.nowY = e.pageY;
          // distance mouse moved between events
          pos.distX = pos.nowX - pos.lastX;
          pos.distY = pos.nowY - pos.lastY;
          // direction mouse was moving
          pos.lastDirX = pos.dirX;
          pos.lastDirY = pos.dirY;
          // direction mouse is now moving (on both axis)
          pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;
          pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;
          // axis mouse is now moving on
          var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;
          // do nothing on first move
          if (firstMoving) {
            pos.dirAx = newAx;
            pos.moving = true;
            return;
          }
          // calc distance moved on this axis (and direction)
          if (pos.dirAx !== newAx) {
            pos.distAxX = 0;
            pos.distAxY = 0;
          } else {
            pos.distAxX += Math.abs(pos.distX);
            if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {
              pos.distAxX = 0;
            }
            pos.distAxY += Math.abs(pos.distY);
            if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {
              pos.distAxY = 0;
            }
          }
          pos.dirAx = newAx;
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').controller('TreeController', [
    '$scope',
    '$element',
    '$attrs',
    'treeConfig',
    function ($scope, $element, $attrs, treeConfig) {
      this.scope = $scope;
      $scope.$element = $element;
      $scope.$nodesScope = null;
      // root nodes
      $scope.$type = 'uiTree';
      $scope.$emptyElm = null;
      $scope.$callbacks = null;
      $scope.dragEnabled = true;
      $scope.emptyPlaceHolderEnabled = true;
      $scope.maxDepth = 0;
      $scope.dragDelay = 0;
      // Check if it's a empty tree
      $scope.isEmpty = function () {
        return $scope.$nodesScope && $scope.$nodesScope.$modelValue && $scope.$nodesScope.$modelValue.length === 0;
      };
      // add placeholder to empty tree
      $scope.place = function (placeElm) {
        $scope.$nodesScope.$element.append(placeElm);
        $scope.$emptyElm.remove();
      };
      $scope.resetEmptyElement = function () {
        if ($scope.$nodesScope.$modelValue.length === 0 && $scope.emptyPlaceHolderEnabled) {
          $element.append($scope.$emptyElm);
        } else {
          $scope.$emptyElm.remove();
        }
      };
      var collapseOrExpand = function (scope, collapsed) {
        var nodes = scope.childNodes();
        for (var i = 0; i < nodes.length; i++) {
          collapsed ? nodes[i].collapse() : nodes[i].expand();
          var subScope = nodes[i].$childNodesScope;
          if (subScope) {
            collapseOrExpand(subScope, collapsed);
          }
        }
      };
      $scope.collapseAll = function () {
        collapseOrExpand($scope.$nodesScope, true);
      };
      $scope.expandAll = function () {
        collapseOrExpand($scope.$nodesScope, false);
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').controller('TreeNodesController', [
    '$scope',
    '$element',
    'treeConfig',
    function ($scope, $element, treeConfig) {
      this.scope = $scope;
      $scope.$element = $element;
      $scope.$modelValue = null;
      $scope.$nodeScope = null;
      // the scope of node which the nodes belongs to
      $scope.$treeScope = null;
      $scope.$type = 'uiTreeNodes';
      $scope.$nodesMap = {};
      $scope.nodrop = false;
      $scope.maxDepth = 0;
      $scope.initSubNode = function (subNode) {
        $scope.$nodesMap[subNode.$modelValue.$$hashKey] = subNode;
      };
      $scope.destroySubNode = function (subNode) {
        $scope.$nodesMap[subNode.$modelValue.$$hashKey] = null;
      };
      $scope.accept = function (sourceNode, destIndex) {
        return $scope.$treeScope.$callbacks.accept(sourceNode, $scope, destIndex);
      };
      $scope.beforeDrag = function (sourceNode) {
        return $scope.$treeScope.$callbacks.beforeDrag(sourceNode);
      };
      $scope.isParent = function (node) {
        return node.$parentNodesScope == $scope;
      };
      $scope.hasChild = function () {
        return $scope.$modelValue.length > 0;
      };
      $scope.safeApply = function (fn) {
        var phase = this.$root.$$phase;
        if (phase == '$apply' || phase == '$digest') {
          if (fn && typeof fn === 'function') {
            fn();
          }
        } else {
          this.$apply(fn);
        }
      };
      $scope.removeNode = function (node) {
        var index = $scope.$modelValue.indexOf(node.$modelValue);
        if (index > -1) {
          $scope.safeApply(function () {
            $scope.$modelValue.splice(index, 1)[0];
          });
          return node;
        }
        return null;
      };
      $scope.insertNode = function (index, nodeData) {
        $scope.safeApply(function () {
          $scope.$modelValue.splice(index, 0, nodeData);
        });
      };
      $scope.childNodes = function () {
        var nodes = [];
        if ($scope.$modelValue) {
          for (var i = 0; i < $scope.$modelValue.length; i++) {
            nodes.push($scope.$nodesMap[$scope.$modelValue[i].$$hashKey]);
          }
        }
        return nodes;
      };
      $scope.depth = function () {
        if ($scope.$nodeScope) {
          return $scope.$nodeScope.depth();
        }
        return 0;  // if it has no $nodeScope, it's root
      };
      // check if depth limit has reached
      $scope.outOfDepth = function (sourceNode) {
        var maxDepth = $scope.maxDepth || $scope.$treeScope.maxDepth;
        if (maxDepth > 0) {
          return $scope.depth() + sourceNode.maxSubDepth() + 1 > maxDepth;
        }
        return false;
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').controller('TreeNodeController', [
    '$scope',
    '$element',
    '$attrs',
    'treeConfig',
    function ($scope, $element, $attrs, treeConfig) {
      this.scope = $scope;
      $scope.$element = $element;
      $scope.$modelValue = null;
      // Model value for node;
      $scope.$parentNodeScope = null;
      // uiTreeNode Scope of parent node;
      $scope.$childNodesScope = null;
      // uiTreeNodes Scope of child nodes.
      $scope.$parentNodesScope = null;
      // uiTreeNodes Scope of parent nodes.
      $scope.$treeScope = null;
      // uiTree scope
      $scope.$handleScope = null;
      // it's handle scope
      $scope.$type = 'uiTreeNode';
      $scope.$$apply = false;
      //
      $scope.collapsed = false;
      $scope.init = function (controllersArr) {
        var treeNodesCtrl = controllersArr[0];
        $scope.$treeScope = controllersArr[1] ? controllersArr[1].scope : null;
        // find the scope of it's parent node
        $scope.$parentNodeScope = treeNodesCtrl.scope.$nodeScope;
        // modelValue for current node
        $scope.$modelValue = treeNodesCtrl.scope.$modelValue[$scope.$index];
        $scope.$parentNodesScope = treeNodesCtrl.scope;
        treeNodesCtrl.scope.initSubNode($scope);
        // init sub nodes
        $element.on('$destroy', function () {
          treeNodesCtrl.scope.destroySubNode($scope);  // destroy sub nodes
        });
      };
      $scope.index = function () {
        return $scope.$parentNodesScope.$modelValue.indexOf($scope.$modelValue);
      };
      $scope.dragEnabled = function () {
        return !($scope.$treeScope && !$scope.$treeScope.dragEnabled);
      };
      $scope.isSibling = function (targetNode) {
        return $scope.$parentNodesScope == targetNode.$parentNodesScope;
      };
      $scope.isChild = function (targetNode) {
        var nodes = $scope.childNodes();
        return nodes && nodes.indexOf(targetNode) > -1;
      };
      $scope.prev = function () {
        var index = $scope.index();
        if (index > 0) {
          return $scope.siblings()[index - 1];
        }
        return null;
      };
      $scope.siblings = function () {
        return $scope.$parentNodesScope.childNodes();
      };
      $scope.childNodesCount = function () {
        return $scope.childNodes() ? $scope.childNodes().length : 0;
      };
      $scope.hasChild = function () {
        return $scope.childNodesCount() > 0;
      };
      $scope.childNodes = function () {
        return $scope.$childNodesScope && $scope.$childNodesScope.$modelValue ? $scope.$childNodesScope.childNodes() : null;
      };
      $scope.accept = function (sourceNode, destIndex) {
        return $scope.$childNodesScope && $scope.$childNodesScope.$modelValue && $scope.$childNodesScope.accept(sourceNode, destIndex);
      };
      $scope.removeNode = function () {
        var node = $scope.remove();
        $scope.$callbacks.removed(node);
        return node;
      };
      $scope.remove = function () {
        return $scope.$parentNodesScope.removeNode($scope);
      };
      $scope.toggle = function () {
        $scope.collapsed = !$scope.collapsed;
      };
      $scope.collapse = function () {
        $scope.collapsed = true;
      };
      $scope.expand = function () {
        $scope.collapsed = false;
      };
      $scope.depth = function () {
        var parentNode = $scope.$parentNodeScope;
        if (parentNode) {
          return parentNode.depth() + 1;
        }
        return 1;
      };
      var subDepth = 0;
      var countSubDepth = function (scope) {
        var count = 0;
        var nodes = scope.childNodes();
        for (var i = 0; i < nodes.length; i++) {
          var childNodes = nodes[i].$childNodesScope;
          if (childNodes) {
            count = 1;
            countSubDepth(childNodes);
          }
        }
        subDepth += count;
      };
      $scope.maxSubDepth = function () {
        subDepth = 0;
        if ($scope.$childNodesScope) {
          countSubDepth($scope.$childNodesScope);
        }
        return subDepth;
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').controller('TreeHandleController', [
    '$scope',
    '$element',
    '$attrs',
    'treeConfig',
    function ($scope, $element, $attrs, treeConfig) {
      this.scope = $scope;
      $scope.$element = $element;
      $scope.$nodeScope = null;
      $scope.$type = 'uiTreeHandle';
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').directive('uiTree', [
    'treeConfig',
    '$window',
    function (treeConfig, $window) {
      return {
        restrict: 'A',
        scope: true,
        controller: 'TreeController',
        link: function (scope, element, attrs) {
          var callbacks = {
              accept: null,
              beforeDrag: null
            };
          var config = {};
          angular.extend(config, treeConfig);
          if (config.treeClass) {
            element.addClass(config.treeClass);
          }
          scope.$emptyElm = angular.element($window.document.createElement('div'));
          if (config.emptyTreeClass) {
            scope.$emptyElm.addClass(config.emptyTreeClass);
          }
          scope.$watch('$nodesScope.$modelValue.length', function () {
            if (scope.$nodesScope.$modelValue) {
              scope.resetEmptyElement();
            }
          }, true);
          scope.$watch(attrs.dragEnabled, function (val) {
            if (typeof val == 'boolean') {
              scope.dragEnabled = val;
            }
          });
          scope.$watch(attrs.emptyPlaceHolderEnabled, function (val) {
            if (typeof val == 'boolean') {
              scope.emptyPlaceHolderEnabled = val;
            }
          });
          scope.$watch(attrs.maxDepth, function (val) {
            if (typeof val == 'number') {
              scope.maxDepth = val;
            }
          });
          scope.$watch(attrs.dragDelay, function (val) {
            if (typeof val == 'number') {
              scope.dragDelay = val;
            }
          });
          // check if the dest node can accept the dragging node
          // by default, we check the 'data-nodrop' attribute in `ui-tree-nodes`
          // and the 'max-depth' attribute in `ui-tree` or `ui-tree-nodes`.
          // the method can be overrided
          callbacks.accept = function (sourceNodeScope, destNodesScope, destIndex) {
            if (destNodesScope.nodrop || destNodesScope.outOfDepth(sourceNodeScope)) {
              return false;
            }
            return true;
          };
          callbacks.beforeDrag = function (sourceNodeScope) {
            return true;
          };
          callbacks.removed = function (node) {
          };
          callbacks.dropped = function (event) {
          };
          //
          callbacks.dragStart = function (event) {
          };
          callbacks.dragMove = function (event) {
          };
          callbacks.dragStop = function (event) {
          };
          callbacks.beforeDrop = function (event) {
          };
          scope.$watch(attrs.uiTree, function (newVal, oldVal) {
            angular.forEach(newVal, function (value, key) {
              if (callbacks[key]) {
                if (typeof value === 'function') {
                  callbacks[key] = value;
                }
              }
            });
            scope.$callbacks = callbacks;
          }, true);
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').directive('uiTreeNodes', [
    'treeConfig',
    '$window',
    function (treeConfig) {
      return {
        require: [
          'ngModel',
          '?^uiTreeNode',
          '^uiTree'
        ],
        restrict: 'A',
        scope: true,
        controller: 'TreeNodesController',
        link: function (scope, element, attrs, controllersArr) {
          var config = {};
          angular.extend(config, treeConfig);
          if (config.nodesClass) {
            element.addClass(config.nodesClass);
          }
          var ngModel = controllersArr[0];
          var treeNodeCtrl = controllersArr[1];
          var treeCtrl = controllersArr[2];
          if (treeNodeCtrl) {
            treeNodeCtrl.scope.$childNodesScope = scope;
            scope.$nodeScope = treeNodeCtrl.scope;
          } else {
            // find the root nodes if there is no parent node and have a parent ui-tree
            treeCtrl.scope.$nodesScope = scope;
          }
          scope.$treeScope = treeCtrl.scope;
          if (ngModel) {
            ngModel.$render = function () {
              if (!ngModel.$modelValue || !angular.isArray(ngModel.$modelValue)) {
                scope.$modelValue = [];
              }
              scope.$modelValue = ngModel.$modelValue;
            };
          }
          scope.$watch(attrs.maxDepth, function (val) {
            if (typeof val == 'number') {
              scope.maxDepth = val;
            }
          });
          attrs.$observe('nodrop', function (val) {
            scope.nodrop = typeof val != 'undefined';
          });
          attrs.$observe('horizontal', function (val) {
            scope.horizontal = typeof val != 'undefined';
          });
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').directive('uiTreeNode', [
    'treeConfig',
    '$uiTreeHelper',
    '$window',
    '$document',
    '$timeout',
    function (treeConfig, $uiTreeHelper, $window, $document, $timeout) {
      return {
        require: [
          '^uiTreeNodes',
          '^uiTree'
        ],
        restrict: 'A',
        controller: 'TreeNodeController',
        link: function (scope, element, attrs, controllersArr) {
          var config = {};
          angular.extend(config, treeConfig);
          if (config.nodeClass) {
            element.addClass(config.nodeClass);
          }
          scope.init(controllersArr);
          scope.collapsed = !!$uiTreeHelper.getNodeAttribute(scope, 'collapsed');
          scope.$watch(attrs.collapsed, function (val) {
            if (typeof val == 'boolean') {
              scope.collapsed = val;
            }
          });
          scope.$watch('collapsed', function (val) {
            $uiTreeHelper.setNodeAttribute(scope, 'collapsed', val);
            attrs.$set('collapsed', val);
          });
          var hasTouch = 'ontouchstart' in window;
          // todo startPos is unused
          var startPos, firstMoving, dragInfo, pos;
          var placeElm, hiddenPlaceElm, dragElm;
          var treeScope = null;
          var elements;
          // As a parameter for callbacks
          var dragDelaying = true;
          var dragStarted = false;
          var dragTimer = null;
          var body = document.body, html = document.documentElement, document_height, document_width;
          var dragStart = function (e) {
            if (!hasTouch && (e.button == 2 || e.which == 3)) {
              // disable right click
              return;
            }
            if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) {
              // event has already fired in other scope.
              return;
            }
            // the element which is clicked.
            var eventElm = angular.element(e.target);
            var eventScope = eventElm.scope();
            if (!eventScope || !eventScope.$type) {
              return;
            }
            if (eventScope.$type != 'uiTreeNode' && eventScope.$type != 'uiTreeHandle') {
              // Check if it is a node or a handle
              return;
            }
            if (eventScope.$type == 'uiTreeNode' && eventScope.$handleScope) {
              // If the node has a handle, then it should be clicked by the handle
              return;
            }
            var eventElmTagName = eventElm.prop('tagName').toLowerCase();
            if (eventElmTagName == 'input' || eventElmTagName == 'textarea' || eventElmTagName == 'button' || eventElmTagName == 'select') {
              // if it's a input or button, ignore it
              return;
            }
            // check if it or it's parents has a 'data-nodrag' attribute
            while (eventElm && eventElm[0] && eventElm[0] != element) {
              if ($uiTreeHelper.nodrag(eventElm)) {
                // if the node mark as `nodrag`, DONOT drag it.
                return;
              }
              eventElm = eventElm.parent();
            }
            if (!scope.beforeDrag(scope)) {
              return;
            }
            e.uiTreeDragging = true;
            // stop event bubbling
            if (e.originalEvent) {
              e.originalEvent.uiTreeDragging = true;
            }
            e.preventDefault();
            var eventObj = $uiTreeHelper.eventObj(e);
            firstMoving = true;
            dragInfo = $uiTreeHelper.dragInfo(scope);
            var tagName = scope.$element.prop('tagName');
            if (tagName.toLowerCase() === 'tr') {
              placeElm = angular.element($window.document.createElement(tagName));
              var tdElm = angular.element($window.document.createElement('td')).addClass(config.placeHolderClass);
              placeElm.append(tdElm);
            } else {
              placeElm = angular.element($window.document.createElement(tagName)).addClass(config.placeHolderClass);
            }
            hiddenPlaceElm = angular.element($window.document.createElement(tagName));
            if (config.hiddenClass) {
              hiddenPlaceElm.addClass(config.hiddenClass);
            }
            pos = $uiTreeHelper.positionStarted(eventObj, scope.$element);
            placeElm.css('height', $uiTreeHelper.height(scope.$element) + 'px');
            placeElm.css('width', $uiTreeHelper.width(scope.$element) + 'px');
            dragElm = angular.element($window.document.createElement(scope.$parentNodesScope.$element.prop('tagName'))).addClass(scope.$parentNodesScope.$element.attr('class')).addClass(config.dragClass);
            dragElm.css('width', $uiTreeHelper.width(scope.$element) + 'px');
            dragElm.css('z-index', 9999);
            // Prevents cursor to change rapidly in Opera 12.16 and IE when dragging an element
            var hStyle = (scope.$element[0].querySelector('.angular-ui-tree-handle') || scope.$element[0]).currentStyle;
            if (hStyle) {
              document.body.setAttribute('ui-tree-cursor', $document.find('body').css('cursor') || '');
              $document.find('body').css({ 'cursor': hStyle.cursor + '!important' });
            }
            scope.$element.after(placeElm);
            scope.$element.after(hiddenPlaceElm);
            dragElm.append(scope.$element);
            $document.find('body').append(dragElm);
            dragElm.css({
              'left': eventObj.pageX - pos.offsetX + 'px',
              'top': eventObj.pageY - pos.offsetY + 'px'
            });
            elements = {
              placeholder: placeElm,
              dragging: dragElm
            };
            angular.element($document).bind('touchend', dragEndEvent);
            angular.element($document).bind('touchcancel', dragEndEvent);
            angular.element($document).bind('touchmove', dragMoveEvent);
            angular.element($document).bind('mouseup', dragEndEvent);
            angular.element($document).bind('mousemove', dragMoveEvent);
            angular.element($document).bind('mouseleave', dragCancelEvent);
            document_height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
            document_width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
          };
          var dragMove = function (e) {
            if (!dragStarted) {
              if (!dragDelaying) {
                dragStarted = true;
                scope.$apply(function () {
                  scope.$callbacks.dragStart(dragInfo.eventArgs(elements, pos));
                });
              }
              return;
            }
            var eventObj = $uiTreeHelper.eventObj(e);
            var prev, leftElmPos, topElmPos;
            if (dragElm) {
              e.preventDefault();
              if ($window.getSelection) {
                $window.getSelection().removeAllRanges();
              } else if ($window.document.selection) {
                $window.document.selection.empty();
              }
              leftElmPos = eventObj.pageX - pos.offsetX;
              topElmPos = eventObj.pageY - pos.offsetY;
              //dragElm can't leave the screen on the left
              if (leftElmPos < 0) {
                leftElmPos = 0;
              }
              //dragElm can't leave the screen on the top
              if (topElmPos < 0) {
                topElmPos = 0;
              }
              //dragElm can't leave the screen on the bottom
              if (topElmPos + 10 > document_height) {
                topElmPos = document_height - 10;
              }
              //dragElm can't leave the screen on the right
              if (leftElmPos + 10 > document_width) {
                leftElmPos = document_width - 10;
              }
              dragElm.css({
                'left': leftElmPos + 'px',
                'top': topElmPos + 'px'
              });
              var top_scroll = window.pageYOffset || $window.document.documentElement.scrollTop;
              var bottom_scroll = top_scroll + (window.innerHeight || $window.document.clientHeight || $window.document.clientHeight);
              // to scroll down if cursor y-position is greater than the bottom position the vertical scroll
              if (bottom_scroll < eventObj.pageY && bottom_scroll <= document_height) {
                window.scrollBy(0, 10);
              }
              // to scroll top if cursor y-position is less than the top position the vertical scroll
              if (top_scroll > eventObj.pageY) {
                window.scrollBy(0, -10);
              }
              $uiTreeHelper.positionMoved(e, pos, firstMoving);
              if (firstMoving) {
                firstMoving = false;
                return;
              }
              // move horizontal
              if (pos.dirAx && pos.distAxX >= config.levelThreshold) {
                pos.distAxX = 0;
                // increase horizontal level if previous sibling exists and is not collapsed
                if (pos.distX > 0) {
                  prev = dragInfo.prev();
                  if (prev && !prev.collapsed && prev.accept(scope, prev.childNodesCount())) {
                    prev.$childNodesScope.$element.append(placeElm);
                    dragInfo.moveTo(prev.$childNodesScope, prev.childNodes(), prev.childNodesCount());
                  }
                }
                // decrease horizontal level
                if (pos.distX < 0) {
                  // we can't decrease a level if an item preceeds the current one
                  var next = dragInfo.next();
                  if (!next) {
                    var target = dragInfo.parentNode();
                    // As a sibling of it's parent node
                    if (target && target.$parentNodesScope.accept(scope, target.index() + 1)) {
                      target.$element.after(placeElm);
                      dragInfo.moveTo(target.$parentNodesScope, target.siblings(), target.index() + 1);
                    }
                  }
                }
              }
              // check if add it as a child node first
              // todo decrease is unused
              var decrease = $uiTreeHelper.offset(dragElm).left - $uiTreeHelper.offset(placeElm).left >= config.threshold;
              var targetX = eventObj.pageX - $window.document.body.scrollLeft;
              var targetY = eventObj.pageY - (window.pageYOffset || $window.document.documentElement.scrollTop);
              // Select the drag target. Because IE does not support CSS 'pointer-events: none', it will always
              // pick the drag element itself as the target. To prevent this, we hide the drag element while
              // selecting the target.
              var displayElm;
              if (angular.isFunction(dragElm.hide)) {
                dragElm.hide();
              } else {
                displayElm = dragElm[0].style.display;
                dragElm[0].style.display = 'none';
              }
              // when using elementFromPoint() inside an iframe, you have to call
              // elementFromPoint() twice to make sure IE8 returns the correct value
              $window.document.elementFromPoint(targetX, targetY);
              var targetElm = angular.element($window.document.elementFromPoint(targetX, targetY));
              if (angular.isFunction(dragElm.show)) {
                dragElm.show();
              } else {
                dragElm[0].style.display = displayElm;
              }
              // move vertical
              if (!pos.dirAx) {
                var targetBefore, targetNode;
                // check it's new position
                targetNode = targetElm.scope();
                var isEmpty = false;
                if (!targetNode) {
                  return;
                }
                if (targetNode.$type == 'uiTree' && targetNode.dragEnabled) {
                  isEmpty = targetNode.isEmpty();  // Check if it's empty tree
                }
                if (targetNode.$type == 'uiTreeHandle') {
                  targetNode = targetNode.$nodeScope;
                }
                if (targetNode.$type != 'uiTreeNode' && !isEmpty) {
                  // Check if it is a uiTreeNode or it's an empty tree
                  return;
                }
                // if placeholder move from empty tree, reset it.
                if (treeScope && placeElm.parent()[0] != treeScope.$element[0]) {
                  treeScope.resetEmptyElement();
                  treeScope = null;
                }
                if (isEmpty) {
                  // it's an empty tree
                  treeScope = targetNode;
                  if (targetNode.$nodesScope.accept(scope, 0)) {
                    targetNode.place(placeElm);
                    dragInfo.moveTo(targetNode.$nodesScope, targetNode.$nodesScope.childNodes(), 0);
                  }
                } else if (targetNode.dragEnabled()) {
                  // drag enabled
                  targetElm = targetNode.$element;
                  // Get the element of ui-tree-node
                  var targetOffset = $uiTreeHelper.offset(targetElm);
                  targetBefore = targetNode.horizontal ? eventObj.pageX < targetOffset.left + $uiTreeHelper.width(targetElm) / 2 : eventObj.pageY < targetOffset.top + $uiTreeHelper.height(targetElm) / 2;
                  if (targetNode.$parentNodesScope.accept(scope, targetNode.index())) {
                    if (targetBefore) {
                      targetElm[0].parentNode.insertBefore(placeElm[0], targetElm[0]);
                      dragInfo.moveTo(targetNode.$parentNodesScope, targetNode.siblings(), targetNode.index());
                    } else {
                      targetElm.after(placeElm);
                      dragInfo.moveTo(targetNode.$parentNodesScope, targetNode.siblings(), targetNode.index() + 1);
                    }
                  } else if (!targetBefore && targetNode.accept(scope, targetNode.childNodesCount())) {
                    // we have to check if it can add the dragging node as a child
                    targetNode.$childNodesScope.$element.append(placeElm);
                    dragInfo.moveTo(targetNode.$childNodesScope, targetNode.childNodes(), targetNode.childNodesCount());
                  }
                }
              }
              scope.$apply(function () {
                scope.$callbacks.dragMove(dragInfo.eventArgs(elements, pos));
              });
            }
          };
          var dragEnd = function (e) {
            e.preventDefault();
            if (dragElm) {
              scope.$treeScope.$apply(function () {
                scope.$callbacks.beforeDrop(dragInfo.eventArgs(elements, pos));
              });
              // roll back elements changed
              hiddenPlaceElm.replaceWith(scope.$element);
              placeElm.remove();
              dragElm.remove();
              dragElm = null;
              if (scope.$$apply) {
                dragInfo.apply();
                scope.$treeScope.$apply(function () {
                  scope.$callbacks.dropped(dragInfo.eventArgs(elements, pos));
                });
              } else {
                bindDrag();
              }
              scope.$treeScope.$apply(function () {
                scope.$callbacks.dragStop(dragInfo.eventArgs(elements, pos));
              });
              scope.$$apply = false;
              dragInfo = null;
            }
            // Restore cursor in Opera 12.16 and IE
            var oldCur = document.body.getAttribute('ui-tree-cursor');
            if (oldCur !== null) {
              $document.find('body').css({ 'cursor': oldCur });
              document.body.removeAttribute('ui-tree-cursor');
            }
            angular.element($document).unbind('touchend', dragEndEvent);
            // Mobile
            angular.element($document).unbind('touchcancel', dragEndEvent);
            // Mobile
            angular.element($document).unbind('touchmove', dragMoveEvent);
            // Mobile
            angular.element($document).unbind('mouseup', dragEndEvent);
            angular.element($document).unbind('mousemove', dragMoveEvent);
            angular.element($window.document.body).unbind('mouseleave', dragCancelEvent);
          };
          var dragStartEvent = function (e) {
            if (scope.dragEnabled()) {
              dragStart(e);
            }
          };
          var dragMoveEvent = function (e) {
            dragMove(e);
          };
          var dragEndEvent = function (e) {
            scope.$$apply = true;
            dragEnd(e);
          };
          var dragCancelEvent = function (e) {
            dragEnd(e);
          };
          var bindDrag = function () {
            element.bind('touchstart mousedown', function (e) {
              dragDelaying = true;
              dragStarted = false;
              dragStartEvent(e);
              dragTimer = $timeout(function () {
                dragDelaying = false;
              }, scope.dragDelay);
            });
            element.bind('touchend touchcancel mouseup', function () {
              $timeout.cancel(dragTimer);
            });
          };
          bindDrag();
          angular.element($window.document.body).bind('keydown', function (e) {
            if (e.keyCode == 27) {
              scope.$$apply = false;
              dragEnd(e);
            }
          });
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.tree').directive('uiTreeHandle', [
    'treeConfig',
    '$window',
    function (treeConfig) {
      return {
        require: '^uiTreeNode',
        restrict: 'A',
        scope: true,
        controller: 'TreeHandleController',
        link: function (scope, element, attrs, treeNodeCtrl) {
          var config = {};
          angular.extend(config, treeConfig);
          if (config.handleClass) {
            element.addClass(config.handleClass);
          }
          // connect with the tree node.
          if (scope != treeNodeCtrl.scope) {
            scope.$nodeScope = treeNodeCtrl.scope;
            treeNodeCtrl.scope.$handleScope = scope;
          }
        }
      };
    }
  ]);
}());
/**
 * An Angular module that gives you access to the browsers local storage
 * @version v0.1.3 - 2014-10-14
 * @link https://github.com/grevory/angular-local-storage
 * @author grevory <greg@gregpike.ca>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
(function (window, angular, undefined) {
  /*jshint globalstrict:true*/
  'use strict';
  var isDefined = angular.isDefined, isUndefined = angular.isUndefined, isNumber = angular.isNumber, isObject = angular.isObject, isArray = angular.isArray, extend = angular.extend, toJson = angular.toJson, fromJson = angular.fromJson;
  // Test if string is only contains numbers
  // e.g '1' => true, "'1'" => true
  function isStringNumber(num) {
    return /^-?\d+\.?\d*$/.test(num.replace(/["']/g, ''));
  }
  var angularLocalStorage = angular.module('LocalStorageModule', []);
  angularLocalStorage.provider('localStorageService', function () {
    // You should set a prefix to avoid overwriting any local storage variables from the rest of your app
    // e.g. localStorageServiceProvider.setPrefix('youAppName');
    // With provider you can use config as this:
    // myApp.config(function (localStorageServiceProvider) {
    //    localStorageServiceProvider.prefix = 'yourAppName';
    // });
    this.prefix = 'ls';
    // You could change web storage type localstorage or sessionStorage
    this.storageType = 'localStorage';
    // Cookie options (usually in case of fallback)
    // expiry = Number of days before cookies expire // 0 = Does not expire
    // path = The web path the cookie represents
    this.cookie = {
      expiry: 30,
      path: '/'
    };
    // Send signals for each of the following actions?
    this.notify = {
      setItem: true,
      removeItem: false
    };
    // Setter for the prefix
    this.setPrefix = function (prefix) {
      this.prefix = prefix;
    };
    // Setter for the storageType
    this.setStorageType = function (storageType) {
      this.storageType = storageType;
    };
    // Setter for cookie config
    this.setStorageCookie = function (exp, path) {
      this.cookie = {
        expiry: exp,
        path: path
      };
    };
    // Setter for cookie domain
    this.setStorageCookieDomain = function (domain) {
      this.cookie.domain = domain;
    };
    // Setter for notification config
    // itemSet & itemRemove should be booleans
    this.setNotify = function (itemSet, itemRemove) {
      this.notify = {
        setItem: itemSet,
        removeItem: itemRemove
      };
    };
    this.$get = [
      '$rootScope',
      '$window',
      '$document',
      '$parse',
      function ($rootScope, $window, $document, $parse) {
        var self = this;
        var prefix = self.prefix;
        var cookie = self.cookie;
        var notify = self.notify;
        var storageType = self.storageType;
        var webStorage;
        // When Angular's $document is not available
        if (!$document) {
          $document = document;
        } else if ($document[0]) {
          $document = $document[0];
        }
        // If there is a prefix set in the config lets use that with an appended period for readability
        if (prefix.substr(-1) !== '.') {
          prefix = !!prefix ? prefix + '.' : '';
        }
        var deriveQualifiedKey = function (key) {
          return prefix + key;
        };
        // Checks the browser to see if local storage is supported
        var browserSupportsLocalStorage = function () {
            try {
              var supported = storageType in $window && $window[storageType] !== null;
              // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
              // is available, but trying to call .setItem throws an exception.
              //
              // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage
              // that exceeded the quota."
              var key = deriveQualifiedKey('__' + Math.round(Math.random() * 10000000));
              if (supported) {
                webStorage = $window[storageType];
                webStorage.setItem(key, '');
                webStorage.removeItem(key);
              }
              return supported;
            } catch (e) {
              storageType = 'cookie';
              $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
              return false;
            }
          }();
        // Directly adds a value to local storage
        // If local storage is not available in the browser use cookies
        // Example use: localStorageService.add('library','angular');
        var addToLocalStorage = function (key, value) {
          // Let's convert undefined values to null to get the value consistent
          if (isUndefined(value)) {
            value = null;
          } else if (isObject(value) || isArray(value) || isNumber(+value || value)) {
            value = toJson(value);
          }
          // If this browser does not support local storage use cookies
          if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
            if (!browserSupportsLocalStorage) {
              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
            }
            if (notify.setItem) {
              $rootScope.$broadcast('LocalStorageModule.notification.setitem', {
                key: key,
                newvalue: value,
                storageType: 'cookie'
              });
            }
            return addToCookies(key, value);
          }
          try {
            if (isObject(value) || isArray(value)) {
              value = toJson(value);
            }
            if (webStorage) {
              webStorage.setItem(deriveQualifiedKey(key), value);
            }
            ;
            if (notify.setItem) {
              $rootScope.$broadcast('LocalStorageModule.notification.setitem', {
                key: key,
                newvalue: value,
                storageType: self.storageType
              });
            }
          } catch (e) {
            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
            return addToCookies(key, value);
          }
          return true;
        };
        // Directly get a value from local storage
        // Example use: localStorageService.get('library'); // returns 'angular'
        var getFromLocalStorage = function (key) {
          if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
            if (!browserSupportsLocalStorage) {
              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
            }
            return getFromCookies(key);
          }
          var item = webStorage ? webStorage.getItem(deriveQualifiedKey(key)) : null;
          // angular.toJson will convert null to 'null', so a proper conversion is needed
          // FIXME not a perfect solution, since a valid 'null' string can't be stored
          if (!item || item === 'null') {
            return null;
          }
          if (item.charAt(0) === '{' || item.charAt(0) === '[' || isStringNumber(item)) {
            return fromJson(item);
          }
          return item;
        };
        // Remove an item from local storage
        // Example use: localStorageService.remove('library'); // removes the key/value pair of library='angular'
        var removeFromLocalStorage = function (key) {
          if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
            if (!browserSupportsLocalStorage) {
              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
            }
            if (notify.removeItem) {
              $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {
                key: key,
                storageType: 'cookie'
              });
            }
            return removeFromCookies(key);
          }
          try {
            webStorage.removeItem(deriveQualifiedKey(key));
            if (notify.removeItem) {
              $rootScope.$broadcast('LocalStorageModule.notification.removeitem', {
                key: key,
                storageType: self.storageType
              });
            }
          } catch (e) {
            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
            return removeFromCookies(key);
          }
          return true;
        };
        // Return array of keys for local storage
        // Example use: var keys = localStorageService.keys()
        var getKeysForLocalStorage = function () {
          if (!browserSupportsLocalStorage) {
            $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
            return false;
          }
          var prefixLength = prefix.length;
          var keys = [];
          for (var key in webStorage) {
            // Only return keys that are for this app
            if (key.substr(0, prefixLength) === prefix) {
              try {
                keys.push(key.substr(prefixLength));
              } catch (e) {
                $rootScope.$broadcast('LocalStorageModule.notification.error', e.Description);
                return [];
              }
            }
          }
          return keys;
        };
        // Remove all data for this app from local storage
        // Also optionally takes a regular expression string and removes the matching key-value pairs
        // Example use: localStorageService.clearAll();
        // Should be used mostly for development purposes
        var clearAllFromLocalStorage = function (regularExpression) {
          regularExpression = regularExpression || '';
          //accounting for the '.' in the prefix when creating a regex
          var tempPrefix = prefix.slice(0, -1);
          var testRegex = new RegExp(tempPrefix + '.' + regularExpression);
          if (!browserSupportsLocalStorage || self.storageType === 'cookie') {
            if (!browserSupportsLocalStorage) {
              $rootScope.$broadcast('LocalStorageModule.notification.warning', 'LOCAL_STORAGE_NOT_SUPPORTED');
            }
            return clearAllFromCookies();
          }
          var prefixLength = prefix.length;
          for (var key in webStorage) {
            // Only remove items that are for this app and match the regular expression
            if (testRegex.test(key)) {
              try {
                removeFromLocalStorage(key.substr(prefixLength));
              } catch (e) {
                $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
                return clearAllFromCookies();
              }
            }
          }
          return true;
        };
        // Checks the browser to see if cookies are supported
        var browserSupportsCookies = function () {
          try {
            return navigator.cookieEnabled || 'cookie' in $document && ($document.cookie.length > 0 || ($document.cookie = 'test').indexOf.call($document.cookie, 'test') > -1);
          } catch (e) {
            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
            return false;
          }
        };
        // Directly adds a value to cookies
        // Typically used as a fallback is local storage is not available in the browser
        // Example use: localStorageService.cookie.add('library','angular');
        var addToCookies = function (key, value) {
          if (isUndefined(value)) {
            return false;
          } else if (isArray(value) || isObject(value)) {
            value = toJson(value);
          }
          if (!browserSupportsCookies()) {
            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');
            return false;
          }
          try {
            var expiry = '', expiryDate = new Date(), cookieDomain = '';
            if (value === null) {
              // Mark that the cookie has expired one day ago
              expiryDate.setTime(expiryDate.getTime() + -1 * 24 * 60 * 60 * 1000);
              expiry = '; expires=' + expiryDate.toGMTString();
              value = '';
            } else if (cookie.expiry !== 0) {
              expiryDate.setTime(expiryDate.getTime() + cookie.expiry * 24 * 60 * 60 * 1000);
              expiry = '; expires=' + expiryDate.toGMTString();
            }
            if (!!key) {
              var cookiePath = '; path=' + cookie.path;
              if (cookie.domain) {
                cookieDomain = '; domain=' + cookie.domain;
              }
              $document.cookie = deriveQualifiedKey(key) + '=' + encodeURIComponent(value) + expiry + cookiePath + cookieDomain;
            }
          } catch (e) {
            $rootScope.$broadcast('LocalStorageModule.notification.error', e.message);
            return false;
          }
          return true;
        };
        // Directly get a value from a cookie
        // Example use: localStorageService.cookie.get('library'); // returns 'angular'
        var getFromCookies = function (key) {
          if (!browserSupportsCookies()) {
            $rootScope.$broadcast('LocalStorageModule.notification.error', 'COOKIES_NOT_SUPPORTED');
            return false;
          }
          var cookies = $document.cookie && $document.cookie.split(';') || [];
          for (var i = 0; i < cookies.length; i++) {
            var thisCookie = cookies[i];
            while (thisCookie.charAt(0) === ' ') {
              thisCookie = thisCookie.substring(1, thisCookie.length);
            }
            if (thisCookie.indexOf(deriveQualifiedKey(key) + '=') === 0) {
              var storedValues = decodeURIComponent(thisCookie.substring(prefix.length + key.length + 1, thisCookie.length));
              try {
                var obj = JSON.parse(storedValues);
                return fromJson(obj);
              } catch (e) {
                return storedValues;
              }
            }
          }
          return null;
        };
        var removeFromCookies = function (key) {
          addToCookies(key, null);
        };
        var clearAllFromCookies = function () {
          var thisCookie = null, thisKey = null;
          var prefixLength = prefix.length;
          var cookies = $document.cookie.split(';');
          for (var i = 0; i < cookies.length; i++) {
            thisCookie = cookies[i];
            while (thisCookie.charAt(0) === ' ') {
              thisCookie = thisCookie.substring(1, thisCookie.length);
            }
            var key = thisCookie.substring(prefixLength, thisCookie.indexOf('='));
            removeFromCookies(key);
          }
        };
        var getStorageType = function () {
          return storageType;
        };
        // Add a listener on scope variable to save its changes to local storage
        // Return a function which when called cancels binding
        var bindToScope = function (scope, key, def, lsKey) {
          lsKey = lsKey || key;
          var value = getFromLocalStorage(lsKey);
          if (value === null && isDefined(def)) {
            value = def;
          } else if (isObject(value) && isObject(def)) {
            value = extend(def, value);
          }
          $parse(key).assign(scope, value);
          return scope.$watch(key, function (newVal) {
            addToLocalStorage(lsKey, newVal);
          }, isObject(scope[key]));
        };
        // Return localStorageService.length
        // ignore keys that not owned
        var lengthOfLocalStorage = function () {
          var count = 0;
          var storage = $window[storageType];
          for (var i = 0; i < storage.length; i++) {
            if (storage.key(i).indexOf(prefix) === 0) {
              count++;
            }
          }
          return count;
        };
        return {
          isSupported: browserSupportsLocalStorage,
          getStorageType: getStorageType,
          set: addToLocalStorage,
          add: addToLocalStorage,
          get: getFromLocalStorage,
          keys: getKeysForLocalStorage,
          remove: removeFromLocalStorage,
          clearAll: clearAllFromLocalStorage,
          bind: bindToScope,
          deriveKey: deriveQualifiedKey,
          length: lengthOfLocalStorage,
          cookie: {
            set: addToCookies,
            add: addToCookies,
            get: getFromCookies,
            remove: removeFromCookies,
            clearAll: clearAllFromCookies
          }
        };
      }
    ];
  });
}(window, window.angular));
/*!
 * Bootstrap v3.3.1 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery');
}
+function ($) {
  var version = $.fn.jquery.split(' ')[0].split('.');
  if (version[0] < 2 && version[1] < 9 || version[0] == 1 && version[1] == 9 && version[2] < 1) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher');
  }
}(jQuery);
/* ========================================================================
 * Bootstrap: transition.js v3.3.1
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================
  function transitionEnd() {
    var el = document.createElement('bootstrap');
    var transEndEventNames = {
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd otransitionend',
        transition: 'transitionend'
      };
    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] };
      }
    }
    return false;
  }
  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false;
    var $el = this;
    $(this).one('bsTransitionEnd', function () {
      called = true;
    });
    var callback = function () {
      if (!called)
        $($el).trigger($.support.transition.end);
    };
    setTimeout(callback, duration);
    return this;
  };
  $(function () {
    $.support.transition = transitionEnd();
    if (!$.support.transition)
      return;
    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this))
          return e.handleObj.handler.apply(this, arguments);
      }
    };
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: alert.js v3.3.1
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // ALERT CLASS DEFINITION
  // ======================
  var dismiss = '[data-dismiss="alert"]';
  var Alert = function (el) {
    $(el).on('click', dismiss, this.close);
  };
  Alert.VERSION = '3.3.1';
  Alert.TRANSITION_DURATION = 150;
  Alert.prototype.close = function (e) {
    var $this = $(this);
    var selector = $this.attr('data-target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');
    }
    var $parent = $(selector);
    if (e)
      e.preventDefault();
    if (!$parent.length) {
      $parent = $this.closest('.alert');
    }
    $parent.trigger(e = $.Event('close.bs.alert'));
    if (e.isDefaultPrevented())
      return;
    $parent.removeClass('in');
    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove();
    }
    $.support.transition && $parent.hasClass('fade') ? $parent.one('bsTransitionEnd', removeElement).emulateTransitionEnd(Alert.TRANSITION_DURATION) : removeElement();
  };
  // ALERT PLUGIN DEFINITION
  // =======================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.alert');
      if (!data)
        $this.data('bs.alert', data = new Alert(this));
      if (typeof option == 'string')
        data[option].call($this);
    });
  }
  var old = $.fn.alert;
  $.fn.alert = Plugin;
  $.fn.alert.Constructor = Alert;
  // ALERT NO CONFLICT
  // =================
  $.fn.alert.noConflict = function () {
    $.fn.alert = old;
    return this;
  };
  // ALERT DATA-API
  // ==============
  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close);
}(jQuery);
/* ========================================================================
 * Bootstrap: button.js v3.3.1
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================
  var Button = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Button.DEFAULTS, options);
    this.isLoading = false;
  };
  Button.VERSION = '3.3.1';
  Button.DEFAULTS = { loadingText: 'loading...' };
  Button.prototype.setState = function (state) {
    var d = 'disabled';
    var $el = this.$element;
    var val = $el.is('input') ? 'val' : 'html';
    var data = $el.data();
    state = state + 'Text';
    if (data.resetText == null)
      $el.data('resetText', $el[val]());
    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state]);
      if (state == 'loadingText') {
        this.isLoading = true;
        $el.addClass(d).attr(d, d);
      } else if (this.isLoading) {
        this.isLoading = false;
        $el.removeClass(d).removeAttr(d);
      }
    }, this), 0);
  };
  Button.prototype.toggle = function () {
    var changed = true;
    var $parent = this.$element.closest('[data-toggle="buttons"]');
    if ($parent.length) {
      var $input = this.$element.find('input');
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active'))
          changed = false;
        else
          $parent.find('.active').removeClass('active');
      }
      if (changed)
        $input.prop('checked', !this.$element.hasClass('active')).trigger('change');
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'));
    }
    if (changed)
      this.$element.toggleClass('active');
  };
  // BUTTON PLUGIN DEFINITION
  // ========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.button');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.button', data = new Button(this, options));
      if (option == 'toggle')
        data.toggle();
      else if (option)
        data.setState(option);
    });
  }
  var old = $.fn.button;
  $.fn.button = Plugin;
  $.fn.button.Constructor = Button;
  // BUTTON NO CONFLICT
  // ==================
  $.fn.button.noConflict = function () {
    $.fn.button = old;
    return this;
  };
  // BUTTON DATA-API
  // ===============
  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target);
    if (!$btn.hasClass('btn'))
      $btn = $btn.closest('.btn');
    Plugin.call($btn, 'toggle');
    e.preventDefault();
  }).on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type));
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: carousel.js v3.3.1
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // CAROUSEL CLASS DEFINITION
  // =========================
  var Carousel = function (element, options) {
    this.$element = $(element);
    this.$indicators = this.$element.find('.carousel-indicators');
    this.options = options;
    this.paused = this.sliding = this.interval = this.$active = this.$items = null;
    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this));
    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element.on('mouseenter.bs.carousel', $.proxy(this.pause, this)).on('mouseleave.bs.carousel', $.proxy(this.cycle, this));
  };
  Carousel.VERSION = '3.3.1';
  Carousel.TRANSITION_DURATION = 600;
  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  };
  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName))
      return;
    switch (e.which) {
    case 37:
      this.prev();
      break;
    case 39:
      this.next();
      break;
    default:
      return;
    }
    e.preventDefault();
  };
  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false);
    this.interval && clearInterval(this.interval);
    this.options.interval && !this.paused && (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
    return this;
  };
  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item');
    return this.$items.index(item || this.$active);
  };
  Carousel.prototype.getItemForDirection = function (direction, active) {
    var delta = direction == 'prev' ? -1 : 1;
    var activeIndex = this.getItemIndex(active);
    var itemIndex = (activeIndex + delta) % this.$items.length;
    return this.$items.eq(itemIndex);
  };
  Carousel.prototype.to = function (pos) {
    var that = this;
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'));
    if (pos > this.$items.length - 1 || pos < 0)
      return;
    if (this.sliding)
      return this.$element.one('slid.bs.carousel', function () {
        that.to(pos);
      });
    // yes, "slid"
    if (activeIndex == pos)
      return this.pause().cycle();
    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos));
  };
  Carousel.prototype.pause = function (e) {
    e || (this.paused = true);
    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end);
      this.cycle(true);
    }
    this.interval = clearInterval(this.interval);
    return this;
  };
  Carousel.prototype.next = function () {
    if (this.sliding)
      return;
    return this.slide('next');
  };
  Carousel.prototype.prev = function () {
    if (this.sliding)
      return;
    return this.slide('prev');
  };
  Carousel.prototype.slide = function (type, next) {
    var $active = this.$element.find('.item.active');
    var $next = next || this.getItemForDirection(type, $active);
    var isCycling = this.interval;
    var direction = type == 'next' ? 'left' : 'right';
    var fallback = type == 'next' ? 'first' : 'last';
    var that = this;
    if (!$next.length) {
      if (!this.options.wrap)
        return;
      $next = this.$element.find('.item')[fallback]();
    }
    if ($next.hasClass('active'))
      return this.sliding = false;
    var relatedTarget = $next[0];
    var slideEvent = $.Event('slide.bs.carousel', {
        relatedTarget: relatedTarget,
        direction: direction
      });
    this.$element.trigger(slideEvent);
    if (slideEvent.isDefaultPrevented())
      return;
    this.sliding = true;
    isCycling && this.pause();
    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active');
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)]);
      $nextIndicator && $nextIndicator.addClass('active');
    }
    var slidEvent = $.Event('slid.bs.carousel', {
        relatedTarget: relatedTarget,
        direction: direction
      });
    // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type);
      $next[0].offsetWidth;
      // force reflow
      $active.addClass(direction);
      $next.addClass(direction);
      $active.one('bsTransitionEnd', function () {
        $next.removeClass([
          type,
          direction
        ].join(' ')).addClass('active');
        $active.removeClass([
          'active',
          direction
        ].join(' '));
        that.sliding = false;
        setTimeout(function () {
          that.$element.trigger(slidEvent);
        }, 0);
      }).emulateTransitionEnd(Carousel.TRANSITION_DURATION);
    } else {
      $active.removeClass('active');
      $next.addClass('active');
      this.sliding = false;
      this.$element.trigger(slidEvent);
    }
    isCycling && this.cycle();
    return this;
  };
  // CAROUSEL PLUGIN DEFINITION
  // ==========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.carousel');
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option);
      var action = typeof option == 'string' ? option : options.slide;
      if (!data)
        $this.data('bs.carousel', data = new Carousel(this, options));
      if (typeof option == 'number')
        data.to(option);
      else if (action)
        data[action]();
      else if (options.interval)
        data.pause().cycle();
    });
  }
  var old = $.fn.carousel;
  $.fn.carousel = Plugin;
  $.fn.carousel.Constructor = Carousel;
  // CAROUSEL NO CONFLICT
  // ====================
  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old;
    return this;
  };
  // CAROUSEL DATA-API
  // =================
  var clickHandler = function (e) {
    var href;
    var $this = $(this);
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''));
    // strip for ie7
    if (!$target.hasClass('carousel'))
      return;
    var options = $.extend({}, $target.data(), $this.data());
    var slideIndex = $this.attr('data-slide-to');
    if (slideIndex)
      options.interval = false;
    Plugin.call($target, options);
    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex);
    }
    e.preventDefault();
  };
  $(document).on('click.bs.carousel.data-api', '[data-slide]', clickHandler).on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler);
  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this);
      Plugin.call($carousel, $carousel.data());
    });
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: collapse.js v3.3.1
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================
  var Collapse = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, Collapse.DEFAULTS, options);
    this.$trigger = $(this.options.trigger).filter('[href="#' + element.id + '"], [data-target="#' + element.id + '"]');
    this.transitioning = null;
    if (this.options.parent) {
      this.$parent = this.getParent();
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger);
    }
    if (this.options.toggle)
      this.toggle();
  };
  Collapse.VERSION = '3.3.1';
  Collapse.TRANSITION_DURATION = 350;
  Collapse.DEFAULTS = {
    toggle: true,
    trigger: '[data-toggle="collapse"]'
  };
  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width');
    return hasWidth ? 'width' : 'height';
  };
  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in'))
      return;
    var activesData;
    var actives = this.$parent && this.$parent.find('> .panel').children('.in, .collapsing');
    if (actives && actives.length) {
      activesData = actives.data('bs.collapse');
      if (activesData && activesData.transitioning)
        return;
    }
    var startEvent = $.Event('show.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented())
      return;
    if (actives && actives.length) {
      Plugin.call(actives, 'hide');
      activesData || actives.data('bs.collapse', null);
    }
    var dimension = this.dimension();
    this.$element.removeClass('collapse').addClass('collapsing')[dimension](0).attr('aria-expanded', true);
    this.$trigger.removeClass('collapsed').attr('aria-expanded', true);
    this.transitioning = 1;
    var complete = function () {
      this.$element.removeClass('collapsing').addClass('collapse in')[dimension]('');
      this.transitioning = 0;
      this.$element.trigger('shown.bs.collapse');
    };
    if (!$.support.transition)
      return complete.call(this);
    var scrollSize = $.camelCase([
        'scroll',
        dimension
      ].join('-'));
    this.$element.one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize]);
  };
  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in'))
      return;
    var startEvent = $.Event('hide.bs.collapse');
    this.$element.trigger(startEvent);
    if (startEvent.isDefaultPrevented())
      return;
    var dimension = this.dimension();
    this.$element[dimension](this.$element[dimension]())[0].offsetHeight;
    this.$element.addClass('collapsing').removeClass('collapse in').attr('aria-expanded', false);
    this.$trigger.addClass('collapsed').attr('aria-expanded', false);
    this.transitioning = 1;
    var complete = function () {
      this.transitioning = 0;
      this.$element.removeClass('collapsing').addClass('collapse').trigger('hidden.bs.collapse');
    };
    if (!$.support.transition)
      return complete.call(this);
    this.$element[dimension](0).one('bsTransitionEnd', $.proxy(complete, this)).emulateTransitionEnd(Collapse.TRANSITION_DURATION);
  };
  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']();
  };
  Collapse.prototype.getParent = function () {
    return $(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each($.proxy(function (i, element) {
      var $element = $(element);
      this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element);
    }, this)).end();
  };
  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in');
    $element.attr('aria-expanded', isOpen);
    $trigger.toggleClass('collapsed', !isOpen).attr('aria-expanded', isOpen);
  };
  function getTargetFromTrigger($trigger) {
    var href;
    var target = $trigger.attr('data-target') || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '');
    // strip for ie7
    return $(target);
  }
  // COLLAPSE PLUGIN DEFINITION
  // ==========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.collapse');
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option);
      if (!data && options.toggle && option == 'show')
        options.toggle = false;
      if (!data)
        $this.data('bs.collapse', data = new Collapse(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.collapse;
  $.fn.collapse = Plugin;
  $.fn.collapse.Constructor = Collapse;
  // COLLAPSE NO CONFLICT
  // ====================
  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old;
    return this;
  };
  // COLLAPSE DATA-API
  // =================
  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this = $(this);
    if (!$this.attr('data-target'))
      e.preventDefault();
    var $target = getTargetFromTrigger($this);
    var data = $target.data('bs.collapse');
    var option = data ? 'toggle' : $.extend({}, $this.data(), { trigger: this });
    Plugin.call($target, option);
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: dropdown.js v3.3.1
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // DROPDOWN CLASS DEFINITION
  // =========================
  var backdrop = '.dropdown-backdrop';
  var toggle = '[data-toggle="dropdown"]';
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle);
  };
  Dropdown.VERSION = '3.3.1';
  Dropdown.prototype.toggle = function (e) {
    var $this = $(this);
    if ($this.is('.disabled, :disabled'))
      return;
    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');
    clearMenus();
    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus);
      }
      var relatedTarget = { relatedTarget: this };
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented())
        return;
      $this.trigger('focus').attr('aria-expanded', 'true');
      $parent.toggleClass('open').trigger('shown.bs.dropdown', relatedTarget);
    }
    return false;
  };
  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName))
      return;
    var $this = $(this);
    e.preventDefault();
    e.stopPropagation();
    if ($this.is('.disabled, :disabled'))
      return;
    var $parent = getParent($this);
    var isActive = $parent.hasClass('open');
    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27)
        $parent.find(toggle).trigger('focus');
      return $this.trigger('click');
    }
    var desc = ' li:not(.divider):visible a';
    var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc);
    if (!$items.length)
      return;
    var index = $items.index(e.target);
    if (e.which == 38 && index > 0)
      index--;
    // up
    if (e.which == 40 && index < $items.length - 1)
      index++;
    // down
    if (!~index)
      index = 0;
    $items.eq(index).trigger('focus');
  };
  function clearMenus(e) {
    if (e && e.which === 3)
      return;
    $(backdrop).remove();
    $(toggle).each(function () {
      var $this = $(this);
      var $parent = getParent($this);
      var relatedTarget = { relatedTarget: this };
      if (!$parent.hasClass('open'))
        return;
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget));
      if (e.isDefaultPrevented())
        return;
      $this.attr('aria-expanded', 'false');
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget);
    });
  }
  function getParent($this) {
    var selector = $this.attr('data-target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '');
    }
    var $parent = selector && $(selector);
    return $parent && $parent.length ? $parent : $this.parent();
  }
  // DROPDOWN PLUGIN DEFINITION
  // ==========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.dropdown');
      if (!data)
        $this.data('bs.dropdown', data = new Dropdown(this));
      if (typeof option == 'string')
        data[option].call($this);
    });
  }
  var old = $.fn.dropdown;
  $.fn.dropdown = Plugin;
  $.fn.dropdown.Constructor = Dropdown;
  // DROPDOWN NO CONFLICT
  // ====================
  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old;
    return this;
  };
  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================
  $(document).on('click.bs.dropdown.data-api', clearMenus).on('click.bs.dropdown.data-api', '.dropdown form', function (e) {
    e.stopPropagation();
  }).on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle).on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '[role="menu"]', Dropdown.prototype.keydown).on('keydown.bs.dropdown.data-api', '[role="listbox"]', Dropdown.prototype.keydown);
}(jQuery);
/* ========================================================================
 * Bootstrap: modal.js v3.3.1
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // MODAL CLASS DEFINITION
  // ======================
  var Modal = function (element, options) {
    this.options = options;
    this.$body = $(document.body);
    this.$element = $(element);
    this.$backdrop = this.isShown = null;
    this.scrollbarWidth = 0;
    if (this.options.remote) {
      this.$element.find('.modal-content').load(this.options.remote, $.proxy(function () {
        this.$element.trigger('loaded.bs.modal');
      }, this));
    }
  };
  Modal.VERSION = '3.3.1';
  Modal.TRANSITION_DURATION = 300;
  Modal.BACKDROP_TRANSITION_DURATION = 150;
  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  };
  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget);
  };
  Modal.prototype.show = function (_relatedTarget) {
    var that = this;
    var e = $.Event('show.bs.modal', { relatedTarget: _relatedTarget });
    this.$element.trigger(e);
    if (this.isShown || e.isDefaultPrevented())
      return;
    this.isShown = true;
    this.checkScrollbar();
    this.setScrollbar();
    this.$body.addClass('modal-open');
    this.escape();
    this.resize();
    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this));
    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade');
      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body);
      }
      that.$element.show().scrollTop(0);
      if (that.options.backdrop)
        that.adjustBackdrop();
      that.adjustDialog();
      if (transition) {
        that.$element[0].offsetWidth;
      }
      that.$element.addClass('in').attr('aria-hidden', false);
      that.enforceFocus();
      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget });
      transition ? that.$element.find('.modal-dialog').one('bsTransitionEnd', function () {
        that.$element.trigger('focus').trigger(e);
      }).emulateTransitionEnd(Modal.TRANSITION_DURATION) : that.$element.trigger('focus').trigger(e);
    });
  };
  Modal.prototype.hide = function (e) {
    if (e)
      e.preventDefault();
    e = $.Event('hide.bs.modal');
    this.$element.trigger(e);
    if (!this.isShown || e.isDefaultPrevented())
      return;
    this.isShown = false;
    this.escape();
    this.resize();
    $(document).off('focusin.bs.modal');
    this.$element.removeClass('in').attr('aria-hidden', true).off('click.dismiss.bs.modal');
    $.support.transition && this.$element.hasClass('fade') ? this.$element.one('bsTransitionEnd', $.proxy(this.hideModal, this)).emulateTransitionEnd(Modal.TRANSITION_DURATION) : this.hideModal();
  };
  Modal.prototype.enforceFocus = function () {
    $(document).off('focusin.bs.modal').on('focusin.bs.modal', $.proxy(function (e) {
      if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
        this.$element.trigger('focus');
      }
    }, this));
  };
  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide();
      }, this));
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal');
    }
  };
  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this));
    } else {
      $(window).off('resize.bs.modal');
    }
  };
  Modal.prototype.hideModal = function () {
    var that = this;
    this.$element.hide();
    this.backdrop(function () {
      that.$body.removeClass('modal-open');
      that.resetAdjustments();
      that.resetScrollbar();
      that.$element.trigger('hidden.bs.modal');
    });
  };
  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove();
    this.$backdrop = null;
  };
  Modal.prototype.backdrop = function (callback) {
    var that = this;
    var animate = this.$element.hasClass('fade') ? 'fade' : '';
    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate;
      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').prependTo(this.$element).on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget)
          return;
        this.options.backdrop == 'static' ? this.$element[0].focus.call(this.$element[0]) : this.hide.call(this);
      }, this));
      if (doAnimate)
        this.$backdrop[0].offsetWidth;
      // force reflow
      this.$backdrop.addClass('in');
      if (!callback)
        return;
      doAnimate ? this.$backdrop.one('bsTransitionEnd', callback).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callback();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in');
      var callbackRemove = function () {
        that.removeBackdrop();
        callback && callback();
      };
      $.support.transition && this.$element.hasClass('fade') ? this.$backdrop.one('bsTransitionEnd', callbackRemove).emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) : callbackRemove();
    } else if (callback) {
      callback();
    }
  };
  // these following methods are used to handle overflowing modals
  Modal.prototype.handleUpdate = function () {
    if (this.options.backdrop)
      this.adjustBackdrop();
    this.adjustDialog();
  };
  Modal.prototype.adjustBackdrop = function () {
    this.$backdrop.css('height', 0).css('height', this.$element[0].scrollHeight);
  };
  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight;
    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    });
  };
  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    });
  };
  Modal.prototype.checkScrollbar = function () {
    this.bodyIsOverflowing = document.body.scrollHeight > document.documentElement.clientHeight;
    this.scrollbarWidth = this.measureScrollbar();
  };
  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt(this.$body.css('padding-right') || 0, 10);
    if (this.bodyIsOverflowing)
      this.$body.css('padding-right', bodyPad + this.scrollbarWidth);
  };
  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', '');
  };
  Modal.prototype.measureScrollbar = function () {
    // thx walsh
    var scrollDiv = document.createElement('div');
    scrollDiv.className = 'modal-scrollbar-measure';
    this.$body.append(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    this.$body[0].removeChild(scrollDiv);
    return scrollbarWidth;
  };
  // MODAL PLUGIN DEFINITION
  // =======================
  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.modal');
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option);
      if (!data)
        $this.data('bs.modal', data = new Modal(this, options));
      if (typeof option == 'string')
        data[option](_relatedTarget);
      else if (options.show)
        data.show(_relatedTarget);
    });
  }
  var old = $.fn.modal;
  $.fn.modal = Plugin;
  $.fn.modal.Constructor = Modal;
  // MODAL NO CONFLICT
  // =================
  $.fn.modal.noConflict = function () {
    $.fn.modal = old;
    return this;
  };
  // MODAL DATA-API
  // ==============
  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this = $(this);
    var href = $this.attr('href');
    var $target = $($this.attr('data-target') || href && href.replace(/.*(?=#[^\s]+$)/, ''));
    // strip for ie7
    var option = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data());
    if ($this.is('a'))
      e.preventDefault();
    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented())
        return;
      // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus');
      });
    });
    Plugin.call($target, option, this);
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: tooltip.js v3.3.1
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================
  var Tooltip = function (element, options) {
    this.type = this.options = this.enabled = this.timeout = this.hoverState = this.$element = null;
    this.init('tooltip', element, options);
  };
  Tooltip.VERSION = '3.3.1';
  Tooltip.TRANSITION_DURATION = 150;
  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  };
  Tooltip.prototype.init = function (type, element, options) {
    this.enabled = true;
    this.type = type;
    this.$element = $(element);
    this.options = this.getOptions(options);
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport);
    var triggers = this.options.trigger.split(' ');
    for (var i = triggers.length; i--;) {
      var trigger = triggers[i];
      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
      } else if (trigger != 'manual') {
        var eventIn = trigger == 'hover' ? 'mouseenter' : 'focusin';
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout';
        this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
      }
    }
    this.options.selector ? this._options = $.extend({}, this.options, {
      trigger: 'manual',
      selector: ''
    }) : this.fixTitle();
  };
  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS;
  };
  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options);
    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      };
    }
    return options;
  };
  Tooltip.prototype.getDelegateOptions = function () {
    var options = {};
    var defaults = this.getDefaults();
    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value)
        options[key] = value;
    });
    return options;
  };
  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);
    if (self && self.$tip && self.$tip.is(':visible')) {
      self.hoverState = 'in';
      return;
    }
    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }
    clearTimeout(self.timeout);
    self.hoverState = 'in';
    if (!self.options.delay || !self.options.delay.show)
      return self.show();
    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in')
        self.show();
    }, self.options.delay.show);
  };
  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ? obj : $(obj.currentTarget).data('bs.' + this.type);
    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions());
      $(obj.currentTarget).data('bs.' + this.type, self);
    }
    clearTimeout(self.timeout);
    self.hoverState = 'out';
    if (!self.options.delay || !self.options.delay.hide)
      return self.hide();
    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out')
        self.hide();
    }, self.options.delay.hide);
  };
  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type);
    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e);
      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (e.isDefaultPrevented() || !inDom)
        return;
      var that = this;
      var $tip = this.tip();
      var tipId = this.getUID(this.type);
      this.setContent();
      $tip.attr('id', tipId);
      this.$element.attr('aria-describedby', tipId);
      if (this.options.animation)
        $tip.addClass('fade');
      var placement = typeof this.options.placement == 'function' ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
      var autoToken = /\s?auto?\s?/i;
      var autoPlace = autoToken.test(placement);
      if (autoPlace)
        placement = placement.replace(autoToken, '') || 'top';
      $tip.detach().css({
        top: 0,
        left: 0,
        display: 'block'
      }).addClass(placement).data('bs.' + this.type, this);
      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
      var pos = this.getPosition();
      var actualWidth = $tip[0].offsetWidth;
      var actualHeight = $tip[0].offsetHeight;
      if (autoPlace) {
        var orgPlacement = placement;
        var $container = this.options.container ? $(this.options.container) : this.$element.parent();
        var containerDim = this.getPosition($container);
        placement = placement == 'bottom' && pos.bottom + actualHeight > containerDim.bottom ? 'top' : placement == 'top' && pos.top - actualHeight < containerDim.top ? 'bottom' : placement == 'right' && pos.right + actualWidth > containerDim.width ? 'left' : placement == 'left' && pos.left - actualWidth < containerDim.left ? 'right' : placement;
        $tip.removeClass(orgPlacement).addClass(placement);
      }
      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);
      this.applyPlacement(calculatedOffset, placement);
      var complete = function () {
        var prevHoverState = that.hoverState;
        that.$element.trigger('shown.bs.' + that.type);
        that.hoverState = null;
        if (prevHoverState == 'out')
          that.leave(that);
      };
      $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    }
  };
  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip = this.tip();
    var width = $tip[0].offsetWidth;
    var height = $tip[0].offsetHeight;
    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10);
    var marginLeft = parseInt($tip.css('margin-left'), 10);
    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))
      marginTop = 0;
    if (isNaN(marginLeft))
      marginLeft = 0;
    offset.top = offset.top + marginTop;
    offset.left = offset.left + marginLeft;
    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        });
      }
    }, offset), 0);
    $tip.addClass('in');
    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth = $tip[0].offsetWidth;
    var actualHeight = $tip[0].offsetHeight;
    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight;
    }
    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);
    if (delta.left)
      offset.left += delta.left;
    else
      offset.top += delta.top;
    var isVertical = /top|bottom/.test(placement);
    var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';
    $tip.offset(offset);
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical);
  };
  Tooltip.prototype.replaceArrow = function (delta, dimension, isHorizontal) {
    this.arrow().css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%').css(isHorizontal ? 'top' : 'left', '');
  };
  Tooltip.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
    $tip.removeClass('fade in top bottom left right');
  };
  Tooltip.prototype.hide = function (callback) {
    var that = this;
    var $tip = this.tip();
    var e = $.Event('hide.bs.' + this.type);
    function complete() {
      if (that.hoverState != 'in')
        $tip.detach();
      that.$element.removeAttr('aria-describedby').trigger('hidden.bs.' + that.type);
      callback && callback();
    }
    this.$element.trigger(e);
    if (e.isDefaultPrevented())
      return;
    $tip.removeClass('in');
    $.support.transition && this.$tip.hasClass('fade') ? $tip.one('bsTransitionEnd', complete).emulateTransitionEnd(Tooltip.TRANSITION_DURATION) : complete();
    this.hoverState = null;
    return this;
  };
  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element;
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
    }
  };
  Tooltip.prototype.hasContent = function () {
    return this.getTitle();
  };
  Tooltip.prototype.getPosition = function ($element) {
    $element = $element || this.$element;
    var el = $element[0];
    var isBody = el.tagName == 'BODY';
    var elRect = el.getBoundingClientRect();
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, {
        width: elRect.right - elRect.left,
        height: elRect.bottom - elRect.top
      });
    }
    var elOffset = isBody ? {
        top: 0,
        left: 0
      } : $element.offset();
    var scroll = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() };
    var outerDims = isBody ? {
        width: $(window).width(),
        height: $(window).height()
      } : null;
    return $.extend({}, elRect, scroll, outerDims, elOffset);
  };
  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? {
      top: pos.top + pos.height,
      left: pos.left + pos.width / 2 - actualWidth / 2
    } : placement == 'top' ? {
      top: pos.top - actualHeight,
      left: pos.left + pos.width / 2 - actualWidth / 2
    } : placement == 'left' ? {
      top: pos.top + pos.height / 2 - actualHeight / 2,
      left: pos.left - actualWidth
    } : {
      top: pos.top + pos.height / 2 - actualHeight / 2,
      left: pos.left + pos.width
    };
  };
  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = {
        top: 0,
        left: 0
      };
    if (!this.$viewport)
      return delta;
    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0;
    var viewportDimensions = this.getPosition(this.$viewport);
    if (/right|left/.test(placement)) {
      var topEdgeOffset = pos.top - viewportPadding - viewportDimensions.scroll;
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight;
      if (topEdgeOffset < viewportDimensions.top) {
        // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset;
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) {
        // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;
      }
    } else {
      var leftEdgeOffset = pos.left - viewportPadding;
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth;
      if (leftEdgeOffset < viewportDimensions.left) {
        // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset;
      } else if (rightEdgeOffset > viewportDimensions.width) {
        // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;
      }
    }
    return delta;
  };
  Tooltip.prototype.getTitle = function () {
    var title;
    var $e = this.$element;
    var o = this.options;
    title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);
    return title;
  };
  Tooltip.prototype.getUID = function (prefix) {
    do
      prefix += ~~(Math.random() * 1000000);
    while (document.getElementById(prefix));
    return prefix;
  };
  Tooltip.prototype.tip = function () {
    return this.$tip = this.$tip || $(this.options.template);
  };
  Tooltip.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow');
  };
  Tooltip.prototype.enable = function () {
    this.enabled = true;
  };
  Tooltip.prototype.disable = function () {
    this.enabled = false;
  };
  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  };
  Tooltip.prototype.toggle = function (e) {
    var self = this;
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type);
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions());
        $(e.currentTarget).data('bs.' + this.type, self);
      }
    }
    self.tip().hasClass('in') ? self.leave(self) : self.enter(self);
  };
  Tooltip.prototype.destroy = function () {
    var that = this;
    clearTimeout(this.timeout);
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type);
    });
  };
  // TOOLTIP PLUGIN DEFINITION
  // =========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tooltip');
      var options = typeof option == 'object' && option;
      var selector = options && options.selector;
      if (!data && option == 'destroy')
        return;
      if (selector) {
        if (!data)
          $this.data('bs.tooltip', data = {});
        if (!data[selector])
          data[selector] = new Tooltip(this, options);
      } else {
        if (!data)
          $this.data('bs.tooltip', data = new Tooltip(this, options));
      }
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.tooltip;
  $.fn.tooltip = Plugin;
  $.fn.tooltip.Constructor = Tooltip;
  // TOOLTIP NO CONFLICT
  // ===================
  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old;
    return this;
  };
}(jQuery);
/* ========================================================================
 * Bootstrap: popover.js v3.3.1
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================
  var Popover = function (element, options) {
    this.init('popover', element, options);
  };
  if (!$.fn.tooltip)
    throw new Error('Popover requires tooltip.js');
  Popover.VERSION = '3.3.1';
  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  });
  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================
  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype);
  Popover.prototype.constructor = Popover;
  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS;
  };
  Popover.prototype.setContent = function () {
    var $tip = this.tip();
    var title = this.getTitle();
    var content = this.getContent();
    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
    $tip.find('.popover-content').children().detach().end()[this.options.html ? typeof content == 'string' ? 'html' : 'append' : 'text'](content);
    $tip.removeClass('fade top bottom left right in');
    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html())
      $tip.find('.popover-title').hide();
  };
  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  };
  Popover.prototype.getContent = function () {
    var $e = this.$element;
    var o = this.options;
    return $e.attr('data-content') || (typeof o.content == 'function' ? o.content.call($e[0]) : o.content);
  };
  Popover.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find('.arrow');
  };
  Popover.prototype.tip = function () {
    if (!this.$tip)
      this.$tip = $(this.options.template);
    return this.$tip;
  };
  // POPOVER PLUGIN DEFINITION
  // =========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.popover');
      var options = typeof option == 'object' && option;
      var selector = options && options.selector;
      if (!data && option == 'destroy')
        return;
      if (selector) {
        if (!data)
          $this.data('bs.popover', data = {});
        if (!data[selector])
          data[selector] = new Popover(this, options);
      } else {
        if (!data)
          $this.data('bs.popover', data = new Popover(this, options));
      }
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.popover;
  $.fn.popover = Plugin;
  $.fn.popover.Constructor = Popover;
  // POPOVER NO CONFLICT
  // ===================
  $.fn.popover.noConflict = function () {
    $.fn.popover = old;
    return this;
  };
}(jQuery);
/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.1
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // SCROLLSPY CLASS DEFINITION
  // ==========================
  function ScrollSpy(element, options) {
    var process = $.proxy(this.process, this);
    this.$body = $('body');
    this.$scrollElement = $(element).is('body') ? $(window) : $(element);
    this.options = $.extend({}, ScrollSpy.DEFAULTS, options);
    this.selector = (this.options.target || '') + ' .nav li > a';
    this.offsets = [];
    this.targets = [];
    this.activeTarget = null;
    this.scrollHeight = 0;
    this.$scrollElement.on('scroll.bs.scrollspy', process);
    this.refresh();
    this.process();
  }
  ScrollSpy.VERSION = '3.3.1';
  ScrollSpy.DEFAULTS = { offset: 10 };
  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  };
  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = 'offset';
    var offsetBase = 0;
    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position';
      offsetBase = this.$scrollElement.scrollTop();
    }
    this.offsets = [];
    this.targets = [];
    this.scrollHeight = this.getScrollHeight();
    var self = this;
    this.$body.find(this.selector).map(function () {
      var $el = $(this);
      var href = $el.data('target') || $el.attr('href');
      var $href = /^#./.test(href) && $(href);
      return $href && $href.length && $href.is(':visible') && [[
          $href[offsetMethod]().top + offsetBase,
          href
        ]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      self.offsets.push(this[0]);
      self.targets.push(this[1]);
    });
  };
  ScrollSpy.prototype.process = function () {
    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset;
    var scrollHeight = this.getScrollHeight();
    var maxScroll = this.options.offset + scrollHeight - this.$scrollElement.height();
    var offsets = this.offsets;
    var targets = this.targets;
    var activeTarget = this.activeTarget;
    var i;
    if (this.scrollHeight != scrollHeight) {
      this.refresh();
    }
    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i);
    }
    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null;
      return this.clear();
    }
    for (i = offsets.length; i--;) {
      activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
    }
  };
  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target;
    this.clear();
    var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
    var active = $(selector).parents('li').addClass('active');
    if (active.parent('.dropdown-menu').length) {
      active = active.closest('li.dropdown').addClass('active');
    }
    active.trigger('activate.bs.scrollspy');
  };
  ScrollSpy.prototype.clear = function () {
    $(this.selector).parentsUntil(this.options.target, '.active').removeClass('active');
  };
  // SCROLLSPY PLUGIN DEFINITION
  // ===========================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.scrollspy');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.scrollspy', data = new ScrollSpy(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.scrollspy;
  $.fn.scrollspy = Plugin;
  $.fn.scrollspy.Constructor = ScrollSpy;
  // SCROLLSPY NO CONFLICT
  // =====================
  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old;
    return this;
  };
  // SCROLLSPY DATA-API
  // ==================
  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this);
      Plugin.call($spy, $spy.data());
    });
  });
}(jQuery);
/* ========================================================================
 * Bootstrap: tab.js v3.3.1
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // TAB CLASS DEFINITION
  // ====================
  var Tab = function (element) {
    this.element = $(element);
  };
  Tab.VERSION = '3.3.1';
  Tab.TRANSITION_DURATION = 150;
  Tab.prototype.show = function () {
    var $this = this.element;
    var $ul = $this.closest('ul:not(.dropdown-menu)');
    var selector = $this.data('target');
    if (!selector) {
      selector = $this.attr('href');
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '');
    }
    if ($this.parent('li').hasClass('active'))
      return;
    var $previous = $ul.find('.active:last a');
    var hideEvent = $.Event('hide.bs.tab', { relatedTarget: $this[0] });
    var showEvent = $.Event('show.bs.tab', { relatedTarget: $previous[0] });
    $previous.trigger(hideEvent);
    $this.trigger(showEvent);
    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented())
      return;
    var $target = $(selector);
    this.activate($this.closest('li'), $ul);
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      });
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      });
    });
  };
  Tab.prototype.activate = function (element, container, callback) {
    var $active = container.find('> .active');
    var transition = callback && $.support.transition && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length);
    function next() {
      $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', false);
      element.addClass('active').find('[data-toggle="tab"]').attr('aria-expanded', true);
      if (transition) {
        element[0].offsetWidth;
        // reflow for transition
        element.addClass('in');
      } else {
        element.removeClass('fade');
      }
      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active').end().find('[data-toggle="tab"]').attr('aria-expanded', true);
      }
      callback && callback();
    }
    $active.length && transition ? $active.one('bsTransitionEnd', next).emulateTransitionEnd(Tab.TRANSITION_DURATION) : next();
    $active.removeClass('in');
  };
  // TAB PLUGIN DEFINITION
  // =====================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.tab');
      if (!data)
        $this.data('bs.tab', data = new Tab(this));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.tab;
  $.fn.tab = Plugin;
  $.fn.tab.Constructor = Tab;
  // TAB NO CONFLICT
  // ===============
  $.fn.tab.noConflict = function () {
    $.fn.tab = old;
    return this;
  };
  // TAB DATA-API
  // ============
  var clickHandler = function (e) {
    e.preventDefault();
    Plugin.call($(this), 'show');
  };
  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler).on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler);
}(jQuery);
/* ========================================================================
 * Bootstrap: affix.js v3.3.1
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */
+function ($) {
  'use strict';
  // AFFIX CLASS DEFINITION
  // ======================
  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options);
    this.$target = $(this.options.target).on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this)).on('click.bs.affix.data-api', $.proxy(this.checkPositionWithEventLoop, this));
    this.$element = $(element);
    this.affixed = this.unpin = this.pinnedOffset = null;
    this.checkPosition();
  };
  Affix.VERSION = '3.3.1';
  Affix.RESET = 'affix affix-top affix-bottom';
  Affix.DEFAULTS = {
    offset: 0,
    target: window
  };
  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    var targetHeight = this.$target.height();
    if (offsetTop != null && this.affixed == 'top')
      return scrollTop < offsetTop ? 'top' : false;
    if (this.affixed == 'bottom') {
      if (offsetTop != null)
        return scrollTop + this.unpin <= position.top ? false : 'bottom';
      return scrollTop + targetHeight <= scrollHeight - offsetBottom ? false : 'bottom';
    }
    var initializing = this.affixed == null;
    var colliderTop = initializing ? scrollTop : position.top;
    var colliderHeight = initializing ? targetHeight : height;
    if (offsetTop != null && colliderTop <= offsetTop)
      return 'top';
    if (offsetBottom != null && colliderTop + colliderHeight >= scrollHeight - offsetBottom)
      return 'bottom';
    return false;
  };
  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset)
      return this.pinnedOffset;
    this.$element.removeClass(Affix.RESET).addClass('affix');
    var scrollTop = this.$target.scrollTop();
    var position = this.$element.offset();
    return this.pinnedOffset = position.top - scrollTop;
  };
  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1);
  };
  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible'))
      return;
    var height = this.$element.height();
    var offset = this.options.offset;
    var offsetTop = offset.top;
    var offsetBottom = offset.bottom;
    var scrollHeight = $('body').height();
    if (typeof offset != 'object')
      offsetBottom = offsetTop = offset;
    if (typeof offsetTop == 'function')
      offsetTop = offset.top(this.$element);
    if (typeof offsetBottom == 'function')
      offsetBottom = offset.bottom(this.$element);
    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom);
    if (this.affixed != affix) {
      if (this.unpin != null)
        this.$element.css('top', '');
      var affixType = 'affix' + (affix ? '-' + affix : '');
      var e = $.Event(affixType + '.bs.affix');
      this.$element.trigger(e);
      if (e.isDefaultPrevented())
        return;
      this.affixed = affix;
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null;
      this.$element.removeClass(Affix.RESET).addClass(affixType).trigger(affixType.replace('affix', 'affixed') + '.bs.affix');
    }
    if (affix == 'bottom') {
      this.$element.offset({ top: scrollHeight - height - offsetBottom });
    }
  };
  // AFFIX PLUGIN DEFINITION
  // =======================
  function Plugin(option) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('bs.affix');
      var options = typeof option == 'object' && option;
      if (!data)
        $this.data('bs.affix', data = new Affix(this, options));
      if (typeof option == 'string')
        data[option]();
    });
  }
  var old = $.fn.affix;
  $.fn.affix = Plugin;
  $.fn.affix.Constructor = Affix;
  // AFFIX NO CONFLICT
  // =================
  $.fn.affix.noConflict = function () {
    $.fn.affix = old;
    return this;
  };
  // AFFIX DATA-API
  // ==============
  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this);
      var data = $spy.data();
      data.offset = data.offset || {};
      if (data.offsetBottom != null)
        data.offset.bottom = data.offsetBottom;
      if (data.offsetTop != null)
        data.offset.top = data.offsetTop;
      Plugin.call($spy, data);
    });
  });
}(jQuery);
/*
 xtForm
 --------------------------------------------------------------------------
 Creates validators and attaches them to inputs
 Handles client side validation in tooltips
 Allows for custom error message overrides
 */
(function (angular) {
  'use strict';
  function InputValidator(scope, element, attrs, ngModel, errors) {
    var self = this, prop;
    this.errorMessages = errors;
    this.scope = scope;
    this.element = element;
    this.ngModel = ngModel;
    this.attrs = attrs;
    var observe = function (prop) {
      var innerProp = prop;
      attrs.$observe(innerProp, function (val) {
        self.errorMessages[innerProp.substring(3, innerProp.length).toLowerCase()] = val;
      });
    };
    for (prop in attrs) {
      if (attrs.hasOwnProperty(prop) && prop.indexOf('msg') === 0) {
        observe(prop);
      }
    }
    this.ngModel.$parsers.unshift(function (value) {
      return value === '' ? null : value;
    });
    // tried viewListeners, parsers, different watches.. seems this is the best
    scope.$watch(function () {
      return ngModel.$error;
    }, function (valid) {
      if (ngModel.$dirty) {
        self.showErrors();
      } else {
        self.resetValidity();
      }
    }, true);
  }
  InputValidator.prototype.setDirty = function (value) {
    this.ngModel.$dirty = value;
    this.ngModel.$pristine = !value;
    this.element.toggleClass('ng-dirty', value).toggleClass('ng-pristine', !value);
  };
  InputValidator.prototype.showErrors = function (isSubmit) {
    var ngModel = this.ngModel;
    this.setDirty(true);
    if (!ngModel.$valid) {
      // build error summary
      var errors = '', propCount = 0;
      // calculated here as it could be variable
      var bounds = {
          minlength: this.attrs.ngMinlength,
          maxlength: this.attrs.ngMaxlength,
          min: this.attrs.min,
          max: this.attrs.max
        };
      for (var prop in ngModel.$error) {
        var key = prop.toLowerCase();
        if (prop != 'required' && ngModel.$error[prop] === true && this.errorMessages[key]) {
          propCount++;
          var errString = this.errorMessages[key] + '';
          for (var bound in bounds) {
            errString = errString.replace('{{' + bound + '}}', bounds[bound]);
          }
          errors += errString + '<br>';
        }
      }
      if (propCount === 0 && ngModel.$error.required === true) {
        errors += this.errorMessages.required + '<br>';
      }
      if (ngModel.$error.messages !== undefined) {
        errors += ngModel.$error.messages;
      }
      this.element.addClass('xt-error');
      // allow for a different tooltip element
      if (this.attrs.tooltipElement) {
        this.element = angular.element(document.getElementById(this.attrs.tooltipElement));
        this.element.addClass('xt-error-container');
      }
      if (this.tooltipSet === true) {
        this.element.tooltip('destroy');
      }
      // create tooltip
      this.element.tooltip({
        html: true,
        title: errors,
        placement: this.attrs.placement || 'bottom',
        trigger: this.attrs.trigger || 'focus hover',
        container: this.attrs.container || 'body'
      });
      if (this.profile === 'showAll' || !isSubmit) {
        this.element.tooltip('show');
      }
      this.tooltipSet = true;
    } else {
      this.resetValidity();
    }
  };
  InputValidator.prototype.resetValidity = function () {
    var that = this;
    setTimeout(function () {
      // remove tooltip if needed
      if (that.tooltipSet) {
        that.ngModel.$error.messages = undefined;
        that.element.removeClass('xt-error');
        that.element.tooltip('destroy');
        that.tooltipSet = false;
        that.scope.$apply();
      }
    });
  };
  if (!angular.isFunction(angular.element.prototype.tooltip)) {
    throw new Error('xtform requires a jquery tooltip plugin, like bootstrap.js');
  }
  angular.module('xtForm', []).provider('xtFormErrors', function () {
    var _errors = {
        minlength: 'Needs to be at least {{minlength}} characters long',
        maxlength: 'Can be no longer than {{maxlength}} characters long',
        required: 'This field is required',
        number: 'Must be a number',
        min: 'Must be at least {{min}}',
        max: 'Must be no greater than {{max}}',
        email: 'Invalid Email',
        pattern: 'Illegal value'
      };
    this.setErrors = function (errors) {
      angular.extend(_errors, errors);
    };
    this.$get = function () {
      return _errors;
    };
  }).directive('xtForm', [
    '$parse',
    'xtFormErrors',
    function ($parse, xtFormErrors) {
      return {
        require: [
          'form',
          'xtForm'
        ],
        controller: [
          '$scope',
          '$element',
          '$attrs',
          function ($scope, $element, $attrs) {
            // Holds all validators
            this.validators = {
              _validators: {},
              registerValidator: function (name, validator) {
                validator.profile = $attrs.profile || 'default';
                this._validators[name] = validator;
              },
              deregisterValidator: function (name) {
                this._validators[name].ngModel.$valid = true;
                this._validators[name].showErrors();
                delete this._validators[name];
              },
              hasValidator: function (name) {
                return this._validators[name] !== undefined;
              },
              getValidator: function (name) {
                return this._validators[name];
              },
              resetValidity: function () {
                angular.forEach(this._validators, function (validator) {
                  validator.resetValidity(false);
                });
              },
              showAllErrors: function () {
                angular.forEach(this._validators, function (validator) {
                  validator.showErrors(true);
                });
              }
            };
            this.$element = $element;
          }
        ],
        link: function (scope, element, attrs, ctrl) {
          var control = {
              onSubmit: function () {
              }
            }, formCtrl = ctrl[0], xtFormCtrl = ctrl[1];
          function submit() {
            formCtrl.$setDirty();
            if (!formCtrl.$valid) {
              xtFormCtrl.validators.showAllErrors();
              control.onSubmit(false);
              return;
            }
            //reset
            xtFormCtrl.validators.resetValidity();
            control.onSubmit(true);
          }
          function validate() {
            formCtrl.$setDirty();
            if (!formCtrl.$valid) {
              xtFormCtrl.validators.showAllErrors();
              return false;
            } else {
              return true;
            }
          }
          function reset() {
            xtFormCtrl.validators.resetValidity();
          }
          // add save functionality to the form control
          // (i got this style from angular-ui. I kind of think it looks like an antipattern but
          // but I can't find a cleaner way of controller/directive comm)
          if (attrs.xtForm) {
            var temp = scope.$eval(attrs.xtForm);
            if (temp !== undefined) {
              control = temp;
              var that = this;
              control.submit = function () {
                submit.apply(that, arguments);
              };
              control.reset = function () {
                reset.apply(that, arguments);
              };
              control.validate = function () {
                validate.apply(that, arguments);
              };
            }
          }
          // wire up default submit of form to save function
          element.on('submit', function (evt) {
            submit();
            evt.preventDefault();
            return false;
          });
          element.on('$destroy', function () {
            xtFormCtrl.$element = null;
            xtFormCtrl.validators = null;
          });
        }
      };
    }
  ]).directive('xtValidate', [
    'xtFormErrors',
    function (xtFormErrors) {
      return {
        require: [
          'ngModel',
          '^xtForm',
          '^form'
        ],
        priority: 99,
        link: function (scope, element, attrs, ctrls) {
          var ngModel = ctrls[0], xtFormCtrl = ctrls[1], errors = angular.copy(xtFormErrors);
          if (ngModel.$name === undefined) {
            throw new Error('element must have a "name" attribute to use xtValidate');
          }
          if (element[0].nodeName.toUpperCase() === 'SELECT' && attrs.placement === undefined) {
            attrs.placement = 'top';
          }
          var validator = new InputValidator(scope, element, attrs, ngModel, errors);
          xtFormCtrl.validators.registerValidator(attrs.name, validator);
          element.on('$destroy', function () {
            if (xtFormCtrl && xtFormCtrl.validators && xtFormCtrl.validators.hasValidator(attrs.name)) {
              xtFormCtrl.validators.deregisterValidator(attrs.name);
            }
          });
        }
      };
    }
  ]);
}(window.angular));
/*!
angular-xeditable - 0.1.8
Edit-in-place for angular.js
Build date: 2014-01-10 
*/
/**
 * Angular-xeditable module 
 *
 */
angular.module('xeditable', []).value('editableOptions', {
  theme: 'default',
  buttons: 'right',
  blurElem: 'cancel',
  blurForm: 'ignore',
  activate: 'focus'
});
/*
Angular-ui bootstrap datepicker
http://angular-ui.github.io/bootstrap/#/datepicker
*/
angular.module('xeditable').directive('editableBsdate', [
  'editableDirectiveFactory',
  function (editableDirectiveFactory) {
    return editableDirectiveFactory({
      directiveName: 'editableBsdate',
      inputTpl: '<input type="text">'
    });
  }
]);
/*
Angular-ui bootstrap editable timepicker
http://angular-ui.github.io/bootstrap/#/timepicker
*/
angular.module('xeditable').directive('editableBstime', [
  'editableDirectiveFactory',
  function (editableDirectiveFactory) {
    return editableDirectiveFactory({
      directiveName: 'editableBstime',
      inputTpl: '<timepicker></timepicker>',
      render: function () {
        this.parent.render.call(this);
        // timepicker can't update model when ng-model set directly to it
        // see: https://github.com/angular-ui/bootstrap/issues/1141
        // so we wrap it into DIV
        var div = angular.element('<div class="well well-small" style="display:inline-block;"></div>');
        // move ng-model to wrapping div
        div.attr('ng-model', this.inputEl.attr('ng-model'));
        this.inputEl.removeAttr('ng-model');
        // move ng-change to wrapping div
        if (this.attrs.eNgChange) {
          div.attr('ng-change', this.inputEl.attr('ng-change'));
          this.inputEl.removeAttr('ng-change');
        }
        // wrap
        this.inputEl.wrap(div);
      }
    });
  }
]);
//checkbox
angular.module('xeditable').directive('editableCheckbox', [
  'editableDirectiveFactory',
  function (editableDirectiveFactory) {
    return editableDirectiveFactory({
      directiveName: 'editableCheckbox',
      inputTpl: '<input type="checkbox">',
      render: function () {
        this.parent.render.call(this);
        if (this.attrs.eTitle) {
          this.inputEl.wrap('<label></label>');
          this.inputEl.after(angular.element('<span></span>').text(this.attrs.eTitle));
        }
      },
      autosubmit: function () {
        var self = this;
        self.inputEl.bind('change', function () {
          setTimeout(function () {
            self.scope.$apply(function () {
              self.scope.$form.$submit();
            });
          }, 500);
        });
      }
    });
  }
]);
// checklist
angular.module('xeditable').directive('editableChecklist', [
  'editableDirectiveFactory',
  'editableNgOptionsParser',
  function (editableDirectiveFactory, editableNgOptionsParser) {
    return editableDirectiveFactory({
      directiveName: 'editableChecklist',
      inputTpl: '<span></span>',
      useCopy: true,
      render: function () {
        this.parent.render.call(this);
        var parsed = editableNgOptionsParser(this.attrs.eNgOptions);
        var html = '<label ng-repeat="' + parsed.ngRepeat + '">' + '<input type="checkbox" checklist-model="$parent.$data" checklist-value="' + parsed.locals.valueFn + '">' + '<span ng-bind="' + parsed.locals.displayFn + '"></span></label>';
        this.inputEl.removeAttr('ng-model');
        this.inputEl.removeAttr('ng-options');
        this.inputEl.html(html);
      }
    });
  }
]);
/*
Input types: text|email|tel|number|url|search|color|date|datetime|time|month|week
*/
(function () {
  var types = 'text|email|tel|number|url|search|color|date|datetime|time|month|week'.split('|');
  //todo: datalist
  // generate directives
  angular.forEach(types, function (type) {
    var directiveName = 'editable' + type.charAt(0).toUpperCase() + type.slice(1);
    angular.module('xeditable').directive(directiveName, [
      'editableDirectiveFactory',
      function (editableDirectiveFactory) {
        return editableDirectiveFactory({
          directiveName: directiveName,
          inputTpl: '<input type="' + type + '">'
        });
      }
    ]);
  });
  //`range` is bit specific
  angular.module('xeditable').directive('editableRange', [
    'editableDirectiveFactory',
    function (editableDirectiveFactory) {
      return editableDirectiveFactory({
        directiveName: 'editableRange',
        inputTpl: '<input type="range" id="range" name="range">',
        render: function () {
          this.parent.render.call(this);
          this.inputEl.after('<output>{{$data}}</output>');
        }
      });
    }
  ]);
}());
// radiolist
angular.module('xeditable').directive('editableRadiolist', [
  'editableDirectiveFactory',
  'editableNgOptionsParser',
  function (editableDirectiveFactory, editableNgOptionsParser) {
    return editableDirectiveFactory({
      directiveName: 'editableRadiolist',
      inputTpl: '<span></span>',
      render: function () {
        this.parent.render.call(this);
        var parsed = editableNgOptionsParser(this.attrs.eNgOptions);
        var html = '<label ng-repeat="' + parsed.ngRepeat + '">' + '<input type="radio" ng-model="$parent.$data" value="{{' + parsed.locals.valueFn + '}}">' + '<span ng-bind="' + parsed.locals.displayFn + '"></span></label>';
        this.inputEl.removeAttr('ng-model');
        this.inputEl.removeAttr('ng-options');
        this.inputEl.html(html);
      },
      autosubmit: function () {
        var self = this;
        self.inputEl.bind('change', function () {
          setTimeout(function () {
            self.scope.$apply(function () {
              self.scope.$form.$submit();
            });
          }, 500);
        });
      }
    });
  }
]);
//select
angular.module('xeditable').directive('editableSelect', [
  'editableDirectiveFactory',
  function (editableDirectiveFactory) {
    return editableDirectiveFactory({
      directiveName: 'editableSelect',
      inputTpl: '<select></select>',
      autosubmit: function () {
        var self = this;
        self.inputEl.bind('change', function () {
          self.scope.$apply(function () {
            self.scope.$form.$submit();
          });
        });
      }
    });
  }
]);
//textarea
angular.module('xeditable').directive('editableTextarea', [
  'editableDirectiveFactory',
  function (editableDirectiveFactory) {
    return editableDirectiveFactory({
      directiveName: 'editableTextarea',
      inputTpl: '<textarea></textarea>',
      addListeners: function () {
        var self = this;
        self.parent.addListeners.call(self);
        // submit textarea by ctrl+enter even with buttons
        if (self.single && self.buttons !== 'no') {
          self.autosubmit();
        }
      },
      autosubmit: function () {
        var self = this;
        self.inputEl.bind('keydown', function (e) {
          if ((e.ctrlKey || e.metaKey) && e.keyCode === 13) {
            self.scope.$apply(function () {
              self.scope.$form.$submit();
            });
          }
        });
      }
    });
  }
]);
/**
 * EditableController class. 
 * Attached to element with `editable-xxx` directive.
 *
 * @namespace editable-element
 */
/*
TODO: this file should be refactored to work more clear without closures!
*/
angular.module('xeditable').factory('editableController', [
  '$q',
  'editableUtils',
  function ($q, editableUtils) {
    //EditableController function
    EditableController.$inject = [
      '$scope',
      '$attrs',
      '$element',
      '$parse',
      'editableThemes',
      'editableOptions',
      '$rootScope',
      '$compile',
      '$q'
    ];
    function EditableController($scope, $attrs, $element, $parse, editableThemes, editableOptions, $rootScope, $compile, $q) {
      var valueGetter;
      //if control is disabled - it does not participate in waiting process
      var inWaiting;
      var self = this;
      self.scope = $scope;
      self.elem = $element;
      self.attrs = $attrs;
      self.inputEl = null;
      self.editorEl = null;
      self.single = true;
      self.error = '';
      self.theme = editableThemes[editableOptions.theme] || editableThemes['default'];
      self.parent = {};
      //to be overwritten by directive
      self.inputTpl = '';
      self.directiveName = '';
      // with majority of controls copy is not needed, but..
      // copy MUST NOT be used for `select-multiple` with objects as items
      // copy MUST be used for `checklist`
      self.useCopy = false;
      //runtime (defaults)
      self.single = null;
      /**
     * Attributes defined with `e-*` prefix automatically transfered from original element to
     * control.  
     * For example, if you set `<span editable-text="user.name" e-style="width: 100px"`>
     * then input will appear as `<input style="width: 100px">`.  
     * See [demo](#text-customize).
     * 
     * @var {any|attribute} e-*
     * @memberOf editable-element
     */
      /**
     * Whether to show ok/cancel buttons. Values: `right|no`.
     * If set to `no` control automatically submitted when value changed.  
     * If control is part of form buttons will never be shown. 
     * 
     * @var {string|attribute} buttons
     * @memberOf editable-element
     */
      self.buttons = 'right';
      /**
     * Action when control losses focus. Values: `cancel|submit|ignore`.
     * Has sense only for single editable element.
     * Otherwise, if control is part of form - you should set `blur` of form, not of individual element.
     * 
     * @var {string|attribute} blur
     * @memberOf editable-element
     */
      // no real `blur` property as it is transfered to editable form
      //init
      self.init = function (single) {
        self.single = single;
        self.name = $attrs.eName || $attrs[self.directiveName];
        /*
      if(!$attrs[directiveName] && !$attrs.eNgModel && ($attrs.eValue === undefined)) {
        throw 'You should provide value for `'+directiveName+'` or `e-value` in editable element!';
      }
      */
        if ($attrs[self.directiveName]) {
          valueGetter = $parse($attrs[self.directiveName]);
        } else {
          throw 'You should provide value for `' + self.directiveName + '` in editable element!';
        }
        // settings for single and non-single
        if (!self.single) {
          // hide buttons for non-single
          self.buttons = 'no';
        } else {
          self.buttons = self.attrs.buttons || editableOptions.buttons;
        }
        //if name defined --> watch changes and update $data in form
        if ($attrs.eName) {
          self.scope.$watch('$data', function (newVal) {
            self.scope.$form.$data[$attrs.eName] = newVal;
          });
        }
        /**
       * Called when control is shown.  
       * See [demo](#select-remote).
       * 
       * @var {method|attribute} onshow
       * @memberOf editable-element
       */
        if ($attrs.onshow) {
          self.onshow = function () {
            return self.catchError($parse($attrs.onshow)($scope));
          };
        }
        /**
       * Called when control is hidden after both save or cancel.  
       * 
       * @var {method|attribute} onhide
       * @memberOf editable-element
       */
        if ($attrs.onhide) {
          self.onhide = function () {
            return $parse($attrs.onhide)($scope);
          };
        }
        /**
       * Called when control is cancelled.  
       * 
       * @var {method|attribute} oncancel
       * @memberOf editable-element
       */
        if ($attrs.oncancel) {
          self.oncancel = function () {
            return $parse($attrs.oncancel)($scope);
          };
        }
        /**
       * Called during submit before value is saved to model.  
       * See [demo](#onbeforesave).
       * 
       * @var {method|attribute} onbeforesave
       * @memberOf editable-element
       */
        if ($attrs.onbeforesave) {
          self.onbeforesave = function () {
            return self.catchError($parse($attrs.onbeforesave)($scope));
          };
        }
        /**
       * Called during submit after value is saved to model.  
       * See [demo](#onaftersave).
       * 
       * @var {method|attribute} onaftersave
       * @memberOf editable-element
       */
        if ($attrs.onaftersave) {
          self.onaftersave = function () {
            return self.catchError($parse($attrs.onaftersave)($scope));
          };
        }
        // watch change of model to update editable element
        // now only add/remove `editable-empty` class.
        // Initially this method called with newVal = undefined, oldVal = undefined
        // so no need initially call handleEmpty() explicitly
        $scope.$parent.$watch($attrs[self.directiveName], function (newVal, oldVal) {
          self.handleEmpty();
        });
      };
      self.render = function () {
        var theme = self.theme;
        //build input
        self.inputEl = angular.element(self.inputTpl);
        //build controls
        self.controlsEl = angular.element(theme.controlsTpl);
        self.controlsEl.append(self.inputEl);
        //build buttons
        if (self.buttons !== 'no') {
          self.buttonsEl = angular.element(theme.buttonsTpl);
          self.submitEl = angular.element(theme.submitTpl);
          self.cancelEl = angular.element(theme.cancelTpl);
          self.buttonsEl.append(self.submitEl).append(self.cancelEl);
          self.controlsEl.append(self.buttonsEl);
          self.inputEl.addClass('editable-has-buttons');
        }
        //build error
        self.errorEl = angular.element(theme.errorTpl);
        self.controlsEl.append(self.errorEl);
        //build editor
        self.editorEl = angular.element(self.single ? theme.formTpl : theme.noformTpl);
        self.editorEl.append(self.controlsEl);
        // transfer `e-*|data-e-*|x-e-*` attributes
        for (var k in $attrs.$attr) {
          if (k.length <= 1) {
            continue;
          }
          var transferAttr = false;
          var nextLetter = k.substring(1, 2);
          // if starts with `e` + uppercase letter
          if (k.substring(0, 1) === 'e' && nextLetter === nextLetter.toUpperCase()) {
            transferAttr = k.substring(1);  // cut `e`
          } else {
            continue;
          }
          // exclude `form` and `ng-submit`, 
          if (transferAttr === 'Form' || transferAttr === 'NgSubmit') {
            continue;
          }
          // convert back to lowercase style
          transferAttr = transferAttr.substring(0, 1).toLowerCase() + editableUtils.camelToDash(transferAttr.substring(1));
          // workaround for attributes without value (e.g. `multiple = "multiple"`)
          var attrValue = $attrs[k] === '' ? transferAttr : $attrs[k];
          // set attributes to input
          self.inputEl.attr(transferAttr, attrValue);
        }
        self.inputEl.addClass('editable-input');
        self.inputEl.attr('ng-model', '$data');
        // add directiveName class to editor, e.g. `editable-text`
        self.editorEl.addClass(editableUtils.camelToDash(self.directiveName));
        if (self.single) {
          self.editorEl.attr('editable-form', '$form');
          // transfer `blur` to form
          self.editorEl.attr('blur', self.attrs.blur || (self.buttons === 'no' ? 'cancel' : editableOptions.blurElem));
        }
        //apply `postrender` method of theme
        if (angular.isFunction(theme.postrender)) {
          theme.postrender.call(self);
        }
      };
      // with majority of controls copy is not needed, but..
      // copy MUST NOT be used for `select-multiple` with objects as items
      // copy MUST be used for `checklist`
      self.setLocalValue = function () {
        self.scope.$data = self.useCopy ? angular.copy(valueGetter($scope.$parent)) : valueGetter($scope.$parent);
      };
      //show
      self.show = function () {
        // set value of scope.$data
        self.setLocalValue();
        /*
      Originally render() was inside init() method, but some directives polluting editorEl,
      so it is broken on second openning.
      Cloning is not a solution as jqLite can not clone with event handler's.
      */
        self.render();
        // insert into DOM
        $element.after(self.editorEl);
        // compile (needed to attach ng-* events from markup)
        $compile(self.editorEl)($scope);
        // attach listeners (`escape`, autosubmit, etc)
        self.addListeners();
        // hide element
        $element.addClass('editable-hide');
        // onshow
        return self.onshow();
      };
      //hide
      self.hide = function () {
        self.editorEl.remove();
        $element.removeClass('editable-hide');
        // onhide
        return self.onhide();
      };
      // cancel
      self.cancel = function () {
        // oncancel
        self.oncancel();  // don't call hide() here as it called in form's code
      };
      /*
    Called after show to attach listeners
    */
      self.addListeners = function () {
        // bind keyup for `escape`
        self.inputEl.bind('keyup', function (e) {
          if (!self.single) {
            return;
          }
          // todo: move this to editable-form!
          switch (e.keyCode) {
          // hide on `escape` press
          case 27:
            self.scope.$apply(function () {
              self.scope.$form.$cancel();
            });
            break;
          }
        });
        // autosubmit when `no buttons`
        if (self.single && self.buttons === 'no') {
          self.autosubmit();
        }
        // click - mark element as clicked to exclude in document click handler
        self.editorEl.bind('click', function (e) {
          // ignore right/middle button click
          if (e.which !== 1) {
            return;
          }
          if (self.scope.$form.$visible) {
            self.scope.$form._clicked = true;
          }
        });
      };
      // setWaiting
      self.setWaiting = function (value) {
        if (value) {
          // participate in waiting only if not disabled
          inWaiting = !self.inputEl.attr('disabled') && !self.inputEl.attr('ng-disabled') && !self.inputEl.attr('ng-enabled');
          if (inWaiting) {
            self.inputEl.attr('disabled', 'disabled');
            if (self.buttonsEl) {
              self.buttonsEl.find('button').attr('disabled', 'disabled');
            }
          }
        } else {
          if (inWaiting) {
            self.inputEl.removeAttr('disabled');
            if (self.buttonsEl) {
              self.buttonsEl.find('button').removeAttr('disabled');
            }
          }
        }
      };
      self.activate = function () {
        setTimeout(function () {
          var el = self.inputEl[0];
          if (editableOptions.activate === 'focus' && el.focus) {
            el.focus();
          }
          if (editableOptions.activate === 'select' && el.select) {
            el.select();
          }
        }, 0);
      };
      self.setError = function (msg) {
        if (!angular.isObject(msg)) {
          $scope.$error = msg;
          self.error = msg;
        }
      };
      /*
    Checks that result is string or promise returned string and shows it as error message
    Applied to onshow, onbeforesave, onaftersave
    */
      self.catchError = function (result, noPromise) {
        if (angular.isObject(result) && noPromise !== true) {
          $q.when(result).then(angular.bind(this, function (r) {
            this.catchError(r, true);
          }), angular.bind(this, function (r) {
            this.catchError(r, true);
          }));  //check $http error
        } else if (noPromise && angular.isObject(result) && result.status && result.status !== 200 && result.data && angular.isString(result.data)) {
          this.setError(result.data);
          //set result to string: to let form know that there was error
          result = result.data;
        } else if (angular.isString(result)) {
          this.setError(result);
        }
        return result;
      };
      self.save = function () {
        valueGetter.assign($scope.$parent, angular.copy(self.scope.$data));  // no need to call handleEmpty here as we are watching change of model value
                                                                             // self.handleEmpty();
      };
      /*
    attach/detach `editable-empty` class to element
    */
      self.handleEmpty = function () {
        var val = valueGetter($scope.$parent);
        var isEmpty = val === null || val === undefined || val === '' || angular.isArray(val) && val.length === 0;
        $element.toggleClass('editable-empty', isEmpty);
      };
      /*
    Called when `buttons = "no"` to submit automatically
    */
      self.autosubmit = angular.noop;
      self.onshow = angular.noop;
      self.onhide = angular.noop;
      self.oncancel = angular.noop;
      self.onbeforesave = angular.noop;
      self.onaftersave = angular.noop;
    }
    return EditableController;
  }
]);
/*
editableFactory is used to generate editable directives (see `/directives` folder)
Inside it does several things:
- detect form for editable element. Form may be one of three types:
  1. autogenerated form (for single editable elements)
  2. wrapper form (element wrapped by <form> tag)
  3. linked form (element has `e-form` attribute pointing to existing form)

- attach editableController to element

Depends on: editableController, editableFormFactory
*/
angular.module('xeditable').factory('editableDirectiveFactory', [
  '$parse',
  '$compile',
  'editableThemes',
  '$rootScope',
  '$document',
  'editableController',
  'editableFormController',
  function ($parse, $compile, editableThemes, $rootScope, $document, editableController, editableFormController) {
    //directive object
    return function (overwrites) {
      return {
        restrict: 'A',
        scope: true,
        require: [
          overwrites.directiveName,
          '?^form'
        ],
        controller: editableController,
        link: function (scope, elem, attrs, ctrl) {
          // editable controller
          var eCtrl = ctrl[0];
          // form controller
          var eFormCtrl;
          // this variable indicates is element is bound to some existing form, 
          // or it's single element who's form will be generated automatically
          // By default consider single element without any linked form.ß
          var hasForm = false;
          // element wrapped by form
          if (ctrl[1]) {
            eFormCtrl = ctrl[1];
            hasForm = true;
          } else if (attrs.eForm) {
            // element not wrapped by <form>, but we hane `e-form` attr
            var getter = $parse(attrs.eForm)(scope);
            if (getter) {
              // form exists in scope (above), e.g. editable column
              eFormCtrl = getter;
              hasForm = true;
            } else {
              // form exists below or not exist at all: check document.forms
              for (var i = 0; i < $document[0].forms.length; i++) {
                if ($document[0].forms[i].name === attrs.eForm) {
                  // form is below and not processed yet
                  eFormCtrl = null;
                  hasForm = true;
                  break;
                }
              }
            }
          }
          /*
        if(hasForm && !attrs.eName) {
          throw 'You should provide `e-name` for editable element inside form!';
        }
        */
          //check for `editable-form` attr in form
          /*
        if(eFormCtrl && ) {
          throw 'You should provide `e-name` for editable element inside form!';
        }
        */
          // store original props to `parent` before merge
          angular.forEach(overwrites, function (v, k) {
            if (eCtrl[k] !== undefined) {
              eCtrl.parent[k] = eCtrl[k];
            }
          });
          // merge overwrites to base editable controller
          angular.extend(eCtrl, overwrites);
          // init editable ctrl
          eCtrl.init(!hasForm);
          // publich editable controller as `$editable` to be referenced in html
          scope.$editable = eCtrl;
          // add `editable` class to element
          elem.addClass('editable');
          // hasForm
          if (hasForm) {
            if (eFormCtrl) {
              scope.$form = eFormCtrl;
              if (!scope.$form.$addEditable) {
                throw 'Form with editable elements should have `editable-form` attribute.';
              }
              scope.$form.$addEditable(eCtrl);
            } else {
              // future form (below): add editable controller to buffer and add to form later
              $rootScope.$$editableBuffer = $rootScope.$$editableBuffer || {};
              $rootScope.$$editableBuffer[attrs.eForm] = $rootScope.$$editableBuffer[attrs.eForm] || [];
              $rootScope.$$editableBuffer[attrs.eForm].push(eCtrl);
              scope.$form = null;  //will be re-assigned later
            }  // !hasForm
          } else {
            // create editableform controller
            scope.$form = editableFormController();
            // add self to editable controller
            scope.$form.$addEditable(eCtrl);
            // if `e-form` provided, publish local $form in scope
            if (attrs.eForm) {
              scope.$parent[attrs.eForm] = scope.$form;
            }
            // bind click - if no external form defined
            if (!attrs.eForm) {
              elem.addClass('editable-click');
              elem.bind('click', function (e) {
                e.preventDefault();
                e.editable = eCtrl;
                scope.$apply(function () {
                  scope.$form.$show();
                });
              });
            }
          }
        }
      };
    };
  }
]);
/*
Returns editableForm controller
*/
angular.module('xeditable').factory('editableFormController', [
  '$parse',
  '$document',
  '$rootScope',
  'editablePromiseCollection',
  'editableUtils',
  function ($parse, $document, $rootScope, editablePromiseCollection, editableUtils) {
    // array of opened editable forms
    var shown = [];
    // bind click to body: cancel|submit|ignore forms
    $document.bind('click', function (e) {
      // ignore right/middle button click
      if (e.which !== 1) {
        return;
      }
      var toCancel = [];
      var toSubmit = [];
      for (var i = 0; i < shown.length; i++) {
        // exclude clicked
        if (shown[i]._clicked) {
          shown[i]._clicked = false;
          continue;
        }
        // exclude waiting
        if (shown[i].$waiting) {
          continue;
        }
        if (shown[i]._blur === 'cancel') {
          toCancel.push(shown[i]);
        }
        if (shown[i]._blur === 'submit') {
          toSubmit.push(shown[i]);
        }
      }
      if (toCancel.length || toSubmit.length) {
        $rootScope.$apply(function () {
          angular.forEach(toCancel, function (v) {
            v.$cancel();
          });
          angular.forEach(toSubmit, function (v) {
            v.$submit();
          });
        });
      }
    });
    var base = {
        $addEditable: function (editable) {
          //console.log('add editable', editable.elem, editable.elem.bind);
          this.$editables.push(editable);
          //'on' is not supported in angular 1.0.8
          editable.elem.bind('$destroy', angular.bind(this, this.$removeEditable, editable));
          //bind editable's local $form to self (if not bound yet, below form) 
          if (!editable.scope.$form) {
            editable.scope.$form = this;
          }
          //if form already shown - call show() of new editable
          if (this.$visible) {
            editable.catchError(editable.show());
          }
        },
        $removeEditable: function (editable) {
          //arrayRemove
          for (var i = 0; i < this.$editables.length; i++) {
            if (this.$editables[i] === editable) {
              this.$editables.splice(i, 1);
              return;
            }
          }
        },
        $show: function () {
          if (this.$visible) {
            return;
          }
          this.$visible = true;
          var pc = editablePromiseCollection();
          //own show
          pc.when(this.$onshow());
          //clear errors
          this.$setError(null, '');
          //children show
          angular.forEach(this.$editables, function (editable) {
            pc.when(editable.show());
          });
          //wait promises and activate
          pc.then({
            onWait: angular.bind(this, this.$setWaiting),
            onTrue: angular.bind(this, this.$activate),
            onFalse: angular.bind(this, this.$activate),
            onString: angular.bind(this, this.$activate)
          });
          // add to internal list of shown forms
          // setTimeout needed to prevent closing right after opening (e.g. when trigger by button)
          setTimeout(angular.bind(this, function () {
            // clear `clicked` to get ready for clicks on visible form
            this._clicked = false;
            if (editableUtils.indexOf(shown, this) === -1) {
              shown.push(this);
            }
          }), 0);
        },
        $activate: function (name) {
          var i;
          if (this.$editables.length) {
            //activate by name
            if (angular.isString(name)) {
              for (i = 0; i < this.$editables.length; i++) {
                if (this.$editables[i].name === name) {
                  this.$editables[i].activate();
                  return;
                }
              }
            }
            //try activate error field
            for (i = 0; i < this.$editables.length; i++) {
              if (this.$editables[i].error) {
                this.$editables[i].activate();
                return;
              }
            }
            //by default activate first field
            this.$editables[0].activate();
          }
        },
        $hide: function () {
          if (!this.$visible) {
            return;
          }
          this.$visible = false;
          // self hide
          this.$onhide();
          // children's hide
          angular.forEach(this.$editables, function (editable) {
            editable.hide();
          });
          // remove from internal list of shown forms
          editableUtils.arrayRemove(shown, this);
        },
        $cancel: function () {
          if (!this.$visible) {
            return;
          }
          // self cancel
          this.$oncancel();
          // children's cancel      
          angular.forEach(this.$editables, function (editable) {
            editable.cancel();
          });
          // self hide
          this.$hide();
        },
        $setWaiting: function (value) {
          this.$waiting = !!value;
          // we can't just set $waiting variable and use it via ng-disabled in children
          // because in editable-row form is not accessible
          angular.forEach(this.$editables, function (editable) {
            editable.setWaiting(!!value);
          });
        },
        $setError: function (name, msg) {
          angular.forEach(this.$editables, function (editable) {
            if (!name || editable.name === name) {
              editable.setError(msg);
            }
          });
        },
        $submit: function () {
          if (this.$waiting) {
            return;
          }
          //clear errors
          this.$setError(null, '');
          //children onbeforesave
          var pc = editablePromiseCollection();
          angular.forEach(this.$editables, function (editable) {
            pc.when(editable.onbeforesave());
          });
          /*
      onbeforesave result:
      - true/undefined: save data and close form
      - false: close form without saving
      - string: keep form open and show error
      */
          pc.then({
            onWait: angular.bind(this, this.$setWaiting),
            onTrue: angular.bind(this, checkSelf, true),
            onFalse: angular.bind(this, checkSelf, false),
            onString: angular.bind(this, this.$activate)
          });
          //save
          function checkSelf(childrenTrue) {
            var pc = editablePromiseCollection();
            pc.when(this.$onbeforesave());
            pc.then({
              onWait: angular.bind(this, this.$setWaiting),
              onTrue: childrenTrue ? angular.bind(this, this.$save) : angular.bind(this, this.$hide),
              onFalse: angular.bind(this, this.$hide),
              onString: angular.bind(this, this.$activate)
            });
          }
        },
        $save: function () {
          // write model for each editable
          angular.forEach(this.$editables, function (editable) {
            editable.save();
          });
          //call onaftersave of self and children
          var pc = editablePromiseCollection();
          pc.when(this.$onaftersave());
          angular.forEach(this.$editables, function (editable) {
            pc.when(editable.onaftersave());
          });
          /*
      onaftersave result:
      - true/undefined/false: just close form
      - string: keep form open and show error
      */
          pc.then({
            onWait: angular.bind(this, this.$setWaiting),
            onTrue: angular.bind(this, this.$hide),
            onFalse: angular.bind(this, this.$hide),
            onString: angular.bind(this, this.$activate)
          });
        },
        $onshow: angular.noop,
        $oncancel: angular.noop,
        $onhide: angular.noop,
        $onbeforesave: angular.noop,
        $onaftersave: angular.noop
      };
    return function () {
      return angular.extend({
        $editables: [],
        $visible: false,
        $waiting: false,
        $data: {},
        _clicked: false,
        _blur: null
      }, base);
    };
  }
]);
/**
 * EditableForm directive. Should be defined in <form> containing editable controls.  
 * It add some usefull methods to form variable exposed to scope by `name="myform"` attribute.
 *
 * @namespace editable-form
 */
angular.module('xeditable').directive('editableForm', [
  '$rootScope',
  '$parse',
  'editableFormController',
  'editableOptions',
  function ($rootScope, $parse, editableFormController, editableOptions) {
    return {
      restrict: 'A',
      require: ['form'],
      compile: function () {
        return {
          pre: function (scope, elem, attrs, ctrl) {
            var form = ctrl[0];
            var eForm;
            //if `editableForm` has value - publish smartly under this value
            //this is required only for single editor form that is created and removed
            if (attrs.editableForm) {
              if (scope[attrs.editableForm] && scope[attrs.editableForm].$show) {
                eForm = scope[attrs.editableForm];
                angular.extend(form, eForm);
              } else {
                eForm = editableFormController();
                scope[attrs.editableForm] = eForm;
                angular.extend(eForm, form);
              }
            } else {
              //just merge to form and publish if form has name
              eForm = editableFormController();
              angular.extend(form, eForm);
            }
            //read editables from buffer (that appeared before FORM tag)
            var buf = $rootScope.$$editableBuffer;
            var name = form.$name;
            if (name && buf && buf[name]) {
              angular.forEach(buf[name], function (editable) {
                eForm.$addEditable(editable);
              });
              delete buf[name];
            }
          },
          post: function (scope, elem, attrs, ctrl) {
            var eForm;
            if (attrs.editableForm && scope[attrs.editableForm] && scope[attrs.editableForm].$show) {
              eForm = scope[attrs.editableForm];
            } else {
              eForm = ctrl[0];
            }
            /**
             * Called when form is shown.
             * 
             * @var {method|attribute} onshow 
             * @memberOf editable-form
             */
            if (attrs.onshow) {
              eForm.$onshow = angular.bind(eForm, $parse(attrs.onshow), scope);
            }
            /**
             * Called when form hides after both save or cancel.
             * 
             * @var {method|attribute} onhide 
             * @memberOf editable-form
             */
            if (attrs.onhide) {
              eForm.$onhide = angular.bind(eForm, $parse(attrs.onhide), scope);
            }
            /**
             * Called when form is cancelled.
             * 
             * @var {method|attribute} oncancel
             * @memberOf editable-form
             */
            if (attrs.oncancel) {
              eForm.$oncancel = angular.bind(eForm, $parse(attrs.oncancel), scope);
            }
            /**
             * Whether form initially rendered in shown state.
             *
             * @var {bool|attribute} shown
             * @memberOf editable-form
             */
            if (attrs.shown && $parse(attrs.shown)(scope)) {
              eForm.$show();
            }
            /**
             * Action when form losses focus. Values: `cancel|submit|ignore`.
             * Default is `ignore`.
             * 
             * @var {string|attribute} blur
             * @memberOf editable-form
             */
            eForm._blur = attrs.blur || editableOptions.blurForm;
            // onbeforesave, onaftersave
            if (!attrs.ngSubmit && !attrs.submit) {
              /**
               * Called after all children `onbeforesave` callbacks but before saving form values
               * to model.  
               * If at least one children callback returns `non-string` - it will not not be called.  
               * See [editable-form demo](#editable-form) for details.
               * 
               * @var {method|attribute} onbeforesave
               * @memberOf editable-form
               * 
               */
              if (attrs.onbeforesave) {
                eForm.$onbeforesave = function () {
                  return $parse(attrs.onbeforesave)(scope, { $data: eForm.$data });
                };
              }
              /**
               * Called when form values are saved to model.  
               * See [editable-form demo](#editable-form) for details.
               * 
               * @var {method|attribute} onaftersave 
               * @memberOf editable-form
               * 
               */
              if (attrs.onaftersave) {
                eForm.$onaftersave = function () {
                  return $parse(attrs.onaftersave)(scope, { $data: eForm.$data });
                };
              }
              elem.bind('submit', function (event) {
                event.preventDefault();
                scope.$apply(function () {
                  eForm.$submit();
                });
              });
            }
            // click - mark form as clicked to exclude in document click handler
            elem.bind('click', function (e) {
              // ignore right/middle button click
              if (e.which !== 1) {
                return;
              }
              if (eForm.$visible) {
                eForm._clicked = true;
              }
            });
          }
        };
      }
    };
  }
]);
/**
 * editablePromiseCollection
 *  
 * Collect results of function calls. Shows waiting if there are promises. 
 * Finally, applies callbacks if:
 * - onTrue(): all results are true and all promises resolved to true
 * - onFalse(): at least one result is false or promise resolved to false
 * - onString(): at least one result is string or promise rejected or promise resolved to string
 */
angular.module('xeditable').factory('editablePromiseCollection', [
  '$q',
  function ($q) {
    function promiseCollection() {
      return {
        promises: [],
        hasFalse: false,
        hasString: false,
        when: function (result, noPromise) {
          if (result === false) {
            this.hasFalse = true;
          } else if (!noPromise && angular.isObject(result)) {
            this.promises.push($q.when(result));
          } else if (angular.isString(result)) {
            this.hasString = true;
          } else {
            //result === true || result === undefined || result === null
            return;
          }
        },
        then: function (callbacks) {
          callbacks = callbacks || {};
          var onTrue = callbacks.onTrue || angular.noop;
          var onFalse = callbacks.onFalse || angular.noop;
          var onString = callbacks.onString || angular.noop;
          var onWait = callbacks.onWait || angular.noop;
          var self = this;
          if (this.promises.length) {
            onWait(true);
            $q.all(this.promises).then(function (results) {
              onWait(false);
              //check all results via same `when` method (without checking promises)
              angular.forEach(results, function (result) {
                self.when(result, true);
              });
              applyCallback();
            }, function (error) {
              onWait(false);
              onString();
            });
          } else {
            applyCallback();
          }
          function applyCallback() {
            if (!self.hasString && !self.hasFalse) {
              onTrue();
            } else if (!self.hasString && self.hasFalse) {
              onFalse();
            } else {
              onString();
            }
          }
        }
      };
    }
    return promiseCollection;
  }
]);
/**
 * editableUtils
 */
angular.module('xeditable').factory('editableUtils', [function () {
    return {
      indexOf: function (array, obj) {
        if (array.indexOf)
          return array.indexOf(obj);
        for (var i = 0; i < array.length; i++) {
          if (obj === array[i])
            return i;
        }
        return -1;
      },
      arrayRemove: function (array, value) {
        var index = this.indexOf(array, value);
        if (index >= 0) {
          array.splice(index, 1);
        }
        return value;
      },
      camelToDash: function (str) {
        var SNAKE_CASE_REGEXP = /[A-Z]/g;
        return str.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
          return (pos ? '-' : '') + letter.toLowerCase();
        });
      },
      dashToCamel: function (str) {
        var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
        var MOZ_HACK_REGEXP = /^moz([A-Z])/;
        return str.replace(SPECIAL_CHARS_REGEXP, function (_, separator, letter, offset) {
          return offset ? letter.toUpperCase() : letter;
        }).replace(MOZ_HACK_REGEXP, 'Moz$1');
      }
    };
  }]);
/**
 * editableNgOptionsParser
 *
 * see: https://github.com/angular/angular.js/blob/master/src/ng/directive/select.js#L131
 */
angular.module('xeditable').factory('editableNgOptionsParser', [function () {
    //0000111110000000000022220000000000000000000000333300000000000000444444444444444000000000555555555555555000000066666666666666600000000000000007777000000000000000000088888
    var NG_OPTIONS_REGEXP = /^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/;
    function parser(optionsExp) {
      var match;
      if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
        throw 'ng-options parse error';
      }
      var displayFn = match[2] || match[1], valueName = match[4] || match[6], keyName = match[5], groupByFn = match[3] || '', valueFn = match[2] ? match[1] : valueName, valuesFn = match[7], track = match[8], trackFn = track ? match[8] : null;
      var ngRepeat;
      if (keyName === undefined) {
        // array
        ngRepeat = valueName + ' in ' + valuesFn;
        if (track !== undefined) {
          ngRepeat += ' track by ' + trackFn;
        }
      } else {
        // object
        ngRepeat = '(' + keyName + ', ' + valueName + ') in ' + valuesFn;
      }
      // group not supported yet
      return {
        ngRepeat: ngRepeat,
        locals: {
          valueName: valueName,
          keyName: keyName,
          valueFn: valueFn,
          displayFn: displayFn
        }
      };
    }
    return parser;
  }]);
/*
Editable themes:
- default
- bootstrap 2
- bootstrap 3

Note: in postrender() `this` is instance of editableController
*/
angular.module('xeditable').factory('editableThemes', function () {
  var themes = {
      'default': {
        formTpl: '<form class="editable-wrap"></form>',
        noformTpl: '<span class="editable-wrap"></span>',
        controlsTpl: '<span class="editable-controls"></span>',
        inputTpl: '',
        errorTpl: '<div class="editable-error" ng-show="$error" ng-bind="$error"></div>',
        buttonsTpl: '<span class="editable-buttons"></span>',
        submitTpl: '<button type="submit">save</button>',
        cancelTpl: '<button type="button" ng-click="$form.$cancel()">cancel</button>'
      },
      'bs2': {
        formTpl: '<form class="form-inline editable-wrap" role="form"></form>',
        noformTpl: '<span class="editable-wrap"></span>',
        controlsTpl: '<div class="editable-controls controls control-group" ng-class="{\'error\': $error}"></div>',
        inputTpl: '',
        errorTpl: '<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',
        buttonsTpl: '<span class="editable-buttons"></span>',
        submitTpl: '<button type="submit" class="btn btn-primary"><span class="icon-ok icon-white"></span></button>',
        cancelTpl: '<button type="button" class="btn" ng-click="$form.$cancel()">' + '<span class="icon-remove"></span>' + '</button>'
      },
      'bs3': {
        formTpl: '<form class="form-inline editable-wrap" role="form"></form>',
        noformTpl: '<span class="editable-wrap"></span>',
        controlsTpl: '<div class="editable-controls form-group" ng-class="{\'has-error\': $error}"></div>',
        inputTpl: '',
        errorTpl: '<div class="editable-error help-block" ng-show="$error" ng-bind="$error"></div>',
        buttonsTpl: '<span class="editable-buttons"></span>',
        submitTpl: '<button type="submit" class="btn btn-primary"><span class="glyphicon glyphicon-ok"></span></button>',
        cancelTpl: '<button type="button" class="btn btn-default" ng-click="$form.$cancel()">' + '<span class="glyphicon glyphicon-remove"></span>' + '</button>',
        buttonsClass: '',
        inputClass: '',
        postrender: function () {
          //apply `form-control` class to std inputs
          switch (this.directiveName) {
          case 'editableText':
          case 'editableSelect':
          case 'editableTextarea':
          case 'editableEmail':
          case 'editableTel':
          case 'editableNumber':
          case 'editableUrl':
          case 'editableSearch':
          case 'editableDate':
          case 'editableDatetime':
          case 'editableTime':
          case 'editableMonth':
          case 'editableWeek':
            this.inputEl.addClass('form-control');
            if (this.theme.inputClass) {
              // don`t apply `input-sm` and `input-lg` to select multiple
              // should be fixed in bs itself!
              if (this.inputEl.attr('multiple') && (this.theme.inputClass === 'input-sm' || this.theme.inputClass === 'input-lg')) {
                break;
              }
              this.inputEl.addClass(this.theme.inputClass);
            }
            break;
          }
          //apply buttonsClass (bs3 specific!)
          if (this.buttonsEl && this.theme.buttonsClass) {
            this.buttonsEl.find('button').addClass(this.theme.buttonsClass);
          }
        }
      }
    };
  return themes;
});
/**!
 * AngularJS file upload/drop directive with http post and progress
 * @author  Danial  <danial.farid@gmail.com>
 * @version 1.6.12
 */
(function () {
  var angularFileUpload = angular.module('angularFileUpload', []);
  angularFileUpload.service('$upload', [
    '$http',
    '$q',
    '$timeout',
    function ($http, $q, $timeout) {
      function sendHttp(config) {
        config.method = config.method || 'POST';
        config.headers = config.headers || {};
        config.transformRequest = config.transformRequest || function (data, headersGetter) {
          if (window.ArrayBuffer && data instanceof window.ArrayBuffer) {
            return data;
          }
          return $http.defaults.transformRequest[0](data, headersGetter);
        };
        var deferred = $q.defer();
        if (window.XMLHttpRequest.__isShim) {
          config.headers['__setXHR_'] = function () {
            return function (xhr) {
              if (!xhr)
                return;
              config.__XHR = xhr;
              config.xhrFn && config.xhrFn(xhr);
              xhr.upload.addEventListener('progress', function (e) {
                deferred.notify(e);
              }, false);
              //fix for firefox not firing upload progress end, also IE8-9
              xhr.upload.addEventListener('load', function (e) {
                if (e.lengthComputable) {
                  deferred.notify(e);
                }
              }, false);
            };
          };
        }
        $http(config).then(function (r) {
          deferred.resolve(r);
        }, function (e) {
          deferred.reject(e);
        }, function (n) {
          deferred.notify(n);
        });
        var promise = deferred.promise;
        promise.success = function (fn) {
          promise.then(function (response) {
            fn(response.data, response.status, response.headers, config);
          });
          return promise;
        };
        promise.error = function (fn) {
          promise.then(null, function (response) {
            fn(response.data, response.status, response.headers, config);
          });
          return promise;
        };
        promise.progress = function (fn) {
          promise.then(null, null, function (update) {
            fn(update);
          });
          return promise;
        };
        promise.abort = function () {
          if (config.__XHR) {
            $timeout(function () {
              config.__XHR.abort();
            });
          }
          return promise;
        };
        promise.xhr = function (fn) {
          config.xhrFn = function (origXhrFn) {
            return function () {
              origXhrFn && origXhrFn.apply(promise, arguments);
              fn.apply(promise, arguments);
            };
          }(config.xhrFn);
          return promise;
        };
        return promise;
      }
      this.upload = function (config) {
        config.headers = config.headers || {};
        config.headers['Content-Type'] = undefined;
        config.transformRequest = config.transformRequest || $http.defaults.transformRequest;
        var formData = new FormData();
        var origTransformRequest = config.transformRequest;
        var origData = config.data;
        config.transformRequest = function (formData, headerGetter) {
          if (origData) {
            if (config.formDataAppender) {
              for (var key in origData) {
                var val = origData[key];
                config.formDataAppender(formData, key, val);
              }
            } else {
              for (var key in origData) {
                var val = origData[key];
                if (typeof origTransformRequest == 'function') {
                  val = origTransformRequest(val, headerGetter);
                } else {
                  for (var i = 0; i < origTransformRequest.length; i++) {
                    var transformFn = origTransformRequest[i];
                    if (typeof transformFn == 'function') {
                      val = transformFn(val, headerGetter);
                    }
                  }
                }
                formData.append(key, val);
              }
            }
          }
          if (config.file != null) {
            var fileFormName = config.fileFormDataName || 'file';
            if (Object.prototype.toString.call(config.file) === '[object Array]') {
              var isFileFormNameString = Object.prototype.toString.call(fileFormName) === '[object String]';
              for (var i = 0; i < config.file.length; i++) {
                formData.append(isFileFormNameString ? fileFormName : fileFormName[i], config.file[i], config.fileName && config.fileName[i] || config.file[i].name);
              }
            } else {
              formData.append(fileFormName, config.file, config.fileName || config.file.name);
            }
          }
          return formData;
        };
        config.data = formData;
        return sendHttp(config);
      };
      this.http = function (config) {
        return sendHttp(config);
      };
    }
  ]);
  angularFileUpload.directive('ngFileSelect', [
    '$parse',
    '$timeout',
    function ($parse, $timeout) {
      return function (scope, elem, attr) {
        var fn = $parse(attr['ngFileSelect']);
        if (elem[0].tagName.toLowerCase() !== 'input' || (elem.attr('type') && elem.attr('type').toLowerCase()) !== 'file') {
          var fileElem = angular.element('<input type="file">');
          var attrs = elem[0].attributes;
          for (var i = 0; i < attrs.length; i++) {
            if (attrs[i].name.toLowerCase() !== 'type') {
              fileElem.attr(attrs[i].name, attrs[i].value);
            }
          }
          if (attr['multiple'])
            fileElem.attr('multiple', 'true');
          fileElem.css('width', '1px').css('height', '1px').css('opacity', 0).css('position', 'absolute').css('filter', 'alpha(opacity=0)').css('padding', 0).css('margin', 0).css('overflow', 'hidden');
          fileElem.attr('__wrapper_for_parent_', true);
          //			fileElem.css("top", 0).css("bottom", 0).css("left", 0).css("right", 0).css("width", "100%").
          //					css("opacity", 0).css("position", "absolute").css('filter', 'alpha(opacity=0)').css("padding", 0).css("margin", 0);
          elem.append(fileElem);
          elem[0].__file_click_fn_delegate_ = function () {
            fileElem[0].click();
          };
          elem.bind('click', elem[0].__file_click_fn_delegate_);
          elem.css('overflow', 'hidden');
          //			if (fileElem.parent()[0] != elem[0]) {
          //				//fix #298 button element
          //				elem.wrap('<span>');
          //				elem.css("z-index", "-1000")
          //				elem.parent().append(fileElem);
          //				elem = elem.parent();
          //			}
          //			if (elem.css("position") === '' || elem.css("position") === 'static') {
          //				elem.css("position", "relative");
          //			}
          elem = fileElem;
        }
        elem.bind('change', function (evt) {
          var files = [], fileList, i;
          fileList = evt.__files_ || evt.target.files;
          if (fileList != null) {
            for (i = 0; i < fileList.length; i++) {
              files.push(fileList.item(i));
            }
          }
          $timeout(function () {
            fn(scope, {
              $files: files,
              $event: evt
            });
          });
        });  // removed this since it was confusing if the user click on browse and then cancel #181
             //		elem.bind('click', function(){
             //			this.value = null;
             //		});
             // removed because of #253 bug
             // touch screens
             //		if (('ontouchstart' in window) ||
             //				(navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)) {
             //			elem.bind('touchend', function(e) {
             //				e.preventDefault();
             //				e.target.click();
             //			});
             //		}
      };
    }
  ]);
  angularFileUpload.directive('ngFileDropAvailable', [
    '$parse',
    '$timeout',
    function ($parse, $timeout) {
      return function (scope, elem, attr) {
        if ('draggable' in document.createElement('span')) {
          var fn = $parse(attr['ngFileDropAvailable']);
          $timeout(function () {
            fn(scope);
          });
        }
      };
    }
  ]);
  angularFileUpload.directive('ngFileDrop', [
    '$parse',
    '$timeout',
    '$location',
    function ($parse, $timeout, $location) {
      return function (scope, elem, attr) {
        if ('draggable' in document.createElement('span')) {
          var leaveTimeout = null;
          elem[0].addEventListener('dragover', function (evt) {
            evt.preventDefault();
            $timeout.cancel(leaveTimeout);
            if (!elem[0].__drag_over_class_) {
              if (attr['ngFileDragOverClass'] && attr['ngFileDragOverClass'].search(/\) *$/) > -1) {
                var dragOverClass = $parse(attr['ngFileDragOverClass'])(scope, { $event: evt });
                elem[0].__drag_over_class_ = dragOverClass;
              } else {
                elem[0].__drag_over_class_ = attr['ngFileDragOverClass'] || 'dragover';
              }
            }
            elem.addClass(elem[0].__drag_over_class_);
          }, false);
          elem[0].addEventListener('dragenter', function (evt) {
            evt.preventDefault();
          }, false);
          elem[0].addEventListener('dragleave', function (evt) {
            leaveTimeout = $timeout(function () {
              elem.removeClass(elem[0].__drag_over_class_);
              elem[0].__drag_over_class_ = null;
            }, attr['ngFileDragOverDelay'] || 1);
          }, false);
          var fn = $parse(attr['ngFileDrop']);
          elem[0].addEventListener('drop', function (evt) {
            evt.preventDefault();
            elem.removeClass(elem[0].__drag_over_class_);
            elem[0].__drag_over_class_ = null;
            extractFiles(evt, function (files) {
              fn(scope, {
                $files: files,
                $event: evt
              });
            });
          }, false);
          function isASCII(str) {
            return /^[\000-\177]*$/.test(str);
          }
          function extractFiles(evt, callback) {
            var files = [], items = evt.dataTransfer.items;
            if (items && items.length > 0 && items[0].webkitGetAsEntry && $location.protocol() != 'file' && items[0].webkitGetAsEntry().isDirectory) {
              for (var i = 0; i < items.length; i++) {
                var entry = items[i].webkitGetAsEntry();
                if (entry != null) {
                  //fix for chrome bug https://code.google.com/p/chromium/issues/detail?id=149735
                  if (isASCII(entry.name)) {
                    traverseFileTree(files, entry);
                  } else if (!items[i].webkitGetAsEntry().isDirectory) {
                    files.push(items[i].getAsFile());
                  }
                }
              }
            } else {
              var fileList = evt.dataTransfer.files;
              if (fileList != null) {
                for (var i = 0; i < fileList.length; i++) {
                  files.push(fileList.item(i));
                }
              }
            }
            (function waitForProcess(delay) {
              $timeout(function () {
                if (!processing) {
                  callback(files);
                } else {
                  waitForProcess(10);
                }
              }, delay || 0);
            }());
          }
          var processing = 0;
          function traverseFileTree(files, entry, path) {
            if (entry != null) {
              if (entry.isDirectory) {
                var dirReader = entry.createReader();
                processing++;
                dirReader.readEntries(function (entries) {
                  for (var i = 0; i < entries.length; i++) {
                    traverseFileTree(files, entries[i], (path ? path : '') + entry.name + '/');
                  }
                  processing--;
                });
              } else {
                processing++;
                entry.file(function (file) {
                  processing--;
                  file._relativePath = (path ? path : '') + file.name;
                  files.push(file);
                });
              }
            }
          }
        }
      };
    }
  ]);
}());
!function () {
  'undefined' == typeof Math.sgn && (Math.sgn = function (a) {
    return 0 == a ? 0 : a > 0 ? 1 : -1;
  });
  var a = {
      subtract: function (a, b) {
        return {
          x: a.x - b.x,
          y: a.y - b.y
        };
      },
      dotProduct: function (a, b) {
        return a.x * b.x + a.y * b.y;
      },
      square: function (a) {
        return Math.sqrt(a.x * a.x + a.y * a.y);
      },
      scale: function (a, b) {
        return {
          x: a.x * b,
          y: a.y * b
        };
      }
    }, b = 64, c = Math.pow(2, -b - 1), d = function (b, c) {
      for (var d = [], e = f(b, c), h = c.length - 1, i = 2 * h - 1, j = g(e, i, d, 0), k = a.subtract(b, c[0]), m = a.square(k), n = 0, o = 0; j > o; o++) {
        k = a.subtract(b, l(c, h, d[o], null, null));
        var p = a.square(k);
        m > p && (m = p, n = d[o]);
      }
      return k = a.subtract(b, c[h]), p = a.square(k), m > p && (m = p, n = 1), {
        location: n,
        distance: m
      };
    }, e = function (a, b) {
      var c = d(a, b);
      return {
        point: l(b, b.length - 1, c.location, null, null),
        location: c.location
      };
    }, f = function (b, c) {
      for (var d = c.length - 1, e = 2 * d - 1, f = [], g = [], h = [], i = [], k = [
            [
              1,
              0.6,
              0.3,
              0.1
            ],
            [
              0.4,
              0.6,
              0.6,
              0.4
            ],
            [
              0.1,
              0.3,
              0.6,
              1
            ]
          ], l = 0; d >= l; l++)
        f[l] = a.subtract(c[l], b);
      for (var l = 0; d - 1 >= l; l++)
        g[l] = a.subtract(c[l + 1], c[l]), g[l] = a.scale(g[l], 3);
      for (var m = 0; d - 1 >= m; m++)
        for (var n = 0; d >= n; n++)
          h[m] || (h[m] = []), h[m][n] = a.dotProduct(g[m], f[n]);
      for (l = 0; e >= l; l++)
        i[l] || (i[l] = []), i[l].y = 0, i[l].x = parseFloat(l) / e;
      for (var o = d, p = d - 1, q = 0; o + p >= q; q++) {
        var r = Math.max(0, q - p), s = Math.min(q, o);
        for (l = r; s >= l; l++)
          j = q - l, i[l + j].y += h[j][l] * k[j][l];
      }
      return i;
    }, g = function (a, c, d, e) {
      var f, j, m = [], n = [], o = [], p = [];
      switch (h(a, c)) {
      case 0:
        return 0;
      case 1:
        if (e >= b)
          return d[0] = (a[0].x + a[c].x) / 2, 1;
        if (i(a, c))
          return d[0] = k(a, c), 1;
      }
      l(a, c, 0.5, m, n), f = g(m, c, o, e + 1), j = g(n, c, p, e + 1);
      for (var q = 0; f > q; q++)
        d[q] = o[q];
      for (var q = 0; j > q; q++)
        d[q + f] = p[q];
      return f + j;
    }, h = function (a, b) {
      var c, d, e = 0;
      c = d = Math.sgn(a[0].y);
      for (var f = 1; b >= f; f++)
        c = Math.sgn(a[f].y), c != d && e++, d = c;
      return e;
    }, i = function (a, b) {
      var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s;
      i = a[0].y - a[b].y, j = a[b].x - a[0].x, k = a[0].x * a[b].y - a[b].x * a[0].y;
      for (var t = max_distance_below = 0, u = 1; b > u; u++) {
        var v = i * a[u].x + j * a[u].y + k;
        v > t ? t = v : max_distance_below > v && (max_distance_below = v);
      }
      return n = 0, o = 1, p = 0, q = i, r = j, s = k - t, l = n * r - q * o, m = 1 / l, e = (o * s - r * p) * m, q = i, r = j, s = k - max_distance_below, l = n * r - q * o, m = 1 / l, f = (o * s - r * p) * m, g = Math.min(e, f), h = Math.max(e, f), d = h - g, c > d ? 1 : 0;
    }, k = function (a, b) {
      var c = 1, d = 0, e = a[b].x - a[0].x, f = a[b].y - a[0].y, g = a[0].x - 0, h = a[0].y - 0, i = e * d - f * c, j = 1 / i, k = (e * h - f * g) * j;
      return 0 + c * k;
    }, l = function (a, b, c, d, e) {
      for (var f = [[]], g = 0; b >= g; g++)
        f[0][g] = a[g];
      for (var h = 1; b >= h; h++)
        for (var g = 0; b - h >= g; g++)
          f[h] || (f[h] = []), f[h][g] || (f[h][g] = {}), f[h][g].x = (1 - c) * f[h - 1][g].x + c * f[h - 1][g + 1].x, f[h][g].y = (1 - c) * f[h - 1][g].y + c * f[h - 1][g + 1].y;
      if (null != d)
        for (g = 0; b >= g; g++)
          d[g] = f[g][0];
      if (null != e)
        for (g = 0; b >= g; g++)
          e[g] = f[b - g][g];
      return f[b][0];
    }, m = {}, n = function (a) {
      var b = m[a];
      if (!b) {
        b = [];
        var c = function () {
            return function (b) {
              return Math.pow(b, a);
            };
          }, d = function () {
            return function (b) {
              return Math.pow(1 - b, a);
            };
          }, e = function (a) {
            return function () {
              return a;
            };
          }, f = function () {
            return function (a) {
              return a;
            };
          }, g = function () {
            return function (a) {
              return 1 - a;
            };
          }, h = function (a) {
            return function (b) {
              for (var c = 1, d = 0; d < a.length; d++)
                c *= a[d](b);
              return c;
            };
          };
        b.push(new c());
        for (var i = 1; a > i; i++) {
          for (var j = [new e(a)], k = 0; a - i > k; k++)
            j.push(new f());
          for (var k = 0; i > k; k++)
            j.push(new g());
          b.push(new h(j));
        }
        b.push(new d()), m[a] = b;
      }
      return b;
    }, o = function (a, b) {
      for (var c = n(a.length - 1), d = 0, e = 0, f = 0; f < a.length; f++)
        d += a[f].x * c[f](b), e += a[f].y * c[f](b);
      return {
        x: d,
        y: e
      };
    }, p = function (a, b) {
      return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
    }, q = function (a) {
      return a[0].x == a[1].x && a[0].y == a[1].y;
    }, r = function (a, b, c) {
      if (q(a))
        return {
          point: a[0],
          location: b
        };
      for (var d = o(a, b), e = 0, f = b, g = c > 0 ? 1 : -1, h = null; e < Math.abs(c);)
        f += 0.005 * g, h = o(a, f), e += p(h, d), d = h;
      return {
        point: h,
        location: f
      };
    }, s = function (a) {
      if (q(a))
        return 0;
      for (var b = o(a, 0), c = 0, d = 0, e = 1, f = null; 1 > d;)
        d += 0.005 * e, f = o(a, d), c += p(f, b), b = f;
      return c;
    }, t = function (a, b, c) {
      return r(a, b, c).point;
    }, u = function (a, b, c) {
      return r(a, b, c).location;
    }, v = function (a, b) {
      var c = o(a, b), d = o(a.slice(0, a.length - 1), b), e = d.y - c.y, f = d.x - c.x;
      return 0 == e ? 1 / 0 : Math.atan(e / f);
    }, w = function (a, b, c) {
      var d = r(a, b, c);
      return d.location > 1 && (d.location = 1), d.location < 0 && (d.location = 0), v(a, d.location);
    }, x = function (a, b, c, d) {
      d = null == d ? 0 : d;
      var e = r(a, b, d), f = v(a, e.location), g = Math.atan(-1 / f), h = c / 2 * Math.sin(g), i = c / 2 * Math.cos(g);
      return [
        {
          x: e.point.x + i,
          y: e.point.y + h
        },
        {
          x: e.point.x - i,
          y: e.point.y - h
        }
      ];
    };
  window.jsBezier = {
    distanceFromCurve: d,
    gradientAtPoint: v,
    gradientAtPointAlongCurveFrom: w,
    nearestPointOnCurve: e,
    pointOnCurve: o,
    pointAlongCurveFrom: t,
    perpendicularToCurveAt: x,
    locationAlongCurveFrom: u,
    getLength: s
  };
}(), function () {
  'use strict';
  var a = this.Biltong = {}, b = function (a) {
      return '[object Array]' === Object.prototype.toString.call(a);
    }, c = function (a, c, d) {
      return a = b(a) ? a : [
        a.x,
        a.y
      ], c = b(c) ? c : [
        c.x,
        c.y
      ], d(a, c);
    }, d = a.gradient = function (a, b) {
      return c(a, b, function (a, b) {
        return b[0] == a[0] ? b[1] > a[1] ? 1 / 0 : -1 / 0 : b[1] == a[1] ? b[0] > a[0] ? 0 : -0 : (b[1] - a[1]) / (b[0] - a[0]);
      });
    }, e = (a.normal = function (a, b) {
      return -1 / d(a, b);
    }, a.lineLength = function (a, b) {
      return c(a, b, function (a, b) {
        return Math.sqrt(Math.pow(b[1] - a[1], 2) + Math.pow(b[0] - a[0], 2));
      });
    }, a.quadrant = function (a, b) {
      return c(a, b, function (a, b) {
        return b[0] > a[0] ? b[1] > a[1] ? 2 : 1 : b[0] == a[0] ? b[1] > a[1] ? 2 : 1 : b[1] > a[1] ? 3 : 4;
      });
    }), f = (a.theta = function (a, b) {
      return c(a, b, function (a, b) {
        var c = d(a, b), f = Math.atan(c), g = e(a, b);
        return (4 == g || 3 == g) && (f += Math.PI), 0 > f && (f += 2 * Math.PI), f;
      });
    }, a.intersects = function (a, b) {
      var c = a.x, d = a.x + a.w, e = a.y, f = a.y + a.h, g = b.x, h = b.x + b.w, i = b.y, j = b.y + b.h;
      return g >= c && d >= g && i >= e && f >= i || h >= c && d >= h && i >= e && f >= i || g >= c && d >= g && j >= e && f >= j || h >= c && d >= g && j >= e && f >= j || c >= g && h >= c && e >= i && j >= e || d >= g && h >= d && e >= i && j >= e || c >= g && h >= c && f >= i && j >= f || d >= g && h >= c && f >= i && j >= f;
    }, a.encloses = function (a, b, c) {
      var d = a.x, e = a.x + a.w, f = a.y, g = a.y + a.h, h = b.x, i = b.x + b.w, j = b.y, k = b.y + b.h, l = function (a, b, d, e) {
          return c ? b >= a && d >= e : b > a && d > e;
        };
      return l(d, h, e, i) && l(f, j, g, k);
    }, [
      null,
      [
        1,
        -1
      ],
      [
        1,
        1
      ],
      [
        -1,
        1
      ],
      [
        -1,
        -1
      ]
    ]), g = [
      null,
      [
        -1,
        -1
      ],
      [
        -1,
        1
      ],
      [
        1,
        1
      ],
      [
        1,
        -1
      ]
    ];
  a.pointOnLine = function (a, b, c) {
    var h = d(a, b), i = e(a, b), j = c > 0 ? f[i] : g[i], k = Math.atan(h), l = Math.abs(c * Math.sin(k)) * j[1], m = Math.abs(c * Math.cos(k)) * j[0];
    return {
      x: a.x + m,
      y: a.y + l
    };
  }, a.perpendicularLineTo = function (a, b, c) {
    var e = d(a, b), f = Math.atan(-1 / e), g = c / 2 * Math.sin(f), h = c / 2 * Math.cos(f);
    return [
      {
        x: b.x + h,
        y: b.y + g
      },
      {
        x: b.x - h,
        y: b.y - g
      }
    ];
  };
}.call(this), function () {
  'use strict';
  var a = { android: navigator.userAgent.toLowerCase().indexOf('android') > -1 }, b = function (a, b, c) {
      c = c || a.parentNode;
      for (var d = c.querySelectorAll(b), e = 0; e < d.length; e++)
        if (d[e] === a)
          return !0;
      return !1;
    }, c = function (a) {
      return 'string' == typeof a ? document.getElementById(a) : a;
    }, d = function (a) {
      return a.srcElement || a.target;
    }, e = function (a, b) {
      for (var c = 0, d = a.length; d > c && a[c] != b; c++);
      c < a.length && a.splice(c, 1);
    }, f = 1, g = function (a, b, c) {
      var d = f++;
      return a.__ta = a.__ta || {}, a.__ta[b] = a.__ta[b] || {}, a.__ta[b][d] = c, c.__tauid = d, d;
    }, h = function (a, b, c) {
      if (a.__ta && a.__ta[b] && delete a.__ta[b][c.__tauid], c.__taExtra) {
        for (var d = 0; d < c.__taExtra.length; d++)
          D(a, c.__taExtra[d][0], c.__taExtra[d][1]);
        c.__taExtra.length = 0;
      }
      c.__taUnstore && c.__taUnstore();
    }, i = function (a, c, e, f) {
      if (null == a)
        return e;
      var g = a.split(','), h = function (a) {
          h.__tauid = e.__tauid;
          for (var f = d(a), i = 0; i < g.length; i++)
            b(f, g[i], c) && e.apply(f, arguments);
        };
      return j(e, f, h), h;
    }, j = function (a, b, c) {
      a.__taExtra = a.__taExtra || [], a.__taExtra.push([
        b,
        c
      ]);
    }, k = function (a, b, c, d) {
      q && s[b] ? C(a, s[b], i(d, a, c, s[b]), c) : C(a, b, i(d, a, c, b), c);
    }, l = function (a, b, c, f) {
      if (null == a.__taSmartClicks) {
        var g = function (b) {
            a.__tad = w(b);
          }, h = function (b) {
            a.__tau = w(b);
          }, i = function (b) {
            if (a.__tad && a.__tau && a.__tad[0] === a.__tau[0] && a.__tad[1] === a.__tau[1])
              for (var c = 0; c < a.__taSmartClicks.length; c++)
                a.__taSmartClicks[c].apply(d(b), [b]);
          };
        k(a, 'mousedown', g, f), k(a, 'mouseup', h, f), k(a, 'click', i, f), a.__taSmartClicks = [];
      }
      a.__taSmartClicks.push(c), c.__taUnstore = function () {
        e(a.__taSmartClicks, c);
      };
    }, m = {
      tap: {
        touches: 1,
        taps: 1
      },
      dbltap: {
        touches: 1,
        taps: 2
      },
      contextmenu: {
        touches: 2,
        taps: 1
      }
    }, n = function (a, c) {
      return function (f, g, h, i) {
        if ('contextmenu' == g && r)
          k(f, g, h, i);
        else {
          if (null == f.__taTapHandler) {
            var j = f.__taTapHandler = {
                tap: [],
                dbltap: [],
                contextmenu: [],
                down: !1,
                taps: 0,
                downSelectors: []
              }, l = function (d) {
                for (var e = d.srcElement || d.target, g = 0; g < j.downSelectors.length; g++)
                  if (null == j.downSelectors[g] || b(e, j.downSelectors[g], f)) {
                    j.down = !0, setTimeout(o, a), setTimeout(p, c);
                    break;
                  }
              }, n = function (a) {
                if (j.down) {
                  var c = a.srcElement || a.target;
                  j.taps++;
                  var e = B(a);
                  for (var g in m) {
                    var h = m[g];
                    if (h.touches === e && (1 === h.taps || h.taps === j.taps))
                      for (var i = 0; i < j[g].length; i++)
                        (null == j[g][i][1] || b(c, j[g][i][1], f)) && j[g][i][0].apply(d(a), [a]);
                  }
                }
              }, o = function () {
                j.down = !1;
              }, p = function () {
                j.taps = 0;
              };
            k(f, 'mousedown', l), k(f, 'mouseup', n);
          }
          f.__taTapHandler.downSelectors.push(i), f.__taTapHandler[g].push([
            h,
            i
          ]), h.__taUnstore = function () {
            e(f.__taTapHandler[g], h);
          };
        }
      };
    }, o = function (a, b, c, d) {
      for (var e in c.__tamee[a])
        c.__tamee[a][e].apply(d, [b]);
    }, p = function () {
      var a = [];
      return function (c, e, f, h) {
        if (!c.__tamee) {
          c.__tamee = {
            over: !1,
            mouseenter: [],
            mouseexit: []
          };
          var j = function (e) {
              var f = d(e);
              (null == h && f == c && !c.__tamee.over || b(f, h, c) && (null == f.__tamee || !f.__tamee.over)) && (o('mouseenter', e, c, f), f.__tamee = f.__tamee || {}, f.__tamee.over = !0, a.push(f));
            }, k = function (e) {
              for (var f = d(e), g = 0; g < a.length; g++)
                f != a[g] || b(e.relatedTarget || e.toElement, '*', f) || (f.__tamee.over = !1, a.splice(g, 1), o('mouseexit', e, c, f));
            };
          C(c, 'mouseover', i(h, c, j, 'mouseover'), j), C(c, 'mouseout', i(h, c, k, 'mouseout'), k);
        }
        f.__taUnstore = function () {
          delete c.__tamee[e][f.__tauid];
        }, g(c, e, f), c.__tamee[e][f.__tauid] = f;
      };
    }, q = 'ontouchstart' in document.documentElement, r = 'onmousedown' in document.documentElement, s = {
      mousedown: 'touchstart',
      mouseup: 'touchend',
      mousemove: 'touchmove'
    }, t = function () {
      var a = -1;
      if ('Microsoft Internet Explorer' == navigator.appName) {
        var b = navigator.userAgent, c = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
        null != c.exec(b) && (a = parseFloat(RegExp.$1));
      }
      return a;
    }(), u = t > -1 && 9 > t, v = function (a, b) {
      if (null == a)
        return [
          0,
          0
        ];
      var c = A(a), d = z(c, 0);
      return [
        d[b + 'X'],
        d[b + 'Y']
      ];
    }, w = function (a) {
      return null == a ? [
        0,
        0
      ] : u ? [
        a.clientX + document.documentElement.scrollLeft,
        a.clientY + document.documentElement.scrollTop
      ] : v(a, 'page');
    }, x = function (a) {
      return v(a, 'screen');
    }, y = function (a) {
      return v(a, 'client');
    }, z = function (a, b) {
      return a.item ? a.item(b) : a[b];
    }, A = function (a) {
      return a.touches && a.touches.length > 0 ? a.touches : a.changedTouches && a.changedTouches.length > 0 ? a.changedTouches : a.targetTouches && a.targetTouches.length > 0 ? a.targetTouches : [a];
    }, B = function (a) {
      return A(a).length;
    }, C = function (a, b, c, d) {
      if (g(a, b, c), d.__tauid = c.__tauid, a.addEventListener)
        a.addEventListener(b, c, !1);
      else if (a.attachEvent) {
        var e = b + c.__tauid;
        a['e' + e] = c, a[e] = function () {
          a['e' + e] && a['e' + e](window.event);
        }, a.attachEvent('on' + b, a[e]);
      }
    }, D = function (a, b, d) {
      null != d && E(a, function () {
        var a = c(this);
        if (h(a, b, d), null != d.__tauid)
          if (a.removeEventListener)
            a.removeEventListener(b, d, !1);
          else if (this.detachEvent) {
            var e = b + d.__tauid;
            a[e] && a.detachEvent('on' + b, a[e]), a[e] = null, a['e' + e] = null;
          }
      });
    }, E = function (a, b) {
      if (null != a) {
        a = 'string' != typeof a && null == a.tagName && null != a.length ? a : 'string' == typeof a ? document.querySelectorAll(a) : [a];
        for (var c = 0; c < a.length; c++)
          b.apply(a[c]);
      }
    };
  this.Mottle = function (b) {
    b = b || {};
    var d = b.clickThreshold || 150, e = b.dblClickThreshold || 350, f = new p(), g = new n(d, e), h = b.smartClicks, i = function (a, b, d, e) {
        null != d && E(a, function () {
          var a = c(this);
          h && 'click' === b ? l(a, b, d, e) : 'tap' === b || 'dbltap' === b || 'contextmenu' === b ? g(a, b, d, e) : 'mouseenter' === b || 'mouseexit' == b ? f(a, b, d, e) : k(a, b, d, e);
        });
      };
    this.remove = function (a) {
      return E(a, function () {
        var a = c(this);
        if (a.__ta)
          for (var b in a.__ta)
            for (var d in a.__ta[b])
              D(a, b, a.__ta[b][d]);
        a.parentNode && a.parentNode.removeChild(a);
      }), this;
    }, this.on = function () {
      var a = arguments[0], b = 4 == arguments.length ? arguments[2] : null, c = arguments[1], d = arguments[arguments.length - 1];
      return i(a, c, d, b), this;
    }, this.off = function (a, b, c) {
      return D(a, b, c), this;
    }, this.trigger = function (b, d, e, f) {
      var g = q && s[d] ? s[d] : d, h = w(e), i = x(e), j = y(e);
      return E(b, function () {
        var b, k = c(this);
        e = e || {
          screenX: i[0],
          screenY: i[1],
          clientX: j[0],
          clientY: j[1]
        };
        var l = function (a) {
            f && (a.payload = f);
          }, m = {
            TouchEvent: function (a) {
              var b = document.createTouch(window, k, 0, h[0], h[1], i[0], i[1], j[0], j[1], 0, 0, 0, 0);
              a.initTouchEvent(g, !0, !0, window, 0, i[0], i[1], j[0], j[1], !1, !1, !1, !1, document.createTouchList(b));
            },
            MouseEvents: function (b) {
              if (b.initMouseEvent(g, !0, !0, window, 0, i[0], i[1], j[0], j[1], !1, !1, !1, !1, 1, k), a.android) {
                var c = document.createTouch(window, k, 0, h[0], h[1], i[0], i[1], j[0], j[1], 0, 0, 0, 0);
                b.touches = b.targetTouches = b.changedTouches = document.createTouchList(c);
              }
            }
          };
        if (document.createEvent) {
          var n = q && s[d] && !a.android, o = n ? 'TouchEvent' : 'MouseEvents';
          b = document.createEvent(o), m[o](b), l(b), k.dispatchEvent(b);
        } else
          document.createEventObject && (b = document.createEventObject(), b.eventType = b.eventName = g, b.screenX = i[0], b.screenY = i[1], b.clientX = j[0], b.clientY = j[1], l(b), k.fireEvent('on' + g, b));
      }), this;
    };
  }, Mottle.consume = function (a, b) {
    a.stopPropagation ? a.stopPropagation() : a.returnValue = !1, !b && a.preventDefault && a.preventDefault();
  }, Mottle.pageLocation = w;
}.call(this), function () {
  var a = function (a) {
      return '[object Array]' === Object.prototype.toString.call(a);
    }, b = function (a) {
      return '[object Number]' === Object.prototype.toString.call(a);
    }, c = function (a) {
      return 'string' == typeof a;
    }, d = function (a) {
      return 'boolean' == typeof a;
    }, e = function (a) {
      return null == a;
    }, f = function (a) {
      return null == a ? !1 : '[object Object]' === Object.prototype.toString.call(a);
    }, g = function (a) {
      return '[object Date]' === Object.prototype.toString.call(a);
    }, h = function (a) {
      return '[object Function]' === Object.prototype.toString.call(a);
    }, i = function (a) {
      for (var b in a)
        if (a.hasOwnProperty(b))
          return !1;
      return !0;
    }, j = this, k = j.jsPlumbUtil = {
      isArray: a,
      isString: c,
      isBoolean: d,
      isNull: e,
      isObject: f,
      isDate: g,
      isFunction: h,
      isEmpty: i,
      isNumber: b,
      clone: function (b) {
        if (c(b))
          return '' + b;
        if (d(b))
          return !!b;
        if (g(b))
          return new Date(b.getTime());
        if (h(b))
          return b;
        if (a(b)) {
          for (var e = [], i = 0; i < b.length; i++)
            e.push(this.clone(b[i]));
          return e;
        }
        if (f(b)) {
          var j = {};
          for (var k in b)
            j[k] = this.clone(b[k]);
          return j;
        }
        return b;
      },
      merge: function (b, e, g) {
        var h, i, j = {};
        for (g = g || [], i = 0; i < g.length; i++)
          j[g[i]] = !0;
        var k = this.clone(b);
        for (i in e)
          if (null == k[i])
            k[i] = e[i];
          else if (c(e[i]) || d(e[i]))
            j[i] ? (h = [], h.push.apply(h, a(k[i]) ? k[i] : [k[i]]), h.push.apply(h, a(e[i]) ? e[i] : [e[i]]), k[i] = h) : k[i] = e[i];
          else if (a(e[i]))
            h = [], a(k[i]) && h.push.apply(h, k[i]), h.push.apply(h, e[i]), k[i] = h;
          else if (f(e[i])) {
            f(k[i]) || (k[i] = {});
            for (var l in e[i])
              k[i][l] = e[i][l];
          }
        return k;
      },
      replace: function (a, b, c) {
        if (null != a) {
          var d = a, e = d;
          return b.replace(/([^\.])+/g, function (a, b, d, f) {
            var g = a.match(/([^\[0-9]+){1}(\[)([0-9+])/), h = d + a.length >= f.length, i = function () {
                return e[g[1]] || function () {
                  return e[g[1]] = [], e[g[1]];
                }();
              };
            if (h)
              g ? i()[g[3]] = c : e[a] = c;
            else if (g) {
              var j = i();
              e = j[g[3]] || function () {
                return j[g[3]] = {}, j[g[3]];
              }();
            } else
              e = e[a] || function () {
                return e[a] = {}, e[a];
              }();
          }), a;
        }
      },
      functionChain: function (a, b, c) {
        for (var d = 0; d < c.length; d++) {
          var e = c[d][0][c[d][1]].apply(c[d][0], c[d][2]);
          if (e === b)
            return e;
        }
        return a;
      },
      populate: function (b, d) {
        var e = function (a) {
            var b = a.match(/(\${.*?})/g);
            if (null != b)
              for (var c = 0; c < b.length; c++) {
                var e = d[b[c].substring(2, b[c].length - 1)] || '';
                null != e && (a = a.replace(b[c], e));
              }
            return a;
          }, g = function (b) {
            if (null != b) {
              if (c(b))
                return e(b);
              if (a(b)) {
                for (var d = [], h = 0; h < b.length; h++)
                  d.push(g(b[h]));
                return d;
              }
              if (f(b)) {
                var i = {};
                for (var j in b)
                  i[j] = g(b[j]);
                return i;
              }
              return b;
            }
          };
        return g(b);
      },
      convertStyle: function (a, b) {
        if ('transparent' === a)
          return a;
        var c = a, d = function (a) {
            return 1 == a.length ? '0' + a : a;
          }, e = function (a) {
            return d(Number(a).toString(16));
          }, f = /(rgb[a]?\()(.*)(\))/;
        if (a.match(f)) {
          var g = a.match(f)[2].split(',');
          c = '#' + e(g[0]) + e(g[1]) + e(g[2]), b || 4 != g.length || (c += e(g[3]));
        }
        return c;
      },
      findWithFunction: function (a, b) {
        if (a)
          for (var c = 0; c < a.length; c++)
            if (b(a[c]))
              return c;
        return -1;
      },
      indexOf: function (a, b) {
        return a.indexOf ? a.indexOf(b) : k.findWithFunction(a, function (a) {
          return a == b;
        });
      },
      removeWithFunction: function (a, b) {
        var c = k.findWithFunction(a, b);
        return c > -1 && a.splice(c, 1), -1 != c;
      },
      remove: function (a, b) {
        var c = k.indexOf(a, b);
        return c > -1 && a.splice(c, 1), -1 != c;
      },
      addWithFunction: function (a, b, c) {
        -1 == k.findWithFunction(a, c) && a.push(b);
      },
      addToList: function (a, b, c, d) {
        var e = a[b];
        return null == e && (e = [], a[b] = e), e[d ? 'unshift' : 'push'](c), e;
      },
      extend: function (b, c) {
        var d;
        for (c = a(c) ? c : [c], d = 0; d < c.length; d++)
          for (var e in c[d].prototype)
            c[d].prototype.hasOwnProperty(e) && (b.prototype[e] = c[d].prototype[e]);
        var f = function (a, b) {
            return function () {
              for (d = 0; d < c.length; d++)
                c[d].prototype[a] && c[d].prototype[a].apply(this, arguments);
              return b.apply(this, arguments);
            };
          }, g = function (a) {
            for (var c in a)
              b.prototype[c] = f(c, a[c]);
          };
        if (arguments.length > 2)
          for (d = 2; d < arguments.length; d++)
            g(arguments[d]);
        return b;
      },
      uuid: function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (a) {
          var b = 0 | 16 * Math.random(), c = 'x' == a ? b : 8 | 3 & b;
          return c.toString(16);
        });
      },
      logEnabled: !0,
      log: function () {
        if (k.logEnabled && 'undefined' != typeof console)
          try {
            var a = arguments[arguments.length - 1];
            console.log(a);
          } catch (b) {
          }
      },
      wrap: function (a, b, c) {
        return a = a || function () {
        }, b = b || function () {
        }, function () {
          var d = null;
          try {
            d = b.apply(this, arguments);
          } catch (e) {
            k.log('jsPlumb function failed : ' + e);
          }
          if (null == c || d !== c)
            try {
              d = a.apply(this, arguments);
            } catch (e) {
              k.log('wrapped function failed : ' + e);
            }
          return d;
        };
      }
    };
  k.EventGenerator = function () {
    var a = {}, b = !1, c = { ready: !0 };
    this.bind = function (b, c, d) {
      return k.addToList(a, b, c, d), this;
    }, this.fire = function (d, e, f) {
      if (!b && a[d]) {
        var g = a[d].length, h = 0, i = !1, j = null;
        if (!this.shouldFireEvent || this.shouldFireEvent(d, e, f))
          for (; !i && g > h && j !== !1;) {
            if (c[d])
              a[d][h].apply(this, [
                e,
                f
              ]);
            else
              try {
                j = a[d][h].apply(this, [
                  e,
                  f
                ]);
              } catch (l) {
                k.log('jsPlumb: fire failed for event ' + d + ' : ' + l);
              }
            h++, (null == a || null == a[d]) && (i = !0);
          }
      }
      return this;
    }, this.unbind = function (b) {
      return b ? delete a[b] : a = {}, this;
    }, this.getListener = function (b) {
      return a[b];
    }, this.setSuspendEvents = function (a) {
      b = a;
    }, this.isSuspendEvents = function () {
      return b;
    }, this.cleanupListeners = function () {
      for (var b in a)
        a[b] = null;
    };
  }, k.EventGenerator.prototype = {
    cleanup: function () {
      this.cleanupListeners();
    }
  }, Function.prototype.bind || (Function.prototype.bind = function (a) {
    if ('function' != typeof this)
      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    var b = Array.prototype.slice.call(arguments, 1), c = this, d = function () {
      }, e = function () {
        return c.apply(this instanceof d && a ? this : a, b.concat(Array.prototype.slice.call(arguments)));
      };
    return d.prototype = this.prototype, e.prototype = new d(), e;
  });
}.call(this), function () {
  'use strict';
  var a = this, b = a.jsPlumbUtil;
  b.ieVersion = /MSIE\s([\d.]+)/.test(navigator.userAgent) ? new Number(RegExp.$1) : -1, b.oldIE = b.ieVersion > -1 && b.ieVersion < 9, b.matchesSelector = function (a, b, c) {
    c = c || a.parentNode;
    for (var d = c.querySelectorAll(b), e = 0; e < d.length; e++)
      if (d[e] === a)
        return !0;
    return !1;
  }, b.consume = function (a, b) {
    a.stopPropagation ? a.stopPropagation() : a.returnValue = !1, !b && a.preventDefault && a.preventDefault();
  }, b.sizeElement = function (a, b, c, d, e) {
    a && (a.style.height = e + 'px', a.height = e, a.style.width = d + 'px', a.width = d, a.style.left = b + 'px', a.style.top = c + 'px');
  };
}.call(this), function () {
  var a = this, b = !!window.SVGAngle || document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1'), c = function () {
      if (void 0 === c.vml) {
        var a = document.body.appendChild(document.createElement('div'));
        a.innerHTML = '<v:shape id="vml_flag1" adj="1" />';
        var b = a.firstChild;
        null != b && null != b.style ? (b.style.behavior = 'url(#default#VML)', c.vml = b ? 'object' == typeof b.adj : !0) : c.vml = !1, a.parentNode.removeChild(a);
      }
      return c.vml;
    }, d = function () {
      var a = -1;
      if ('Microsoft Internet Explorer' == navigator.appName) {
        var b = navigator.userAgent, c = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
        null != c.exec(b) && (a = parseFloat(RegExp.$1));
      }
      return a;
    }(), e = d > -1 && 9 > d, f = function (a, b) {
      if (null == a)
        return [
          0,
          0
        ];
      var c = k(a), d = j(c, 0);
      return [
        d[b + 'X'],
        d[b + 'Y']
      ];
    }, g = function (a) {
      return null == a ? [
        0,
        0
      ] : e ? [
        a.clientX + document.documentElement.scrollLeft,
        a.clientY + document.documentElement.scrollTop
      ] : f(a, 'page');
    }, h = function (a) {
      return f(a, 'screen');
    }, i = function (a) {
      return f(a, 'client');
    }, j = function (a, b) {
      return a.item ? a.item(b) : a[b];
    }, k = function (a) {
      return a.touches && a.touches.length > 0 ? a.touches : a.changedTouches && a.changedTouches.length > 0 ? a.changedTouches : a.targetTouches && a.targetTouches.length > 0 ? a.targetTouches : [a];
    }, l = function (a) {
      var b = {}, c = [], d = {}, e = {}, f = {};
      this.register = function (g) {
        var h = a.getId(g), i = jsPlumbAdapter.getOffset(g, a);
        b[h] || (b[h] = g, c.push(g), d[h] = {});
        var j = function (b) {
          if (b)
            for (var c = 0; c < b.childNodes.length; c++)
              if (3 != b.childNodes[c].nodeType && 8 != b.childNodes[c].nodeType) {
                var g = jsPlumb.getElementObject(b.childNodes[c]), k = a.getId(b.childNodes[c], null, !0);
                if (k && e[k] && e[k] > 0) {
                  var l = jsPlumbAdapter.getOffset(g, a);
                  d[h][k] = {
                    id: k,
                    offset: {
                      left: l.left - i.left,
                      top: l.top - i.top
                    }
                  }, f[k] = h;
                }
                j(b.childNodes[c]);
              }
        };
        j(g);
      }, this.updateOffsets = function (b) {
        if (null != b) {
          var c = jsPlumb.getDOMElement(b), e = a.getId(c), g = d[e], h = jsPlumbAdapter.getOffset(c, a);
          if (g)
            for (var i in g) {
              var j = jsPlumb.getElementObject(i), k = jsPlumbAdapter.getOffset(j, a);
              d[e][i] = {
                id: i,
                offset: {
                  left: k.left - h.left,
                  top: k.top - h.top
                }
              }, f[i] = e;
            }
        }
      }, this.endpointAdded = function (c, g) {
        g = g || a.getId(c);
        var h = document.body, i = c.parentNode;
        for (e[g] = e[g] ? e[g] + 1 : 1; null != i && i != h;) {
          var j = a.getId(i, null, !0);
          if (j && b[j]) {
            var k = jsPlumbAdapter.getOffset(i, a);
            if (null == d[j][g]) {
              var l = jsPlumbAdapter.getOffset(c, a);
              d[j][g] = {
                id: g,
                offset: {
                  left: l.left - k.left,
                  top: l.top - k.top
                }
              }, f[g] = j;
            }
            break;
          }
          i = i.parentNode;
        }
      }, this.endpointDeleted = function (a) {
        if (e[a.elementId] && (e[a.elementId]--, e[a.elementId] <= 0))
          for (var b in d)
            d[b] && (delete d[b][a.elementId], delete f[a.elementId]);
      }, this.changeId = function (a, b) {
        d[b] = d[a], d[a] = {}, f[b] = f[a], f[a] = null;
      }, this.getElementsForDraggable = function (a) {
        return d[a];
      }, this.elementRemoved = function (a) {
        var b = f[a];
        b && (delete d[b][a], delete f[a]);
      }, this.reset = function () {
        b = {}, c = [], d = {}, e = {};
      }, this.dragEnded = function (b) {
        var c = a.getId(b), d = f[c];
        d && this.updateOffsets(d);
      }, this.setParent = function (b, c, e, g) {
        var h = f[c];
        if (h) {
          d[g] || (d[g] = {}), d[g][c] = d[h][c], delete d[h][c];
          var i = jsPlumbAdapter.getOffset(e, a), j = jsPlumbAdapter.getOffset(b, a);
          d[g][c].offset = {
            left: j.left - i.left,
            top: j.top - i.top
          }, f[c] = g;
        }
      }, this.getDragAncestor = function (b) {
        var c = jsPlumb.getDOMElement(b), d = a.getId(c), e = f[d];
        return e ? jsPlumb.getDOMElement(e) : null;
      };
    };
  window.console || (window.console = {
    time: function () {
    },
    timeEnd: function () {
    },
    group: function () {
    },
    groupEnd: function () {
    },
    log: function () {
    }
  });
  var m = function (a) {
      return null == a ? null : a.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }, n = function (a, b) {
      b = m(b), 'undefined' != typeof a.className.baseVal ? a.className.baseVal = b : a.className = b;
    }, o = function (a) {
      return 'undefined' == typeof a.className.baseVal ? a.className : a.className.baseVal;
    }, p = function (a, b, c) {
      b = null == b ? [] : jsPlumbUtil.isArray(b) ? b : b.split(/\s+/), c = null == c ? [] : jsPlumbUtil.isArray(c) ? c : c.split(/\s+/);
      var d = o(a), e = d.split(/\s+/), f = function (a, b) {
          for (var c = 0; c < b.length; c++)
            if (a)
              -1 == jsPlumbUtil.indexOf(e, b[c]) && e.push(b[c]);
            else {
              var d = jsPlumbUtil.indexOf(e, b[c]);
              -1 != d && e.splice(d, 1);
            }
        };
      f(!0, b), f(!1, c), n(a, e.join(' '));
    }, q = function (a, b) {
      if (null != a)
        if ('string' == typeof a)
          b(jsPlumb.getDOMElement(a));
        else if (null != a.length)
          for (var c = 0; c < a.length; c++)
            b(jsPlumb.getDOMElement(a[c]));
        else
          b(a);
    };
  window.jsPlumbAdapter = {
    headless: !1,
    pageLocation: g,
    screenLocation: h,
    clientLocation: i,
    getAttribute: function (a, b) {
      return a.getAttribute(b);
    },
    setAttribute: function (a, b, c) {
      a.setAttribute(b, c);
    },
    appendToRoot: function (a) {
      document.body.appendChild(a);
    },
    getRenderModes: function () {
      return [
        'svg',
        'vml'
      ];
    },
    isRenderModeAvailable: function (a) {
      return {
        svg: b,
        vml: c()
      }[a];
    },
    getDragManager: function (a) {
      return new l(a);
    },
    setRenderMode: function (a) {
      var b;
      if (a) {
        a = a.toLowerCase();
        var c = this.isRenderModeAvailable('svg'), d = this.isRenderModeAvailable('vml');
        'svg' === a ? c ? b = 'svg' : d && (b = 'vml') : d && (b = 'vml');
      }
      return b;
    },
    addClass: function (a, b) {
      q(a, function (a) {
        p(a, b);
      });
    },
    hasClass: function (a, b) {
      return a = jsPlumb.getDOMElement(a), a.classList ? a.classList.contains(b) : -1 != o(a).indexOf(b);
    },
    removeClass: function (a, b) {
      q(a, function (a) {
        p(a, null, b);
      });
    },
    updateClasses: function (a, b, c) {
      q(a, function (a) {
        p(a, b, c);
      });
    },
    setClass: function (a, b) {
      q(a, function (a) {
        n(a, b);
      });
    },
    setPosition: function (a, b) {
      a.style.left = b.left + 'px', a.style.top = b.top + 'px';
    },
    getPosition: function (a) {
      var b = function (b) {
        var c = a.style[b];
        return c ? c.substring(0, c.length - 2) : 0;
      };
      return {
        left: b('left'),
        top: b('top')
      };
    },
    getOffset: function (a, b, c) {
      a = jsPlumb.getDOMElement(a);
      for (var d = b.getContainer(), e = a.offsetLeft, f = a.offsetTop, g = c || null != d && a.offsetParent != d ? a.offsetParent : null; null != g;)
        e += g.offsetLeft, f += g.offsetTop, g = c ? g.offsetParent : g.offsetParent == d ? null : g.offsetParent;
      return {
        left: e,
        top: f
      };
    },
    getPositionOnElement: function (a, b, c) {
      var d = 'undefined' != typeof b.getBoundingClientRect ? b.getBoundingClientRect() : {
          left: 0,
          top: 0,
          width: 0,
          height: 0
        }, e = document.body, f = document.documentElement, g = (b.offsetParent, window.pageYOffset || f.scrollTop || e.scrollTop), h = window.pageXOffset || f.scrollLeft || e.scrollLeft, i = f.clientTop || e.clientTop || 0, j = f.clientLeft || e.clientLeft || 0, k = 0, l = 0, m = d.top + g - i + k * c, n = d.left + h - j + l * c, o = jsPlumbAdapter.pageLocation(a), p = d.width || b.offsetWidth * c, q = d.height || b.offsetHeight * c, r = (o[0] - n) / p, s = (o[1] - m) / q;
      return [
        r,
        s
      ];
    },
    getAbsolutePosition: function (a) {
      var b = function (b) {
        var c = a.style[b];
        return c ? parseFloat(c.substring(0, c.length - 2)) : void 0;
      };
      return [
        b('left'),
        b('top')
      ];
    },
    setAbsolutePosition: function (b, c, d, e) {
      d ? a.jsPlumb.animate(b, {
        left: '+=' + (c[0] - d[0]),
        top: '+=' + (c[1] - d[1])
      }, e) : (b.style.left = c[0] + 'px', b.style.top = c[1] + 'px');
    }
  };
}.call(this), function () {
  'use strict';
  var a = jsPlumbUtil, b = function (a, b, c) {
      return jsPlumbAdapter.getOffset(a, b, c);
    }, c = function () {
      return '' + new Date().getTime();
    }, d = function (a) {
      if (a._jsPlumb.paintStyle && a._jsPlumb.hoverPaintStyle) {
        var b = {};
        t.extend(b, a._jsPlumb.paintStyle), t.extend(b, a._jsPlumb.hoverPaintStyle), delete a._jsPlumb.hoverPaintStyle, b.gradient && a._jsPlumb.paintStyle.fillStyle && delete b.gradient, a._jsPlumb.hoverPaintStyle = b;
      }
    }, e = [
      'click',
      'dblclick',
      'mouseover',
      'mouseout',
      'mousemove',
      'mousedown',
      'mouseup',
      'contextmenu'
    ], f = function (a, b, c, d) {
      var e = a.getAttachedElements();
      if (e)
        for (var f = 0, g = e.length; g > f; f++)
          d && d == e[f] || e[f].setHover(b, !0, c);
    }, g = function (a) {
      return null == a ? null : a.split(' ');
    }, h = function (b, c, d) {
      if (b.getDefaultType) {
        for (var e = b.getTypeDescriptor(), f = a.merge({}, b.getDefaultType()), g = 0, h = b._jsPlumb.types.length; h > g; g++)
          f = a.merge(f, b._jsPlumb.instance.getType(b._jsPlumb.types[g], e), ['cssClass']);
        c && (f = a.populate(f, c)), b.applyType(f, d), d || b.repaint();
      }
    }, i = window.jsPlumbUIComponent = function (b) {
      jsPlumbUtil.EventGenerator.apply(this, arguments);
      var c = this, d = arguments, e = c.idPrefix, f = e + new Date().getTime();
      if (this._jsPlumb = {
          instance: b._jsPlumb,
          parameters: b.parameters || {},
          paintStyle: null,
          hoverPaintStyle: null,
          paintStyleInUse: null,
          hover: !1,
          beforeDetach: b.beforeDetach,
          beforeDrop: b.beforeDrop,
          overlayPlacements: [],
          hoverClass: b.hoverClass || b._jsPlumb.Defaults.HoverClass,
          types: []
        }, this.getId = function () {
          return f;
        }, b.events)
        for (var g in b.events)
          c.bind(g, b.events[g]);
      this.clone = function () {
        var a = {};
        return this.constructor.apply(a, d), a;
      }.bind(this), this.isDetachAllowed = function (b) {
        var c = !0;
        if (this._jsPlumb.beforeDetach)
          try {
            c = this._jsPlumb.beforeDetach(b);
          } catch (d) {
            a.log('jsPlumb: beforeDetach callback failed', d);
          }
        return c;
      }, this.isDropAllowed = function (b, c, d, e, f, g, h) {
        var i = this._jsPlumb.instance.checkCondition('beforeDrop', {
            sourceId: b,
            targetId: c,
            scope: d,
            connection: e,
            dropEndpoint: f,
            source: g,
            target: h
          });
        if (this._jsPlumb.beforeDrop)
          try {
            i = this._jsPlumb.beforeDrop({
              sourceId: b,
              targetId: c,
              scope: d,
              connection: e,
              dropEndpoint: f,
              source: g,
              target: h
            });
          } catch (j) {
            a.log('jsPlumb: beforeDrop callback failed', j);
          }
        return i;
      };
      var h = [];
      this.setListenerComponent = function (a) {
        for (var b = 0; b < h.length; b++)
          h[b][3] = a;
      };
    }, j = function (a, b) {
      var c = a._jsPlumb.types[b], d = a._jsPlumb.instance.getType(c, a.getTypeDescriptor());
      null != d && d.cssClass && a.canvas && a._jsPlumb.instance.removeClass(a.canvas, d.cssClass);
    };
  jsPlumbUtil.extend(i, jsPlumbUtil.EventGenerator, {
    getParameter: function (a) {
      return this._jsPlumb.parameters[a];
    },
    setParameter: function (a, b) {
      this._jsPlumb.parameters[a] = b;
    },
    getParameters: function () {
      return this._jsPlumb.parameters;
    },
    setParameters: function (a) {
      this._jsPlumb.parameters = a;
    },
    addClass: function (a) {
      jsPlumbAdapter.addClass(this.canvas, a);
    },
    removeClass: function (a) {
      jsPlumbAdapter.removeClass(this.canvas, a);
    },
    updateClasses: function (a, b) {
      jsPlumbAdapter.updateClasses(this.canvas, a, b);
    },
    setType: function (a, b, c) {
      this.clearTypes(), this._jsPlumb.types = g(a) || [], h(this, b, c);
    },
    getType: function () {
      return this._jsPlumb.types;
    },
    reapplyTypes: function (a, b) {
      h(this, a, b);
    },
    hasType: function (a) {
      return -1 != jsPlumbUtil.indexOf(this._jsPlumb.types, a);
    },
    addType: function (a, b, c) {
      var d = g(a), e = !1;
      if (null != d) {
        for (var f = 0, i = d.length; i > f; f++)
          this.hasType(d[f]) || (this._jsPlumb.types.push(d[f]), e = !0);
        e && h(this, b, c);
      }
    },
    removeType: function (b, c) {
      var d = g(b), e = !1, f = function (b) {
          var c = a.indexOf(this._jsPlumb.types, b);
          return -1 != c ? (j(this, c), this._jsPlumb.types.splice(c, 1), !0) : !1;
        }.bind(this);
      if (null != d) {
        for (var i = 0, k = d.length; k > i; i++)
          e = f(d[i]) || e;
        e && h(this, null, c);
      }
    },
    clearTypes: function (a) {
      for (var b = this._jsPlumb.types.length, c = 0; b > c; c++)
        j(this, 0), this._jsPlumb.types.splice(0, 1);
      h(this, {}, a);
    },
    toggleType: function (a, b, c) {
      var d = g(a);
      if (null != d) {
        for (var e = 0, f = d.length; f > e; e++) {
          var i = jsPlumbUtil.indexOf(this._jsPlumb.types, d[e]);
          -1 != i ? (j(this, i), this._jsPlumb.types.splice(i, 1)) : this._jsPlumb.types.push(d[e]);
        }
        h(this, b, c);
      }
    },
    applyType: function (a, b) {
      if (this.setPaintStyle(a.paintStyle, b), this.setHoverPaintStyle(a.hoverPaintStyle, b), a.parameters)
        for (var c in a.parameters)
          this.setParameter(c, a.parameters[c]);
    },
    setPaintStyle: function (a, b) {
      this._jsPlumb.paintStyle = a, this._jsPlumb.paintStyleInUse = this._jsPlumb.paintStyle, d(this), b || this.repaint();
    },
    getPaintStyle: function () {
      return this._jsPlumb.paintStyle;
    },
    setHoverPaintStyle: function (a, b) {
      this._jsPlumb.hoverPaintStyle = a, d(this), b || this.repaint();
    },
    getHoverPaintStyle: function () {
      return this._jsPlumb.hoverPaintStyle;
    },
    destroy: function () {
      this.cleanupListeners(), this.clone = null, this._jsPlumb = null;
    },
    isHover: function () {
      return this._jsPlumb.hover;
    },
    setHover: function (a, b, d) {
      if (this._jsPlumb && !this._jsPlumb.instance.currentlyDragging && !this._jsPlumb.instance.isHoverSuspended()) {
        if (this._jsPlumb.hover = a, null != this.canvas) {
          if (null != this._jsPlumb.instance.hoverClass) {
            var e = a ? 'addClass' : 'removeClass';
            this._jsPlumb.instance[e](this.canvas, this._jsPlumb.instance.hoverClass);
          }
          null != this._jsPlumb.hoverClass && this._jsPlumb.instance[e](this.canvas, this._jsPlumb.hoverClass);
        }
        null != this._jsPlumb.hoverPaintStyle && (this._jsPlumb.paintStyleInUse = a ? this._jsPlumb.hoverPaintStyle : this._jsPlumb.paintStyle, this._jsPlumb.instance.isSuspendDrawing() || (d = d || c(), this.repaint({
          timestamp: d,
          recalc: !1
        }))), this.getAttachedElements && !b && f(this, a, c(), this);
      }
    }
  });
  var k = '__label', l = function (a, b) {
      for (var c = -1, d = 0, e = a._jsPlumb.overlays.length; e > d; d++)
        if (b === a._jsPlumb.overlays[d].id) {
          c = d;
          break;
        }
      return c;
    }, m = function (a, b) {
      var c = {
          cssClass: b.cssClass,
          labelStyle: a.labelStyle,
          id: k,
          component: a,
          _jsPlumb: a._jsPlumb.instance
        }, d = t.extend(c, b);
      return new t.Overlays[(a._jsPlumb.instance.getRenderMode())].Label(d);
    }, n = function (b, c) {
      var d = null;
      if (a.isArray(c)) {
        var e = c[0], f = t.extend({
            component: b,
            _jsPlumb: b._jsPlumb.instance
          }, c[1]);
        3 == c.length && t.extend(f, c[2]), d = new t.Overlays[(b._jsPlumb.instance.getRenderMode())][e](f);
      } else
        d = c.constructor == String ? new t.Overlays[(b._jsPlumb.instance.getRenderMode())][c]({
          component: b,
          _jsPlumb: b._jsPlumb.instance
        }) : c;
      b._jsPlumb.overlays.push(d);
    }, o = function (a, b) {
      var c = a.defaultOverlayKeys || [], d = b.overlays, e = function (b) {
          return a._jsPlumb.instance.Defaults[b] || t.Defaults[b] || [];
        };
      d || (d = []);
      for (var f = 0, g = c.length; g > f; f++)
        d.unshift.apply(d, e(c[f]));
      return d;
    }, p = window.OverlayCapableJsPlumbUIComponent = function (a) {
      i.apply(this, arguments), this._jsPlumb.overlays = [];
      var b = o(this, a);
      if (b)
        for (var c = 0, d = b.length; d > c; c++)
          n(this, b[c]);
      if (a.label) {
        var e = a.labelLocation || this.defaultLabelLocation || 0.5, f = a.labelStyle || this._jsPlumb.instance.Defaults.LabelStyle;
        this._jsPlumb.overlays.push(m(this, {
          label: a.label,
          location: e,
          labelStyle: f
        }));
      }
      this.setListenerComponent = function (a) {
        if (this._jsPlumb)
          for (var b = 0; b < this._jsPlumb.overlays.length; b++)
            this._jsPlumb.overlays[b].setListenerComponent(a);
      };
    };
  jsPlumbUtil.extend(p, i, {
    applyType: function (a, b) {
      if (this.removeAllOverlays(b), a.overlays)
        for (var c = 0, d = a.overlays.length; d > c; c++)
          this.addOverlay(a.overlays[c], !0);
    },
    setHover: function (a) {
      if (this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged())
        for (var b = 0, c = this._jsPlumb.overlays.length; c > b; b++)
          this._jsPlumb.overlays[b][a ? 'addClass' : 'removeClass'](this._jsPlumb.instance.hoverClass);
    },
    addOverlay: function (a, b) {
      n(this, a), b || this.repaint();
    },
    getOverlay: function (a) {
      var b = l(this, a);
      return b >= 0 ? this._jsPlumb.overlays[b] : null;
    },
    getOverlays: function () {
      return this._jsPlumb.overlays;
    },
    hideOverlay: function (a) {
      var b = this.getOverlay(a);
      b && b.hide();
    },
    hideOverlays: function () {
      for (var a = 0, b = this._jsPlumb.overlays.length; b > a; a++)
        this._jsPlumb.overlays[a].hide();
    },
    showOverlay: function (a) {
      var b = this.getOverlay(a);
      b && b.show();
    },
    showOverlays: function () {
      for (var a = 0, b = this._jsPlumb.overlays.length; b > a; a++)
        this._jsPlumb.overlays[a].show();
    },
    removeAllOverlays: function (a) {
      for (var b = 0, c = this._jsPlumb.overlays.length; c > b; b++)
        this._jsPlumb.overlays[b].cleanup && this._jsPlumb.overlays[b].cleanup();
      this._jsPlumb.overlays.splice(0, this._jsPlumb.overlays.length), this._jsPlumb.overlayPositions = null, a || this.repaint();
    },
    removeOverlay: function (a) {
      var b = l(this, a);
      if (-1 != b) {
        var c = this._jsPlumb.overlays[b];
        c.cleanup && c.cleanup(), this._jsPlumb.overlays.splice(b, 1), this._jsPlumb.overlayPositions && delete this._jsPlumb.overlayPositions[a];
      }
    },
    removeOverlays: function () {
      for (var a = 0, b = arguments.length; b > a; a++)
        this.removeOverlay(arguments[a]);
    },
    moveParent: function (a) {
      this.bgCanvas && (this.bgCanvas.parentNode.removeChild(this.bgCanvas), a.appendChild(this.bgCanvas)), this.canvas.parentNode.removeChild(this.canvas), a.appendChild(this.canvas);
      for (var b = 0; b < this._jsPlumb.overlays.length; b++)
        this._jsPlumb.overlays[b].isAppendedAtTopLevel && (this._jsPlumb.overlays[b].canvas.parentNode.removeChild(this._jsPlumb.overlays[b].canvas), a.appendChild(this._jsPlumb.overlays[b].canvas));
    },
    getLabel: function () {
      var a = this.getOverlay(k);
      return null != a ? a.getLabel() : null;
    },
    getLabelOverlay: function () {
      return this.getOverlay(k);
    },
    setLabel: function (a) {
      var b = this.getOverlay(k);
      if (b)
        a.constructor == String || a.constructor == Function ? b.setLabel(a) : (a.label && b.setLabel(a.label), a.location && b.setLocation(a.location));
      else {
        var c = a.constructor == String || a.constructor == Function ? { label: a } : a;
        b = m(this, c), this._jsPlumb.overlays.push(b);
      }
      this._jsPlumb.instance.isSuspendDrawing() || this.repaint();
    },
    cleanup: function () {
      for (var a = 0; a < this._jsPlumb.overlays.length; a++)
        this._jsPlumb.overlays[a].cleanup(), this._jsPlumb.overlays[a].destroy();
      this._jsPlumb.overlays.length = 0, this._jsPlumb.overlayPositions = null;
    },
    setVisible: function (a) {
      this[a ? 'showOverlays' : 'hideOverlays']();
    },
    setAbsoluteOverlayPosition: function (a, b) {
      this._jsPlumb.overlayPositions = this._jsPlumb.overlayPositions || {}, this._jsPlumb.overlayPositions[a.id] = b;
    },
    getAbsoluteOverlayPosition: function (a) {
      return this._jsPlumb.overlayPositions ? this._jsPlumb.overlayPositions[a.id] : null;
    }
  });
  var q = 0, r = function () {
      var a = q + 1;
      return q++, a;
    }, s = window.jsPlumbInstance = function (d) {
      this.Defaults = {
        Anchor: 'Bottom',
        Anchors: [
          null,
          null
        ],
        ConnectionsDetachable: !0,
        ConnectionOverlays: [],
        Connector: 'Bezier',
        Container: null,
        DoNotThrowErrors: !1,
        DragOptions: {},
        DropOptions: {},
        Endpoint: 'Dot',
        EndpointOverlays: [],
        Endpoints: [
          null,
          null
        ],
        EndpointStyle: { fillStyle: '#456' },
        EndpointStyles: [
          null,
          null
        ],
        EndpointHoverStyle: null,
        EndpointHoverStyles: [
          null,
          null
        ],
        HoverPaintStyle: null,
        LabelStyle: { color: 'black' },
        LogEnabled: !1,
        Overlays: [],
        MaxConnections: 1,
        PaintStyle: {
          lineWidth: 4,
          strokeStyle: '#456'
        },
        ReattachConnections: !1,
        RenderMode: 'svg',
        Scope: 'jsPlumb_DefaultScope'
      }, d && t.extend(this.Defaults, d), this.logEnabled = this.Defaults.LogEnabled, this._connectionTypes = {}, this._endpointTypes = {}, jsPlumbUtil.EventGenerator.apply(this);
      var f = this, g = r(), h = f.bind, j = {}, k = 1, l = function (a) {
          var b = f.getDOMElement(a);
          return {
            el: b,
            id: jsPlumbUtil.isString(a) && null == b ? a : X(b)
          };
        };
      this.getInstanceIndex = function () {
        return g;
      }, this.setZoom = function (a, b) {
        return jsPlumbUtil.oldIE || (k = a, f.fire('zoom', k), b && f.repaintEverything()), !jsPlumbUtil.oldIE;
      }, this.getZoom = function () {
        return k;
      };
      for (var m in this.Defaults)
        j[m] = this.Defaults[m];
      var n;
      this.setContainer = function (a) {
        a = this.getDOMElement(a), this.select().each(function (b) {
          b.moveParent(a);
        }), this.selectEndpoints().each(function (b) {
          b.moveParent(a);
        }), n = a;
        for (var b = function (a, b) {
              var c = b.srcElement || b.target, d = (c && c.parentNode ? c.parentNode._jsPlumb : null) || (c ? c._jsPlumb : null) || (c && c.parentNode && c.parentNode.parentNode ? c.parentNode.parentNode._jsPlumb : null);
              d && (d.fire(a, d, b), f.fire(a, d, b));
            }, c = function (a) {
              f.on(n, a, '._jsPlumb_connector, ._jsPlumb_connector > *', function (c) {
                b(a, c);
              }), f.on(n, a, '._jsPlumb_endpoint, ._jsPlumb_endpoint > *, ._jsPlumb_endpoint svg *', function (c) {
                b(a, c);
              }), f.on(n, a, '._jsPlumb_overlay, ._jsPlumb_overlay *', function (c) {
                b(a, c);
              });
            }, d = 0; d < e.length; d++)
          c(e[d]);
      }, this.getContainer = function () {
        return n;
      }, this.bind = function (a, b) {
        'ready' === a && p ? b() : h.apply(f, [
          a,
          b
        ]);
      }, f.importDefaults = function (a) {
        for (var b in a)
          f.Defaults[b] = a[b];
        return a.Container && f.setContainer(a.Container), f;
      }, f.restoreDefaults = function () {
        return f.Defaults = t.extend({}, j), f;
      };
      var o = null, p = !1, q = [], s = {}, u = {}, v = {}, w = {}, x = {}, y = {}, z = !1, A = [], B = !1, C = null, D = this.Defaults.Scope, E = null, F = 1, G = function () {
          return '' + F++;
        }, H = function (a, b) {
          n ? n.appendChild(a) : b ? this.getDOMElement(b).appendChild(a) : this.appendToRoot(a);
        }.bind(this), I = function (a, b, d, e) {
          if (!jsPlumbAdapter.headless && !B) {
            var g = X(a), h = f.dragManager.getElementsForDraggable(g);
            null == d && (d = c());
            var i = tb({
                elId: g,
                offset: b,
                recalc: !1,
                timestamp: d
              });
            if (h)
              for (var j in h)
                tb({
                  elId: h[j].id,
                  offset: {
                    left: i.o.left + h[j].offset.left,
                    top: i.o.top + h[j].offset.top
                  },
                  recalc: !1,
                  timestamp: d
                });
            if (f.anchorManager.redraw(g, b, d, null, e), h)
              for (var k in h)
                f.anchorManager.redraw(h[k].id, b, d, h[k].offset, e, !0);
          }
        }, J = function (b, c) {
          var d, e, g, h = null;
          if (a.isArray(b)) {
            h = [];
            for (var i = 0, j = b.length; j > i; i++)
              d = f.getElementObject(b[i]), g = f.getDOMElement(d), e = f.getAttribute(g, 'id'), h.push(c.apply(f, [
                g,
                e
              ]));
          } else
            d = f.getDOMElement(b), e = f.getId(d), h = c.apply(f, [
              d,
              e
            ]);
          return h;
        }, K = function (a) {
          return u[a];
        }, L = function (b, c, d, e) {
          if (!jsPlumbAdapter.headless) {
            var g = null == c ? !1 : c;
            if (g && t.isDragSupported(b, f) && !t.isAlreadyDraggable(b, f)) {
              var h = d || f.Defaults.DragOptions;
              h = t.extend({}, h);
              var i = t.dragEvents.drag, j = t.dragEvents.stop, k = t.dragEvents.start, l = f.getDOMElement(b), m = f.dragManager.getDragAncestor(l), n = {
                  left: 0,
                  top: 0
                }, o = n, p = !1;
              rb(e, b), h[k] = a.wrap(h[k], function () {
                return o = null != m ? jsPlumbAdapter.getOffset(m, f) : n, f.setHoverSuspended(!0), f.select({ source: b }).addClass(f.elementDraggingClass + ' ' + f.sourceElementDraggingClass, !0), f.select({ target: b }).addClass(f.elementDraggingClass + ' ' + f.targetElementDraggingClass, !0), f.setConnectionBeingDragged(!0), h.canDrag ? d.canDrag() : void 0;
              }, !1), h[i] = a.wrap(h[i], function () {
                var a = f.getUIPosition(arguments, f.getZoom());
                a.left += o.left, a.top += o.top, I(b, a, null, !0), p && f.addClass(b, 'jsPlumb_dragged'), p = !0;
              }), h[j] = a.wrap(h[j], function () {
                var a = f.getUIPosition(arguments, f.getZoom(), !0);
                I(b, a), p = !1, f.removeClass(b, 'jsPlumb_dragged'), f.setHoverSuspended(!1), f.select({ source: b }).removeClass(f.elementDraggingClass + ' ' + f.sourceElementDraggingClass, !0), f.select({ target: b }).removeClass(f.elementDraggingClass + ' ' + f.targetElementDraggingClass, !0), f.setConnectionBeingDragged(!1), f.dragManager.dragEnded(b);
              });
              var q = X(b);
              y[q] = !0;
              var r = y[q];
              h.disabled = null == r ? !1 : !r, f.initDraggable(b, h), f.dragManager.register(b);
            }
          }
        }, M = function (a, b) {
          for (var c = a.scope.split(/\s/), d = b.scope.split(/\s/), e = 0; e < c.length; e++)
            for (var f = 0; f < d.length; f++)
              if (d[f] == c[e])
                return !0;
          return !1;
        }, N = function (b, c) {
          var d = t.extend({}, b);
          if (c && t.extend(d, c), d.source && (d.source.endpoint ? d.sourceEndpoint = d.source : d.source = f.getDOMElement(d.source)), d.target && (d.target.endpoint ? d.targetEndpoint = d.target : d.target = f.getDOMElement(d.target)), b.uuids && (d.sourceEndpoint = K(b.uuids[0]), d.targetEndpoint = K(b.uuids[1])), d.sourceEndpoint && d.sourceEndpoint.isFull())
            return a.log(f, 'could not add connection; source endpoint is full'), void 0;
          if (d.targetEndpoint && d.targetEndpoint.isFull())
            return a.log(f, 'could not add connection; target endpoint is full'), void 0;
          if (!d.type && d.sourceEndpoint && (d.type = d.sourceEndpoint.connectionType), d.sourceEndpoint && d.sourceEndpoint.connectorOverlays) {
            d.overlays = d.overlays || [];
            for (var e = 0, g = d.sourceEndpoint.connectorOverlays.length; g > e; e++)
              d.overlays.push(d.sourceEndpoint.connectorOverlays[e]);
          }
          !d['pointer-events'] && d.sourceEndpoint && d.sourceEndpoint.connectorPointerEvents && (d['pointer-events'] = d.sourceEndpoint.connectorPointerEvents);
          var h = function (a, b) {
              var c = t.extend({}, a);
              for (var d in b)
                b[d] && (c[d] = b[d]);
              return c;
            }, i = function (a, b, c) {
              return f.addEndpoint(a, h(b, {
                anchor: d.anchors ? d.anchors[c] : d.anchor,
                endpoint: d.endpoints ? d.endpoints[c] : d.endpoint,
                paintStyle: d.endpointStyles ? d.endpointStyles[c] : d.endpointStyle,
                hoverPaintStyle: d.endpointHoverStyles ? d.endpointHoverStyles[c] : d.endpointHoverStyle
              }));
            }, j = function (a, b, c) {
              if (d[a] && !d[a].endpoint && !d[a + 'Endpoint'] && !d.newConnection) {
                var e = X(d[a]), f = c[e];
                if (f) {
                  if (!f.enabled)
                    return !1;
                  var g = null != f.endpoint && f.endpoint._jsPlumb ? f.endpoint : i(d[a], f.def, b);
                  if (f.uniqueEndpoint && (f.endpoint = g), g.isFull())
                    return !1;
                  d[a + 'Endpoint'] = g, g._doNotDeleteOnDetach = !1, g._deleteOnDetach = !0;
                }
              }
            };
          return j('source', 0, this.sourceEndpointDefinitions) !== !1 && j('target', 1, this.targetEndpointDefinitions) !== !1 ? (d.sourceEndpoint && d.targetEndpoint && (M(d.sourceEndpoint, d.targetEndpoint) || (d = null)), d) : void 0;
        }.bind(f), O = function (a) {
          var b = f.Defaults.ConnectionType || f.getDefaultConnectionType();
          a._jsPlumb = f, a.newConnection = O, a.newEndpoint = Q, a.endpointsByUUID = u, a.endpointsByElement = s, a.finaliseConnection = P;
          var c = new b(a);
          return c.id = 'con_' + G(), c.isDetachable() && (c.endpoints[0].initDraggable(), c.endpoints[1].initDraggable()), c;
        }, P = f.finaliseConnection = function (a, b, c, d) {
          if (b = b || {}, a.suspendedEndpoint || q.push(a), a.endpoints[0].isTemporarySource = !1, (null == a.suspendedEndpoint || d) && f.anchorManager.newConnection(a), I(a.source), !b.doNotFireConnectionEvent && b.fireEvent !== !1) {
            var e = {
                connection: a,
                source: a.source,
                target: a.target,
                sourceId: a.sourceId,
                targetId: a.targetId,
                sourceEndpoint: a.endpoints[0],
                targetEndpoint: a.endpoints[1]
              };
            f.fire('connection', e, c);
          }
        }, Q = function (a, b) {
          var c = f.Defaults.EndpointType || t.Endpoint, d = t.extend({}, a);
          d._jsPlumb = f, d.newConnection = O, d.newEndpoint = Q, d.endpointsByUUID = u, d.endpointsByElement = s, d.fireDetachEvent = $, d.elementId = b || X(d.source);
          var e = new c(d);
          return e.id = 'ep_' + G(), rb(d.elementId, d.source), jsPlumbAdapter.headless || f.dragManager.endpointAdded(d.source, b), e;
        }, R = function (a, b, c) {
          var d = s[a];
          if (d && d.length)
            for (var e = 0, f = d.length; f > e; e++) {
              for (var g = 0, h = d[e].connections.length; h > g; g++) {
                var i = b(d[e].connections[g]);
                if (i)
                  return;
              }
              c && c(d[e]);
            }
        }, S = function (a, b) {
          return J(a, function (a, c) {
            y[c] = b, this.isDragSupported(a) && this.setElementDraggable(a, b);
          });
        }, T = function (a, b, c) {
          b = 'block' === b;
          var d = null;
          c && (d = b ? function (a) {
            a.setVisible(!0, !0, !0);
          } : function (a) {
            a.setVisible(!1, !0, !0);
          });
          var e = l(a);
          R(e.id, function (a) {
            if (b && c) {
              var d = a.sourceId === e.id ? 1 : 0;
              a.endpoints[d].isVisible() && a.setVisible(!0);
            } else
              a.setVisible(b);
          }, d);
        }, U = function (a) {
          return J(a, function (a, b) {
            var c = null == y[b] ? !1 : y[b];
            return c = !c, y[b] = c, this.setDraggable(a, c), c;
          }.bind(this));
        }, V = function (a, b) {
          var c = null;
          b && (c = function (a) {
            var b = a.isVisible();
            a.setVisible(!b);
          }), R(a, function (a) {
            var b = a.isVisible();
            a.setVisible(!b);
          }, c);
        }, W = function (a) {
          var b = w[a];
          return b ? {
            o: b,
            s: A[a]
          } : tb({ elId: a });
        }, X = function (a, b, c) {
          if (jsPlumbUtil.isString(a))
            return a;
          if (null == a)
            return null;
          var d = f.getAttribute(a, 'id');
          return d && 'undefined' !== d || (2 == arguments.length && void 0 !== arguments[1] ? d = b : (1 == arguments.length || 3 == arguments.length && !arguments[2]) && (d = 'jsPlumb_' + g + '_' + G()), c || f.setAttribute(a, 'id', d)), d;
        };
      this.setConnectionBeingDragged = function (a) {
        z = a;
      }, this.isConnectionBeingDragged = function () {
        return z;
      }, this.connectorClass = '_jsPlumb_connector', this.hoverClass = '_jsPlumb_hover', this.endpointClass = '_jsPlumb_endpoint', this.endpointConnectedClass = '_jsPlumb_endpoint_connected', this.endpointFullClass = '_jsPlumb_endpoint_full', this.endpointDropAllowedClass = '_jsPlumb_endpoint_drop_allowed', this.endpointDropForbiddenClass = '_jsPlumb_endpoint_drop_forbidden', this.overlayClass = '_jsPlumb_overlay', this.draggingClass = '_jsPlumb_dragging', this.elementDraggingClass = '_jsPlumb_element_dragging', this.sourceElementDraggingClass = '_jsPlumb_source_element_dragging', this.targetElementDraggingClass = '_jsPlumb_target_element_dragging', this.endpointAnchorClassPrefix = '_jsPlumb_endpoint_anchor', this.hoverSourceClass = '_jsPlumb_source_hover', this.hoverTargetClass = '_jsPlumb_target_hover', this.dragSelectClass = '_jsPlumb_drag_select', this.Anchors = {}, this.Connectors = {
        svg: {},
        vml: {}
      }, this.Endpoints = {
        svg: {},
        vml: {}
      }, this.Overlays = {
        svg: {},
        vml: {}
      }, this.ConnectorRenderers = {}, this.SVG = 'svg', this.VML = 'vml', this.addEndpoint = function (b, c, d) {
        d = d || {};
        var e = t.extend({}, d);
        t.extend(e, c), e.endpoint = e.endpoint || f.Defaults.Endpoint, e.paintStyle = e.paintStyle || f.Defaults.EndpointStyle;
        for (var g = [], h = a.isArray(b) || null != b.length && !a.isString(b) ? b : [b], i = 0, j = h.length; j > i; i++) {
          e.source = f.getDOMElement(h[i]), pb(e.source);
          var k = X(e.source), l = Q(e, k), m = rb(k, e.source).info.o;
          a.addToList(s, k, l), B || l.paint({
            anchorLoc: l.anchor.compute({
              xy: [
                m.left,
                m.top
              ],
              wh: A[k],
              element: l,
              timestamp: C
            }),
            timestamp: C
          }), g.push(l), l._doNotDeleteOnDetach = !0;
        }
        return 1 == g.length ? g[0] : g;
      }, this.addEndpoints = function (b, c, d) {
        for (var e = [], g = 0, h = c.length; h > g; g++) {
          var i = f.addEndpoint(b, c[g], d);
          a.isArray(i) ? Array.prototype.push.apply(e, i) : e.push(i);
        }
        return e;
      }, this.animate = function (b, c, d) {
        d = d || {};
        var e = f.getElementObject(b), g = f.getDOMElement(b), h = X(g), i = t.animEvents.step, j = t.animEvents.complete;
        d[i] = a.wrap(d[i], function () {
          f.revalidate(h);
        }), d[j] = a.wrap(d[j], function () {
          f.revalidate(h);
        }), f.doAnimate(e, c, d);
      }, this.checkCondition = function (b, c) {
        var d = f.getListener(b), e = !0;
        if (d && d.length > 0)
          try {
            for (var g = 0, h = d.length; h > g; g++)
              e = e && d[g](c);
          } catch (i) {
            a.log(f, 'cannot check condition [' + b + ']' + i);
          }
        return e;
      }, this.connect = function (a, b) {
        var c, d = N(a, b);
        if (d) {
          if (null == d.source && null == d.sourceEndpoint)
            return jsPlumbUtil.log('Cannot establish connection - source does not exist'), void 0;
          if (null == d.target && null == d.targetEndpoint)
            return jsPlumbUtil.log('Cannot establish connection - target does not exist'), void 0;
          pb(d.source), c = O(d), P(c, d);
        }
        return c;
      };
      var Y = [
          {
            el: 'source',
            elId: 'sourceId',
            epDefs: 'sourceEndpointDefinitions'
          },
          {
            el: 'target',
            elId: 'targetId',
            epDefs: 'targetEndpointDefinitions'
          }
        ], Z = function (a, b, c, d) {
          var e, f, g, h = Y[c], i = a[h.elId], j = (a[h.el], a.endpoints[c]), k = {
              index: c,
              originalSourceId: 0 === c ? i : a.sourceId,
              newSourceId: a.sourceId,
              originalTargetId: 1 == c ? i : a.targetId,
              newTargetId: a.targetId,
              connection: a
            };
          if (b.constructor == t.Endpoint)
            e = b, e.addConnection(a);
          else if (f = X(b), g = this[h.epDefs][f], f === a[h.elId])
            e = null;
          else if (g) {
            if (!g.enabled)
              return;
            e = null != g.endpoint && g.endpoint._jsPlumb ? g.endpoint : this.addEndpoint(b, g.def), g.uniqueEndpoint && (g.endpoint = e), e._doNotDeleteOnDetach = !1, e._deleteOnDetach = !0, e.addConnection(a);
          } else
            e = a.makeEndpoint(0 === c, b, f), e._doNotDeleteOnDetach = !1, e._deleteOnDetach = !0;
          return null != e && (j.detachFromConnection(a), a.endpoints[c] = e, a[h.el] = e.element, a[h.elId] = e.elementId, k[0 === c ? 'newSourceId' : 'newTargetId'] = e.elementId, _(k), d || a.repaint()), k;
        }.bind(this);
      this.setSource = function (a, b, c) {
        var d = Z(a, b, 0, c);
        this.anchorManager.sourceChanged(d.originalSourceId, d.newSourceId, a);
      }, this.setTarget = function (a, b, c) {
        var d = Z(a, b, 1, c);
        this.anchorManager.updateOtherEndpoint(d.originalSourceId, d.originalTargetId, d.newTargetId, a);
      }, this.deleteEndpoint = function (a, b) {
        var c = 'string' == typeof a ? u[a] : a;
        return c && f.deleteObject({
          endpoint: c,
          dontUpdateHover: b
        }), f;
      }, this.deleteEveryEndpoint = function () {
        var a = f.setSuspendDrawing(!0);
        for (var b in s) {
          var c = s[b];
          if (c && c.length)
            for (var d = 0, e = c.length; e > d; d++)
              f.deleteEndpoint(c[d], !0);
        }
        return s = {}, v = {}, u = {}, f.anchorManager.reset(), f.dragManager.reset(), a || f.setSuspendDrawing(!1), f;
      };
      var $ = function (a, b, c) {
          var d = f.Defaults.ConnectionType || f.getDefaultConnectionType(), e = a.constructor == d, g = e ? {
              connection: a,
              source: a.source,
              target: a.target,
              sourceId: a.sourceId,
              targetId: a.targetId,
              sourceEndpoint: a.endpoints[0],
              targetEndpoint: a.endpoints[1]
            } : a;
          b && f.fire('connectionDetached', g, c), f.anchorManager.connectionDetached(g);
        }, _ = f.fireMoveEvent = function (a, b) {
          f.fire('connectionMoved', a, b);
        };
      this.unregisterEndpoint = function (a) {
        a._jsPlumb.uuid && (u[a._jsPlumb.uuid] = null), f.anchorManager.deleteEndpoint(a);
        for (var b in s) {
          var c = s[b];
          if (c) {
            for (var d = [], e = 0, g = c.length; g > e; e++)
              c[e] != a && d.push(c[e]);
            s[b] = d;
          }
          s[b].length < 1 && delete s[b];
        }
      }, this.detach = function () {
        if (0 !== arguments.length) {
          var a = f.Defaults.ConnectionType || f.getDefaultConnectionType(), b = arguments[0].constructor == a, c = 2 == arguments.length ? b ? arguments[1] || {} : arguments[0] : arguments[0], d = c.fireEvent !== !1, e = c.forceDetach, g = b ? arguments[0] : c.connection;
          if (g)
            (e || jsPlumbUtil.functionChain(!0, !1, [
              [
                g.endpoints[0],
                'isDetachAllowed',
                [g]
              ],
              [
                g.endpoints[1],
                'isDetachAllowed',
                [g]
              ],
              [
                g,
                'isDetachAllowed',
                [g]
              ],
              [
                f,
                'checkCondition',
                [
                  'beforeDetach',
                  g
                ]
              ]
            ])) && g.endpoints[0].detach(g, !1, !0, d);
          else {
            var h = t.extend({}, c);
            if (h.uuids)
              K(h.uuids[0]).detachFrom(K(h.uuids[1]), d);
            else if (h.sourceEndpoint && h.targetEndpoint)
              h.sourceEndpoint.detachFrom(h.targetEndpoint);
            else {
              var i = X(f.getDOMElement(h.source)), j = X(f.getDOMElement(h.target));
              R(i, function (a) {
                (a.sourceId == i && a.targetId == j || a.targetId == i && a.sourceId == j) && f.checkCondition('beforeDetach', a) && a.endpoints[0].detach(a, !1, !0, d);
              });
            }
          }
        }
      }, this.detachAllConnections = function (a, b) {
        b = b || {}, a = f.getDOMElement(a);
        var c = X(a), d = s[c];
        if (d && d.length)
          for (var e = 0, g = d.length; g > e; e++)
            d[e].detachAll(b.fireEvent !== !1);
        return f;
      }, this.detachEveryConnection = function (a) {
        return a = a || {}, f.doWhileSuspended(function () {
          for (var b in s) {
            var c = s[b];
            if (c && c.length)
              for (var d = 0, e = c.length; e > d; d++)
                c[d].detachAll(a.fireEvent !== !1);
          }
          q.length = 0;
        }), f;
      }, this.deleteObject = function (a) {
        var b = {
            endpoints: {},
            connections: {},
            endpointCount: 0,
            connectionCount: 0
          }, c = a.fireEvent !== !1, d = a.deleteAttachedObjects !== !1, e = function (c) {
            if (null != c && null == b.connections[c.id] && (a.dontUpdateHover || null == c._jsPlumb || c.setHover(!1), b.connections[c.id] = c, b.connectionCount++, d))
              for (var e = 0; e < c.endpoints.length; e++)
                c.endpoints[e]._deleteOnDetach && g(c.endpoints[e]);
          }, g = function (c) {
            if (null != c && null == b.endpoints[c.id] && (a.dontUpdateHover || null == c._jsPlumb || c.setHover(!1), b.endpoints[c.id] = c, b.endpointCount++, d))
              for (var f = 0; f < c.connections.length; f++) {
                var g = c.connections[f];
                e(g);
              }
          };
        a.connection ? e(a.connection) : g(a.endpoint);
        for (var h in b.connections) {
          var i = b.connections[h];
          i._jsPlumb && (jsPlumbUtil.removeWithFunction(q, function (a) {
            return i.id == a.id;
          }), $(i, c, a.originalEvent), i.endpoints[0].detachFromConnection(i), i.endpoints[1].detachFromConnection(i), i.cleanup(), i.destroy());
        }
        for (var j in b.endpoints) {
          var k = b.endpoints[j];
          k._jsPlumb && (f.unregisterEndpoint(k), k.cleanup(), k.destroy());
        }
        return b;
      }, this.draggable = function (a, b) {
        var c, d, e;
        if ('object' == typeof a && a.length)
          for (c = 0, d = a.length; d > c; c++)
            e = l(a[c]), e.el && L(e.el, !0, b, e.id);
        else
          e = l(a), e.el && L(e.el, !0, b, e.id);
        return f;
      };
      var ab = function (a, b, c, d) {
          for (var e = 0, f = a.length; f > e; e++)
            a[e][b].apply(a[e], c);
          return d(a);
        }, bb = function (a, b, c) {
          for (var d = [], e = 0, f = a.length; f > e; e++)
            d.push([
              a[e][b].apply(a[e], c),
              a[e]
            ]);
          return d;
        }, cb = function (a, b, c) {
          return function () {
            return ab(a, b, arguments, c);
          };
        }, db = function (a, b) {
          return function () {
            return bb(a, b, arguments);
          };
        }, eb = function (a, b) {
          var c = [];
          if (a)
            if ('string' == typeof a) {
              if ('*' === a)
                return a;
              c.push(a);
            } else if (b)
              c = a;
            else if (a.length)
              for (var d = 0, e = a.length; e > d; d++)
                c.push(l(a[d]).id);
            else
              c.push(l(a).id);
          return c;
        }, fb = function (a, b, c) {
          return '*' === a ? !0 : a.length > 0 ? -1 != jsPlumbUtil.indexOf(a, b) : !c;
        };
      this.getConnections = function (a, b) {
        a ? a.constructor == String && (a = { scope: a }) : a = {};
        for (var c = a.scope || f.getDefaultScope(), d = eb(c, !0), e = eb(a.source), g = eb(a.target), h = !b && d.length > 1 ? {} : [], i = function (a, c) {
              if (!b && d.length > 1) {
                var e = h[a];
                null == e && (e = h[a] = []), e.push(c);
              } else
                h.push(c);
            }, j = 0, k = q.length; k > j; j++) {
          var l = q[j];
          fb(d, l.scope) && fb(e, l.sourceId) && fb(g, l.targetId) && i(l.scope, l);
        }
        return h;
      };
      var gb = function (a, b) {
          return function (c) {
            for (var d = 0, e = a.length; e > d; d++)
              c(a[d]);
            return b(a);
          };
        }, hb = function (a) {
          return function (b) {
            return a[b];
          };
        }, ib = function (a, b) {
          var c, d, e = {
              length: a.length,
              each: gb(a, b),
              get: hb(a)
            }, f = [
              'setHover',
              'removeAllOverlays',
              'setLabel',
              'addClass',
              'addOverlay',
              'removeOverlay',
              'removeOverlays',
              'showOverlay',
              'hideOverlay',
              'showOverlays',
              'hideOverlays',
              'setPaintStyle',
              'setHoverPaintStyle',
              'setSuspendEvents',
              'setParameter',
              'setParameters',
              'setVisible',
              'repaint',
              'addType',
              'toggleType',
              'removeType',
              'removeClass',
              'setType',
              'bind',
              'unbind'
            ], g = [
              'getLabel',
              'getOverlay',
              'isHover',
              'getParameter',
              'getParameters',
              'getPaintStyle',
              'getHoverPaintStyle',
              'isVisible',
              'hasType',
              'getType',
              'isSuspendEvents'
            ];
          for (c = 0, d = f.length; d > c; c++)
            e[f[c]] = cb(a, f[c], b);
          for (c = 0, d = g.length; d > c; c++)
            e[g[c]] = db(a, g[c]);
          return e;
        }, jb = function (a) {
          var b = ib(a, jb);
          return t.extend(b, {
            setDetachable: cb(a, 'setDetachable', jb),
            setReattach: cb(a, 'setReattach', jb),
            setConnector: cb(a, 'setConnector', jb),
            detach: function () {
              for (var b = 0, c = a.length; c > b; b++)
                f.detach(a[b]);
            },
            isDetachable: db(a, 'isDetachable'),
            isReattach: db(a, 'isReattach')
          });
        }, kb = function (a) {
          var b = ib(a, kb);
          return t.extend(b, {
            setEnabled: cb(a, 'setEnabled', kb),
            setAnchor: cb(a, 'setAnchor', kb),
            isEnabled: db(a, 'isEnabled'),
            detachAll: function () {
              for (var b = 0, c = a.length; c > b; b++)
                a[b].detachAll();
            },
            remove: function () {
              for (var b = 0, c = a.length; c > b; b++)
                f.deleteObject({ endpoint: a[b] });
            }
          });
        };
      this.select = function (a) {
        return a = a || {}, a.scope = a.scope || '*', jb(a.connections || f.getConnections(a, !0));
      }, this.selectEndpoints = function (a) {
        a = a || {}, a.scope = a.scope || '*';
        var b = !a.element && !a.source && !a.target, c = b ? '*' : eb(a.element), d = b ? '*' : eb(a.source), e = b ? '*' : eb(a.target), f = eb(a.scope, !0), g = [];
        for (var h in s) {
          var i = fb(c, h, !0), j = fb(d, h, !0), k = '*' != d, l = fb(e, h, !0), m = '*' != e;
          if (i || j || l)
            a:
              for (var n = 0, o = s[h].length; o > n; n++) {
                var p = s[h][n];
                if (fb(f, p.scope, !0)) {
                  var q = k && d.length > 0 && !p.isSource, r = m && e.length > 0 && !p.isTarget;
                  if (q || r)
                    continue a;
                  g.push(p);
                }
              }
        }
        return kb(g);
      }, this.getAllConnections = function () {
        return q;
      }, this.getDefaultScope = function () {
        return D;
      }, this.getEndpoint = K, this.getEndpoints = function (a) {
        return s[l(a).id];
      }, this.getDefaultEndpointType = function () {
        return t.Endpoint;
      }, this.getDefaultConnectionType = function () {
        return t.Connection;
      }, this.getId = X, this.getOffset = function (a) {
        return tb({ elId: a }).o;
      }, this.appendElement = H;
      var lb = !1;
      this.isHoverSuspended = function () {
        return lb;
      }, this.setHoverSuspended = function (a) {
        lb = a;
      };
      var mb = function (a) {
        return function () {
          return jsPlumbAdapter.isRenderModeAvailable(a);
        };
      };
      this.isSVGAvailable = mb('svg'), this.isVMLAvailable = mb('vml'), this.hide = function (a, b) {
        return T(a, 'none', b), f;
      }, this.idstamp = G, this.connectorsInitialized = !1;
      var nb = [], ob = [
          'svg',
          'vml'
        ];
      this.registerConnectorType = function (a, b) {
        nb.push([
          a,
          b
        ]);
      };
      var pb = function (a) {
          if (!n && a) {
            var b = f.getDOMElement(a);
            b.offsetParent && f.setContainer(b.offsetParent);
          }
        }, qb = function () {
          f.Defaults.Container && f.setContainer(f.Defaults.Container);
        }, rb = f.manage = function (a, b) {
          return v[a] || (v[a] = {
            el: b,
            endpoints: [],
            connections: []
          }, v[a].info = tb({
            elId: a,
            timestamp: C
          })), v[a];
        }, sb = function (a) {
          delete v[a];
        }, tb = this.updateOffset = function (a) {
          var c, d = a.timestamp, e = a.recalc, g = a.offset, h = a.elId;
          return B && !d && (d = C), !e && d && d === x[h] ? {
            o: a.offset || w[h],
            s: A[h]
          } : (e || !g && null == w[h] ? (c = v[h] ? v[h].el : null, null != c && (A[h] = f.getSize(c), w[h] = b(c, f), x[h] = d)) : (w[h] = g || w[h], null == A[h] && (c = v[h].el, null != c && (A[h] = f.getSize(c))), x[h] = d), w[h] && !w[h].right && (w[h].right = w[h].left + A[h][0], w[h].bottom = w[h].top + A[h][1], w[h].width = A[h][0], w[h].height = A[h][1], w[h].centerx = w[h].left + w[h].width / 2, w[h].centery = w[h].top + w[h].height / 2), {
            o: w[h],
            s: A[h]
          });
        };
      this.init = function () {
        var a = function (a, b, c) {
          t.Connectors[a][b] = function () {
            c.apply(this, arguments), t.ConnectorRenderers[a].apply(this, arguments);
          }, jsPlumbUtil.extend(t.Connectors[a][b], [
            c,
            t.ConnectorRenderers[a]
          ]);
        };
        if (!t.connectorsInitialized) {
          for (var b = 0; b < nb.length; b++)
            for (var c = 0; c < ob.length; c++)
              a(ob[c], nb[b][1], nb[b][0]);
          t.connectorsInitialized = !0;
        }
        p || (qb(), f.anchorManager = new t.AnchorManager({ jsPlumbInstance: f }), f.setRenderMode(f.Defaults.RenderMode), p = !0, f.fire('ready', f));
      }.bind(this), this.log = o, this.jsPlumbUIComponent = i, this.makeAnchor = function () {
        var b, c = function (a, b) {
            if (t.Anchors[a])
              return new t.Anchors[a](b);
            if (!f.Defaults.DoNotThrowErrors)
              throw { msg: 'jsPlumb: unknown anchor type \'' + a + '\'' };
          };
        if (0 === arguments.length)
          return null;
        var d = arguments[0], e = arguments[1], g = (arguments[2], null);
        if (d.compute && d.getOrientation)
          return d;
        if ('string' == typeof d)
          g = c(arguments[0], {
            elementId: e,
            jsPlumbInstance: f
          });
        else if (a.isArray(d))
          if (a.isArray(d[0]) || a.isString(d[0]))
            2 == d.length && a.isObject(d[1]) ? a.isString(d[0]) ? (b = t.extend({
              elementId: e,
              jsPlumbInstance: f
            }, d[1]), g = c(d[0], b)) : (b = t.extend({
              elementId: e,
              jsPlumbInstance: f,
              anchors: d[0]
            }, d[1]), g = new t.DynamicAnchor(b)) : g = new t.DynamicAnchor({
              anchors: d,
              selector: null,
              elementId: e,
              jsPlumbInstance: f
            });
          else {
            var h = {
                x: d[0],
                y: d[1],
                orientation: d.length >= 4 ? [
                  d[2],
                  d[3]
                ] : [
                  0,
                  0
                ],
                offsets: d.length >= 6 ? [
                  d[4],
                  d[5]
                ] : [
                  0,
                  0
                ],
                elementId: e,
                jsPlumbInstance: f,
                cssClass: 7 == d.length ? d[6] : null
              };
            g = new t.Anchor(h), g.clone = function () {
              return new t.Anchor(h);
            };
          }
        return g.id || (g.id = 'anchor_' + G()), g;
      }, this.makeAnchors = function (b, c, d) {
        for (var e = [], g = 0, h = b.length; h > g; g++)
          'string' == typeof b[g] ? e.push(t.Anchors[b[g]]({
            elementId: c,
            jsPlumbInstance: d
          })) : a.isArray(b[g]) && e.push(f.makeAnchor(b[g], c, d));
        return e;
      }, this.makeDynamicAnchor = function (a, b) {
        return new t.DynamicAnchor({
          anchors: a,
          selector: b,
          elementId: null,
          jsPlumbInstance: f
        });
      }, this.targetEndpointDefinitions = {};
      var ub = function (a, b, c) {
        a.paintStyle = a.paintStyle || c.Defaults.EndpointStyles[b] || c.Defaults.EndpointStyle, a.hoverPaintStyle = a.hoverPaintStyle || c.Defaults.EndpointHoverStyles[b] || c.Defaults.EndpointHoverStyle, a.anchor = a.anchor || c.Defaults.Anchors[b] || c.Defaults.Anchor, a.endpoint = a.endpoint || c.Defaults.Endpoints[b] || c.Defaults.Endpoint;
      };
      this.sourceEndpointDefinitions = {};
      var vb = function (a, b, c, d, e) {
        for (var f = a.target || a.srcElement, g = !1, h = d.getSelector(b, c), i = 0; i < h.length; i++)
          if (h[i] == f) {
            g = !0;
            break;
          }
        return e ? !g : g;
      };
      this.makeTarget = function (c, d, e) {
        var g = t.extend({ _jsPlumb: this }, e);
        t.extend(g, d), ub(g, 1, this);
        for (var h = g.scope || f.Defaults.Scope, j = (!(g.deleteEndpointsOnDetach === !1), g.maxConnections || -1), k = g.onMaxConnections, m = function (c) {
              var d = l(c), e = d.id, m = new i(g), n = t.extend({}, g.dropOptions || {});
              pb(e);
              var o = {
                  def: g,
                  uniqueEndpoint: g.uniqueEndpoint,
                  maxConnections: j,
                  enabled: !0
                };
              d.el._jsPlumbTarget = o, this.targetEndpointDefinitions[e] = o;
              var p = g._jsPlumb.EndpointDropHandler({
                  jsPlumb: f,
                  enabled: function () {
                    return d.el._jsPlumbTarget.enabled;
                  },
                  isFull: function (a) {
                    var b = f.select({ target: e }).length, c = d.el._jsPlumbTarget, g = c.maxConnections > 0 && b >= c.maxConnections;
                    return g && k && k({
                      element: d.el,
                      connection: jpc
                    }, a), g;
                  },
                  element: d.el,
                  elementId: e,
                  isSource: !1,
                  isTarget: !0,
                  addClass: function (a) {
                    f.addClass(d.el, a);
                  },
                  removeClass: function (a) {
                    f.removeClass(d.el, a);
                  },
                  onDrop: function (a) {
                    var b = a.endpoints[0];
                    b.anchor.locked = !1;
                  },
                  isDropAllowed: function () {
                    return m.isDropAllowed.apply(m, arguments);
                  },
                  getEndpoint: function (a) {
                    var c = f.getElementObject(d.el), e = d.el._jsPlumbTarget, h = e.endpoint;
                    if ((null == h || null == h._jsPlumb) && (h = f.addEndpoint(c, g)), g.uniqueEndpoint && (e.endpoint = h), h._doNotDeleteOnDetach = !1, h._deleteOnDetach = !0, a.isDetachable() && h.initDraggable(), null != h.anchor.positionFinder) {
                      var i = f.getUIPosition(arguments, this.getZoom()), j = b(c, this), k = f.getSize(c), l = h.anchor.positionFinder(i, j, k, h.anchor.constructorParams);
                      h.anchor.x = l[0], h.anchor.y = l[1];
                    }
                    return h;
                  }
                }), q = t.dragEvents.drop;
              n.scope = n.scope || h, n[q] = a.wrap(n[q], p), g.allowLoopback === !1 && (n.canDrop = function (a) {
                var b = a.getDragElement()._jsPlumbRelatedElement;
                return b != d.el;
              }), this.initDroppable(this.getElementObject(d.el), n, 'internal');
            }.bind(this), n = c.length && c.constructor != String ? c : [c], o = 0, p = n.length; p > o; o++)
          m(n[o]);
        return this;
      }, this.unmakeTarget = function (a, b) {
        var c = l(a);
        return t.destroyDroppable(c.el), b || delete this.targetEndpointDefinitions[c.id], this;
      }, this.makeSource = function (c, d, e) {
        var g = t.extend({}, e);
        t.extend(g, d), ub(g, 0, this);
        for (var h = g.maxConnections || 1, i = g.onMaxConnections, j = function (c) {
              var d = c.id, e = this.getElementObject(c.el), j = this.getDOMElement(e), l = function () {
                  return null == g.parent ? null : 'parent' === g.parent ? c.el.parentNode : f.getDOMElement(g.parent);
                }, m = null != g.parent ? this.getId(l()) : d;
              pb(m), this.sourceEndpointDefinitions[m] = {
                def: g,
                uniqueEndpoint: g.uniqueEndpoint,
                maxConnections: h,
                enabled: !0
              };
              var o = t.dragEvents.stop, p = t.dragEvents.drag, q = t.extend({}, g.dragOptions || {}), r = q.drag, s = q.stop, u = null, v = !1;
              q.scope = q.scope || g.scope, q[p] = a.wrap(q[p], function () {
                r && r.apply(this, arguments), v = !1;
              }), q[o] = a.wrap(q[o], function () {
                if (s && s.apply(this, arguments), this.currentlyDragging = !1, null != u._jsPlumb) {
                  var a = g.anchor || this.Defaults.Anchor, c = u.anchor, e = u.connections[0], f = this.makeAnchor(a, d, this), h = u.element;
                  if (null != f.positionFinder) {
                    var i = b(h, this), j = this.getSize(h), k = {
                        left: i.left + c.x * j[0],
                        top: i.top + c.y * j[1]
                      }, m = f.positionFinder(k, i, j, f.constructorParams);
                    f.x = m[0], f.y = m[1];
                  }
                  if (u.setAnchor(f, !0), g.parent) {
                    var o = l();
                    if (o) {
                      var p = g.container || n;
                      u.setElement(o, p);
                    }
                  }
                  u.repaint(), this.repaint(u.elementId), this.repaint(e.targetId);
                }
              }.bind(this));
              var w = function (a) {
                  var b = this.getOriginalEvent(a);
                  if (3 !== a.which && 2 !== a.button) {
                    var c = this.sourceEndpointDefinitions[m];
                    if (d = this.getId(this.getDOMElement(e)), c.enabled) {
                      if (g.filter) {
                        var n = jsPlumbUtil.isString(g.filter) ? vb(b, e, g.filter, this, g.filterExclude) : g.filter(b, e);
                        if (n === !1)
                          return;
                      }
                      var o = this.select({ source: m }).length;
                      if (c.maxConnections >= 0 && c.uniqueEndpoint && o >= c.maxConnections)
                        return i && i({
                          element: e,
                          maxConnections: h
                        }, a), !1;
                      var p = jsPlumbAdapter.getPositionOnElement(b, j, k), r = {};
                      t.extend(r, g), r.isTemporarySource = !0, r.anchor = [
                        p[0],
                        p[1],
                        0,
                        0
                      ], r.dragOptions = q, u = this.addEndpoint(d, r), v = !0, u.endpointWillMoveTo = g.parent ? l() : null, c.uniqueEndpoint && (c.endpoint ? u.finalEndpoint = c.endpoint : c.endpoint = u), u._doNotDeleteOnDetach = !1, u._deleteOnDetach = !0;
                      var s = function () {
                        f.off(u.canvas, 'mouseup', s), f.off(e, 'mouseup', s), v && (v = !1, f.deleteEndpoint(u));
                      };
                      f.on(u.canvas, 'mouseup', s), f.on(e, 'mouseup', s), f.trigger(u.canvas, 'mousedown', a), jsPlumbUtil.consume(a);
                    }
                  }
                }.bind(this);
              this.on(e, 'mousedown', w), this.sourceEndpointDefinitions[m].trigger = w, g.filter && jsPlumbUtil.isString(g.filter) && f.setDragFilter(e, g.filter);
            }.bind(this), m = c.length && c.constructor != String ? c : [c], o = 0, p = m.length; p > o; o++)
          j(l(m[o]));
        return this;
      }, this.unmakeSource = function (a, b) {
        var c = l(a), d = this.sourceEndpointDefinitions[c.id].trigger;
        return d && f.off(c.el, 'mousedown', d), b || delete this.sourceEndpointDefinitions[c.id], this;
      }, this.unmakeEverySource = function () {
        for (var a in this.sourceEndpointDefinitions)
          f.unmakeSource(a, !0);
        return this.sourceEndpointDefinitions = {}, this;
      };
      var wb = function (a, b) {
          b = jsPlumbUtil.isArray(b) ? b : [b];
          for (var c = X(a), d = 0; d < b.length; d++) {
            var e = this[b[d]][c];
            if (e)
              return e.def.scope || this.Defaults.Scope;
          }
        }.bind(this), xb = function (a, b, c) {
          c = jsPlumbUtil.isArray(c) ? c : [c];
          for (var d = X(a), e = 0; e < c.length; e++) {
            var f = this[c[e]][d];
            f && (f.def.scope = b, null != this.scopeChange && this.scopeChange(a, d, s[d], b, c[e]));
          }
        }.bind(this);
      this.getScope = function (a) {
        return wb(a, [
          'sourceEndpointDefinitions',
          'targetEndpointDefinitions'
        ]);
      }, this.getSourceScope = function (a) {
        return wb(a, 'sourceEndpointDefinitions');
      }, this.getTargetScope = function (a) {
        return wb(a, 'targetEndpointDefinitions');
      }, this.setScope = function (a, b) {
        xb(a, b, [
          'sourceEndpointDefinitions',
          'targetEndpointDefinitions'
        ]);
      }, this.setSourceScope = function (a, b) {
        xb(a, b, 'sourceEndpointDefinitions');
      }, this.setTargetScope = function (a, b) {
        xb(a, b, 'targetEndpointDefinitions');
      }, this.unmakeEveryTarget = function () {
        for (var a in this.targetEndpointDefinitions)
          f.unmakeTarget(a, !0);
        return this.targetEndpointDefinitions = {}, this;
      };
      var yb = function (b, c, d, e) {
          var f = 'source' == b ? this.sourceEndpointDefinitions : this.targetEndpointDefinitions;
          if (a.isString(c))
            f[c].enabled = e ? !f[c].enabled : d;
          else if (c.length)
            for (var g = 0, h = c.length; h > g; g++) {
              var i = l(c[g]);
              f[i.id] && (f[i.id].enabled = e ? !f[i.id].enabled : d);
            }
          else {
            var j = l(c).id;
            f[j].enabled = e ? !f[j].enabled : d;
          }
          return this;
        }.bind(this), zb = function (b, c) {
          return a.isString(b) || !b.length ? c.apply(this, [b]) : b.length ? c.apply(this, [b[0]]) : void 0;
        }.bind(this);
      this.toggleSourceEnabled = function (a) {
        return yb('source', a, null, !0), this.isSourceEnabled(a);
      }, this.setSourceEnabled = function (a, b) {
        return yb('source', a, b);
      }, this.isSource = function (a) {
        return zb(a, function (a) {
          return null != this.sourceEndpointDefinitions[l(a).id];
        }.bind(this));
      }, this.isSourceEnabled = function (a) {
        return zb(a, function (a) {
          var b = this.sourceEndpointDefinitions[l(a).id];
          return b && b.enabled === !0;
        }.bind(this));
      }, this.toggleTargetEnabled = function (a) {
        return yb('target', a, null, !0), this.isTargetEnabled(a);
      }, this.isTarget = function (a) {
        return zb(a, function (a) {
          return null != this.targetEndpointDefinitions[l(a).id];
        }.bind(this));
      }, this.isTargetEnabled = function (a) {
        return zb(a, function (a) {
          var b = this.targetEndpointDefinitions[l(a).id];
          return b && b.enabled === !0;
        }.bind(this));
      }, this.setTargetEnabled = function (a, b) {
        return yb('target', a, b);
      }, this.ready = function (a) {
        f.bind('ready', a);
      }, this.repaint = function (a, b, c) {
        if ('object' == typeof a && a.length)
          for (var d = 0, e = a.length; e > d; d++)
            I(a[d], b, c);
        else
          I(a, b, c);
        return f;
      }, this.revalidate = function (a) {
        var b = f.getId(a);
        return f.updateOffset({
          elId: b,
          recalc: !0
        }), f.repaint(a);
      }, this.repaintEverything = function (a) {
        var b, d = c();
        for (b in s)
          f.updateOffset({
            elId: b,
            recalc: !0,
            timestamp: d
          });
        for (b in s)
          I(b, null, d, a);
        return this;
      }, this.removeAllEndpoints = function (a, b) {
        var c = function (a) {
          var d, e, g = l(a), h = s[g.id];
          if (h)
            for (d = 0, e = h.length; e > d; d++)
              f.deleteEndpoint(h[d]);
          if (delete s[g.id], b && g.el && 3 != g.el.nodeType && 8 != g.el.nodeType)
            for (d = 0, e = g.el.childNodes.length; e > d; d++)
              c(g.el.childNodes[d]);
        };
        return c(a), this;
      }, this.remove = function (a, b) {
        var c = l(a);
        return f.doWhileSuspended(function () {
          f.removeAllEndpoints(c.id, !0), f.dragManager.elementRemoved(c.id), delete f.floatingConnections[c.id], f.anchorManager.clearFor(c.id), f.anchorManager.removeFloatingConnection(c.id);
        }, b === !1), sb(c.id), c.el && (f.removeElement(c.el), c.el._jsPlumb = null), f;
      }, this.reset = function () {
        f.setSuspendEvents(!0), f.deleteEveryEndpoint(), f.unbind(), this.targetEndpointDefinitions = {}, this.sourceEndpointDefinitions = {}, q.length = 0, f.setSuspendEvents(!1);
      };
      var Ab = function (a) {
          a.canvas && a.canvas.parentNode && a.canvas.parentNode.removeChild(a.canvas), a.cleanup(), a.destroy();
        }, Bb = function (a) {
          Ab(a);
        };
      this.clear = function () {
        f.select().each(Bb), f.selectEndpoints().each(Bb), s = {}, u = {};
      }, this.setDefaultScope = function (a) {
        return D = a, f;
      }, this.setDraggable = S, this.setId = function (a, b, c) {
        var d;
        jsPlumbUtil.isString(a) ? d = a : (a = this.getDOMElement(a), d = this.getId(a));
        var e = this.getConnections({
            source: d,
            scope: '*'
          }, !0), f = this.getConnections({
            target: d,
            scope: '*'
          }, !0);
        b = '' + b, c ? a = this.getDOMElement(b) : (a = this.getDOMElement(d), this.setAttribute(a, 'id', b)), s[b] = s[d] || [];
        for (var g = 0, h = s[b].length; h > g; g++)
          s[b][g].setElementId(b), s[b][g].setReferenceElement(a);
        delete s[d], this.anchorManager.changeId(d, b), this.dragManager && this.dragManager.changeId(d, b), v[b] = v[d], delete v[d];
        var i = function (c, d, e) {
          for (var f = 0, g = c.length; g > f; f++)
            c[f].endpoints[d].setElementId(b), c[f].endpoints[d].setReferenceElement(a), c[f][e + 'Id'] = b, c[f][e] = a;
        };
        i(e, 0, 'source'), i(f, 1, 'target'), this.repaint(b);
      }, this.setDebugLog = function (a) {
        o = a;
      }, this.setSuspendDrawing = function (a, b) {
        var c = B;
        return B = a, C = a ? new Date().getTime() : null, b && this.repaintEverything(), c;
      }, this.isSuspendDrawing = function () {
        return B;
      }, this.getSuspendedAt = function () {
        return C;
      }, this.doWhileSuspended = function (b, c) {
        var d = this.isSuspendDrawing();
        d || this.setSuspendDrawing(!0);
        try {
          b();
        } catch (e) {
          a.log('Function run while suspended failed', e);
        }
        d || this.setSuspendDrawing(!1, !c);
      }, this.getOffset = function (a) {
        return w[a];
      }, this.getCachedData = W, this.timestamp = c, this.setRenderMode = function (a) {
        if (a !== t.SVG && a !== t.VML)
          throw new TypeError('Render mode [' + a + '] not supported');
        return E = jsPlumbAdapter.setRenderMode(a);
      }, this.getRenderMode = function () {
        return E;
      }, this.show = function (a, b) {
        return T(a, 'block', b), f;
      }, this.toggleVisible = V, this.toggleDraggable = U, this.addListener = this.bind, jsPlumbAdapter.headless || (f.dragManager = jsPlumbAdapter.getDragManager(f), f.recalculateOffsets = f.dragManager.updateOffsets);
    };
  jsPlumbUtil.extend(s, jsPlumbUtil.EventGenerator, {
    setAttribute: function (a, b, c) {
      this.setAttribute(a, b, c);
    },
    getAttribute: function (a, b) {
      return this.getAttribute(t.getDOMElement(a), b);
    },
    registerConnectionType: function (a, b) {
      this._connectionTypes[a] = t.extend({}, b);
    },
    registerConnectionTypes: function (a) {
      for (var b in a)
        this._connectionTypes[b] = t.extend({}, a[b]);
    },
    registerEndpointType: function (a, b) {
      this._endpointTypes[a] = t.extend({}, b);
    },
    registerEndpointTypes: function (a) {
      for (var b in a)
        this._endpointTypes[b] = t.extend({}, a[b]);
    },
    getType: function (a, b) {
      return 'connection' === b ? this._connectionTypes[a] : this._endpointTypes[a];
    },
    setIdChanged: function (a, b) {
      this.setId(a, b, !0);
    },
    setParent: function (a, b) {
      var c = this.getElementObject(a), d = this.getDOMElement(c), e = this.getId(d), f = this.getElementObject(b), g = this.getDOMElement(f), h = this.getId(g);
      d.parentNode.removeChild(d), g.appendChild(d), this.dragManager.setParent(c, e, f, h);
    },
    getSize: function (a) {
      return [
        a.offsetWidth,
        a.offsetHeight
      ];
    },
    getWidth: function (a) {
      return a.offsetWidth;
    },
    getHeight: function (a) {
      return a.offsetHeight;
    },
    extend: function (a, b, c) {
      var d;
      if (c)
        for (d = 0; d < c.length; d++)
          a[c[d]] = b[c[d]];
      else
        for (d in b)
          a[d] = b[d];
      return a;
    },
    floatingConnections: {},
    getFloatingAnchorIndex: function (a) {
      return a.endpoints[0].isFloating() ? 0 : 1;
    }
  }, jsPlumbAdapter);
  var t = new s();
  'undefined' != typeof window && (window.jsPlumb = t), t.getInstance = function (a) {
    var b = new s(a);
    return b.init(), b;
  }, 'function' == typeof define && (define('jsplumb', [], function () {
    return t;
  }), define('jsplumbinstance', [], function () {
    return t.getInstance();
  })), 'undefined' != typeof exports && (exports.jsPlumb = t);
}(), function () {
  'use strict';
  var a = function (a, b) {
      var c = !1;
      return {
        drag: function () {
          if (c)
            return c = !1, !0;
          var d = jsPlumb.getUIPosition(arguments, b.getZoom());
          a.element && (jsPlumbAdapter.setPosition(a.element, d), b.repaint(a.element, d));
        },
        stopDrag: function () {
          c = !0;
        }
      };
    }, b = function (a, b) {
      var c = document.createElement('div');
      c.style.position = 'absolute';
      var d = b.getContainer() || document.body;
      d.appendChild(c);
      var e = b.getId(c);
      b.manage(e, c), a.id = e, a.element = c;
    }, c = function (a, b, c, d, e, f, g, h) {
      var i = new jsPlumb.FloatingAnchor({
          reference: b,
          referenceCanvas: d,
          jsPlumbInstance: f
        });
      return g({
        paintStyle: a,
        endpoint: c,
        anchor: i,
        source: e,
        scope: h
      });
    }, d = [
      'connectorStyle',
      'connectorHoverStyle',
      'connectorOverlays',
      'connector',
      'connectionType',
      'connectorClass',
      'connectorHoverClass'
    ], e = function (a, b) {
      var c = 0;
      if (null != b)
        for (var d = 0; d < a.connections.length; d++)
          if (a.connections[d].sourceId == b || a.connections[d].targetId == b) {
            c = d;
            break;
          }
      return a.connections[c];
    }, f = function (a, b) {
      return jsPlumbUtil.findWithFunction(b.connections, function (b) {
        return b.id == a.id;
      });
    };
  jsPlumb.Endpoint = function (g) {
    var h = g._jsPlumb, i = jsPlumb.getElementObject, j = jsPlumbUtil, k = g.newConnection, l = g.newEndpoint;
    g.finaliseConnection, g.fireMoveEvent, this.idPrefix = '_jsplumb_e_', this.defaultLabelLocation = [
      0.5,
      0.5
    ], this.defaultOverlayKeys = [
      'Overlays',
      'EndpointOverlays'
    ], OverlayCapableJsPlumbUIComponent.apply(this, arguments), this.getDefaultType = function () {
      return {
        parameters: {},
        scope: null,
        maxConnections: this._jsPlumb.instance.Defaults.MaxConnections,
        paintStyle: this._jsPlumb.instance.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle,
        endpoint: this._jsPlumb.instance.Defaults.Endpoint || jsPlumb.Defaults.Endpoint,
        hoverPaintStyle: this._jsPlumb.instance.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle,
        overlays: this._jsPlumb.instance.Defaults.EndpointOverlays || jsPlumb.Defaults.EndpointOverlays,
        connectorStyle: g.connectorStyle,
        connectorHoverStyle: g.connectorHoverStyle,
        connectorClass: g.connectorClass,
        connectorHoverClass: g.connectorHoverClass,
        connectorOverlays: g.connectorOverlays,
        connector: g.connector,
        connectorTooltip: g.connectorTooltip
      };
    }, this._jsPlumb.enabled = !(g.enabled === !1), this._jsPlumb.visible = !0, this.element = jsPlumb.getDOMElement(g.source), this._jsPlumb.uuid = g.uuid, this._jsPlumb.floatingEndpoint = null;
    var m = null;
    this._jsPlumb.uuid && (g.endpointsByUUID[this._jsPlumb.uuid] = this), this.elementId = g.elementId, this._jsPlumb.connectionCost = g.connectionCost, this._jsPlumb.connectionsDirected = g.connectionsDirected, this._jsPlumb.currentAnchorClass = '', this._jsPlumb.events = {};
    var n = function () {
        var a = this._jsPlumb.currentAnchorClass;
        this._jsPlumb.currentAnchorClass = this.anchor.getCssClass(), jsPlumbAdapter.updateClasses(this.element, h.endpointAnchorClassPrefix + '_' + this._jsPlumb.currentAnchorClass, h.endpointAnchorClassPrefix + '_' + a), this.updateClasses(h.endpointAnchorClassPrefix + '_' + this._jsPlumb.currentAnchorClass, h.endpointAnchorClassPrefix + '_' + a);
      }.bind(this);
    this.setAnchor = function (a, b) {
      return this._jsPlumb.instance.continuousAnchorFactory.clear(this.elementId), this.anchor = this._jsPlumb.instance.makeAnchor(a, this.elementId, h), n(), this.anchor.bind('anchorChanged', function (a) {
        this.fire('anchorChanged', {
          endpoint: this,
          anchor: a
        }), n();
      }.bind(this)), b || this._jsPlumb.instance.repaint(this.elementId), this;
    };
    var o = g.anchor ? g.anchor : g.anchors ? g.anchors : h.Defaults.Anchor || 'Top';
    this.setAnchor(o, !0);
    var p = function (a) {
        if (this.connections.length > 0)
          for (var b = 0; b < this.connections.length; b++)
            this.connections[b].setHover(a, !1);
        else
          this.setHover(a);
      }.bind(this);
    this.bind('mouseover', function () {
      p(!0);
    }), this.bind('mouseout', function () {
      p(!1);
    }), g._transient || this._jsPlumb.instance.anchorManager.add(this, this.elementId), this.setEndpoint = function (a) {
      null != this.endpoint && (this.endpoint.cleanup(), this.endpoint.destroy());
      var b = function (a, b) {
          var c = h.getRenderMode();
          if (jsPlumb.Endpoints[c][a])
            return new jsPlumb.Endpoints[c][a](b);
          if (!h.Defaults.DoNotThrowErrors)
            throw { msg: 'jsPlumb: unknown endpoint type \'' + a + '\'' };
        }, c = {
          _jsPlumb: this._jsPlumb.instance,
          cssClass: g.cssClass,
          container: g.container,
          tooltip: g.tooltip,
          connectorTooltip: g.connectorTooltip,
          endpoint: this
        };
      j.isString(a) ? this.endpoint = b(a, c) : j.isArray(a) ? (c = j.merge(a[1], c), this.endpoint = b(a[0], c)) : this.endpoint = a.clone(), this.endpoint.clone = function () {
        return j.isString(a) ? b(a, c) : j.isArray(a) ? (c = j.merge(a[1], c), b(a[0], c)) : void 0;
      }.bind(this), this.type = this.endpoint.type;
    }, this.setEndpoint(g.endpoint || h.Defaults.Endpoint || jsPlumb.Defaults.Endpoint || 'Dot'), this.setPaintStyle(g.endpointStyle || g.paintStyle || g.style || h.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle, !0), this.setHoverPaintStyle(g.endpointHoverStyle || g.hoverPaintStyle || h.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle, !0), this._jsPlumb.paintStyleInUse = this.getPaintStyle(), jsPlumb.extend(this, g, d), this.isSource = g.isSource || !1, this.isTemporarySource = g.isTemporarySource || !1, this.isTarget = g.isTarget || !1, this._jsPlumb.maxConnections = g.maxConnections || h.Defaults.MaxConnections, this.canvas = this.endpoint.canvas, this.canvas._jsPlumb = this, this.addClass(h.endpointAnchorClassPrefix + '_' + this._jsPlumb.currentAnchorClass), jsPlumbAdapter.addClass(this.element, h.endpointAnchorClassPrefix + '_' + this._jsPlumb.currentAnchorClass), this.connections = g.connections || [], this.connectorPointerEvents = g['connector-pointer-events'], this.scope = g.scope || h.getDefaultScope(), this.timestamp = null, this.reattachConnections = g.reattach || h.Defaults.ReattachConnections, this.connectionsDetachable = h.Defaults.ConnectionsDetachable, (g.connectionsDetachable === !1 || g.detachable === !1) && (this.connectionsDetachable = !1), this.dragAllowedWhenFull = g.dragAllowedWhenFull !== !1, g.onMaxConnections && this.bind('maxConnections', g.onMaxConnections), this.addConnection = function (a) {
      this.connections.push(a), this[(this.connections.length > 0 ? 'add' : 'remove') + 'Class'](h.endpointConnectedClass), this[(this.isFull() ? 'add' : 'remove') + 'Class'](h.endpointFullClass);
    }, this.detachFromConnection = function (a, b, c) {
      b = null == b ? f(a, this) : b, b >= 0 && (this.connections.splice(b, 1), this[(this.connections.length > 0 ? 'add' : 'remove') + 'Class'](h.endpointConnectedClass), this[(this.isFull() ? 'add' : 'remove') + 'Class'](h.endpointFullClass)), !c && this._deleteOnDetach && 0 === this.connections.length && h.deleteObject({
        endpoint: this,
        fireEvent: !1,
        deleteAttachedObjects: !1
      });
    }, this.detach = function (a, b, c, d, e, g, i) {
      var j = null == i ? f(a, this) : i, k = !1;
      return d = d !== !1, j >= 0 && (c || a._forceDetach || a.isDetachable() && a.isDetachAllowed(a) && this.isDetachAllowed(a) && h.checkCondition('beforeDetach', a)) && (h.deleteObject({
        connection: a,
        fireEvent: !b && d,
        originalEvent: e,
        deleteAttachedObjects: !1
      }), k = !0), k;
    }, this.detachAll = function (a, b) {
      for (; this.connections.length > 0;)
        this.detach(this.connections[0], !1, !0, a !== !1, b, this, 0);
      return this;
    }, this.detachFrom = function (a, b, c) {
      for (var d = [], e = 0; e < this.connections.length; e++)
        (this.connections[e].endpoints[1] == a || this.connections[e].endpoints[0] == a) && d.push(this.connections[e]);
      for (var f = 0; f < d.length; f++)
        this.detach(d[f], !1, !0, b, c);
      return this;
    }, this.getElement = function () {
      return this.element;
    }, this.setElement = function (a) {
      var b = this._jsPlumb.instance.getId(a), c = this.elementId;
      return j.removeWithFunction(g.endpointsByElement[this.elementId], function (a) {
        return a.id == this.id;
      }.bind(this)), this.element = jsPlumb.getDOMElement(a), this.elementId = h.getId(this.element), h.anchorManager.rehomeEndpoint(this, c, this.element), h.dragManager.endpointAdded(this.element), j.addToList(g.endpointsByElement, b, this), this;
    }, this.makeInPlaceCopy = function () {
      var a = this.anchor.getCurrentLocation({ element: this }), b = this.anchor.getOrientation(this), c = this.anchor.getCssClass(), d = {
          bind: function () {
          },
          compute: function () {
            return [
              a[0],
              a[1]
            ];
          },
          getCurrentLocation: function () {
            return [
              a[0],
              a[1]
            ];
          },
          getOrientation: function () {
            return b;
          },
          getCssClass: function () {
            return c;
          }
        };
      return l({
        dropOptions: g.dropOptions,
        anchor: d,
        source: this.element,
        paintStyle: this.getPaintStyle(),
        endpoint: g.hideOnDrag ? 'Blank' : this.endpoint,
        _transient: !0,
        scope: this.scope
      });
    }, this.connectorSelector = function () {
      var a = this.connections[0];
      return this.isTarget && a ? a : this.connections.length < this._jsPlumb.maxConnections || -1 == this._jsPlumb.maxConnections ? null : a;
    }, this.setStyle = this.setPaintStyle, this.paint = function (a) {
      a = a || {};
      var b = a.timestamp, c = !(a.recalc === !1);
      if (!b || this.timestamp !== b) {
        var d = h.updateOffset({
            elId: this.elementId,
            timestamp: b
          }), f = a.offset ? a.offset.o : d.o;
        if (null != f) {
          var g = a.anchorPoint, i = a.connectorPaintStyle;
          if (null == g) {
            var j = a.dimensions || d.s, k = {
                xy: [
                  f.left,
                  f.top
                ],
                wh: j,
                element: this,
                timestamp: b
              };
            if (c && this.anchor.isDynamic && this.connections.length > 0) {
              var l = e(this, a.elementWithPrecedence), m = l.endpoints[0] == this ? 1 : 0, n = 0 === m ? l.sourceId : l.targetId, o = h.getCachedData(n), p = o.o, q = o.s;
              k.txy = [
                p.left,
                p.top
              ], k.twh = q, k.tElement = l.endpoints[m];
            }
            g = this.anchor.compute(k);
          }
          this.endpoint.compute(g, this.anchor.getOrientation(this), this._jsPlumb.paintStyleInUse, i || this.paintStyleInUse), this.endpoint.paint(this._jsPlumb.paintStyleInUse, this.anchor), this.timestamp = b;
          for (var r = 0; r < this._jsPlumb.overlays.length; r++) {
            var s = this._jsPlumb.overlays[r];
            s.isVisible() && (this._jsPlumb.overlayPlacements[r] = s.draw(this.endpoint, this._jsPlumb.paintStyleInUse), s.paint(this._jsPlumb.overlayPlacements[r]));
          }
        }
      }
    }, this.repaint = this.paint;
    var q = !1;
    this.initDraggable = function () {
      if (!q && jsPlumb.isDragSupported(this.element)) {
        var d = {
            id: null,
            element: null
          }, e = null, f = !1, n = null, o = a(d, h), p = g.dragOptions || {}, r = {}, s = jsPlumb.dragEvents.start, t = jsPlumb.dragEvents.stop, u = jsPlumb.dragEvents.drag, v = function () {
            e = this.connectorSelector();
            var a = !0;
            if (this.isEnabled() || (a = !1), null != e || this.isSource || this.isTemporarySource || (a = !1), this.isSource && this.isFull() && !this.dragAllowedWhenFull && (a = !1), null == e || e.isDetachable() || (a = !1), a === !1)
              return h.stopDrag && h.stopDrag(this.canvas), o.stopDrag(), !1;
            for (var p = 0; p < this.connections.length; p++)
              this.connections[p].setHover(!1);
            this.addClass('endpointDrag'), h.setConnectionBeingDragged(!0), e && !this.isFull() && this.isSource && (e = null), h.updateOffset({ elId: this.elementId }), m = this.makeInPlaceCopy(), m.referenceEndpoint = this, m.paint(), b(d, h);
            var q = i(m.canvas), r = jsPlumbAdapter.getOffset(q, this._jsPlumb.instance), s = i(this.canvas);
            if (jsPlumbAdapter.setPosition(d.element, r), this.parentAnchor && (this.anchor = h.makeAnchor(this.parentAnchor, this.elementId, h)), h.setAttribute(this.canvas, 'dragId', d.id), h.setAttribute(this.canvas, 'elId', this.elementId), this._jsPlumb.floatingEndpoint = c(this.getPaintStyle(), this.anchor, this.endpoint, this.canvas, d.element, h, l, this.scope), this.canvas.style.visibility = 'hidden', null == e)
              this.anchor.locked = !0, this.setHover(!1, !1), e = k({
                sourceEndpoint: this,
                targetEndpoint: this._jsPlumb.floatingEndpoint,
                source: this.endpointWillMoveTo || this.element,
                target: d.element,
                anchors: [
                  this.anchor,
                  this._jsPlumb.floatingEndpoint.anchor
                ],
                paintStyle: g.connectorStyle,
                hoverPaintStyle: g.connectorHoverStyle,
                connector: g.connector,
                overlays: g.connectorOverlays,
                type: this.connectionType,
                cssClass: this.connectorClass,
                hoverClass: this.connectorHoverClass
              }), e.addClass(h.draggingClass), this._jsPlumb.floatingEndpoint.addClass(h.draggingClass), h.fire('connectionDrag', e);
            else {
              f = !0, e.setHover(!1);
              var t = e.endpoints[0].id == this.id ? 0 : 1;
              this.detachFromConnection(e, null, !0);
              var u = h.getDragScope(s);
              h.setAttribute(this.canvas, 'originalScope', u);
              var v = h.getDropScope(s);
              h.setDragScope(s, v), h.fire('connectionDrag', e), 0 === t ? (n = [
                e.source,
                e.sourceId,
                s,
                u
              ], e.source = d.element, e.sourceId = d.id) : (n = [
                e.target,
                e.targetId,
                s,
                u
              ], e.target = d.element, e.targetId = d.id), e.endpoints[0 === t ? 1 : 0].anchor.locked = !0, e.suspendedEndpoint = e.endpoints[t], e.suspendedElement = e.endpoints[t].getElement(), e.suspendedElementId = e.endpoints[t].elementId, e.suspendedElementType = 0 === t ? 'source' : 'target', e.suspendedEndpoint.setHover(!1), this._jsPlumb.floatingEndpoint.referenceEndpoint = e.suspendedEndpoint, e.endpoints[t] = this._jsPlumb.floatingEndpoint, e.addClass(h.draggingClass), this._jsPlumb.floatingEndpoint.addClass(h.draggingClass);
            }
            h.floatingConnections[d.id] = e, h.anchorManager.addFloatingConnection(d.id, e), j.addToList(g.endpointsByElement, d.id, this._jsPlumb.floatingEndpoint), h.currentlyDragging = !0;
          }.bind(this), w = function () {
            if (h.setConnectionBeingDragged(!1), e && null != e.endpoints) {
              var a = h.getDropEvent(arguments), b = h.getFloatingAnchorIndex(e);
              if (e.endpoints[0 === b ? 1 : 0].anchor.locked = !1, e.removeClass(h.draggingClass), this._jsPlumb && (e.deleteConnectionNow || e.endpoints[b] == this._jsPlumb.floatingEndpoint) && f && e.suspendedEndpoint) {
                0 === b ? (e.source = n[0], e.sourceId = n[1]) : (e.target = n[0], e.targetId = n[1]);
                var c = this._jsPlumb.floatingEndpoint;
                h.setDragScope(n[2], n[3]), e.endpoints[b] = e.suspendedEndpoint, e.isReattach() || e._forceReattach || e._forceDetach || !e.endpoints[0 === b ? 1 : 0].detach(e, !1, !1, !0, a) ? (e.setHover(!1), e._forceDetach = null, e._forceReattach = null, this._jsPlumb.floatingEndpoint.detachFromConnection(e), e.suspendedEndpoint.addConnection(e), h.repaint(n[1])) : h.deleteObject({ endpoint: c });
              }
              h.remove(d.element, !1), h.deleteObject({ endpoint: m }), this.deleteAfterDragStop ? h.deleteObject({ endpoint: this }) : this._jsPlumb && (this._jsPlumb.floatingEndpoint = null, this.canvas.style.visibility = 'visible', this.anchor.locked = !1, this.paint({ recalc: !1 })), h.fire('connectionDragStop', e, a), h.currentlyDragging = !1, e = null;
            }
          }.bind(this);
        p = jsPlumb.extend(r, p), p.scope = this.scope || p.scope, p[s] = j.wrap(p[s], v, !1), p[u] = j.wrap(p[u], o.drag), p[t] = j.wrap(p[t], w), p.canDrag = function () {
          return this.isSource || this.isTemporarySource || this.isTarget && this.connections.length > 0;
        }.bind(this), h.initDraggable(this.canvas, p, 'internal'), this.canvas._jsPlumbRelatedElement = this.element, q = !0;
      }
    }, (this.isSource || this.isTarget || this.isTemporarySource) && this.initDraggable();
    var r = function (a, b, c, d) {
        if ((this.isTarget || b) && jsPlumb.isDropSupported(this.element)) {
          var e = g.dropOptions || h.Defaults.DropOptions || jsPlumb.Defaults.DropOptions;
          e = jsPlumb.extend({}, e), e.scope = e.scope || this.scope;
          var f = jsPlumb.dragEvents.drop, i = jsPlumb.dragEvents.over, k = jsPlumb.dragEvents.out, l = this, m = h.EndpointDropHandler({
              getEndpoint: function () {
                return l;
              },
              jsPlumb: h,
              enabled: function () {
                return null != d ? d.isEnabled() : !0;
              },
              isFull: function () {
                return d.isFull();
              },
              element: this.element,
              elementId: this.elementId,
              isSource: this.isSource,
              isTarget: this.isTarget,
              addClass: function (a) {
                l.addClass(a);
              },
              removeClass: function (a) {
                l.removeClass(a);
              },
              isDropAllowed: function () {
                return l.isDropAllowed.apply(l, arguments);
              }
            });
          e[f] = j.wrap(e[f], m), e[i] = j.wrap(e[i], function () {
            var a = jsPlumb.getDragObject(arguments), b = h.getAttribute(jsPlumb.getDOMElement(a), 'dragId'), c = h.floatingConnections[b];
            if (null != c) {
              var d = h.getFloatingAnchorIndex(c), e = this.isTarget && 0 !== d || c.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == c.suspendedEndpoint.id;
              if (e) {
                var f = h.checkCondition('checkDropAllowed', {
                    sourceEndpoint: c.endpoints[d],
                    targetEndpoint: this,
                    connection: c
                  });
                this[(f ? 'add' : 'remove') + 'Class'](h.endpointDropAllowedClass), this[(f ? 'remove' : 'add') + 'Class'](h.endpointDropForbiddenClass), c.endpoints[d].anchor.over(this.anchor, this);
              }
            }
          }.bind(this)), e[k] = j.wrap(e[k], function () {
            var a = jsPlumb.getDragObject(arguments), b = null == a ? null : h.getAttribute(jsPlumb.getDOMElement(a), 'dragId'), c = b ? h.floatingConnections[b] : null;
            if (null != c) {
              var d = h.getFloatingAnchorIndex(c), e = this.isTarget && 0 !== d || c.suspendedEndpoint && this.referenceEndpoint && this.referenceEndpoint.id == c.suspendedEndpoint.id;
              e && (this.removeClass(h.endpointDropAllowedClass), this.removeClass(h.endpointDropForbiddenClass), c.endpoints[d].anchor.out());
            }
          }.bind(this)), h.initDroppable(a, e, 'internal', c);
        }
      }.bind(this);
    return this.anchor.isFloating || r(i(this.canvas), !0, !(g._transient || this.anchor.isFloating), this), g.type && this.addType(g.type, g.data, h.isSuspendDrawing()), this;
  }, jsPlumbUtil.extend(jsPlumb.Endpoint, OverlayCapableJsPlumbUIComponent, {
    getTypeDescriptor: function () {
      return 'endpoint';
    },
    isVisible: function () {
      return this._jsPlumb.visible;
    },
    setVisible: function (a, b, c) {
      if (this._jsPlumb.visible = a, this.canvas && (this.canvas.style.display = a ? 'block' : 'none'), this[a ? 'showOverlays' : 'hideOverlays'](), !b)
        for (var d = 0; d < this.connections.length; d++)
          if (this.connections[d].setVisible(a), !c) {
            var e = this === this.connections[d].endpoints[0] ? 1 : 0;
            1 == this.connections[d].endpoints[e].connections.length && this.connections[d].endpoints[e].setVisible(a, !0, !0);
          }
    },
    getAttachedElements: function () {
      return this.connections;
    },
    applyType: function (a) {
      this.setPaintStyle(a.endpointStyle || a.paintStyle), this.setHoverPaintStyle(a.endpointHoverStyle || a.hoverPaintStyle), null != a.maxConnections && (this._jsPlumb.maxConnections = a.maxConnections), a.scope && (this.scope = a.scope), jsPlumb.extend(this, a, d), a.anchor && (this.anchor = this._jsPlumb.instance.makeAnchor(a.anchor)), null != a.cssClass && this.canvas && this._jsPlumb.instance.addClass(this.canvas, a.cssClass);
    },
    isEnabled: function () {
      return this._jsPlumb.enabled;
    },
    setEnabled: function (a) {
      this._jsPlumb.enabled = a;
    },
    cleanup: function () {
      jsPlumbAdapter.removeClass(this.element, this._jsPlumb.instance.endpointAnchorClassPrefix + '_' + this._jsPlumb.currentAnchorClass), this.anchor = null, this.endpoint.cleanup(), this.endpoint.destroy(), this.endpoint = null;
      var a = jsPlumb.getElementObject(this.canvas);
      this._jsPlumb.instance.destroyDraggable(a, 'internal'), this._jsPlumb.instance.destroyDroppable(a, 'internal');
    },
    setHover: function (a) {
      this.endpoint && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged() && this.endpoint.setHover(a);
    },
    isFull: function () {
      return !(this.isFloating() || this._jsPlumb.maxConnections < 1 || this.connections.length < this._jsPlumb.maxConnections);
    },
    isFloating: function () {
      return null != this.anchor && this.anchor.isFloating;
    },
    isConnectedTo: function (a) {
      var b = !1;
      if (a)
        for (var c = 0; c < this.connections.length; c++)
          if (this.connections[c].endpoints[1] == a || this.connections[c].endpoints[0] == a) {
            b = !0;
            break;
          }
      return b;
    },
    getConnectionCost: function () {
      return this._jsPlumb.connectionCost;
    },
    setConnectionCost: function (a) {
      this._jsPlumb.connectionCost = a;
    },
    areConnectionsDirected: function () {
      return this._jsPlumb.connectionsDirected;
    },
    setConnectionsDirected: function (a) {
      this._jsPlumb.connectionsDirected = a;
    },
    setElementId: function (a) {
      this.elementId = a, this.anchor.elementId = a;
    },
    setReferenceElement: function (a) {
      this.element = jsPlumb.getDOMElement(a);
    },
    setDragAllowedWhenFull: function (a) {
      this.dragAllowedWhenFull = a;
    },
    equals: function (a) {
      return this.anchor.equals(a.anchor);
    },
    getUuid: function () {
      return this._jsPlumb.uuid;
    },
    computeAnchor: function (a) {
      return this.anchor.compute(a);
    }
  }), jsPlumbInstance.prototype.EndpointDropHandler = function (a) {
    return function (b) {
      var c = a.jsPlumb;
      a.removeClass(c.endpointDropAllowedClass), a.removeClass(c.endpointDropForbiddenClass);
      var d = c.getDropEvent(arguments), e = c.getDOMElement(c.getDragObject(arguments)), f = c.getAttribute(e, 'dragId'), g = (c.getAttribute(e, 'elId'), c.getAttribute(e, 'originalScope')), h = c.floatingConnections[f];
      if (null != h) {
        var i = a.getEndpoint(h);
        a.onDrop && a.onDrop(h);
        var j = h.suspendedEndpoint && (h.suspendedEndpoint.id == i.id || i.referenceEndpoint && h.suspendedEndpoint.id == i.referenceEndpoint.id);
        if (j)
          return h._forceReattach = !0, h.setHover(!1), void 0;
        var k = c.getFloatingAnchorIndex(h);
        if (g && c.setDragScope(e, g), a.isFull(b) && i.fire('maxConnections', {
            endpoint: this,
            connection: h,
            maxConnections: i._jsPlumb.maxConnections
          }, d), !a.isFull() && (0 !== k || a.isSource) && (1 != k || a.isTarget) && a.enabled()) {
          var l = !0;
          h.suspendedEndpoint && h.suspendedEndpoint.id != i.id && (h.isDetachAllowed(h) && h.endpoints[k].isDetachAllowed(h) && h.suspendedEndpoint.isDetachAllowed(h) && c.checkCondition('beforeDetach', h) || (l = !1)), 0 === k ? (h.source = a.element, h.sourceId = a.elementId) : (h.target = a.element, h.targetId = a.elementId);
          var m = function () {
              h.endpoints[k].detachFromConnection(h), h.suspendedEndpoint && h.suspendedEndpoint.detachFromConnection(h), h.endpoints[k] = i, i.addConnection(h);
              var a = i.getParameters();
              for (var b in a)
                h.setParameter(b, a[b]);
              if (h.suspendedEndpoint) {
                var e = h.suspendedEndpoint.elementId;
                c.fireMoveEvent({
                  index: k,
                  originalSourceId: 0 === k ? e : h.sourceId,
                  newSourceId: 0 === k ? i.elementId : h.sourceId,
                  originalTargetId: 1 == k ? e : h.targetId,
                  newTargetId: 1 == k ? i.elementId : h.targetId,
                  originalSourceEndpoint: 0 === k ? h.suspendedEndpoint : h.endpoints[0],
                  newSourceEndpoint: 0 === k ? i : h.endpoints[0],
                  originalTargetEndpoint: 1 == k ? h.suspendedEndpoint : h.endpoints[1],
                  newTargetEndpoint: 1 == k ? i : h.endpoints[1],
                  connection: h
                }, d);
              } else
                a.draggable && c.initDraggable(this.element, dragOptions, 'internal', c);
              if (1 == k ? c.anchorManager.updateOtherEndpoint(h.sourceId, h.suspendedElementId, h.targetId, h) : c.anchorManager.sourceChanged(h.suspendedEndpoint.elementId, h.sourceId, h), h.endpoints[0].finalEndpoint) {
                var f = h.endpoints[0];
                f.detachFromConnection(h), h.endpoints[0] = h.endpoints[0].finalEndpoint, h.endpoints[0].addConnection(h);
              }
              c.finaliseConnection(h, null, d), h.setHover(!1);
            }.bind(this), n = function () {
              h.suspendedEndpoint && (h.endpoints[k] = h.suspendedEndpoint, h.setHover(!1), h._forceDetach = !0, 0 === k ? (h.source = h.suspendedEndpoint.element, h.sourceId = h.suspendedEndpoint.elementId) : (h.target = h.suspendedEndpoint.element, h.targetId = h.suspendedEndpoint.elementId), h.suspendedEndpoint.addConnection(h), c.repaint(h.sourceId), h._forceDetach = !1);
            };
          l = l && a.isDropAllowed(h.sourceId, h.targetId, h.scope, h, i), l ? m() : n();
        }
        c.currentlyDragging = !1;
      }
    };
  };
}(), function () {
  'use strict';
  var a = function (a, b, c, d, e) {
      if (!a.Defaults.DoNotThrowErrors && null == jsPlumb.Connectors[b][c])
        throw { msg: 'jsPlumb: unknown connector type \'' + c + '\'' };
      return new jsPlumb.Connectors[b][c](d, e);
    }, b = function (a, b, c) {
      return a ? c.makeAnchor(a, b, c) : null;
    };
  jsPlumb.Connection = function (a) {
    var b = a.newEndpoint, c = jsPlumbUtil;
    this.connector = null, this.idPrefix = '_jsplumb_c_', this.defaultLabelLocation = 0.5, this.defaultOverlayKeys = [
      'Overlays',
      'ConnectionOverlays'
    ], this.previousConnection = a.previousConnection, this.source = jsPlumb.getDOMElement(a.source), this.target = jsPlumb.getDOMElement(a.target), a.sourceEndpoint && (this.source = a.sourceEndpoint.endpointWillMoveTo || a.sourceEndpoint.getElement()), a.targetEndpoint && (this.target = a.targetEndpoint.getElement()), OverlayCapableJsPlumbUIComponent.apply(this, arguments), this.sourceId = this._jsPlumb.instance.getId(this.source), this.targetId = this._jsPlumb.instance.getId(this.target), this.scope = a.scope, this.endpoints = [], this.endpointStyles = [];
    var d = this._jsPlumb.instance;
    d.manage(this.sourceId, this.source), d.manage(this.targetId, this.target), this._jsPlumb.visible = !0, this._jsPlumb.editable = a.editable === !0, this._jsPlumb.params = {
      cssClass: a.cssClass,
      container: a.container,
      'pointer-events': a['pointer-events'],
      editorParams: a.editorParams
    }, this._jsPlumb.lastPaintedAt = null, this.getDefaultType = function () {
      return {
        parameters: {},
        scope: null,
        detachable: this._jsPlumb.instance.Defaults.ConnectionsDetachable,
        rettach: this._jsPlumb.instance.Defaults.ReattachConnections,
        paintStyle: this._jsPlumb.instance.Defaults.PaintStyle || jsPlumb.Defaults.PaintStyle,
        connector: this._jsPlumb.instance.Defaults.Connector || jsPlumb.Defaults.Connector,
        hoverPaintStyle: this._jsPlumb.instance.Defaults.HoverPaintStyle || jsPlumb.Defaults.HoverPaintStyle,
        overlays: this._jsPlumb.instance.Defaults.ConnectorOverlays || jsPlumb.Defaults.ConnectorOverlays
      };
    }, this.bind('mouseover', function () {
      this.setHover(!0);
    }.bind(this)), this.bind('mouseout', function () {
      this.setHover(!1);
    }.bind(this)), this.makeEndpoint = function (c, e, f, g) {
      return f = f || this._jsPlumb.instance.getId(e), this.prepareEndpoint(d, b, this, g, c ? 0 : 1, a, e, f);
    };
    var e = this.makeEndpoint(!0, this.source, this.sourceId, a.sourceEndpoint), f = this.makeEndpoint(!1, this.target, this.targetId, a.targetEndpoint);
    e && c.addToList(a.endpointsByElement, this.sourceId, e), f && c.addToList(a.endpointsByElement, this.targetId, f), this.scope || (this.scope = this.endpoints[0].scope), null != a.deleteEndpointsOnDetach ? (this.endpoints[0]._deleteOnDetach = a.deleteEndpointsOnDetach, this.endpoints[1]._deleteOnDetach = a.deleteEndpointsOnDetach) : (this.endpoints[0]._doNotDeleteOnDetach || (this.endpoints[0]._deleteOnDetach = !0), this.endpoints[1]._doNotDeleteOnDetach || (this.endpoints[1]._deleteOnDetach = !0)), this.setConnector(this.endpoints[0].connector || this.endpoints[1].connector || a.connector || d.Defaults.Connector || jsPlumb.Defaults.Connector, !0, !0), a.path && this.connector.setPath(a.path), this.setPaintStyle(this.endpoints[0].connectorStyle || this.endpoints[1].connectorStyle || a.paintStyle || d.Defaults.PaintStyle || jsPlumb.Defaults.PaintStyle, !0), this.setHoverPaintStyle(this.endpoints[0].connectorHoverStyle || this.endpoints[1].connectorHoverStyle || a.hoverPaintStyle || d.Defaults.HoverPaintStyle || jsPlumb.Defaults.HoverPaintStyle, !0), this._jsPlumb.paintStyleInUse = this.getPaintStyle();
    var g = d.getSuspendedAt();
    if (!d.isSuspendDrawing()) {
      var h = d.getCachedData(this.sourceId), i = h.o, j = h.s, k = d.getCachedData(this.targetId), l = k.o, m = k.s, n = g || d.timestamp(), o = this.endpoints[0].anchor.compute({
          xy: [
            i.left,
            i.top
          ],
          wh: j,
          element: this.endpoints[0],
          elementId: this.endpoints[0].elementId,
          txy: [
            l.left,
            l.top
          ],
          twh: m,
          tElement: this.endpoints[1],
          timestamp: n
        });
      this.endpoints[0].paint({
        anchorLoc: o,
        timestamp: n
      }), o = this.endpoints[1].anchor.compute({
        xy: [
          l.left,
          l.top
        ],
        wh: m,
        element: this.endpoints[1],
        elementId: this.endpoints[1].elementId,
        txy: [
          i.left,
          i.top
        ],
        twh: j,
        tElement: this.endpoints[0],
        timestamp: n
      }), this.endpoints[1].paint({
        anchorLoc: o,
        timestamp: n
      });
    }
    this._jsPlumb.detachable = d.Defaults.ConnectionsDetachable, a.detachable === !1 && (this._jsPlumb.detachable = !1), this.endpoints[0].connectionsDetachable === !1 && (this._jsPlumb.detachable = !1), this.endpoints[1].connectionsDetachable === !1 && (this._jsPlumb.detachable = !1), this._jsPlumb.reattach = a.reattach || this.endpoints[0].reattachConnections || this.endpoints[1].reattachConnections || d.Defaults.ReattachConnections, this._jsPlumb.cost = a.cost || this.endpoints[0].getConnectionCost(), this._jsPlumb.directed = a.directed, null == a.directed && (this._jsPlumb.directed = this.endpoints[0].areConnectionsDirected());
    var p = jsPlumb.extend({}, this.endpoints[1].getParameters());
    jsPlumb.extend(p, this.endpoints[0].getParameters()), jsPlumb.extend(p, this.getParameters()), this.setParameters(p);
    var q = [
        a.type,
        this.endpoints[0].connectionType,
        this.endpoints[1].connectionType
      ].join(' ');
    /[^\s]/.test(q) && this.addType(q, a.data, !0);
  }, jsPlumbUtil.extend(jsPlumb.Connection, OverlayCapableJsPlumbUIComponent, {
    applyType: function (a, b) {
      null != a.detachable && this.setDetachable(a.detachable), null != a.reattach && this.setReattach(a.reattach), a.scope && (this.scope = a.scope), this.setConnector(a.connector, b), null != a.cssClass && this.canvas && this._jsPlumb.instance.addClass(this.canvas, a.cssClass), a.anchor ? (this.endpoints[0].anchor = this._jsPlumb.instance.makeAnchor(a.anchor), this.endpoints[1].anchor = this._jsPlumb.instance.makeAnchor(a.anchor)) : a.anchors && (this.endpoints[0].anchor = this._jsPlumb.instance.makeAnchor(a.anchors[0]), this.endpoints[1].anchor = this._jsPlumb.instance.makeAnchor(a.anchors[1]));
    },
    getTypeDescriptor: function () {
      return 'connection';
    },
    getAttachedElements: function () {
      return this.endpoints;
    },
    addClass: function (a, b) {
      b && (this.endpoints[0].addClass(a), this.endpoints[1].addClass(a), this.suspendedEndpoint && this.suspendedEndpoint.addClass(a)), this.connector && this.connector.addClass(a);
    },
    removeClass: function (a, b) {
      b && (this.endpoints[0].removeClass(a), this.endpoints[1].removeClass(a), this.suspendedEndpoint && this.suspendedEndpoint.removeClass(a)), this.connector && this.connector.removeClass(a);
    },
    isVisible: function () {
      return this._jsPlumb.visible;
    },
    setVisible: function (a) {
      this._jsPlumb.visible = a, this.connector && this.connector.setVisible(a), this.repaint();
    },
    cleanup: function () {
      this.endpoints = null, this.source = null, this.target = null, null != this.connector && (this.connector.cleanup(), this.connector.destroy()), this.connector = null;
    },
    isDetachable: function () {
      return this._jsPlumb.detachable === !0;
    },
    setDetachable: function (a) {
      this._jsPlumb.detachable = a === !0;
    },
    isReattach: function () {
      return this._jsPlumb.reattach === !0;
    },
    setReattach: function (a) {
      this._jsPlumb.reattach = a === !0;
    },
    setHover: function (a) {
      this.connector && this._jsPlumb && !this._jsPlumb.instance.isConnectionBeingDragged() && (this.connector.setHover(a), jsPlumbAdapter[a ? 'addClass' : 'removeClass'](this.source, this._jsPlumb.instance.hoverSourceClass), jsPlumbAdapter[a ? 'addClass' : 'removeClass'](this.target, this._jsPlumb.instance.hoverTargetClass));
    },
    getCost: function () {
      return this._jsPlumb.cost;
    },
    setCost: function (a) {
      this._jsPlumb.cost = a;
    },
    isDirected: function () {
      return this._jsPlumb.directed === !0;
    },
    getConnector: function () {
      return this.connector;
    },
    setConnector: function (b, c, d) {
      var e = jsPlumbUtil;
      null != this.connector && (this.connector.cleanup(), this.connector.destroy());
      var f = {
          _jsPlumb: this._jsPlumb.instance,
          cssClass: this._jsPlumb.params.cssClass,
          container: this._jsPlumb.params.container,
          'pointer-events': this._jsPlumb.params['pointer-events']
        }, g = this._jsPlumb.instance.getRenderMode();
      e.isString(b) ? this.connector = a(this._jsPlumb.instance, g, b, f, this) : e.isArray(b) && (this.connector = 1 == b.length ? a(this._jsPlumb.instance, g, b[0], f, this) : a(this._jsPlumb.instance, g, b[0], e.merge(b[1], f), this)), this.canvas = this.connector.canvas, this.bgCanvas = this.connector.bgCanvas, this.canvas && (this.canvas._jsPlumb = this), this.bgCanvas && (this.bgCanvas._jsPlumb = this), d || this.setListenerComponent(this.connector), c || this.repaint();
    },
    paint: function (a) {
      if (!this._jsPlumb.instance.isSuspendDrawing() && this._jsPlumb.visible) {
        a = a || {};
        var b = a.timestamp, c = !1, d = c ? this.sourceId : this.targetId, e = c ? this.targetId : this.sourceId, f = c ? 0 : 1, g = c ? 1 : 0;
        if (null == b || b != this._jsPlumb.lastPaintedAt) {
          var h = this._jsPlumb.instance.getOffset(e), i = this._jsPlumb.instance.getOffset(d), j = this.endpoints[g], k = this.endpoints[f], l = j.anchor.getCurrentLocation({
              xy: [
                h.left,
                h.top
              ],
              wh: [
                h.width,
                h.height
              ],
              element: j,
              timestamp: b
            }), m = k.anchor.getCurrentLocation({
              xy: [
                i.left,
                i.top
              ],
              wh: [
                i.width,
                i.height
              ],
              element: k,
              timestamp: b
            });
          this.connector.resetBounds(), this.connector.compute({
            sourcePos: l,
            targetPos: m,
            sourceEndpoint: this.endpoints[g],
            targetEndpoint: this.endpoints[f],
            lineWidth: this._jsPlumb.paintStyleInUse.lineWidth,
            sourceInfo: h,
            targetInfo: i
          });
          for (var n = {
                minX: 1 / 0,
                minY: 1 / 0,
                maxX: -1 / 0,
                maxY: -1 / 0
              }, o = 0; o < this._jsPlumb.overlays.length; o++) {
            var p = this._jsPlumb.overlays[o];
            p.isVisible() && (this._jsPlumb.overlayPlacements[o] = p.draw(this.connector, this._jsPlumb.paintStyleInUse, this.getAbsoluteOverlayPosition(p)), n.minX = Math.min(n.minX, this._jsPlumb.overlayPlacements[o].minX), n.maxX = Math.max(n.maxX, this._jsPlumb.overlayPlacements[o].maxX), n.minY = Math.min(n.minY, this._jsPlumb.overlayPlacements[o].minY), n.maxY = Math.max(n.maxY, this._jsPlumb.overlayPlacements[o].maxY));
          }
          var q = parseFloat(this._jsPlumb.paintStyleInUse.lineWidth || 1) / 2, r = parseFloat(this._jsPlumb.paintStyleInUse.lineWidth || 0), s = {
              xmin: Math.min(this.connector.bounds.minX - (q + r), n.minX),
              ymin: Math.min(this.connector.bounds.minY - (q + r), n.minY),
              xmax: Math.max(this.connector.bounds.maxX + (q + r), n.maxX),
              ymax: Math.max(this.connector.bounds.maxY + (q + r), n.maxY)
            };
          this.connector.paint(this._jsPlumb.paintStyleInUse, null, s);
          for (var t = 0; t < this._jsPlumb.overlays.length; t++) {
            var u = this._jsPlumb.overlays[t];
            u.isVisible() && u.paint(this._jsPlumb.overlayPlacements[t], s);
          }
        }
        this._jsPlumb.lastPaintedAt = b;
      }
    },
    repaint: function (a) {
      a = a || {}, this.paint({
        elId: this.sourceId,
        recalc: !(a.recalc === !1),
        timestamp: a.timestamp
      });
    },
    prepareEndpoint: function (a, c, d, e, f, g, h, i) {
      var j;
      if (e)
        d.endpoints[f] = e, e.addConnection(d);
      else {
        g.endpoints || (g.endpoints = [
          null,
          null
        ]);
        var k = g.endpoints[f] || g.endpoint || a.Defaults.Endpoints[f] || jsPlumb.Defaults.Endpoints[f] || a.Defaults.Endpoint || jsPlumb.Defaults.Endpoint;
        g.endpointStyles || (g.endpointStyles = [
          null,
          null
        ]), g.endpointHoverStyles || (g.endpointHoverStyles = [
          null,
          null
        ]);
        var l = g.endpointStyles[f] || g.endpointStyle || a.Defaults.EndpointStyles[f] || jsPlumb.Defaults.EndpointStyles[f] || a.Defaults.EndpointStyle || jsPlumb.Defaults.EndpointStyle;
        null == l.fillStyle && null != g.paintStyle && (l.fillStyle = g.paintStyle.strokeStyle), null == l.outlineColor && null != g.paintStyle && (l.outlineColor = g.paintStyle.outlineColor), null == l.outlineWidth && null != g.paintStyle && (l.outlineWidth = g.paintStyle.outlineWidth);
        var m = g.endpointHoverStyles[f] || g.endpointHoverStyle || a.Defaults.EndpointHoverStyles[f] || jsPlumb.Defaults.EndpointHoverStyles[f] || a.Defaults.EndpointHoverStyle || jsPlumb.Defaults.EndpointHoverStyle;
        null != g.hoverPaintStyle && (null == m && (m = {}), null == m.fillStyle && (m.fillStyle = g.hoverPaintStyle.strokeStyle));
        var n = g.anchors ? g.anchors[f] : g.anchor ? g.anchor : b(a.Defaults.Anchors[f], i, a) || b(jsPlumb.Defaults.Anchors[f], i, a) || b(a.Defaults.Anchor, i, a) || b(jsPlumb.Defaults.Anchor, i, a), o = g.uuids ? g.uuids[f] : null;
        j = c({
          paintStyle: l,
          hoverPaintStyle: m,
          endpoint: k,
          connections: [d],
          uuid: o,
          anchor: n,
          source: h,
          scope: g.scope,
          reattach: g.reattach || a.Defaults.ReattachConnections,
          detachable: g.detachable || a.Defaults.ConnectionsDetachable
        }), d.endpoints[f] = j, g.drawEndpoints === !1 && j.setVisible(!1, !0, !0);
      }
      return j;
    }
  });
}(), function () {
  'use strict';
  jsPlumb.AnchorManager = function (a) {
    var b = {}, c = {}, d = {}, e = {}, f = {
        HORIZONTAL: 'horizontal',
        VERTICAL: 'vertical',
        DIAGONAL: 'diagonal',
        IDENTITY: 'identity'
      }, g = [
        'left',
        'top',
        'right',
        'bottom'
      ], h = {}, i = this, j = {}, k = a.jsPlumbInstance, l = {}, m = function (a, b, c, d, e, h) {
        if (a === b)
          return {
            orientation: f.IDENTITY,
            a: [
              'top',
              'top'
            ]
          };
        var i = Math.atan2(d.centery - c.centery, d.centerx - c.centerx), j = Math.atan2(c.centery - d.centery, c.centerx - d.centerx), k = [], l = {};
        !function (a, b) {
          for (var c = 0; c < a.length; c++)
            l[a[c]] = {
              left: [
                b[c].left,
                b[c].centery
              ],
              right: [
                b[c].right,
                b[c].centery
              ],
              top: [
                b[c].centerx,
                b[c].top
              ],
              bottom: [
                b[c].centerx,
                b[c].bottom
              ]
            };
        }([
          'source',
          'target'
        ], [
          c,
          d
        ]);
        for (var m = 0; m < g.length; m++)
          for (var n = 0; n < g.length; n++)
            m != n && k.push({
              source: g[m],
              target: g[n],
              dist: Biltong.lineLength(l.source[g[m]], l.target[g[n]])
            });
        k.sort(function (a, b) {
          return a.dist < b.dist ? -1 : a.dist > b.dist ? 1 : 0;
        });
        for (var o = k[0].source, p = k[0].target, q = 0; q < k.length && (o = !e.isContinuous || e.isEdgeSupported(k[q].source) ? k[q].source : null, p = !h.isContinuous || h.isEdgeSupported(k[q].target) ? k[q].target : null, null == o || null == p); q++);
        return {
          a: [
            o,
            p
          ],
          theta: i,
          theta2: j
        };
      }, n = function (a, b, c, d, e, f, g) {
        for (var h = [], i = b[e ? 0 : 1] / (d.length + 1), j = 0; j < d.length; j++) {
          var k = (j + 1) * i, l = f * b[e ? 1 : 0];
          g && (k = b[e ? 0 : 1] - k);
          var m = e ? k : l, n = c[0] + m, o = m / b[0], p = e ? l : k, q = c[1] + p, r = p / b[1];
          h.push([
            n,
            q,
            o,
            r,
            d[j][1],
            d[j][2]
          ]);
        }
        return h;
      }, o = function (a) {
        return function (b, c) {
          var d = !0;
          return d = a ? b[0][0] < c[0][0] : b[0][0] > c[0][0], d === !1 ? -1 : 1;
        };
      }, p = function (a, b) {
        var c = a[0][0] < 0 ? -Math.PI - a[0][0] : Math.PI - a[0][0], d = b[0][0] < 0 ? -Math.PI - b[0][0] : Math.PI - b[0][0];
        return c > d ? 1 : a[0][1] > b[0][1] ? 1 : -1;
      }, q = {
        top: function (a, b) {
          return a[0] > b[0] ? 1 : -1;
        },
        right: o(!0),
        bottom: o(!0),
        left: p
      }, r = function (a, b) {
        return a.sort(b);
      }, s = function (a, b) {
        var d = k.getCachedData(a), f = d.s, g = d.o, h = function (b, d, f, g, h, i, j) {
            if (g.length > 0)
              for (var k = r(g, q[b]), l = 'right' === b || 'top' === b, m = n(b, d, f, k, h, i, l), o = function (a, b) {
                    c[a.id] = [
                      b[0],
                      b[1],
                      b[2],
                      b[3]
                    ], e[a.id] = j;
                  }, p = 0; p < m.length; p++) {
                var s = m[p][4], t = s.endpoints[0].elementId === a, u = s.endpoints[1].elementId === a;
                t ? o(s.endpoints[0], m[p]) : u && o(s.endpoints[1], m[p]);
              }
          };
        h('bottom', f, [
          g.left,
          g.top
        ], b.bottom, !0, 1, [
          0,
          1
        ]), h('top', f, [
          g.left,
          g.top
        ], b.top, !0, 0, [
          0,
          -1
        ]), h('left', f, [
          g.left,
          g.top
        ], b.left, !1, 0, [
          -1,
          0
        ]), h('right', f, [
          g.left,
          g.top
        ], b.right, !1, 1, [
          1,
          0
        ]);
      };
    this.reset = function () {
      b = {}, h = {}, j = {};
    }, this.addFloatingConnection = function (a, b) {
      l[a] = b;
    }, this.removeFloatingConnection = function (a) {
      delete l[a];
    }, this.newConnection = function (a) {
      var b = a.sourceId, c = a.targetId, d = a.endpoints, e = !0, f = function (f, g, i, j, k) {
          b == c && i.isContinuous && (a._jsPlumb.instance.removeElement(d[1].canvas), e = !1), jsPlumbUtil.addToList(h, j, [
            k,
            g,
            i.constructor == jsPlumb.DynamicAnchor
          ]);
        };
      f(0, d[0], d[0].anchor, c, a), e && f(1, d[1], d[1].anchor, b, a);
    };
    var t = function (a) {
      !function (a, b) {
        if (a) {
          var c = function (a) {
            return a[4] == b;
          };
          jsPlumbUtil.removeWithFunction(a.top, c), jsPlumbUtil.removeWithFunction(a.left, c), jsPlumbUtil.removeWithFunction(a.bottom, c), jsPlumbUtil.removeWithFunction(a.right, c);
        }
      }(j[a.elementId], a.id);
    };
    this.connectionDetached = function (a) {
      var b = a.connection || a, c = a.sourceId, d = a.targetId, e = b.endpoints, f = function (a, b, c, d, e) {
          null != c && c.constructor == jsPlumb.FloatingAnchor || jsPlumbUtil.removeWithFunction(h[d], function (a) {
            return a[0].id == e.id;
          });
        };
      f(1, e[1], e[1].anchor, c, b), f(0, e[0], e[0].anchor, d, b), t(b.endpoints[0]), t(b.endpoints[1]), i.redraw(b.sourceId), i.redraw(b.targetId);
    }, this.add = function (a, c) {
      jsPlumbUtil.addToList(b, c, a);
    }, this.changeId = function (a, c) {
      h[c] = h[a], b[c] = b[a], delete h[a], delete b[a];
    }, this.getConnectionsFor = function (a) {
      return h[a] || [];
    }, this.getEndpointsFor = function (a) {
      return b[a] || [];
    }, this.deleteEndpoint = function (a) {
      jsPlumbUtil.removeWithFunction(b[a.elementId], function (b) {
        return b.id == a.id;
      }), t(a);
    }, this.clearFor = function (a) {
      delete b[a], b[a] = [];
    };
    var u = function (b, c, d, e, f, g, h, i, j, k, l, m) {
      var n, o = -1, p = -1, q = e.endpoints[h], r = q.id, s = [
          1,
          0
        ][h], t = [
          [
            c,
            d
          ],
          e,
          f,
          g,
          r
        ], u = b[j], v = q._continuousAnchorEdge ? b[q._continuousAnchorEdge] : null;
      if (v) {
        var w = jsPlumbUtil.findWithFunction(v, function (a) {
            return a[4] == r;
          });
        if (-1 != w)
          for (v.splice(w, 1), n = 0; n < v.length; n++)
            jsPlumbUtil.addWithFunction(l, v[n][1], function (a) {
              return a.id == v[n][1].id;
            }), jsPlumbUtil.addWithFunction(m, v[n][1].endpoints[h], function (a) {
              return a.id == v[n][1].endpoints[h].id;
            }), jsPlumbUtil.addWithFunction(m, v[n][1].endpoints[s], function (a) {
              return a.id == v[n][1].endpoints[s].id;
            });
      }
      for (n = 0; n < u.length; n++)
        1 == a.idx && u[n][3] === g && -1 == p && (p = n), jsPlumbUtil.addWithFunction(l, u[n][1], function (a) {
          return a.id == u[n][1].id;
        }), jsPlumbUtil.addWithFunction(m, u[n][1].endpoints[h], function (a) {
          return a.id == u[n][1].endpoints[h].id;
        }), jsPlumbUtil.addWithFunction(m, u[n][1].endpoints[s], function (a) {
          return a.id == u[n][1].endpoints[s].id;
        });
      if (-1 != o)
        u[o] = t;
      else {
        var x = i ? -1 != p ? p : 0 : u.length;
        u.splice(x, 0, t);
      }
      q._continuousAnchorEdge = j;
    };
    this.updateOtherEndpoint = function (a, b, c, d) {
      var e = jsPlumbUtil.findWithFunction(h[a], function (a) {
          return a[0].id === d.id;
        }), f = jsPlumbUtil.findWithFunction(h[b], function (a) {
          return a[0].id === d.id;
        });
      -1 != e && (h[a][e][0] = d, h[a][e][1] = d.endpoints[1], h[a][e][2] = d.endpoints[1].anchor.constructor == jsPlumb.DynamicAnchor), f > -1 && (h[b].splice(f, 1), jsPlumbUtil.addToList(h, c, [
        d,
        d.endpoints[0],
        d.endpoints[0].anchor.constructor == jsPlumb.DynamicAnchor
      ]));
    }, this.sourceChanged = function (a, b, c) {
      if (a !== b) {
        jsPlumbUtil.removeWithFunction(h[a], function (a) {
          return a[0].id === c.id;
        });
        var d = jsPlumbUtil.findWithFunction(h[c.targetId], function (a) {
            return a[0].id === c.id;
          });
        d > -1 && (h[c.targetId][d][0] = c, h[c.targetId][d][1] = c.endpoints[0], h[c.targetId][d][2] = c.endpoints[0].anchor.constructor == jsPlumb.DynamicAnchor), jsPlumbUtil.addToList(h, b, [
          c,
          c.endpoints[1],
          c.endpoints[1].anchor.constructor == jsPlumb.DynamicAnchor
        ]);
      }
    }, this.rehomeEndpoint = function (a, c, d) {
      var e = b[c] || [], f = k.getId(d);
      if (f !== c) {
        var g = jsPlumbUtil.indexOf(e, a);
        if (g > -1) {
          var h = e.splice(g, 1)[0];
          i.add(h, f);
        }
      }
      for (var j = 0; j < a.connections.length; j++)
        a.connections[j].sourceId == c ? (a.connections[j].sourceId = a.elementId, a.connections[j].source = a.element, i.sourceChanged(c, a.elementId, a.connections[j])) : a.connections[j].targetId == c && (a.connections[j].targetId = a.elementId, a.connections[j].target = a.element, i.updateOtherEndpoint(a.connections[j].sourceId, c, a.elementId, a.connections[j]));
    }, this.redraw = function (a, c, d, e, f, g) {
      if (!k.isSuspendDrawing()) {
        var i = b[a] || [], n = h[a] || [], o = [], p = [], q = [];
        d = d || k.timestamp(), e = e || {
          left: 0,
          top: 0
        }, c && (c = {
          left: c.left + e.left,
          top: c.top + e.top
        });
        for (var r = k.updateOffset({
              elId: a,
              offset: c,
              recalc: !1,
              timestamp: d
            }), t = {}, v = 0; v < n.length; v++) {
          var w = n[v][0], x = w.sourceId, y = w.targetId, z = w.endpoints[0].anchor.isContinuous, A = w.endpoints[1].anchor.isContinuous;
          if (z || A) {
            var B = x + '_' + y, C = t[B], D = w.sourceId == a ? 1 : 0;
            z && !j[x] && (j[x] = {
              top: [],
              right: [],
              bottom: [],
              left: []
            }), A && !j[y] && (j[y] = {
              top: [],
              right: [],
              bottom: [],
              left: []
            }), a != y && k.updateOffset({
              elId: y,
              timestamp: d
            }), a != x && k.updateOffset({
              elId: x,
              timestamp: d
            });
            var E = k.getCachedData(y), F = k.getCachedData(x);
            y == x && (z || A) ? u(j[x], -Math.PI / 2, 0, w, !1, y, 0, !1, 'top', x, o, p) : (C || (C = m(x, y, F.o, E.o, w.endpoints[0].anchor, w.endpoints[1].anchor), t[B] = C), z && u(j[x], C.theta, 0, w, !1, y, 0, !1, C.a[0], x, o, p), A && u(j[y], C.theta2, -1, w, !0, x, 1, !0, C.a[1], y, o, p)), z && jsPlumbUtil.addWithFunction(q, x, function (a) {
              return a === x;
            }), A && jsPlumbUtil.addWithFunction(q, y, function (a) {
              return a === y;
            }), jsPlumbUtil.addWithFunction(o, w, function (a) {
              return a.id == w.id;
            }), (z && 0 === D || A && 1 === D) && jsPlumbUtil.addWithFunction(p, w.endpoints[D], function (a) {
              return a.id == w.endpoints[D].id;
            });
          }
        }
        for (v = 0; v < i.length; v++)
          0 === i[v].connections.length && i[v].anchor.isContinuous && (j[a] || (j[a] = {
            top: [],
            right: [],
            bottom: [],
            left: []
          }), u(j[a], -Math.PI / 2, 0, {
            endpoints: [
              i[v],
              i[v]
            ],
            paint: function () {
            }
          }, !1, a, 0, !1, i[v].anchor.getDefaultFace(), a, o, p), jsPlumbUtil.addWithFunction(q, a, function (b) {
            return b === a;
          }));
        for (v = 0; v < q.length; v++)
          s(q[v], j[q[v]]);
        for (v = 0; v < i.length; v++)
          i[v].paint({
            timestamp: d,
            offset: r,
            dimensions: r.s,
            recalc: g !== !0
          });
        for (v = 0; v < p.length; v++) {
          var G = k.getCachedData(p[v].elementId);
          p[v].paint({
            timestamp: d,
            offset: G,
            dimensions: G.s
          });
        }
        for (v = 0; v < n.length; v++) {
          var H = n[v][1];
          if (H.anchor.constructor == jsPlumb.DynamicAnchor) {
            H.paint({
              elementWithPrecedence: a,
              timestamp: d
            }), jsPlumbUtil.addWithFunction(o, n[v][0], function (a) {
              return a.id == n[v][0].id;
            });
            for (var I = 0; I < H.connections.length; I++)
              H.connections[I] !== n[v][0] && jsPlumbUtil.addWithFunction(o, H.connections[I], function (a) {
                return a.id == H.connections[I].id;
              });
          } else
            H.anchor.constructor == jsPlumb.Anchor && jsPlumbUtil.addWithFunction(o, n[v][0], function (a) {
              return a.id == n[v][0].id;
            });
        }
        var J = l[a];
        for (J && J.paint({
            timestamp: d,
            recalc: !1,
            elId: a
          }), v = 0; v < o.length; v++)
          o[v].paint({
            elId: a,
            timestamp: d,
            recalc: !1,
            clearEdits: f
          });
      }
    };
    var v = function (a) {
      jsPlumbUtil.EventGenerator.apply(this), this.type = 'Continuous', this.isDynamic = !0, this.isContinuous = !0;
      for (var b = a.faces || [
            'top',
            'right',
            'bottom',
            'left'
          ], f = !(a.clockwise === !1), g = {}, h = {
            top: 'bottom',
            right: 'left',
            left: 'right',
            bottom: 'top'
          }, i = {
            top: 'right',
            right: 'bottom',
            left: 'top',
            bottom: 'left'
          }, j = {
            top: 'left',
            right: 'top',
            left: 'bottom',
            bottom: 'right'
          }, k = f ? i : j, l = f ? j : i, m = a.cssClass || '', n = 0; n < b.length; n++)
        g[b[n]] = !0;
      this.getDefaultFace = function () {
        return 0 === b.length ? 'top' : b[0];
      }, this.verifyEdge = function (a) {
        return g[a] ? a : g[h[a]] ? h[a] : g[k[a]] ? k[a] : g[l[a]] ? l[a] : a;
      }, this.isEdgeSupported = function (a) {
        return g[a] === !0;
      }, this.compute = function (a) {
        return d[a.element.id] || c[a.element.id] || [
          0,
          0
        ];
      }, this.getCurrentLocation = function (a) {
        return d[a.element.id] || c[a.element.id] || [
          0,
          0
        ];
      }, this.getOrientation = function (a) {
        return e[a.id] || [
          0,
          0
        ];
      }, this.clearUserDefinedLocation = function () {
        delete d[a.elementId];
      }, this.setUserDefinedLocation = function (b) {
        d[a.elementId] = b;
      }, this.getCssClass = function () {
        return m;
      }, this.setCssClass = function (a) {
        m = a;
      };
    };
    k.continuousAnchorFactory = {
      get: function (a) {
        return new v(a);
      },
      clear: function (a) {
        delete d[a], delete c[a];
      }
    };
  }, jsPlumb.Anchor = function (a) {
    this.x = a.x || 0, this.y = a.y || 0, this.elementId = a.elementId, this.cssClass = a.cssClass || '', this.userDefinedLocation = null, this.orientation = a.orientation || [
      0,
      0
    ], jsPlumbUtil.EventGenerator.apply(this), a.jsPlumbInstance, this.lastReturnValue = null, this.offsets = a.offsets || [
      0,
      0
    ], this.timestamp = null, this.compute = function (a) {
      var b = a.xy, c = a.wh, d = (a.element, a.timestamp);
      return a.clearUserDefinedLocation && (this.userDefinedLocation = null), d && d === self.timestamp ? this.lastReturnValue : (this.lastReturnValue = null != this.userDefinedLocation ? this.userDefinedLocation : [
        b[0] + this.x * c[0] + this.offsets[0],
        b[1] + this.y * c[1] + this.offsets[1]
      ], this.timestamp = d, this.lastReturnValue);
    }, this.getCurrentLocation = function (a) {
      return null == this.lastReturnValue || null != a.timestamp && this.timestamp != a.timestamp ? this.compute(a) : this.lastReturnValue;
    };
  }, jsPlumbUtil.extend(jsPlumb.Anchor, jsPlumbUtil.EventGenerator, {
    equals: function (a) {
      if (!a)
        return !1;
      var b = a.getOrientation(), c = this.getOrientation();
      return this.x == a.x && this.y == a.y && this.offsets[0] == a.offsets[0] && this.offsets[1] == a.offsets[1] && c[0] == b[0] && c[1] == b[1];
    },
    getUserDefinedLocation: function () {
      return this.userDefinedLocation;
    },
    setUserDefinedLocation: function (a) {
      this.userDefinedLocation = a;
    },
    clearUserDefinedLocation: function () {
      this.userDefinedLocation = null;
    },
    getOrientation: function () {
      return this.orientation;
    },
    getCssClass: function () {
      return this.cssClass;
    }
  }), jsPlumb.FloatingAnchor = function (a) {
    jsPlumb.Anchor.apply(this, arguments);
    var b = a.reference, c = (a.jsPlumbInstance, a.referenceCanvas), d = jsPlumb.getSize(c), e = 0, f = 0, g = null, h = null;
    this.orientation = null, this.x = 0, this.y = 0, this.isFloating = !0, this.compute = function (a) {
      var b = a.xy, c = (a.element, [
          b[0] + d[0] / 2,
          b[1] + d[1] / 2
        ]);
      return h = c, c;
    }, this.getOrientation = function (a) {
      if (g)
        return g;
      var c = b.getOrientation(a);
      return [
        -1 * Math.abs(c[0]) * e,
        -1 * Math.abs(c[1]) * f
      ];
    }, this.over = function (a, b) {
      g = a.getOrientation(b);
    }, this.out = function () {
      g = null;
    }, this.getCurrentLocation = function (a) {
      return null == h ? this.compute(a) : h;
    };
  }, jsPlumbUtil.extend(jsPlumb.FloatingAnchor, jsPlumb.Anchor);
  var a = function (a, b, c) {
    return a.constructor == jsPlumb.Anchor ? a : b.makeAnchor(a, c, b);
  };
  jsPlumb.DynamicAnchor = function (b) {
    jsPlumb.Anchor.apply(this, arguments), this.isSelective = !0, this.isDynamic = !0, this.anchors = [], this.elementId = b.elementId, this.jsPlumbInstance = b.jsPlumbInstance;
    for (var c = 0; c < b.anchors.length; c++)
      this.anchors[c] = a(b.anchors[c], this.jsPlumbInstance, this.elementId);
    this.addAnchor = function (b) {
      this.anchors.push(a(b, this.jsPlumbInstance, this.elementId));
    }, this.getAnchors = function () {
      return this.anchors;
    }, this.locked = !1;
    var d = this.anchors.length > 0 ? this.anchors[0] : null, e = (this.anchors.length > 0 ? 0 : -1, d), f = this, g = function (a, b, c, d, e) {
        var f = d[0] + a.x * e[0], g = d[1] + a.y * e[1], h = d[0] + e[0] / 2, i = d[1] + e[1] / 2;
        return Math.sqrt(Math.pow(b - f, 2) + Math.pow(c - g, 2)) + Math.sqrt(Math.pow(h - f, 2) + Math.pow(i - g, 2));
      }, h = b.selector || function (a, b, c, d, e) {
        for (var f = c[0] + d[0] / 2, h = c[1] + d[1] / 2, i = -1, j = 1 / 0, k = 0; k < e.length; k++) {
          var l = g(e[k], f, h, a, b);
          j > l && (i = k + 0, j = l);
        }
        return e[i];
      };
    this.compute = function (a) {
      var b = a.xy, c = a.wh, g = a.timestamp, i = a.txy, j = a.twh;
      this.timestamp = g;
      var k = f.getUserDefinedLocation();
      return null != k ? k : this.locked || null == i || null == j ? d.compute(a) : (a.timestamp = null, d = h(b, c, i, j, this.anchors), this.x = d.x, this.y = d.y, d != e && this.fire('anchorChanged', d), e = d, d.compute(a));
    }, this.getCurrentLocation = function (a) {
      return this.getUserDefinedLocation() || (null != d ? d.getCurrentLocation(a) : null);
    }, this.getOrientation = function (a) {
      return null != d ? d.getOrientation(a) : [
        0,
        0
      ];
    }, this.over = function (a, b) {
      null != d && d.over(a, b);
    }, this.out = function () {
      null != d && d.out();
    }, this.getCssClass = function () {
      return d && d.getCssClass() || '';
    };
  }, jsPlumbUtil.extend(jsPlumb.DynamicAnchor, jsPlumb.Anchor);
  var b = function (a, b, c, d, e, f) {
    jsPlumb.Anchors[e] = function (g) {
      var h = g.jsPlumbInstance.makeAnchor([
          a,
          b,
          c,
          d,
          0,
          0
        ], g.elementId, g.jsPlumbInstance);
      return h.type = e, f && f(h, g), h;
    };
  };
  b(0.5, 0, 0, -1, 'TopCenter'), b(0.5, 1, 0, 1, 'BottomCenter'), b(0, 0.5, -1, 0, 'LeftMiddle'), b(1, 0.5, 1, 0, 'RightMiddle'), b(0.5, 0, 0, -1, 'Top'), b(0.5, 1, 0, 1, 'Bottom'), b(0, 0.5, -1, 0, 'Left'), b(1, 0.5, 1, 0, 'Right'), b(0.5, 0.5, 0, 0, 'Center'), b(1, 0, 0, -1, 'TopRight'), b(1, 1, 0, 1, 'BottomRight'), b(0, 0, 0, -1, 'TopLeft'), b(0, 1, 0, 1, 'BottomLeft'), jsPlumb.Defaults.DynamicAnchors = function (a) {
    return a.jsPlumbInstance.makeAnchors([
      'TopCenter',
      'RightMiddle',
      'BottomCenter',
      'LeftMiddle'
    ], a.elementId, a.jsPlumbInstance);
  }, jsPlumb.Anchors.AutoDefault = function (a) {
    var b = a.jsPlumbInstance.makeDynamicAnchor(jsPlumb.Defaults.DynamicAnchors(a));
    return b.type = 'AutoDefault', b;
  };
  var c = function (a, b) {
    jsPlumb.Anchors[a] = function (c) {
      var d = c.jsPlumbInstance.makeAnchor([
          'Continuous',
          { faces: b }
        ], c.elementId, c.jsPlumbInstance);
      return d.type = a, d;
    };
  };
  jsPlumb.Anchors.Continuous = function (a) {
    return a.jsPlumbInstance.continuousAnchorFactory.get(a);
  }, c('ContinuousLeft', ['left']), c('ContinuousTop', ['top']), c('ContinuousBottom', ['bottom']), c('ContinuousRight', ['right']), b(0, 0, 0, 0, 'Assign', function (a, b) {
    var c = b.position || 'Fixed';
    a.positionFinder = c.constructor == String ? b.jsPlumbInstance.AnchorPositionFinders[c] : c, a.constructorParams = b;
  }), jsPlumbInstance.prototype.AnchorPositionFinders = {
    Fixed: function (a, b, c) {
      return [
        (a.left - b.left) / c[0],
        (a.top - b.top) / c[1]
      ];
    },
    Grid: function (a, b, c, d) {
      var e = a.left - b.left, f = a.top - b.top, g = c[0] / d.grid[0], h = c[1] / d.grid[1], i = Math.floor(e / g), j = Math.floor(f / h);
      return [
        (i * g + g / 2) / c[0],
        (j * h + h / 2) / c[1]
      ];
    }
  }, jsPlumb.Anchors.Perimeter = function (a) {
    a = a || {};
    var b = a.anchorCount || 60, c = a.shape;
    if (!c)
      throw new Error('no shape supplied to Perimeter Anchor type');
    var d = function () {
        for (var a = 0.5, c = 2 * Math.PI / b, d = 0, e = [], f = 0; b > f; f++) {
          var g = a + a * Math.sin(d), h = a + a * Math.cos(d);
          e.push([
            g,
            h,
            0,
            0
          ]), d += c;
        }
        return e;
      }, e = function (a) {
        for (var c = b / a.length, d = [], e = function (a, e, f, g, h) {
              c = b * h;
              for (var i = (f - a) / c, j = (g - e) / c, k = 0; c > k; k++)
                d.push([
                  a + i * k,
                  e + j * k,
                  0,
                  0
                ]);
            }, f = 0; f < a.length; f++)
          e.apply(null, a[f]);
        return d;
      }, f = function (a) {
        for (var b = [], c = 0; c < a.length; c++)
          b.push([
            a[c][0],
            a[c][1],
            a[c][2],
            a[c][3],
            1 / a.length
          ]);
        return e(b);
      }, g = function () {
        return f([
          [
            0,
            0,
            1,
            0
          ],
          [
            1,
            0,
            1,
            1
          ],
          [
            1,
            1,
            0,
            1
          ],
          [
            0,
            1,
            0,
            0
          ]
        ]);
      }, h = {
        Circle: d,
        Ellipse: d,
        Diamond: function () {
          return f([
            [
              0.5,
              0,
              1,
              0.5
            ],
            [
              1,
              0.5,
              0.5,
              1
            ],
            [
              0.5,
              1,
              0,
              0.5
            ],
            [
              0,
              0.5,
              0.5,
              0
            ]
          ]);
        },
        Rectangle: g,
        Square: g,
        Triangle: function () {
          return f([
            [
              0.5,
              0,
              1,
              1
            ],
            [
              1,
              1,
              0,
              1
            ],
            [
              0,
              1,
              0.5,
              0
            ]
          ]);
        },
        Path: function (a) {
          for (var b = a.points, c = [], d = 0, f = 0; f < b.length - 1; f++) {
            var g = Math.sqrt(Math.pow(b[f][2] - b[f][0]) + Math.pow(b[f][3] - b[f][1]));
            d += g, c.push([
              b[f][0],
              b[f][1],
              b[f + 1][0],
              b[f + 1][1],
              g
            ]);
          }
          for (var h = 0; h < c.length; h++)
            c[h][4] = c[h][4] / d;
          return e(c);
        }
      }, i = function (a, b) {
        for (var c = [], d = b / 180 * Math.PI, e = 0; e < a.length; e++) {
          var f = a[e][0] - 0.5, g = a[e][1] - 0.5;
          c.push([
            0.5 + (f * Math.cos(d) - g * Math.sin(d)),
            0.5 + (f * Math.sin(d) + g * Math.cos(d)),
            a[e][2],
            a[e][3]
          ]);
        }
        return c;
      };
    if (!h[c])
      throw new Error('Shape [' + c + '] is unknown by Perimeter Anchor type');
    var j = h[c](a);
    a.rotation && (j = i(j, a.rotation));
    var k = a.jsPlumbInstance.makeDynamicAnchor(j);
    return k.type = 'Perimeter', k;
  };
}(), function () {
  'use strict';
  jsPlumb.Segments = {
    AbstractSegment: function (a) {
      this.params = a, this.findClosestPointOnPath = function () {
        return {
          d: 1 / 0,
          x: null,
          y: null,
          l: null
        };
      }, this.getBounds = function () {
        return {
          minX: Math.min(a.x1, a.x2),
          minY: Math.min(a.y1, a.y2),
          maxX: Math.max(a.x1, a.x2),
          maxY: Math.max(a.y1, a.y2)
        };
      };
    },
    Straight: function (a) {
      var b, c, d, e, f, g, h, i = (jsPlumb.Segments.AbstractSegment.apply(this, arguments), function () {
          b = Math.sqrt(Math.pow(f - e, 2) + Math.pow(h - g, 2)), c = Biltong.gradient({
            x: e,
            y: g
          }, {
            x: f,
            y: h
          }), d = -1 / c;
        });
      this.type = 'Straight', this.getLength = function () {
        return b;
      }, this.getGradient = function () {
        return c;
      }, this.getCoordinates = function () {
        return {
          x1: e,
          y1: g,
          x2: f,
          y2: h
        };
      }, this.setCoordinates = function (a) {
        e = a.x1, g = a.y1, f = a.x2, h = a.y2, i();
      }, this.setCoordinates({
        x1: a.x1,
        y1: a.y1,
        x2: a.x2,
        y2: a.y2
      }), this.getBounds = function () {
        return {
          minX: Math.min(e, f),
          minY: Math.min(g, h),
          maxX: Math.max(e, f),
          maxY: Math.max(g, h)
        };
      }, this.pointOnPath = function (a, c) {
        if (0 !== a || c) {
          if (1 != a || c) {
            var d = c ? a > 0 ? a : b + a : a * b;
            return Biltong.pointOnLine({
              x: e,
              y: g
            }, {
              x: f,
              y: h
            }, d);
          }
          return {
            x: f,
            y: h
          };
        }
        return {
          x: e,
          y: g
        };
      }, this.gradientAtPoint = function () {
        return c;
      }, this.pointAlongPathFrom = function (a, b, c) {
        var d = this.pointOnPath(a, c), i = 0 >= b ? {
            x: e,
            y: g
          } : {
            x: f,
            y: h
          };
        return 0 >= b && Math.abs(b) > 1 && (b *= -1), Biltong.pointOnLine(d, i, b);
      };
      var j = function (a, b, c) {
          return c >= Math.min(a, b) && c <= Math.max(a, b);
        }, k = function (a, b, c) {
          return Math.abs(c - a) < Math.abs(c - b) ? a : b;
        };
      this.findClosestPointOnPath = function (a, i) {
        var l = {
            d: 1 / 0,
            x: null,
            y: null,
            l: null,
            x1: e,
            x2: f,
            y1: g,
            y2: h
          };
        if (0 === c)
          l.y = g, l.x = j(e, f, a) ? a : k(e, f, a);
        else if (1 / 0 == c || c == -1 / 0)
          l.x = e, l.y = j(g, h, i) ? i : k(g, h, i);
        else {
          var m = g - c * e, n = i - d * a, o = (n - m) / (c - d), p = c * o + m;
          l.x = j(e, f, o) ? o : k(e, f, o), l.y = j(g, h, p) ? p : k(g, h, p);
        }
        var q = Biltong.lineLength([
            l.x,
            l.y
          ], [
            e,
            g
          ]);
        return l.d = Biltong.lineLength([
          a,
          i
        ], [
          l.x,
          l.y
        ]), l.l = q / b, l;
      };
    },
    Arc: function (a) {
      var b = (jsPlumb.Segments.AbstractSegment.apply(this, arguments), function (b, c) {
          return Biltong.theta([
            a.cx,
            a.cy
          ], [
            b,
            c
          ]);
        }), c = function (a, b) {
          if (a.anticlockwise) {
            var c = a.startAngle < a.endAngle ? a.startAngle + d : a.startAngle, e = Math.abs(c - a.endAngle);
            return c - e * b;
          }
          var f = a.endAngle < a.startAngle ? a.endAngle + d : a.endAngle, g = Math.abs(f - a.startAngle);
          return a.startAngle + g * b;
        }, d = 2 * Math.PI;
      this.radius = a.r, this.anticlockwise = a.ac, this.type = 'Arc', a.startAngle && a.endAngle ? (this.startAngle = a.startAngle, this.endAngle = a.endAngle, this.x1 = a.cx + this.radius * Math.cos(a.startAngle), this.y1 = a.cy + this.radius * Math.sin(a.startAngle), this.x2 = a.cx + this.radius * Math.cos(a.endAngle), this.y2 = a.cy + this.radius * Math.sin(a.endAngle)) : (this.startAngle = b(a.x1, a.y1), this.endAngle = b(a.x2, a.y2), this.x1 = a.x1, this.y1 = a.y1, this.x2 = a.x2, this.y2 = a.y2), this.endAngle < 0 && (this.endAngle += d), this.startAngle < 0 && (this.startAngle += d), this.segment = Biltong.quadrant([
        this.x1,
        this.y1
      ], [
        this.x2,
        this.y2
      ]);
      var e = this.endAngle < this.startAngle ? this.endAngle + d : this.endAngle;
      this.sweep = Math.abs(e - this.startAngle), this.anticlockwise && (this.sweep = d - this.sweep);
      var f = 2 * Math.PI * this.radius, g = this.sweep / d, h = f * g;
      this.getLength = function () {
        return h;
      }, this.getBounds = function () {
        return {
          minX: a.cx - a.r,
          maxX: a.cx + a.r,
          minY: a.cy - a.r,
          maxY: a.cy + a.r
        };
      };
      var i = 1e-10, j = function (a) {
          var b = Math.floor(a), c = Math.ceil(a);
          return i > a - b ? b : i > c - a ? c : a;
        };
      this.pointOnPath = function (b, d) {
        if (0 === b)
          return {
            x: this.x1,
            y: this.y1,
            theta: this.startAngle
          };
        if (1 == b)
          return {
            x: this.x2,
            y: this.y2,
            theta: this.endAngle
          };
        d && (b /= h);
        var e = c(this, b), f = a.cx + a.r * Math.cos(e), g = a.cy + a.r * Math.sin(e);
        return {
          x: j(f),
          y: j(g),
          theta: e
        };
      }, this.gradientAtPoint = function (b, c) {
        var d = this.pointOnPath(b, c), e = Biltong.normal([
            a.cx,
            a.cy
          ], [
            d.x,
            d.y
          ]);
        return this.anticlockwise || 1 / 0 != e && e != -1 / 0 || (e *= -1), e;
      }, this.pointAlongPathFrom = function (b, c, d) {
        var e = this.pointOnPath(b, d), g = 2 * (c / f) * Math.PI, h = this.anticlockwise ? -1 : 1, i = e.theta + h * g, j = a.cx + this.radius * Math.cos(i), k = a.cy + this.radius * Math.sin(i);
        return {
          x: j,
          y: k
        };
      };
    },
    Bezier: function (a) {
      this.curve = [
        {
          x: a.x1,
          y: a.y1
        },
        {
          x: a.cp1x,
          y: a.cp1y
        },
        {
          x: a.cp2x,
          y: a.cp2y
        },
        {
          x: a.x2,
          y: a.y2
        }
      ], jsPlumb.Segments.AbstractSegment.apply(this, arguments), this.bounds = {
        minX: Math.min(a.x1, a.x2, a.cp1x, a.cp2x),
        minY: Math.min(a.y1, a.y2, a.cp1y, a.cp2y),
        maxX: Math.max(a.x1, a.x2, a.cp1x, a.cp2x),
        maxY: Math.max(a.y1, a.y2, a.cp1y, a.cp2y)
      }, this.type = 'Bezier';
      var b = function (a, b, c) {
        return c && (b = jsBezier.locationAlongCurveFrom(a, b > 0 ? 0 : 1, b)), b;
      };
      this.pointOnPath = function (a, c) {
        return a = b(this.curve, a, c), jsBezier.pointOnCurve(this.curve, a);
      }, this.gradientAtPoint = function (a, c) {
        return a = b(this.curve, a, c), jsBezier.gradientAtPoint(this.curve, a);
      }, this.pointAlongPathFrom = function (a, c, d) {
        return a = b(this.curve, a, d), jsBezier.pointAlongCurveFrom(this.curve, a, c);
      }, this.getLength = function () {
        return jsBezier.getLength(this.curve);
      }, this.getBounds = function () {
        return this.bounds;
      };
    }
  };
  var a = function () {
    this.resetBounds = function () {
      this.bounds = {
        minX: 1 / 0,
        minY: 1 / 0,
        maxX: -1 / 0,
        maxY: -1 / 0
      };
    }, this.resetBounds();
  };
  jsPlumb.Connectors.AbstractConnector = function (b) {
    a.apply(this, arguments);
    var c = [], d = 0, e = [], f = [], g = b.stub || 0, h = jsPlumbUtil.isArray(g) ? g[0] : g, i = jsPlumbUtil.isArray(g) ? g[1] : g, j = b.gap || 0, k = jsPlumbUtil.isArray(j) ? j[0] : j, l = jsPlumbUtil.isArray(j) ? j[1] : j, m = null, n = !1, o = null;
    this.getPath = function () {
    }, this.setPath = function () {
    }, this.findSegmentForPoint = function (a, b) {
      for (var d = {
            d: 1 / 0,
            s: null,
            x: null,
            y: null,
            l: null
          }, e = 0; e < c.length; e++) {
        var f = c[e].findClosestPointOnPath(a, b);
        f.d < d.d && (d.d = f.d, d.l = f.l, d.x = f.x, d.y = f.y, d.s = c[e], d.x1 = f.x1, d.x2 = f.x2, d.y1 = f.y1, d.y2 = f.y2, d.index = e);
      }
      return d;
    };
    var p = function () {
        for (var a = 0, b = 0; b < c.length; b++) {
          var g = c[b].getLength();
          f[b] = g / d, e[b] = [
            a,
            a += g / d
          ];
        }
      }, q = function (a, b) {
        b && (a = a > 0 ? a / d : (d + a) / d);
        for (var g = e.length - 1, h = 1, i = 0; i < e.length; i++)
          if (e[i][1] >= a) {
            g = i, h = 1 == a ? 1 : 0 === a ? 0 : (a - e[i][0]) / f[i];
            break;
          }
        return {
          segment: c[g],
          proportion: h,
          index: g
        };
      }, r = function (a, b, e) {
        if (e.x1 != e.x2 || e.y1 != e.y2) {
          var f = new jsPlumb.Segments[b](e);
          c.push(f), d += f.getLength(), a.updateBounds(f);
        }
      }, s = function () {
        d = c.length = e.length = f.length = 0;
      };
    this.setSegments = function (a) {
      m = [], d = 0;
      for (var b = 0; b < a.length; b++)
        m.push(a[b]), d += a[b].getLength();
    };
    var t = function (a) {
      this.lineWidth = a.lineWidth;
      var b = Biltong.quadrant(a.sourcePos, a.targetPos), c = a.targetPos[0] < a.sourcePos[0], d = a.targetPos[1] < a.sourcePos[1], e = a.lineWidth || 1, f = a.sourceEndpoint.anchor.getOrientation(a.sourceEndpoint), g = a.targetEndpoint.anchor.getOrientation(a.targetEndpoint), j = c ? a.targetPos[0] : a.sourcePos[0], m = d ? a.targetPos[1] : a.sourcePos[1], n = Math.abs(a.targetPos[0] - a.sourcePos[0]), o = Math.abs(a.targetPos[1] - a.sourcePos[1]);
      if (0 === f[0] && 0 === f[1] || 0 === g[0] && 0 === g[1]) {
        var p = n > o ? 0 : 1, q = [
            1,
            0
          ][p];
        f = [], g = [], f[p] = a.sourcePos[p] > a.targetPos[p] ? -1 : 1, g[p] = a.sourcePos[p] > a.targetPos[p] ? 1 : -1, f[q] = 0, g[q] = 0;
      }
      var r = c ? n + k * f[0] : k * f[0], s = d ? o + k * f[1] : k * f[1], t = c ? l * g[0] : n + l * g[0], u = d ? l * g[1] : o + l * g[1], v = f[0] * g[0] + f[1] * g[1], w = {
          sx: r,
          sy: s,
          tx: t,
          ty: u,
          lw: e,
          xSpan: Math.abs(t - r),
          ySpan: Math.abs(u - s),
          mx: (r + t) / 2,
          my: (s + u) / 2,
          so: f,
          to: g,
          x: j,
          y: m,
          w: n,
          h: o,
          segment: b,
          startStubX: r + f[0] * h,
          startStubY: s + f[1] * h,
          endStubX: t + g[0] * i,
          endStubY: u + g[1] * i,
          isXGreaterThanStubTimes2: Math.abs(r - t) > h + i,
          isYGreaterThanStubTimes2: Math.abs(s - u) > h + i,
          opposite: -1 == v,
          perpendicular: 0 === v,
          orthogonal: 1 == v,
          sourceAxis: 0 === f[0] ? 'y' : 'x',
          points: [
            j,
            m,
            n,
            o,
            r,
            s,
            t,
            u
          ]
        };
      return w.anchorOrientation = w.opposite ? 'opposite' : w.orthogonal ? 'orthogonal' : 'perpendicular', w;
    };
    return this.getSegments = function () {
      return c;
    }, this.updateBounds = function (a) {
      var b = a.getBounds();
      this.bounds.minX = Math.min(this.bounds.minX, b.minX), this.bounds.maxX = Math.max(this.bounds.maxX, b.maxX), this.bounds.minY = Math.min(this.bounds.minY, b.minY), this.bounds.maxY = Math.max(this.bounds.maxY, b.maxY);
    }, this.pointOnPath = function (a, b) {
      var c = q(a, b);
      return c.segment && c.segment.pointOnPath(c.proportion, !1) || [
        0,
        0
      ];
    }, this.gradientAtPoint = function (a, b) {
      var c = q(a, b);
      return c.segment && c.segment.gradientAtPoint(c.proportion, !1) || 0;
    }, this.pointAlongPathFrom = function (a, b, c) {
      var d = q(a, c);
      return d.segment && d.segment.pointAlongPathFrom(d.proportion, b, !1) || [
        0,
        0
      ];
    }, this.compute = function (a) {
      n || (o = t.call(this, a)), s(), this._compute(o, a), this.x = o.points[0], this.y = o.points[1], this.w = o.points[2], this.h = o.points[3], this.segment = o.segment, p();
    }, {
      addSegment: r,
      prepareCompute: t,
      sourceStub: h,
      targetStub: i,
      maxStub: Math.max(h, i),
      sourceGap: k,
      targetGap: l,
      maxGap: Math.max(k, l)
    };
  }, jsPlumbUtil.extend(jsPlumb.Connectors.AbstractConnector, a);
  var b = jsPlumb.Connectors.Straight = function () {
      this.type = 'Straight';
      var a = jsPlumb.Connectors.AbstractConnector.apply(this, arguments);
      this._compute = function (b) {
        a.addSegment(this, 'Straight', {
          x1: b.sx,
          y1: b.sy,
          x2: b.startStubX,
          y2: b.startStubY
        }), a.addSegment(this, 'Straight', {
          x1: b.startStubX,
          y1: b.startStubY,
          x2: b.endStubX,
          y2: b.endStubY
        }), a.addSegment(this, 'Straight', {
          x1: b.endStubX,
          y1: b.endStubY,
          x2: b.tx,
          y2: b.ty
        });
      };
    };
  jsPlumbUtil.extend(jsPlumb.Connectors.Straight, jsPlumb.Connectors.AbstractConnector), jsPlumb.registerConnectorType(b, 'Straight'), jsPlumb.Endpoints.AbstractEndpoint = function (b) {
    a.apply(this, arguments);
    var c = this.compute = function () {
        var a = this._compute.apply(this, arguments);
        return this.x = a[0], this.y = a[1], this.w = a[2], this.h = a[3], this.bounds.minX = this.x, this.bounds.minY = this.y, this.bounds.maxX = this.x + this.w, this.bounds.maxY = this.y + this.h, a;
      };
    return {
      compute: c,
      cssClass: b.cssClass
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.AbstractEndpoint, a), jsPlumb.Endpoints.Dot = function (a) {
    this.type = 'Dot', jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments), a = a || {}, this.radius = a.radius || 10, this.defaultOffset = 0.5 * this.radius, this.defaultInnerRadius = this.radius / 3, this._compute = function (a, b, c) {
      this.radius = c.radius || this.radius;
      var d = a[0] - this.radius, e = a[1] - this.radius, f = 2 * this.radius, g = 2 * this.radius;
      if (c.strokeStyle) {
        var h = c.lineWidth || 1;
        d -= h, e -= h, f += 2 * h, g += 2 * h;
      }
      return [
        d,
        e,
        f,
        g,
        this.radius
      ];
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.Dot, jsPlumb.Endpoints.AbstractEndpoint), jsPlumb.Endpoints.Rectangle = function (a) {
    this.type = 'Rectangle', jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments), a = a || {}, this.width = a.width || 20, this.height = a.height || 20, this._compute = function (a, b, c) {
      var d = c.width || this.width, e = c.height || this.height, f = a[0] - d / 2, g = a[1] - e / 2;
      return [
        f,
        g,
        d,
        e
      ];
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.Rectangle, jsPlumb.Endpoints.AbstractEndpoint);
  var c = function () {
    jsPlumb.jsPlumbUIComponent.apply(this, arguments), this._jsPlumb.displayElements = [];
  };
  jsPlumbUtil.extend(c, jsPlumb.jsPlumbUIComponent, {
    getDisplayElements: function () {
      return this._jsPlumb.displayElements;
    },
    appendDisplayElement: function (a) {
      this._jsPlumb.displayElements.push(a);
    }
  }), jsPlumb.Endpoints.Image = function (a) {
    this.type = 'Image', c.apply(this, arguments), jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments);
    var b = a.onload, d = a.src || a.url, e = a.cssClass ? ' ' + a.cssClass : '';
    this._jsPlumb.img = new Image(), this._jsPlumb.ready = !1, this._jsPlumb.initialized = !1, this._jsPlumb.deleted = !1, this._jsPlumb.widthToUse = a.width, this._jsPlumb.heightToUse = a.height, this._jsPlumb.endpoint = a.endpoint, this._jsPlumb.img.onload = function () {
      null != this._jsPlumb && (this._jsPlumb.ready = !0, this._jsPlumb.widthToUse = this._jsPlumb.widthToUse || this._jsPlumb.img.width, this._jsPlumb.heightToUse = this._jsPlumb.heightToUse || this._jsPlumb.img.height, b && b(this));
    }.bind(this), this._jsPlumb.endpoint.setImage = function (a, c) {
      var d = a.constructor == String ? a : a.src;
      b = c, this._jsPlumb.img.src = d, null != this.canvas && this.canvas.setAttribute('src', this._jsPlumb.img.src);
    }.bind(this), this._jsPlumb.endpoint.setImage(d, b), this._compute = function (a) {
      return this.anchorPoint = a, this._jsPlumb.ready ? [
        a[0] - this._jsPlumb.widthToUse / 2,
        a[1] - this._jsPlumb.heightToUse / 2,
        this._jsPlumb.widthToUse,
        this._jsPlumb.heightToUse
      ] : [
        0,
        0,
        0,
        0
      ];
    }, this.canvas = document.createElement('img'), this.canvas.style.margin = 0, this.canvas.style.padding = 0, this.canvas.style.outline = 0, this.canvas.style.position = 'absolute', this.canvas.className = this._jsPlumb.instance.endpointClass + e, this._jsPlumb.widthToUse && this.canvas.setAttribute('width', this._jsPlumb.widthToUse), this._jsPlumb.heightToUse && this.canvas.setAttribute('height', this._jsPlumb.heightToUse), this._jsPlumb.instance.appendElement(this.canvas), this.actuallyPaint = function () {
      if (!this._jsPlumb.deleted) {
        this._jsPlumb.initialized || (this.canvas.setAttribute('src', this._jsPlumb.img.src), this.appendDisplayElement(this.canvas), this._jsPlumb.initialized = !0);
        var a = this.anchorPoint[0] - this._jsPlumb.widthToUse / 2, b = this.anchorPoint[1] - this._jsPlumb.heightToUse / 2;
        jsPlumbUtil.sizeElement(this.canvas, a, b, this._jsPlumb.widthToUse, this._jsPlumb.heightToUse);
      }
    }, this.paint = function (a, b) {
      null != this._jsPlumb && (this._jsPlumb.ready ? this.actuallyPaint(a, b) : window.setTimeout(function () {
        this.paint(a, b);
      }.bind(this), 200));
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.Image, [
    c,
    jsPlumb.Endpoints.AbstractEndpoint
  ], {
    cleanup: function () {
      this._jsPlumb.deleted = !0, this.canvas && this.canvas.parentNode.removeChild(this.canvas), this.canvas = null;
    }
  }), jsPlumb.Endpoints.Blank = function (a) {
    jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments), this.type = 'Blank', c.apply(this, arguments), this._compute = function (a) {
      return [
        a[0],
        a[1],
        10,
        0
      ];
    };
    var b = a.cssClass ? ' ' + a.cssClass : '';
    this.canvas = document.createElement('div'), this.canvas.style.display = 'block', this.canvas.style.width = '1px', this.canvas.style.height = '1px', this.canvas.style.background = 'transparent', this.canvas.style.position = 'absolute', this.canvas.className = this._jsPlumb.instance.endpointClass + b, this._jsPlumb.instance.appendElement(this.canvas), this.paint = function () {
      jsPlumbUtil.sizeElement(this.canvas, this.x, this.y, this.w, this.h);
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.Blank, [
    jsPlumb.Endpoints.AbstractEndpoint,
    c
  ], {
    cleanup: function () {
      this.canvas && this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas);
    }
  }), jsPlumb.Endpoints.Triangle = function (a) {
    this.type = 'Triangle', jsPlumb.Endpoints.AbstractEndpoint.apply(this, arguments), a = a || {}, a.width = a.width || 55, a.height = a.height || 55, this.width = a.width, this.height = a.height, this._compute = function (a, b, c) {
      var d = c.width || self.width, e = c.height || self.height, f = a[0] - d / 2, g = a[1] - e / 2;
      return [
        f,
        g,
        d,
        e
      ];
    };
  };
  var d = jsPlumb.Overlays.AbstractOverlay = function (a) {
      this.visible = !0, this.isAppendedAtTopLevel = !0, this.component = a.component, this.loc = null == a.location ? 0.5 : a.location, this.endpointLoc = null == a.endpointLocation ? [
        0.5,
        0.5
      ] : a.endpointLocation;
    };
  d.prototype = {
    cleanup: function () {
      this.component = null, this.canvas = null, this.endpointLoc = null;
    },
    setVisible: function (a) {
      this.visible = a, this.component.repaint();
    },
    isVisible: function () {
      return this.visible;
    },
    hide: function () {
      this.setVisible(!1);
    },
    show: function () {
      this.setVisible(!0);
    },
    incrementLocation: function (a) {
      this.loc += a, this.component.repaint();
    },
    setLocation: function (a) {
      this.loc = a, this.component.repaint();
    },
    getLocation: function () {
      return this.loc;
    }
  }, jsPlumb.Overlays.Arrow = function (a) {
    this.type = 'Arrow', d.apply(this, arguments), this.isAppendedAtTopLevel = !1, a = a || {};
    var b = jsPlumbUtil, c = Biltong;
    this.length = a.length || 20, this.width = a.width || 20, this.id = a.id;
    var e = (a.direction || 1) < 0 ? -1 : 1, f = a.paintStyle || { lineWidth: 1 }, g = a.foldback || 0.623;
    this.computeMaxSize = function () {
      return 1.5 * self.width;
    }, this.draw = function (a, d) {
      var h, i, j, k, l;
      if (a.pointAlongPathFrom) {
        if (b.isString(this.loc) || this.loc > 1 || this.loc < 0) {
          var m = parseInt(this.loc, 10), n = this.loc < 0 ? 1 : 0;
          h = a.pointAlongPathFrom(n, m, !1), i = a.pointAlongPathFrom(n, m - e * this.length / 2, !1), j = c.pointOnLine(h, i, this.length);
        } else if (1 == this.loc) {
          if (h = a.pointOnPath(this.loc), i = a.pointAlongPathFrom(this.loc, -this.length), j = c.pointOnLine(h, i, this.length), -1 == e) {
            var o = j;
            j = h, h = o;
          }
        } else if (0 === this.loc) {
          if (j = a.pointOnPath(this.loc), i = a.pointAlongPathFrom(this.loc, this.length), h = c.pointOnLine(j, i, this.length), -1 == e) {
            var p = j;
            j = h, h = p;
          }
        } else
          h = a.pointAlongPathFrom(this.loc, e * this.length / 2), i = a.pointOnPath(this.loc), j = c.pointOnLine(h, i, this.length);
        k = c.perpendicularLineTo(h, j, this.width), l = c.pointOnLine(h, j, g * this.length);
        var q = {
            hxy: h,
            tail: k,
            cxy: l
          }, r = f.strokeStyle || d.strokeStyle, s = f.fillStyle || d.strokeStyle, t = f.lineWidth || d.lineWidth;
        return {
          component: a,
          d: q,
          lineWidth: t,
          strokeStyle: r,
          fillStyle: s,
          minX: Math.min(h.x, k[0].x, k[1].x),
          maxX: Math.max(h.x, k[0].x, k[1].x),
          minY: Math.min(h.y, k[0].y, k[1].y),
          maxY: Math.max(h.y, k[0].y, k[1].y)
        };
      }
      return {
        component: a,
        minX: 0,
        maxX: 0,
        minY: 0,
        maxY: 0
      };
    };
  }, jsPlumbUtil.extend(jsPlumb.Overlays.Arrow, d), jsPlumb.Overlays.PlainArrow = function (a) {
    a = a || {};
    var b = jsPlumb.extend(a, { foldback: 1 });
    jsPlumb.Overlays.Arrow.call(this, b), this.type = 'PlainArrow';
  }, jsPlumbUtil.extend(jsPlumb.Overlays.PlainArrow, jsPlumb.Overlays.Arrow), jsPlumb.Overlays.Diamond = function (a) {
    a = a || {};
    var b = a.length || 40, c = jsPlumb.extend(a, {
        length: b / 2,
        foldback: 2
      });
    jsPlumb.Overlays.Arrow.call(this, c), this.type = 'Diamond';
  }, jsPlumbUtil.extend(jsPlumb.Overlays.Diamond, jsPlumb.Overlays.Arrow);
  var e = function (a, b) {
      return (null == a._jsPlumb.cachedDimensions || b) && (a._jsPlumb.cachedDimensions = a.getDimensions()), a._jsPlumb.cachedDimensions;
    }, f = function (a) {
      jsPlumb.jsPlumbUIComponent.apply(this, arguments), d.apply(this, arguments);
      var b = this.fire;
      this.fire = function () {
        b.apply(this, arguments), this.component && this.component.fire.apply(this.component, arguments);
      }, this.id = a.id, this._jsPlumb.div = null, this._jsPlumb.initialised = !1, this._jsPlumb.component = a.component, this._jsPlumb.cachedDimensions = null, this._jsPlumb.create = a.create, this._jsPlumb.initiallyInvisible = a.visible === !1, this.getElement = function () {
        if (null == this._jsPlumb.div) {
          var b = this._jsPlumb.div = jsPlumb.getDOMElement(this._jsPlumb.create(this._jsPlumb.component));
          b.style.position = 'absolute', b.className = this._jsPlumb.instance.overlayClass + ' ' + (this.cssClass ? this.cssClass : a.cssClass ? a.cssClass : ''), this._jsPlumb.instance.appendElement(b), this._jsPlumb.instance.getId(b), this.canvas = b;
          var c = 'translate(-50%, -50%)';
          b.style.webkitTransform = c, b.style.mozTransform = c, b.style.msTransform = c, b.style.oTransform = c, b.style.transform = c, b._jsPlumb = this, a.visible === !1 && (b.style.display = 'none');
        }
        return this._jsPlumb.div;
      }, this.draw = function (a, b, c) {
        var d = e(this);
        if (null != d && 2 == d.length) {
          var f = {
              x: 0,
              y: 0
            };
          if (c)
            f = {
              x: c[0],
              y: c[1]
            };
          else if (a.pointOnPath) {
            var g = this.loc, h = !1;
            (jsPlumbUtil.isString(this.loc) || this.loc < 0 || this.loc > 1) && (g = parseInt(this.loc, 10), h = !0), f = a.pointOnPath(g, h);
          } else {
            var i = this.loc.constructor == Array ? this.loc : this.endpointLoc;
            f = {
              x: i[0] * a.w,
              y: i[1] * a.h
            };
          }
          var j = f.x - d[0] / 2, k = f.y - d[1] / 2;
          return {
            component: a,
            d: {
              minx: j,
              miny: k,
              td: d,
              cxy: f
            },
            minX: j,
            maxX: j + d[0],
            minY: k,
            maxY: k + d[1]
          };
        }
        return {
          minX: 0,
          maxX: 0,
          minY: 0,
          maxY: 0
        };
      };
    };
  jsPlumbUtil.extend(f, [
    jsPlumb.jsPlumbUIComponent,
    d
  ], {
    getDimensions: function () {
      return jsPlumbUtil.oldIE ? jsPlumb.getSize(this.getElement()) : [
        1,
        1
      ];
    },
    setVisible: function (a) {
      this._jsPlumb.div.style.display = a ? 'block' : 'none', a && this._jsPlumb.initiallyInvisible && (e(this, !0), this.component.repaint(), this._jsPlumb.initiallyInvisible = !1);
    },
    clearCachedDimensions: function () {
      this._jsPlumb.cachedDimensions = null;
    },
    cleanup: function () {
      null != this._jsPlumb.div && (this._jsPlumb.div._jsPlumb = null, this._jsPlumb.instance.removeElement(this._jsPlumb.div));
    },
    computeMaxSize: function () {
      var a = e(this);
      return Math.max(a[0], a[1]);
    },
    paint: function (a) {
      this._jsPlumb.initialised || (this.getElement(), a.component.appendDisplayElement(this._jsPlumb.div), this._jsPlumb.initialised = !0), this._jsPlumb.div.style.left = a.component.x + a.d.minx + 'px', this._jsPlumb.div.style.top = a.component.y + a.d.miny + 'px';
    }
  }), jsPlumb.Overlays.Custom = function () {
    this.type = 'Custom', f.apply(this, arguments);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.Custom, f), jsPlumb.Overlays.GuideLines = function () {
    var a = this;
    a.length = 50, a.lineWidth = 5, this.type = 'GuideLines', d.apply(this, arguments), jsPlumb.jsPlumbUIComponent.apply(this, arguments), this.draw = function (b) {
      var c = b.pointAlongPathFrom(a.loc, a.length / 2), d = b.pointOnPath(a.loc), e = Biltong.pointOnLine(c, d, a.length), f = Biltong.perpendicularLineTo(c, e, 40), g = Biltong.perpendicularLineTo(e, c, 20);
      return {
        connector: b,
        head: c,
        tail: e,
        headLine: g,
        tailLine: f,
        minX: Math.min(c.x, e.x, g[0].x, g[1].x),
        minY: Math.min(c.y, e.y, g[0].y, g[1].y),
        maxX: Math.max(c.x, e.x, g[0].x, g[1].x),
        maxY: Math.max(c.y, e.y, g[0].y, g[1].y)
      };
    };
  }, jsPlumb.Overlays.Label = function (a) {
    this.labelStyle = a.labelStyle, this.cssClass = null != this.labelStyle ? this.labelStyle.cssClass : null;
    var b = jsPlumb.extend({
        create: function () {
          return document.createElement('div');
        }
      }, a);
    if (jsPlumb.Overlays.Custom.call(this, b), this.type = 'Label', this.label = a.label || '', this.labelText = null, this.labelStyle) {
      var c = this.getElement();
      if (this.labelStyle.font = this.labelStyle.font || '12px sans-serif', c.style.font = this.labelStyle.font, c.style.color = this.labelStyle.color || 'black', this.labelStyle.fillStyle && (c.style.background = this.labelStyle.fillStyle), this.labelStyle.borderWidth > 0) {
        var d = this.labelStyle.borderStyle ? this.labelStyle.borderStyle : 'black';
        c.style.border = this.labelStyle.borderWidth + 'px solid ' + d;
      }
      this.labelStyle.padding && (c.style.padding = this.labelStyle.padding);
    }
  }, jsPlumbUtil.extend(jsPlumb.Overlays.Label, jsPlumb.Overlays.Custom, {
    cleanup: function () {
      this.div = null, this.label = null, this.labelText = null, this.cssClass = null, this.labelStyle = null;
    },
    getLabel: function () {
      return this.label;
    },
    setLabel: function (a) {
      this.label = a, this.labelText = null, this.clearCachedDimensions(), this.update(), this.component.repaint();
    },
    getDimensions: function () {
      return this.update(), f.prototype.getDimensions.apply(this, arguments);
    },
    update: function () {
      if ('function' == typeof this.label) {
        var a = this.label(this);
        this.getElement().innerHTML = a.replace(/\r\n/g, '<br/>');
      } else
        null == this.labelText && (this.labelText = this.label, this.getElement().innerHTML = this.labelText.replace(/\r\n/g, '<br/>'));
    }
  });
}(), function () {
  'use strict';
  var a = function (a) {
    var b = a._mottle;
    return b || (b = a._mottle = new Mottle()), b;
  };
  jsPlumb.extend(jsPlumbInstance.prototype, {
    getEventManager: function () {
      return a(this);
    },
    on: function () {
      this.getEventManager().on.apply(this, arguments);
    },
    off: function () {
      this.getEventManager().off.apply(this, arguments);
    }
  });
}.call(this), function () {
  'use strict';
  var a = function (a) {
    this.type = 'Flowchart', a = a || {}, a.stub = null == a.stub ? 30 : a.stub;
    var b, c = jsPlumb.Connectors.AbstractConnector.apply(this, arguments), d = null == a.midpoint ? 0.5 : a.midpoint, e = [], f = (a.grid, a.alwaysRespectStubs), g = null, h = null, i = null, j = null != a.cornerRadius ? a.cornerRadius : 0, k = function (a) {
        return 0 > a ? -1 : 0 === a ? 0 : 1;
      }, l = function (a, b, c, d) {
        if (h != b || i != c) {
          var e = null == h ? d.sx : h, f = null == i ? d.sy : i, g = e == b ? 'v' : 'h', j = k(b - e), l = k(c - f);
          h = b, i = c, a.push([
            e,
            f,
            b,
            c,
            g,
            j,
            l
          ]);
        }
      }, m = function (a) {
        return Math.sqrt(Math.pow(a[0] - a[2], 2) + Math.pow(a[1] - a[3], 2));
      }, n = function (a) {
        var b = [];
        return b.push.apply(b, a), b;
      }, o = function (a, b, d) {
        for (var e, f, g = 0; g < b.length - 1; g++) {
          if (e = e || n(b[g]), f = n(b[g + 1]), j > 0 && e[4] != f[4]) {
            var h = Math.min(j, m(e), m(f));
            e[2] -= e[5] * h, e[3] -= e[6] * h, f[0] += f[5] * h, f[1] += f[6] * h;
            var i = e[6] == f[5] && 1 == f[5] || e[6] == f[5] && 0 === f[5] && e[5] != f[6] || e[6] == f[5] && -1 == f[5], k = f[1] > e[3] ? 1 : -1, l = f[0] > e[2] ? 1 : -1, o = k == l, p = o && i || !o && !i ? f[0] : e[2], q = o && i || !o && !i ? e[3] : f[1];
            c.addSegment(a, 'Straight', {
              x1: e[0],
              y1: e[1],
              x2: e[2],
              y2: e[3]
            }), c.addSegment(a, 'Arc', {
              r: h,
              x1: e[2],
              y1: e[3],
              x2: f[0],
              y2: f[1],
              cx: p,
              cy: q,
              ac: i
            });
          } else {
            var r = e[2] == e[0] ? 0 : e[2] > e[0] ? d.lw / 2 : -(d.lw / 2), s = e[3] == e[1] ? 0 : e[3] > e[1] ? d.lw / 2 : -(d.lw / 2);
            c.addSegment(a, 'Straight', {
              x1: e[0] - r,
              y1: e[1] - s,
              x2: e[2] + r,
              y2: e[3] + s
            });
          }
          e = f;
        }
        null != f && c.addSegment(a, 'Straight', {
          x1: f[0],
          y1: f[1],
          x2: f[2],
          y2: f[3]
        });
      };
    this.setSegments = function (a) {
      g = a;
    }, this.isEditable = function () {
      return !0;
    }, this.getOriginalSegments = function () {
      return g || e;
    }, this._compute = function (a, j) {
      if (j.clearEdits && (g = null), null != g)
        return o(this, g, a), void 0;
      e = [], h = null, i = null, b = null;
      var k = a.startStubX + (a.endStubX - a.startStubX) * d, m = a.startStubY + (a.endStubY - a.startStubY) * d, n = {
          x: [
            0,
            1
          ],
          y: [
            1,
            0
          ]
        }, p = function () {
          return [
            a.startStubX,
            a.startStubY,
            a.endStubX,
            a.endStubY
          ];
        }, q = {
          perpendicular: p,
          orthogonal: p,
          opposite: function (b) {
            var c = a, d = 'x' == b ? 0 : 1, e = {
                x: function () {
                  return 1 == c.so[d] && (c.startStubX > c.endStubX && c.tx > c.startStubX || c.sx > c.endStubX && c.tx > c.sx) || -1 == c.so[d] && (c.startStubX < c.endStubX && c.tx < c.startStubX || c.sx < c.endStubX && c.tx < c.sx);
                },
                y: function () {
                  return 1 == c.so[d] && (c.startStubY > c.endStubY && c.ty > c.startStubY || c.sy > c.endStubY && c.ty > c.sy) || -1 == c.so[d] && (c.startStubY < c.endStubY && c.ty < c.startStubY || c.sy < c.endStubY && c.ty < c.sy);
                }
              };
            return !f && e[b]() ? {
              x: [
                (a.sx + a.tx) / 2,
                a.startStubY,
                (a.sx + a.tx) / 2,
                a.endStubY
              ],
              y: [
                a.startStubX,
                (a.sy + a.ty) / 2,
                a.endStubX,
                (a.sy + a.ty) / 2
              ]
            }[b] : [
              a.startStubX,
              a.startStubY,
              a.endStubX,
              a.endStubY
            ];
          }
        }, r = {
          perpendicular: function (b) {
            var c = a, d = {
                x: [
                  [
                    [
                      1,
                      2,
                      3,
                      4
                    ],
                    null,
                    [
                      2,
                      1,
                      4,
                      3
                    ]
                  ],
                  null,
                  [
                    [
                      4,
                      3,
                      2,
                      1
                    ],
                    null,
                    [
                      3,
                      4,
                      1,
                      2
                    ]
                  ]
                ],
                y: [
                  [
                    [
                      3,
                      2,
                      1,
                      4
                    ],
                    null,
                    [
                      2,
                      3,
                      4,
                      1
                    ]
                  ],
                  null,
                  [
                    [
                      4,
                      1,
                      2,
                      3
                    ],
                    null,
                    [
                      1,
                      4,
                      3,
                      2
                    ]
                  ]
                ]
              }, e = {
                x: [
                  [
                    c.startStubX,
                    c.endStubX
                  ],
                  null,
                  [
                    c.endStubX,
                    c.startStubX
                  ]
                ],
                y: [
                  [
                    c.startStubY,
                    c.endStubY
                  ],
                  null,
                  [
                    c.endStubY,
                    c.startStubY
                  ]
                ]
              }, f = {
                x: [
                  [
                    k,
                    c.startStubY
                  ],
                  [
                    k,
                    c.endStubY
                  ]
                ],
                y: [
                  [
                    c.startStubX,
                    m
                  ],
                  [
                    c.endStubX,
                    m
                  ]
                ]
              }, g = {
                x: [[
                    c.endStubX,
                    c.startStubY
                  ]],
                y: [[
                    c.startStubX,
                    c.endStubY
                  ]]
              }, h = {
                x: [
                  [
                    c.startStubX,
                    c.endStubY
                  ],
                  [
                    c.endStubX,
                    c.endStubY
                  ]
                ],
                y: [
                  [
                    c.endStubX,
                    c.startStubY
                  ],
                  [
                    c.endStubX,
                    c.endStubY
                  ]
                ]
              }, i = {
                x: [
                  [
                    c.startStubX,
                    m
                  ],
                  [
                    c.endStubX,
                    m
                  ],
                  [
                    c.endStubX,
                    c.endStubY
                  ]
                ],
                y: [
                  [
                    k,
                    c.startStubY
                  ],
                  [
                    k,
                    c.endStubY
                  ],
                  [
                    c.endStubX,
                    c.endStubY
                  ]
                ]
              }, j = {
                x: [
                  c.startStubY,
                  c.endStubY
                ],
                y: [
                  c.startStubX,
                  c.endStubX
                ]
              }, l = n[b][0], o = n[b][1], p = c.so[l] + 1, q = c.to[o] + 1, r = -1 == c.to[o] && j[b][1] < j[b][0] || 1 == c.to[o] && j[b][1] > j[b][0], s = e[b][p][0], t = e[b][p][1], u = d[b][p][q];
            return c.segment == u[3] || c.segment == u[2] && r ? f[b] : c.segment == u[2] && s > t ? g[b] : c.segment == u[2] && t >= s || c.segment == u[1] && !r ? i[b] : c.segment == u[0] || c.segment == u[1] && r ? h[b] : void 0;
          },
          orthogonal: function (b, c, d, e, f) {
            var g = a, h = {
                x: -1 == g.so[0] ? Math.min(c, e) : Math.max(c, e),
                y: -1 == g.so[1] ? Math.min(c, e) : Math.max(c, e)
              }[b];
            return {
              x: [
                [
                  h,
                  d
                ],
                [
                  h,
                  f
                ],
                [
                  e,
                  f
                ]
              ],
              y: [
                [
                  d,
                  h
                ],
                [
                  f,
                  h
                ],
                [
                  f,
                  e
                ]
              ]
            }[b];
          },
          opposite: function (b, d, e, f) {
            var g = a, h = {
                x: 'y',
                y: 'x'
              }[b], i = {
                x: 'height',
                y: 'width'
              }[b], l = g['is' + b.toUpperCase() + 'GreaterThanStubTimes2'];
            if (j.sourceEndpoint.elementId == j.targetEndpoint.elementId) {
              var n = e + (1 - j.sourceEndpoint.anchor[h]) * j.sourceInfo[i] + c.maxStub;
              return {
                x: [
                  [
                    d,
                    n
                  ],
                  [
                    f,
                    n
                  ]
                ],
                y: [
                  [
                    n,
                    d
                  ],
                  [
                    n,
                    f
                  ]
                ]
              }[b];
            }
            return !l || 1 == g.so[t] && d > f || -1 == g.so[t] && f > d ? {
              x: [
                [
                  d,
                  m
                ],
                [
                  f,
                  m
                ]
              ],
              y: [
                [
                  k,
                  d
                ],
                [
                  k,
                  f
                ]
              ]
            }[b] : 1 == g.so[t] && f > d || -1 == g.so[t] && d > f ? {
              x: [
                [
                  k,
                  g.sy
                ],
                [
                  k,
                  g.ty
                ]
              ],
              y: [
                [
                  g.sx,
                  m
                ],
                [
                  g.tx,
                  m
                ]
              ]
            }[b] : void 0;
          }
        }, s = q[a.anchorOrientation](a.sourceAxis), t = 'x' == a.sourceAxis ? 0 : 1, u = 'x' == a.sourceAxis ? 1 : 0, v = s[t], w = s[u], x = s[t + 2], y = s[u + 2];
      l(e, s[0], s[1], a);
      var z = r[a.anchorOrientation](a.sourceAxis, v, w, x, y);
      if (z)
        for (var A = 0; A < z.length; A++)
          l(e, z[A][0], z[A][1], a);
      l(e, s[2], s[3], a), l(e, a.tx, a.ty, a), o(this, e, a);
    }, this.getPath = function () {
      for (var a = null, b = null, c = [], d = g || e, f = 0; f < d.length; f++) {
        var h = d[f], i = h[4], j = 'v' == i ? 3 : 2;
        null != a && b === i ? a[j] = h[j] : (h[0] != h[2] || h[1] != h[3]) && (c.push({
          start: [
            h[0],
            h[1]
          ],
          end: [
            h[2],
            h[3]
          ]
        }), a = h, b = h[4]);
      }
      return c;
    }, this.setPath = function (a) {
      g = [];
      for (var b = 0; b < a.length; b++) {
        var c = a[b].start[0], d = a[b].start[1], e = a[b].end[0], f = a[b].end[1], h = c == e ? 'v' : 'h', i = k(e - c), j = k(f - d);
        g.push([
          c,
          d,
          e,
          f,
          h,
          i,
          j
        ]);
      }
    };
  };
  jsPlumbUtil.extend(a, jsPlumb.Connectors.AbstractConnector), jsPlumb.registerConnectorType(a, 'Flowchart');
}(), function () {
  'use strict';
  var a = function (a, b, c, d) {
      return c >= a && b >= d ? 1 : c >= a && d >= b ? 2 : a >= c && d >= b ? 3 : 4;
    }, b = function (a, b, c, d, e, f, g, h, i) {
      return i >= h ? [
        a,
        b
      ] : 1 === c ? d[3] <= 0 && e[3] >= 1 ? [
        a + (d[2] < 0.5 ? -1 * f : f),
        b
      ] : d[2] >= 1 && e[2] <= 0 ? [
        a,
        b + (d[3] < 0.5 ? -1 * g : g)
      ] : [
        a + -1 * f,
        b + -1 * g
      ] : 2 === c ? d[3] >= 1 && e[3] <= 0 ? [
        a + (d[2] < 0.5 ? -1 * f : f),
        b
      ] : d[2] >= 1 && e[2] <= 0 ? [
        a,
        b + (d[3] < 0.5 ? -1 * g : g)
      ] : [
        a + 1 * f,
        b + -1 * g
      ] : 3 === c ? d[3] >= 1 && e[3] <= 0 ? [
        a + (d[2] < 0.5 ? -1 * f : f),
        b
      ] : d[2] <= 0 && e[2] >= 1 ? [
        a,
        b + (d[3] < 0.5 ? -1 * g : g)
      ] : [
        a + -1 * f,
        b + -1 * g
      ] : 4 === c ? d[3] <= 0 && e[3] >= 1 ? [
        a + (d[2] < 0.5 ? -1 * f : f),
        b
      ] : d[2] <= 0 && e[2] >= 1 ? [
        a,
        b + (d[3] < 0.5 ? -1 * g : g)
      ] : [
        a + 1 * f,
        b + -1 * g
      ] : void 0;
    }, c = function (c) {
      c = c || {}, this.type = 'StateMachine';
      var d = jsPlumb.Connectors.AbstractConnector.apply(this, arguments), e = c.curviness || 10, f = c.margin || 5, g = c.proximityLimit || 80, h = c.orientation && 'clockwise' === c.orientation, i = c.loopbackRadius || 25, j = c.showLoopback !== !1;
      this._compute = function (c, k) {
        var l = Math.abs(k.sourcePos[0] - k.targetPos[0]), m = Math.abs(k.sourcePos[1] - k.targetPos[1]);
        if (Math.min(k.sourcePos[0], k.targetPos[0]), Math.min(k.sourcePos[1], k.targetPos[1]), j && k.sourceEndpoint.elementId === k.targetEndpoint.elementId) {
          var n = k.sourcePos[0], o = (k.sourcePos[0], k.sourcePos[1] - f), p = (k.sourcePos[1] - f, n), q = o - i, r = 2 * i, s = 2 * i, t = p - i, u = q - i;
          c.points[0] = t, c.points[1] = u, c.points[2] = r, c.points[3] = s, d.addSegment(this, 'Arc', {
            loopback: !0,
            x1: n - t + 4,
            y1: o - u,
            startAngle: 0,
            endAngle: 2 * Math.PI,
            r: i,
            ac: !h,
            x2: n - t - 4,
            y2: o - u,
            cx: p - t,
            cy: q - u
          });
        } else {
          var v = k.sourcePos[0] < k.targetPos[0] ? 0 : l, w = k.sourcePos[1] < k.targetPos[1] ? 0 : m, x = k.sourcePos[0] < k.targetPos[0] ? l : 0, y = k.sourcePos[1] < k.targetPos[1] ? m : 0;
          0 === k.sourcePos[2] && (v -= f), 1 === k.sourcePos[2] && (v += f), 0 === k.sourcePos[3] && (w -= f), 1 === k.sourcePos[3] && (w += f), 0 === k.targetPos[2] && (x -= f), 1 === k.targetPos[2] && (x += f), 0 === k.targetPos[3] && (y -= f), 1 === k.targetPos[3] && (y += f);
          var z = (v + x) / 2, A = (w + y) / 2, B = -1 * z / A, C = Math.atan(B), D = (1 / 0 == B || B == -1 / 0 ? 0 : Math.abs(e / 2 * Math.sin(C)), 1 / 0 == B || B == -1 / 0 ? 0 : Math.abs(e / 2 * Math.cos(C)), a(v, w, x, y)), E = Math.sqrt(Math.pow(x - v, 2) + Math.pow(y - w, 2)), F = b(z, A, D, k.sourcePos, k.targetPos, e, e, E, g);
          d.addSegment(this, 'Bezier', {
            x1: x,
            y1: y,
            x2: v,
            y2: w,
            cp1x: F[0],
            cp1y: F[1],
            cp2x: F[0],
            cp2y: F[1]
          });
        }
      };
    };
  jsPlumb.registerConnectorType(c, 'StateMachine');
}(), function () {
  var a = function (a) {
    a = a || {};
    var b = jsPlumb.Connectors.AbstractConnector.apply(this, arguments), c = (a.stub || 50, a.curviness || 150), d = 10;
    this.type = 'Bezier', this.getCurviness = function () {
      return c;
    }, this._findControlPoint = function (a, b, e, f, g) {
      var h = f.anchor.getOrientation(f), i = g.anchor.getOrientation(g), j = h[0] != i[0] || h[1] == i[1], k = [];
      return j ? (0 === i[0] ? k.push(e[0] < b[0] ? a[0] + d : a[0] - d) : k.push(a[0] + c * i[0]), 0 === i[1] ? k.push(e[1] < b[1] ? a[1] + d : a[1] - d) : k.push(a[1] + c * h[1])) : (0 === h[0] ? k.push(b[0] < e[0] ? a[0] + d : a[0] - d) : k.push(a[0] - c * h[0]), 0 === h[1] ? k.push(b[1] < e[1] ? a[1] + d : a[1] - d) : k.push(a[1] + c * i[1])), k;
    }, this._compute = function (a, c) {
      var d = c.sourcePos, e = c.targetPos, f = Math.abs(d[0] - e[0]), g = Math.abs(d[1] - e[1]), h = d[0] < e[0] ? f : 0, i = d[1] < e[1] ? g : 0, j = d[0] < e[0] ? 0 : f, k = d[1] < e[1] ? 0 : g, l = this._findControlPoint([
          h,
          i
        ], d, e, c.sourceEndpoint, c.targetEndpoint, a.so, a.to), m = this._findControlPoint([
          j,
          k
        ], e, d, c.targetEndpoint, c.sourceEndpoint, a.so, a.to);
      b.addSegment(this, 'Bezier', {
        x1: h,
        y1: i,
        x2: j,
        y2: k,
        cp1x: l[0],
        cp1y: l[1],
        cp2x: m[0],
        cp2y: m[1]
      });
    };
  };
  jsPlumbUtil.extend(a, jsPlumb.Connectors.AbstractConnector), jsPlumb.registerConnectorType(a, 'Bezier');
}(), function () {
  'use strict';
  var a = {
      joinstyle: 'stroke-linejoin',
      'stroke-linejoin': 'stroke-linejoin',
      'stroke-dashoffset': 'stroke-dashoffset',
      'stroke-linecap': 'stroke-linecap'
    }, b = 'stroke-dasharray', c = 'dashstyle', d = 'linearGradient', e = 'radialGradient', f = 'defs', g = 'fill', h = 'stop', i = 'stroke', j = 'stroke-width', k = 'style', l = 'none', m = 'jsplumb_gradient_', n = 'lineWidth', o = {
      svg: 'http://www.w3.org/2000/svg',
      xhtml: 'http://www.w3.org/1999/xhtml'
    }, p = function (a, b) {
      for (var c in b)
        a.setAttribute(c, '' + b[c]);
    }, q = function (a, b) {
      var c = document.createElementNS(o.svg, a);
      return b = b || {}, b.version = '1.1', b.xmlns = o.xhtml, p(c, b), c;
    }, r = function (a) {
      return 'position:absolute;left:' + a[0] + 'px;top:' + a[1] + 'px';
    }, s = function (a) {
      for (var b = 0; b < a.childNodes.length; b++)
        (a.childNodes[b].tagName == f || a.childNodes[b].tagName == d || a.childNodes[b].tagName == e) && a.removeChild(a.childNodes[b]);
    }, t = function (a, b, c, j, k) {
      var l = m + k._jsPlumb.instance.idstamp();
      s(a);
      var n;
      n = c.gradient.offset ? q(e, { id: l }) : q(d, {
        id: l,
        gradientUnits: 'userSpaceOnUse'
      });
      var o = q(f);
      a.appendChild(o), o.appendChild(n);
      for (var p = 0; p < c.gradient.stops.length; p++) {
        var r = 1 == k.segment || 2 == k.segment ? p : c.gradient.stops.length - 1 - p, t = jsPlumbUtil.convertStyle(c.gradient.stops[r][1], !0), u = q(h, {
            offset: Math.floor(100 * c.gradient.stops[p][0]) + '%',
            'stop-color': t
          });
        n.appendChild(u);
      }
      var v = c.strokeStyle ? i : g;
      b.setAttribute(v, 'url(#' + l + ')');
    }, u = function (d, e, f, h, m) {
      if (e.setAttribute(g, f.fillStyle ? jsPlumbUtil.convertStyle(f.fillStyle, !0) : l), e.setAttribute(i, f.strokeStyle ? jsPlumbUtil.convertStyle(f.strokeStyle, !0) : l), f.gradient ? t(d, e, f, h, m) : (s(d), e.setAttribute(k, '')), f.lineWidth && e.setAttribute(j, f.lineWidth), f[c] && f[n] && !f[b]) {
        var o = -1 == f[c].indexOf(',') ? ' ' : ',', p = f[c].split(o), q = '';
        p.forEach(function (a) {
          q += Math.floor(a * f.lineWidth) + o;
        }), e.setAttribute(b, q);
      } else
        f[b] && e.setAttribute(b, f[b]);
      for (var r in a)
        f[r] && e.setAttribute(a[r], f[r]);
    }, v = function (a, b, c) {
      a.childNodes.length > c ? a.insertBefore(b, a.childNodes[c]) : a.appendChild(b);
    };
  jsPlumbUtil.svg = {
    node: q,
    attr: p,
    pos: r
  };
  var w = function (a) {
    var b = a.pointerEventsSpec || 'all', c = {};
    jsPlumb.jsPlumbUIComponent.apply(this, a.originalArgs), this.canvas = null, this.path = null, this.svg = null, this.bgCanvas = null;
    var d = a.cssClass + ' ' + (a.originalArgs[0].cssClass || ''), e = {
        style: '',
        width: 0,
        height: 0,
        'pointer-events': b,
        position: 'absolute'
      };
    this.svg = q('svg', e), a.useDivWrapper ? (this.canvas = document.createElement('div'), this.canvas.style.position = 'absolute', jsPlumbUtil.sizeElement(this.canvas, 0, 0, 1, 1), this.canvas.className = d) : (p(this.svg, { 'class': d }), this.canvas = this.svg), a._jsPlumb.appendElement(this.canvas, a.originalArgs[0].parent), a.useDivWrapper && this.canvas.appendChild(this.svg);
    var f = [this.canvas];
    return this.getDisplayElements = function () {
      return f;
    }, this.appendDisplayElement = function (a) {
      f.push(a);
    }, this.paint = function (b, d, e) {
      if (null != b) {
        var f, g = [
            this.x,
            this.y
          ], h = [
            this.w,
            this.h
          ];
        null != e && (e.xmin < 0 && (g[0] += e.xmin), e.ymin < 0 && (g[1] += e.ymin), h[0] = e.xmax + (e.xmin < 0 ? -e.xmin : 0), h[1] = e.ymax + (e.ymin < 0 ? -e.ymin : 0)), a.useDivWrapper ? (jsPlumbUtil.sizeElement(this.canvas, g[0], g[1], h[0], h[1]), g[0] = 0, g[1] = 0, f = r([
          0,
          0
        ])) : f = r([
          g[0],
          g[1]
        ]), c.paint.apply(this, arguments), p(this.svg, {
          style: f,
          width: h[0],
          height: h[1]
        });
      }
    }, { renderer: c };
  };
  jsPlumbUtil.extend(w, jsPlumb.jsPlumbUIComponent, {
    cleanup: function () {
      this.canvas && (this.canvas._jsPlumb = null), this.svg && (this.svg._jsPlumb = null), this.bgCanvas && (this.bgCanvas._jsPlumb = null), this.canvas && this.canvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this.bgCanvas && this.bgCanvas.parentNode && this.canvas.parentNode.removeChild(this.canvas), this.svg = null, this.canvas = null, this.path = null, this.group = null;
    },
    setVisible: function (a) {
      this.canvas && (this.canvas.style.display = a ? 'block' : 'none');
    }
  }), jsPlumb.ConnectorRenderers.svg = function (a) {
    var b = this, c = w.apply(this, [{
          cssClass: a._jsPlumb.connectorClass,
          originalArgs: arguments,
          pointerEventsSpec: 'none',
          _jsPlumb: a._jsPlumb
        }]);
    c.renderer.paint = function (c, d, e) {
      var f = b.getSegments(), g = '', h = [
          0,
          0
        ];
      if (e.xmin < 0 && (h[0] = -e.xmin), e.ymin < 0 && (h[1] = -e.ymin), f.length > 0) {
        for (var i = 0; i < f.length; i++)
          g += jsPlumb.Segments.svg.SegmentRenderer.getPath(f[i]), g += ' ';
        var j = {
            d: g,
            transform: 'translate(' + h[0] + ',' + h[1] + ')',
            'pointer-events': a['pointer-events'] || 'visibleStroke'
          }, k = null, l = [
            b.x,
            b.y,
            b.w,
            b.h
          ];
        if (c.outlineColor) {
          var m = c.outlineWidth || 1, n = c.lineWidth + 2 * m;
          k = jsPlumb.extend({}, c), delete k.gradient, k.strokeStyle = jsPlumbUtil.convertStyle(c.outlineColor), k.lineWidth = n, null == b.bgPath ? (b.bgPath = q('path', j), v(b.svg, b.bgPath, 0)) : p(b.bgPath, j), u(b.svg, b.bgPath, k, l, b);
        }
        null == b.path ? (b.path = q('path', j), v(b.svg, b.path, c.outlineColor ? 1 : 0)) : p(b.path, j), u(b.svg, b.path, c, l, b);
      }
    };
  }, jsPlumbUtil.extend(jsPlumb.ConnectorRenderers.svg, w), jsPlumb.Segments.svg = {
    SegmentRenderer: {
      getPath: function (a) {
        return {
          Straight: function () {
            var b = a.getCoordinates();
            return 'M ' + b.x1 + ' ' + b.y1 + ' L ' + b.x2 + ' ' + b.y2;
          },
          Bezier: function () {
            var b = a.params;
            return 'M ' + b.x1 + ' ' + b.y1 + ' C ' + b.cp1x + ' ' + b.cp1y + ' ' + b.cp2x + ' ' + b.cp2y + ' ' + b.x2 + ' ' + b.y2;
          },
          Arc: function () {
            var b = a.params, c = a.sweep > Math.PI ? 1 : 0, d = a.anticlockwise ? 0 : 1;
            return 'M' + a.x1 + ' ' + a.y1 + ' A ' + a.radius + ' ' + b.r + ' 0 ' + c + ',' + d + ' ' + a.x2 + ' ' + a.y2;
          }
        }[a.type]();
      }
    }
  };
  var x = window.SvgEndpoint = function (a) {
      var b = w.apply(this, [{
            cssClass: a._jsPlumb.endpointClass,
            originalArgs: arguments,
            pointerEventsSpec: 'all',
            useDivWrapper: !0,
            _jsPlumb: a._jsPlumb
          }]);
      b.renderer.paint = function (a) {
        var b = jsPlumb.extend({}, a);
        b.outlineColor && (b.strokeWidth = b.outlineWidth, b.strokeStyle = jsPlumbUtil.convertStyle(b.outlineColor, !0)), null == this.node ? (this.node = this.makeNode(b), this.svg.appendChild(this.node)) : null != this.updateNode && this.updateNode(this.node), u(this.svg, this.node, b, [
          this.x,
          this.y,
          this.w,
          this.h
        ], this), r(this.node, [
          this.x,
          this.y
        ]);
      }.bind(this);
    };
  jsPlumbUtil.extend(x, w), jsPlumb.Endpoints.svg.Dot = function () {
    jsPlumb.Endpoints.Dot.apply(this, arguments), x.apply(this, arguments), this.makeNode = function () {
      return q('circle', {
        cx: this.w / 2,
        cy: this.h / 2,
        r: this.radius
      });
    }, this.updateNode = function (a) {
      p(a, {
        cx: this.w / 2,
        cy: this.h / 2,
        r: this.radius
      });
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.svg.Dot, [
    jsPlumb.Endpoints.Dot,
    x
  ]), jsPlumb.Endpoints.svg.Rectangle = function () {
    jsPlumb.Endpoints.Rectangle.apply(this, arguments), x.apply(this, arguments), this.makeNode = function () {
      return q('rect', {
        width: this.w,
        height: this.h
      });
    }, this.updateNode = function (a) {
      p(a, {
        width: this.w,
        height: this.h
      });
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.svg.Rectangle, [
    jsPlumb.Endpoints.Rectangle,
    x
  ]), jsPlumb.Endpoints.svg.Image = jsPlumb.Endpoints.Image, jsPlumb.Endpoints.svg.Blank = jsPlumb.Endpoints.Blank, jsPlumb.Overlays.svg.Label = jsPlumb.Overlays.Label, jsPlumb.Overlays.svg.Custom = jsPlumb.Overlays.Custom;
  var y = function (a, b) {
    a.apply(this, b), jsPlumb.jsPlumbUIComponent.apply(this, b), this.isAppendedAtTopLevel = !1, this.path = null, this.paint = function (a, d) {
      if (a.component.svg && d) {
        null == this.path && (this.path = q('path', { 'pointer-events': 'all' }), a.component.svg.appendChild(this.path), this.canvas = a.component.svg);
        var e = b && 1 == b.length ? b[0].cssClass || '' : '', f = [
            0,
            0
          ];
        d.xmin < 0 && (f[0] = -d.xmin), d.ymin < 0 && (f[1] = -d.ymin), p(this.path, {
          d: c(a.d),
          'class': e,
          stroke: a.strokeStyle ? a.strokeStyle : null,
          fill: a.fillStyle ? a.fillStyle : null,
          transform: 'translate(' + f[0] + ',' + f[1] + ')'
        });
      }
    };
    var c = function (a) {
      return 'M' + a.hxy.x + ',' + a.hxy.y + ' L' + a.tail[0].x + ',' + a.tail[0].y + ' L' + a.cxy.x + ',' + a.cxy.y + ' L' + a.tail[1].x + ',' + a.tail[1].y + ' L' + a.hxy.x + ',' + a.hxy.y;
    };
  };
  jsPlumbUtil.extend(y, [
    jsPlumb.jsPlumbUIComponent,
    jsPlumb.Overlays.AbstractOverlay
  ], {
    cleanup: function () {
      null != this.path && this._jsPlumb.instance.removeElement(this.path);
    },
    setVisible: function (a) {
      null != this.path && (this.path.style.display = a ? 'block' : 'none');
    }
  }), jsPlumb.Overlays.svg.Arrow = function () {
    y.apply(this, [
      jsPlumb.Overlays.Arrow,
      arguments
    ]);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.svg.Arrow, [
    jsPlumb.Overlays.Arrow,
    y
  ]), jsPlumb.Overlays.svg.PlainArrow = function () {
    y.apply(this, [
      jsPlumb.Overlays.PlainArrow,
      arguments
    ]);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.svg.PlainArrow, [
    jsPlumb.Overlays.PlainArrow,
    y
  ]), jsPlumb.Overlays.svg.Diamond = function () {
    y.apply(this, [
      jsPlumb.Overlays.Diamond,
      arguments
    ]);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.svg.Diamond, [
    jsPlumb.Overlays.Diamond,
    y
  ]), jsPlumb.Overlays.svg.GuideLines = function () {
    var a, b, c = null, d = this;
    jsPlumb.Overlays.GuideLines.apply(this, arguments), this.paint = function (f, g) {
      null == c && (c = q('path'), f.connector.svg.appendChild(c), d.attachListeners(c, f.connector), d.attachListeners(c, d), a = q('path'), f.connector.svg.appendChild(a), d.attachListeners(a, f.connector), d.attachListeners(a, d), b = q('path'), f.connector.svg.appendChild(b), d.attachListeners(b, f.connector), d.attachListeners(b, d));
      var h = [
          0,
          0
        ];
      g.xmin < 0 && (h[0] = -g.xmin), g.ymin < 0 && (h[1] = -g.ymin), p(c, {
        d: e(f.head, f.tail),
        stroke: 'red',
        fill: null,
        transform: 'translate(' + h[0] + ',' + h[1] + ')'
      }), p(a, {
        d: e(f.tailLine[0], f.tailLine[1]),
        stroke: 'blue',
        fill: null,
        transform: 'translate(' + h[0] + ',' + h[1] + ')'
      }), p(b, {
        d: e(f.headLine[0], f.headLine[1]),
        stroke: 'green',
        fill: null,
        transform: 'translate(' + h[0] + ',' + h[1] + ')'
      });
    };
    var e = function (a, b) {
      return 'M ' + a.x + ',' + a.y + ' L' + b.x + ',' + b.y;
    };
  }, jsPlumbUtil.extend(jsPlumb.Overlays.svg.GuideLines, jsPlumb.Overlays.GuideLines);
}(), function () {
  'use strict';
  var a = {
      'stroke-linejoin': 'joinstyle',
      joinstyle: 'joinstyle',
      endcap: 'endcap',
      miterlimit: 'miterlimit'
    }, b = null;
  if (document.createStyleSheet && document.namespaces) {
    var c = [
        '.jsplumb_vml',
        'jsplumb\\:textbox',
        'jsplumb\\:oval',
        'jsplumb\\:rect',
        'jsplumb\\:stroke',
        'jsplumb\\:shape',
        'jsplumb\\:group'
      ], d = 'behavior:url(#default#VML);position:absolute;';
    b = document.createStyleSheet();
    for (var e = 0; e < c.length; e++)
      b.addRule(c[e], d);
    document.namespaces.add('jsplumb', 'urn:schemas-microsoft-com:vml');
  }
  jsPlumb.vml = {};
  var f = 1000, g = function (a, b) {
      for (var c in b)
        a[c] = b[c];
    }, h = function (a, b, c, d, e, f) {
      c = c || {};
      var h = document.createElement('jsplumb:' + a);
      return f ? e.appendElement(h, d) : d.appendChild(h), h.className = (c['class'] ? c['class'] + ' ' : '') + 'jsplumb_vml', i(h, b), g(h, c), h;
    }, i = function (a, b, c) {
      a.style.left = b[0] + 'px', a.style.top = b[1] + 'px', a.style.width = b[2] + 'px', a.style.height = b[3] + 'px', a.style.position = 'absolute', c && (a.style.zIndex = c);
    }, j = jsPlumb.vml.convertValue = function (a) {
      return Math.floor(a * f);
    }, k = function (a, b, c, d) {
      'transparent' === b ? d.setOpacity(c, '0.0') : d.setOpacity(c, '1.0');
    }, l = function (a, b, c, d) {
      var e = {};
      if (b.strokeStyle) {
        e.stroked = 'true';
        var f = jsPlumbUtil.convertStyle(b.strokeStyle, !0);
        e.strokecolor = f, k(e, f, 'stroke', c), e.strokeweight = b.lineWidth + 'px';
      } else
        e.stroked = 'false';
      if (b.fillStyle) {
        e.filled = 'true';
        var i = jsPlumbUtil.convertStyle(b.fillStyle, !0);
        e.fillcolor = i, k(e, i, 'fill', c);
      } else
        e.filled = 'false';
      if (b.dashstyle)
        null == c.strokeNode ? c.strokeNode = h('stroke', [
          0,
          0,
          0,
          0
        ], { dashstyle: b.dashstyle }, a, d) : c.strokeNode.dashstyle = b.dashstyle;
      else if (b['stroke-dasharray'] && b.lineWidth) {
        for (var j = -1 == b['stroke-dasharray'].indexOf(',') ? ' ' : ',', l = b['stroke-dasharray'].split(j), m = '', n = 0; n < l.length; n++)
          m += Math.floor(l[n] / b.lineWidth) + j;
        null == c.strokeNode ? c.strokeNode = h('stroke', [
          0,
          0,
          0,
          0
        ], { dashstyle: m }, a, d) : c.strokeNode.dashstyle = m;
      }
      g(a, e);
    }, m = function () {
      var a = this;
      jsPlumb.jsPlumbUIComponent.apply(this, arguments), this.opacityNodes = {
        stroke: null,
        fill: null
      }, this.initOpacityNodes = function (b) {
        a.opacityNodes.stroke = h('stroke', [
          0,
          0,
          1,
          1
        ], { opacity: '0.0' }, b, a._jsPlumb.instance), a.opacityNodes.fill = h('fill', [
          0,
          0,
          1,
          1
        ], { opacity: '0.0' }, b, a._jsPlumb.instance);
      }, this.setOpacity = function (b, c) {
        var d = a.opacityNodes[b];
        d && (d.opacity = '' + c);
      };
      var b = [];
      this.getDisplayElements = function () {
        return b;
      }, this.appendDisplayElement = function (c, d) {
        d || a.canvas.parentNode.appendChild(c), b.push(c);
      };
    };
  jsPlumbUtil.extend(m, jsPlumb.jsPlumbUIComponent, {
    cleanup: function () {
      this.bgCanvas && this.bgCanvas.parentNode.removeChild(this.bgCanvas), this.canvas && this.canvas.parentNode.removeChild(this.canvas);
    }
  });
  var n = jsPlumb.ConnectorRenderers.vml = function (b, c) {
      this.strokeNode = null, this.canvas = null, m.apply(this, arguments);
      var d = this._jsPlumb.instance.connectorClass + (b.cssClass ? ' ' + b.cssClass : '');
      this.paint = function (e) {
        if (null !== e) {
          this.w = Math.max(this.w, 1), this.h = Math.max(this.h, 1);
          for (var j = this.getSegments(), k = { path: '' }, m = [
                this.x,
                this.y,
                this.w,
                this.h
              ], n = 0; n < j.length; n++)
            k.path += jsPlumb.Segments.vml.SegmentRenderer.getPath(j[n]), k.path += ' ';
          if (e.outlineColor) {
            var o = e.outlineWidth || 1, p = e.lineWidth + 2 * o, q = {
                strokeStyle: jsPlumbUtil.convertStyle(e.outlineColor),
                lineWidth: p
              };
            for (var r in a)
              q[r] = e[r];
            null == this.bgCanvas ? (k['class'] = d, k.coordsize = m[2] * f + ',' + m[3] * f, this.bgCanvas = h('shape', m, k, b.parent, this._jsPlumb.instance, !0), i(this.bgCanvas, m), this.appendDisplayElement(this.bgCanvas, !0), this.initOpacityNodes(this.bgCanvas, ['stroke']), this.bgCanvas._jsPlumb = c) : (k.coordsize = m[2] * f + ',' + m[3] * f, i(this.bgCanvas, m), g(this.bgCanvas, k)), l(this.bgCanvas, q, this);
          }
          null == this.canvas ? (k['class'] = d, k.coordsize = m[2] * f + ',' + m[3] * f, this.canvas = h('shape', m, k, b.parent, this._jsPlumb.instance, !0), this.appendDisplayElement(this.canvas, !0), this.initOpacityNodes(this.canvas, ['stroke']), this.canvas._jsPlumb = c) : (k.coordsize = m[2] * f + ',' + m[3] * f, i(this.canvas, m), g(this.canvas, k)), l(this.canvas, e, this, this._jsPlumb.instance);
        }
      };
    };
  jsPlumbUtil.extend(n, m, {
    setVisible: function (a) {
      this.canvas && (this.canvas.style.display = a ? 'block' : 'none'), this.bgCanvas && (this.bgCanvas.style.display = a ? 'block' : 'none');
    }
  });
  var o = window.VmlEndpoint = function (a) {
      m.apply(this, arguments), this._jsPlumb.vml = null, this.canvas = document.createElement('div'), this.canvas.style.position = 'absolute', this._jsPlumb.clazz = this._jsPlumb.instance.endpointClass + (a.cssClass ? ' ' + a.cssClass : ''), a._jsPlumb.appendElement(this.canvas, a.parent), this.paint = function (a, b) {
        var c = {}, d = this._jsPlumb.vml;
        jsPlumbUtil.sizeElement(this.canvas, this.x, this.y, this.w, this.h), null == this._jsPlumb.vml ? (c['class'] = this._jsPlumb.clazz, d = this._jsPlumb.vml = this.getVml([
          0,
          0,
          this.w,
          this.h
        ], c, b, this.canvas, this._jsPlumb.instance), this.appendDisplayElement(d, !0), this.appendDisplayElement(this.canvas, !0), this.initOpacityNodes(d, ['fill'])) : (i(d, [
          0,
          0,
          this.w,
          this.h
        ]), g(d, c)), l(d, a, this);
      };
    };
  jsPlumbUtil.extend(o, m), jsPlumb.Segments.vml = {
    SegmentRenderer: {
      getPath: function (a) {
        return {
          Straight: function (a) {
            var b = a.params;
            return 'm' + j(b.x1) + ',' + j(b.y1) + ' l' + j(b.x2) + ',' + j(b.y2) + ' e';
          },
          Bezier: function (a) {
            var b = a.params;
            return 'm' + j(b.x1) + ',' + j(b.y1) + ' c' + j(b.cp1x) + ',' + j(b.cp1y) + ',' + j(b.cp2x) + ',' + j(b.cp2y) + ',' + j(b.x2) + ',' + j(b.y2) + ' e';
          },
          Arc: function (a) {
            var b = a.params, c = Math.min(b.x1, b.x2), d = (Math.max(b.x1, b.x2), Math.min(b.y1, b.y2)), e = (Math.max(b.y1, b.y2), a.anticlockwise ? 1 : 0), f = a.anticlockwise ? 'at ' : 'wa ', g = function () {
                if (b.loopback)
                  return '0,0,' + j(2 * b.r) + ',' + j(2 * b.r);
                var f = [
                    null,
                    [
                      function () {
                        return [
                          c,
                          d
                        ];
                      },
                      function () {
                        return [
                          c - b.r,
                          d - b.r
                        ];
                      }
                    ],
                    [
                      function () {
                        return [
                          c - b.r,
                          d
                        ];
                      },
                      function () {
                        return [
                          c,
                          d - b.r
                        ];
                      }
                    ],
                    [
                      function () {
                        return [
                          c - b.r,
                          d - b.r
                        ];
                      },
                      function () {
                        return [
                          c,
                          d
                        ];
                      }
                    ],
                    [
                      function () {
                        return [
                          c,
                          d - b.r
                        ];
                      },
                      function () {
                        return [
                          c - b.r,
                          d
                        ];
                      }
                    ]
                  ][a.segment][e]();
                return j(f[0]) + ',' + j(f[1]) + ',' + j(f[0] + 2 * b.r) + ',' + j(f[1] + 2 * b.r);
              };
            return f + ' ' + g() + ',' + j(b.x1) + ',' + j(b.y1) + ',' + j(b.x2) + ',' + j(b.y2) + ' e';
          }
        }[a.type](a);
      }
    }
  }, jsPlumb.Endpoints.vml.Dot = function () {
    jsPlumb.Endpoints.Dot.apply(this, arguments), o.apply(this, arguments), this.getVml = function (a, b, c, d, e) {
      return h('oval', a, b, d, e);
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.vml.Dot, o), jsPlumb.Endpoints.vml.Rectangle = function () {
    jsPlumb.Endpoints.Rectangle.apply(this, arguments), o.apply(this, arguments), this.getVml = function (a, b, c, d, e) {
      return h('rect', a, b, d, e);
    };
  }, jsPlumbUtil.extend(jsPlumb.Endpoints.vml.Rectangle, o), jsPlumb.Endpoints.vml.Image = jsPlumb.Endpoints.Image, jsPlumb.Endpoints.vml.Blank = jsPlumb.Endpoints.Blank, jsPlumb.Overlays.vml.Label = jsPlumb.Overlays.Label, jsPlumb.Overlays.vml.Custom = jsPlumb.Overlays.Custom;
  var p = function (a, b) {
    a.apply(this, b), m.apply(this, b);
    var c = this;
    this.canvas = null, this.isAppendedAtTopLevel = !0;
    var d = function (a) {
      return 'm ' + j(a.hxy.x) + ',' + j(a.hxy.y) + ' l ' + j(a.tail[0].x) + ',' + j(a.tail[0].y) + ' ' + j(a.cxy.x) + ',' + j(a.cxy.y) + ' ' + j(a.tail[1].x) + ',' + j(a.tail[1].y) + ' x e';
    };
    this.paint = function (a, e) {
      if (a.component.canvas && e) {
        var j = {}, k = a.d, l = a.component;
        a.strokeStyle && (j.stroked = 'true', j.strokecolor = jsPlumbUtil.convertStyle(a.strokeStyle, !0)), a.lineWidth && (j.strokeweight = a.lineWidth + 'px'), a.fillStyle && (j.filled = 'true', j.fillcolor = a.fillStyle);
        var m = Math.min(k.hxy.x, k.tail[0].x, k.tail[1].x, k.cxy.x), n = Math.min(k.hxy.y, k.tail[0].y, k.tail[1].y, k.cxy.y), o = Math.max(k.hxy.x, k.tail[0].x, k.tail[1].x, k.cxy.x), p = Math.max(k.hxy.y, k.tail[0].y, k.tail[1].y, k.cxy.y), q = Math.abs(o - m), r = Math.abs(p - n), s = [
            m,
            n,
            q,
            r
          ];
        if (j.path = d(k), j.coordsize = l.w * f + ',' + l.h * f, s[0] = l.x, s[1] = l.y, s[2] = l.w, s[3] = l.h, null == c.canvas) {
          var t = l._jsPlumb.overlayClass || '', u = b && 1 == b.length ? b[0].cssClass || '' : '';
          j['class'] = u + ' ' + t, c.canvas = h('shape', s, j, l.canvas.parentNode, l._jsPlumb.instance, !0), l.appendDisplayElement(c.canvas, !0);
        } else
          i(c.canvas, s), g(c.canvas, j);
      }
    }, this.cleanup = function () {
      null != this.canvas && this._jsPlumb.instance.removeElement(this.canvas);
    };
  };
  jsPlumbUtil.extend(p, [
    m,
    jsPlumb.Overlays.AbstractOverlay
  ], {
    setVisible: function (a) {
      this.canvas.style.display = a ? 'block' : 'none';
    }
  }), jsPlumb.Overlays.vml.Arrow = function () {
    p.apply(this, [
      jsPlumb.Overlays.Arrow,
      arguments
    ]);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.vml.Arrow, [
    jsPlumb.Overlays.Arrow,
    p
  ]), jsPlumb.Overlays.vml.PlainArrow = function () {
    p.apply(this, [
      jsPlumb.Overlays.PlainArrow,
      arguments
    ]);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.vml.PlainArrow, [
    jsPlumb.Overlays.PlainArrow,
    p
  ]), jsPlumb.Overlays.vml.Diamond = function () {
    p.apply(this, [
      jsPlumb.Overlays.Diamond,
      arguments
    ]);
  }, jsPlumbUtil.extend(jsPlumb.Overlays.vml.Diamond, [
    jsPlumb.Overlays.Diamond,
    p
  ]);
}(), function (a) {
  'use strict';
  var b = function (b) {
    return 'string' == typeof b ? a('#' + b) : a(b);
  };
  a.extend(jsPlumbInstance.prototype, {
    getDOMElement: function (a) {
      return null == a ? null : 'string' == typeof a ? document.getElementById(a) : a.context || null != a.length ? a[0] : a;
    },
    getElementObject: b,
    removeElement: function (a) {
      b(a).remove();
    },
    doAnimate: function (a, b, c) {
      a.animate(b, c);
    },
    getSelector: function (c, d) {
      return 2 == arguments.length ? b(c).find(d) : a(c);
    },
    destroyDraggable: function (b) {
      a(b).data('draggable') && a(b).draggable('destroy');
    },
    destroyDroppable: function (b) {
      a(b).data('droppable') && a(b).droppable('destroy');
    },
    initDraggable: function (b, c, d) {
      c = c || {}, b = a(b), c.start = jsPlumbUtil.wrap(c.start, function () {
        a('body').addClass(this.dragSelectClass);
      }, !1), c.stop = jsPlumbUtil.wrap(c.stop, function () {
        a('body').removeClass(this.dragSelectClass);
      }), c.doNotRemoveHelper || (c.helper = null), 'internal' == d && (c.scope = c.scope || jsPlumb.Defaults.Scope), b.draggable(c);
    },
    initDroppable: function (b, c) {
      c.scope = c.scope || jsPlumb.Defaults.Scope, a(b).droppable(c);
    },
    isAlreadyDraggable: function (b) {
      return a(b).hasClass('ui-draggable');
    },
    isDragSupported: function (b) {
      return a(b).draggable;
    },
    isDropSupported: function (b) {
      return a(b).droppable;
    },
    getDragObject: function (a) {
      return a[1].helper || a[1].draggable;
    },
    getDragScope: function (b) {
      return a(b).draggable('option', 'scope');
    },
    getDropEvent: function (a) {
      return a[0];
    },
    getDropScope: function (b) {
      return a(b).droppable('option', 'scope');
    },
    getUIPosition: function (a, b, c) {
      var d;
      if (b = b || 1, 1 == a.length)
        d = {
          left: a[0].pageX,
          top: a[0].pageY
        };
      else {
        var e = a[1], f = e.position;
        d = f || e.absolutePosition, c || (e.position.left /= b, e.position.top /= b);
      }
      return {
        left: d.left,
        top: d.top
      };
    },
    isDragFilterSupported: function () {
      return !0;
    },
    setDragFilter: function (b, c) {
      jsPlumb.isAlreadyDraggable(b) && a(b).draggable('option', 'cancel', c);
    },
    setElementDraggable: function (b, c) {
      a(b).draggable('option', 'disabled', !c);
    },
    setDragScope: function (b, c) {
      a(b).draggable('option', 'scope', c);
    },
    dragEvents: {
      start: 'start',
      stop: 'stop',
      drag: 'drag',
      step: 'step',
      over: 'over',
      out: 'out',
      drop: 'drop',
      complete: 'complete'
    },
    animEvents: {
      step: 'step',
      complete: 'complete'
    },
    getOriginalEvent: function (a) {
      return a.originalEvent || a;
    },
    trigger: function (a, c, d) {
      var e = jQuery._data(b(a)[0], 'handle');
      e(d);
    }
  }), a(document).ready(jsPlumb.init);
}(jQuery);
/**
 * @author Manuel Mazzuola
 * https://github.com/manuelmazzuola/angular-ui-router-styles
 * Inspired by https://github.com/tennisgent/angular-route-styles
 */
'use strict';
angular.module('uiRouterStyles', ['ui.router']).directive('head', [
  '$rootScope',
  '$compile',
  '$state',
  '$interpolate',
  function ($rootScope, $compile, $state, $interpolate) {
    return {
      restrict: 'E',
      link: function (scope, elem) {
        var start = $interpolate.startSymbol(), end = $interpolate.endSymbol();
        var html = '<link rel="stylesheet" ng-repeat="(k, css) in routeStyles track by k" ng-href="' + start + 'css' + end + '" >';
        elem.append($compile(html)(scope));
        // Get the parent state
        var $$parentState = function (state) {
          // Check if state has explicit parent OR we try guess parent from its name
          var name = state.parent || (/^(.+)\.[^.]+$/.exec(state.name) || [])[1];
          // If we were able to figure out parent name then get this state
          return name && $state.get(name);
        };
        scope.routeStyles = [];
        $rootScope.$on('$stateChangeStart', function (evt, toState) {
          // From current state to the root
          scope.routeStyles = [];
          for (var state = toState; state && state.name !== ''; state = $$parentState(state)) {
            if (state && state.data && state.data.css) {
              if (!Array.isArray(state.data.css)) {
                state.data.css = [state.data.css];
              }
              angular.forEach(state.data.css, function (css) {
                scope.routeStyles.push(css);
              });
            }
          }
        });
      }
    };
  }
]);
/*
Author: Geraint Luff and others
Year: 2013

This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
*/
(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof module !== 'undefined' && module.exports) {
    // CommonJS. Define export.
    module.exports = factory();
  } else {
    // Browser globals
    global.tv4 = factory();
  }
}(this, function () {
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
  if (!Object.keys) {
    Object.keys = function () {
      var hasOwnProperty = Object.prototype.hasOwnProperty, hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'), dontEnums = [
          'toString',
          'toLocaleString',
          'valueOf',
          'hasOwnProperty',
          'isPrototypeOf',
          'propertyIsEnumerable',
          'constructor'
        ], dontEnumsLength = dontEnums.length;
      return function (obj) {
        if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {
          throw new TypeError('Object.keys called on non-object');
        }
        var result = [];
        for (var prop in obj) {
          if (hasOwnProperty.call(obj, prop)) {
            result.push(prop);
          }
        }
        if (hasDontEnumBug) {
          for (var i = 0; i < dontEnumsLength; i++) {
            if (hasOwnProperty.call(obj, dontEnums[i])) {
              result.push(dontEnums[i]);
            }
          }
        }
        return result;
      };
    }();
  }
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
  if (!Object.create) {
    Object.create = function () {
      function F() {
      }
      return function (o) {
        if (arguments.length !== 1) {
          throw new Error('Object.create implementation only accepts one parameter.');
        }
        F.prototype = o;
        return new F();
      };
    }();
  }
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
  if (!Array.isArray) {
    Array.isArray = function (vArg) {
      return Object.prototype.toString.call(vArg) === '[object Array]';
    };
  }
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement) {
      if (this === null) {
        throw new TypeError();
      }
      var t = Object(this);
      var len = t.length >>> 0;
      if (len === 0) {
        return -1;
      }
      var n = 0;
      if (arguments.length > 1) {
        n = Number(arguments[1]);
        if (n !== n) {
          // shortcut for verifying if it's NaN
          n = 0;
        } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
          n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
      }
      if (n >= len) {
        return -1;
      }
      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
      for (; k < len; k++) {
        if (k in t && t[k] === searchElement) {
          return k;
        }
      }
      return -1;
    };
  }
  // Grungey Object.isFrozen hack
  if (!Object.isFrozen) {
    Object.isFrozen = function (obj) {
      var key = 'tv4_test_frozen_key';
      while (obj.hasOwnProperty(key)) {
        key += Math.random();
      }
      try {
        obj[key] = true;
        delete obj[key];
        return false;
      } catch (e) {
        return true;
      }
    };
  }
  var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorMessages, checkRecursive, trackUnknownProperties) {
    this.missing = [];
    this.missingMap = {};
    this.formatValidators = parent ? Object.create(parent.formatValidators) : {};
    this.schemas = parent ? Object.create(parent.schemas) : {};
    this.collectMultiple = collectMultiple;
    this.errors = [];
    this.handleError = collectMultiple ? this.collectError : this.returnError;
    if (checkRecursive) {
      this.checkRecursive = true;
      this.scanned = [];
      this.scannedFrozen = [];
      this.scannedFrozenSchemas = [];
      this.scannedFrozenValidationErrors = [];
      this.validatedSchemasKey = 'tv4_validation_id';
      this.validationErrorsKey = 'tv4_validation_errors_id';
    }
    if (trackUnknownProperties) {
      this.trackUnknownProperties = true;
      this.knownPropertyPaths = {};
      this.unknownPropertyPaths = {};
    }
    this.errorMessages = errorMessages;
    this.definedKeywords = {};
    if (parent) {
      for (var key in parent.definedKeywords) {
        this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
      }
    }
  };
  ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
    this.definedKeywords[keyword].push(keywordFunction);
  };
  ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors) {
    var messageTemplate = this.errorMessages[code] || ErrorMessagesDefault[code];
    if (typeof messageTemplate !== 'string') {
      return new ValidationError(code, 'Unknown error code ' + code + ': ' + JSON.stringify(messageParams), dataPath, schemaPath, subErrors);
    }
    // Adapted from Crockford's supplant()
    var message = messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
        var subValue = messageParams[varName];
        return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
      });
    return new ValidationError(code, message, dataPath, schemaPath, subErrors);
  };
  ValidatorContext.prototype.returnError = function (error) {
    return error;
  };
  ValidatorContext.prototype.collectError = function (error) {
    if (error) {
      this.errors.push(error);
    }
    return null;
  };
  ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
    for (var i = startIndex; i < this.errors.length; i++) {
      this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
    }
    return this;
  };
  ValidatorContext.prototype.banUnknownProperties = function () {
    for (var unknownPath in this.unknownPropertyPaths) {
      var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, '');
      var result = this.handleError(error);
      if (result) {
        return result;
      }
    }
    return null;
  };
  ValidatorContext.prototype.addFormat = function (format, validator) {
    if (typeof format === 'object') {
      for (var key in format) {
        this.addFormat(key, format[key]);
      }
      return this;
    }
    this.formatValidators[format] = validator;
  };
  ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
    if (schema['$ref'] !== undefined) {
      urlHistory = urlHistory || {};
      if (urlHistory[schema['$ref']]) {
        return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: Object.keys(urlHistory).join(', ') }, '', '');
      }
      urlHistory[schema['$ref']] = true;
      schema = this.getSchema(schema['$ref'], urlHistory);
    }
    return schema;
  };
  ValidatorContext.prototype.getSchema = function (url, urlHistory) {
    var schema;
    if (this.schemas[url] !== undefined) {
      schema = this.schemas[url];
      return this.resolveRefs(schema, urlHistory);
    }
    var baseUrl = url;
    var fragment = '';
    if (url.indexOf('#') !== -1) {
      fragment = url.substring(url.indexOf('#') + 1);
      baseUrl = url.substring(0, url.indexOf('#'));
    }
    if (typeof this.schemas[baseUrl] === 'object') {
      schema = this.schemas[baseUrl];
      var pointerPath = decodeURIComponent(fragment);
      if (pointerPath === '') {
        return this.resolveRefs(schema, urlHistory);
      } else if (pointerPath.charAt(0) !== '/') {
        return undefined;
      }
      var parts = pointerPath.split('/').slice(1);
      for (var i = 0; i < parts.length; i++) {
        var component = parts[i].replace(/~1/g, '/').replace(/~0/g, '~');
        if (schema[component] === undefined) {
          schema = undefined;
          break;
        }
        schema = schema[component];
      }
      if (schema !== undefined) {
        return this.resolveRefs(schema, urlHistory);
      }
    }
    if (this.missing[baseUrl] === undefined) {
      this.missing.push(baseUrl);
      this.missing[baseUrl] = baseUrl;
      this.missingMap[baseUrl] = baseUrl;
    }
  };
  ValidatorContext.prototype.searchSchemas = function (schema, url) {
    if (schema && typeof schema === 'object') {
      if (typeof schema.id === 'string') {
        if (isTrustedUrl(url, schema.id)) {
          if (this.schemas[schema.id] === undefined) {
            this.schemas[schema.id] = schema;
          }
        }
      }
      for (var key in schema) {
        if (key !== 'enum') {
          if (typeof schema[key] === 'object') {
            this.searchSchemas(schema[key], url);
          } else if (key === '$ref') {
            var uri = getDocumentUri(schema[key]);
            if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
              this.missingMap[uri] = uri;
            }
          }
        }
      }
    }
  };
  ValidatorContext.prototype.addSchema = function (url, schema) {
    //overload
    if (typeof url !== 'string' || typeof schema === 'undefined') {
      if (typeof url === 'object' && typeof url.id === 'string') {
        schema = url;
        url = schema.id;
      } else {
        return;
      }
    }
    if (url = getDocumentUri(url) + '#') {
      // Remove empty fragment
      url = getDocumentUri(url);
    }
    this.schemas[url] = schema;
    delete this.missingMap[url];
    normSchema(schema, url);
    this.searchSchemas(schema, url);
  };
  ValidatorContext.prototype.getSchemaMap = function () {
    var map = {};
    for (var key in this.schemas) {
      map[key] = this.schemas[key];
    }
    return map;
  };
  ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
    var list = [];
    for (var key in this.schemas) {
      if (!filterRegExp || filterRegExp.test(key)) {
        list.push(key);
      }
    }
    return list;
  };
  ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
    var list = [];
    for (var key in this.missingMap) {
      if (!filterRegExp || filterRegExp.test(key)) {
        list.push(key);
      }
    }
    return list;
  };
  ValidatorContext.prototype.dropSchemas = function () {
    this.schemas = {};
    this.reset();
  };
  ValidatorContext.prototype.reset = function () {
    this.missing = [];
    this.missingMap = {};
    this.errors = [];
  };
  ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
    var topLevel;
    schema = this.resolveRefs(schema);
    if (!schema) {
      return null;
    } else if (schema instanceof ValidationError) {
      this.errors.push(schema);
      return schema;
    }
    var startErrorCount = this.errors.length;
    var frozenIndex, scannedFrozenSchemaIndex = null, scannedSchemasIndex = null;
    if (this.checkRecursive && data && typeof data === 'object') {
      topLevel = !this.scanned.length;
      if (data[this.validatedSchemasKey]) {
        var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
        if (schemaIndex !== -1) {
          this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
          return null;
        }
      }
      if (Object.isFrozen(data)) {
        frozenIndex = this.scannedFrozen.indexOf(data);
        if (frozenIndex !== -1) {
          var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
          if (frozenSchemaIndex !== -1) {
            this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
            return null;
          }
        }
      }
      this.scanned.push(data);
      if (Object.isFrozen(data)) {
        if (frozenIndex === -1) {
          frozenIndex = this.scannedFrozen.length;
          this.scannedFrozen.push(data);
          this.scannedFrozenSchemas.push([]);
        }
        scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
        this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
      } else {
        if (!data[this.validatedSchemasKey]) {
          try {
            Object.defineProperty(data, this.validatedSchemasKey, {
              value: [],
              configurable: true
            });
            Object.defineProperty(data, this.validationErrorsKey, {
              value: [],
              configurable: true
            });
          } catch (e) {
            //IE 7/8 workaround
            data[this.validatedSchemasKey] = [];
            data[this.validationErrorsKey] = [];
          }
        }
        scannedSchemasIndex = data[this.validatedSchemasKey].length;
        data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
        data[this.validationErrorsKey][scannedSchemasIndex] = [];
      }
    }
    var errorCount = this.errors.length;
    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;
    if (topLevel) {
      while (this.scanned.length) {
        var item = this.scanned.pop();
        delete item[this.validatedSchemasKey];
      }
      this.scannedFrozen = [];
      this.scannedFrozenSchemas = [];
    }
    if (error || errorCount !== this.errors.length) {
      while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {
        var dataPart = dataPathParts && dataPathParts.length ? '' + dataPathParts.pop() : null;
        var schemaPart = schemaPathParts && schemaPathParts.length ? '' + schemaPathParts.pop() : null;
        if (error) {
          error = error.prefixWith(dataPart, schemaPart);
        }
        this.prefixErrors(errorCount, dataPart, schemaPart);
      }
    }
    if (scannedFrozenSchemaIndex !== null) {
      this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
    } else if (scannedSchemasIndex !== null) {
      data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
    }
    return this.handleError(error);
  };
  ValidatorContext.prototype.validateFormat = function (data, schema) {
    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
      return null;
    }
    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
      return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }).prefixWith(null, 'format');
    } else if (errorMessage && typeof errorMessage === 'object') {
      return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || '?' }, errorMessage.dataPath || null, errorMessage.schemaPath || '/format');
    }
    return null;
  };
  ValidatorContext.prototype.validateDefinedKeywords = function (data, schema) {
    for (var key in this.definedKeywords) {
      var validationFunctions = this.definedKeywords[key];
      for (var i = 0; i < validationFunctions.length; i++) {
        var func = validationFunctions[i];
        var result = func(data, schema[key], schema);
        if (typeof result === 'string' || typeof result === 'number') {
          return this.createError(ErrorCodes.KEYWORD_CUSTOM, {
            key: key,
            message: result
          }).prefixWith(null, 'format');
        } else if (result && typeof result === 'object') {
          var code = result.code || ErrorCodes.KEYWORD_CUSTOM;
          if (typeof code === 'string') {
            if (!ErrorCodes[code]) {
              throw new Error('Undefined error code (use defineError): ' + code);
            }
            code = ErrorCodes[code];
          }
          var messageParams = typeof result.message === 'object' ? result.message : {
              key: key,
              message: result.message || '?'
            };
          var schemaPath = result.schemaPath || '/' + key.replace(/~/g, '~0').replace(/\//g, '~1');
          return this.createError(code, messageParams, result.dataPath || null, schemaPath);
        }
      }
    }
    return null;
  };
  function recursiveCompare(A, B) {
    if (A === B) {
      return true;
    }
    if (typeof A === 'object' && typeof B === 'object') {
      if (Array.isArray(A) !== Array.isArray(B)) {
        return false;
      } else if (Array.isArray(A)) {
        if (A.length !== B.length) {
          return false;
        }
        for (var i = 0; i < A.length; i++) {
          if (!recursiveCompare(A[i], B[i])) {
            return false;
          }
        }
      } else {
        var key;
        for (key in A) {
          if (B[key] === undefined && A[key] !== undefined) {
            return false;
          }
        }
        for (key in B) {
          if (A[key] === undefined && B[key] !== undefined) {
            return false;
          }
        }
        for (key in A) {
          if (!recursiveCompare(A[key], B[key])) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }
  ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
    var error;
    if (error = this.validateType(data, schema, dataPointerPath)) {
      return error.prefixWith(null, 'type');
    }
    if (error = this.validateEnum(data, schema, dataPointerPath)) {
      return error.prefixWith(null, 'type');
    }
    return null;
  };
  ValidatorContext.prototype.validateType = function validateType(data, schema) {
    if (schema.type === undefined) {
      return null;
    }
    var dataType = typeof data;
    if (data === null) {
      dataType = 'null';
    } else if (Array.isArray(data)) {
      dataType = 'array';
    }
    var allowedTypes = schema.type;
    if (typeof allowedTypes !== 'object') {
      allowedTypes = [allowedTypes];
    }
    for (var i = 0; i < allowedTypes.length; i++) {
      var type = allowedTypes[i];
      if (type === dataType || type === 'integer' && dataType === 'number' && data % 1 === 0) {
        return null;
      }
    }
    return this.createError(ErrorCodes.INVALID_TYPE, {
      type: dataType,
      expected: allowedTypes.join('/')
    });
  };
  ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
    if (schema['enum'] === undefined) {
      return null;
    }
    for (var i = 0; i < schema['enum'].length; i++) {
      var enumVal = schema['enum'][i];
      if (recursiveCompare(data, enumVal)) {
        return null;
      }
    }
    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? JSON.stringify(data) : data });
  };
  ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || null;
  };
  ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
    var multipleOf = schema.multipleOf || schema.divisibleBy;
    if (multipleOf === undefined) {
      return null;
    }
    if (typeof data === 'number') {
      if (data % multipleOf !== 0) {
        return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {
          value: data,
          multipleOf: multipleOf
        });
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
    if (typeof data !== 'number') {
      return null;
    }
    if (schema.minimum !== undefined) {
      if (data < schema.minimum) {
        return this.createError(ErrorCodes.NUMBER_MINIMUM, {
          value: data,
          minimum: schema.minimum
        }).prefixWith(null, 'minimum');
      }
      if (schema.exclusiveMinimum && data === schema.minimum) {
        return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {
          value: data,
          minimum: schema.minimum
        }).prefixWith(null, 'exclusiveMinimum');
      }
    }
    if (schema.maximum !== undefined) {
      if (data > schema.maximum) {
        return this.createError(ErrorCodes.NUMBER_MAXIMUM, {
          value: data,
          maximum: schema.maximum
        }).prefixWith(null, 'maximum');
      }
      if (schema.exclusiveMaximum && data === schema.maximum) {
        return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {
          value: data,
          maximum: schema.maximum
        }).prefixWith(null, 'exclusiveMaximum');
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;
  };
  ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
    if (typeof data !== 'string') {
      return null;
    }
    if (schema.minLength !== undefined) {
      if (data.length < schema.minLength) {
        return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {
          length: data.length,
          minimum: schema.minLength
        }).prefixWith(null, 'minLength');
      }
    }
    if (schema.maxLength !== undefined) {
      if (data.length > schema.maxLength) {
        return this.createError(ErrorCodes.STRING_LENGTH_LONG, {
          length: data.length,
          maximum: schema.maxLength
        }).prefixWith(null, 'maxLength');
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
    if (typeof data !== 'string' || schema.pattern === undefined) {
      return null;
    }
    var regexp = new RegExp(schema.pattern);
    if (!regexp.test(data)) {
      return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }).prefixWith(null, 'pattern');
    }
    return null;
  };
  ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
    if (!Array.isArray(data)) {
      return null;
    }
    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;
  };
  ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
    var error;
    if (schema.minItems !== undefined) {
      if (data.length < schema.minItems) {
        error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {
          length: data.length,
          minimum: schema.minItems
        }).prefixWith(null, 'minItems');
        if (this.handleError(error)) {
          return error;
        }
      }
    }
    if (schema.maxItems !== undefined) {
      if (data.length > schema.maxItems) {
        error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {
          length: data.length,
          maximum: schema.maxItems
        }).prefixWith(null, 'maxItems');
        if (this.handleError(error)) {
          return error;
        }
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
    if (schema.uniqueItems) {
      for (var i = 0; i < data.length; i++) {
        for (var j = i + 1; j < data.length; j++) {
          if (recursiveCompare(data[i], data[j])) {
            var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {
                match1: i,
                match2: j
              }).prefixWith(null, 'uniqueItems');
            if (this.handleError(error)) {
              return error;
            }
          }
        }
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
    if (schema.items === undefined) {
      return null;
    }
    var error, i;
    if (Array.isArray(schema.items)) {
      for (i = 0; i < data.length; i++) {
        if (i < schema.items.length) {
          if (error = this.validateAll(data[i], schema.items[i], [i], [
              'items',
              i
            ], dataPointerPath + '/' + i)) {
            return error;
          }
        } else if (schema.additionalItems !== undefined) {
          if (typeof schema.additionalItems === 'boolean') {
            if (!schema.additionalItems) {
              error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}).prefixWith('' + i, 'additionalItems');
              if (this.handleError(error)) {
                return error;
              }
            }
          } else if (error = this.validateAll(data[i], schema.additionalItems, [i], ['additionalItems'], dataPointerPath + '/' + i)) {
            return error;
          }
        }
      }
    } else {
      for (i = 0; i < data.length; i++) {
        if (error = this.validateAll(data[i], schema.items, [i], ['items'], dataPointerPath + '/' + i)) {
          return error;
        }
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
    if (typeof data !== 'object' || data === null || Array.isArray(data)) {
      return null;
    }
    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;
  };
  ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
    var keys = Object.keys(data);
    var error;
    if (schema.minProperties !== undefined) {
      if (keys.length < schema.minProperties) {
        error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {
          propertyCount: keys.length,
          minimum: schema.minProperties
        }).prefixWith(null, 'minProperties');
        if (this.handleError(error)) {
          return error;
        }
      }
    }
    if (schema.maxProperties !== undefined) {
      if (keys.length > schema.maxProperties) {
        error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {
          propertyCount: keys.length,
          maximum: schema.maxProperties
        }).prefixWith(null, 'maxProperties');
        if (this.handleError(error)) {
          return error;
        }
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
    if (schema.required !== undefined) {
      for (var i = 0; i < schema.required.length; i++) {
        var key = schema.required[i];
        if (data[key] === undefined) {
          var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }).prefixWith(null, '' + i).prefixWith(null, 'required');
          if (this.handleError(error)) {
            return error;
          }
        }
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
    var error;
    for (var key in data) {
      var keyPointerPath = dataPointerPath + '/' + key.replace(/~/g, '~0').replace(/\//g, '~1');
      var foundMatch = false;
      if (schema.properties !== undefined && schema.properties[key] !== undefined) {
        foundMatch = true;
        if (error = this.validateAll(data[key], schema.properties[key], [key], [
            'properties',
            key
          ], keyPointerPath)) {
          return error;
        }
      }
      if (schema.patternProperties !== undefined) {
        for (var patternKey in schema.patternProperties) {
          var regexp = new RegExp(patternKey);
          if (regexp.test(key)) {
            foundMatch = true;
            if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], [
                'patternProperties',
                patternKey
              ], keyPointerPath)) {
              return error;
            }
          }
        }
      }
      if (!foundMatch) {
        if (schema.additionalProperties !== undefined) {
          if (this.trackUnknownProperties) {
            this.knownPropertyPaths[keyPointerPath] = true;
            delete this.unknownPropertyPaths[keyPointerPath];
          }
          if (typeof schema.additionalProperties === 'boolean') {
            if (!schema.additionalProperties) {
              error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, {}).prefixWith(key, 'additionalProperties');
              if (this.handleError(error)) {
                return error;
              }
            }
          } else {
            if (error = this.validateAll(data[key], schema.additionalProperties, [key], ['additionalProperties'], keyPointerPath)) {
              return error;
            }
          }
        } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
          this.unknownPropertyPaths[keyPointerPath] = true;
        }
      } else if (this.trackUnknownProperties) {
        this.knownPropertyPaths[keyPointerPath] = true;
        delete this.unknownPropertyPaths[keyPointerPath];
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
    var error;
    if (schema.dependencies !== undefined) {
      for (var depKey in schema.dependencies) {
        if (data[depKey] !== undefined) {
          var dep = schema.dependencies[depKey];
          if (typeof dep === 'string') {
            if (data[dep] === undefined) {
              error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                key: depKey,
                missing: dep
              }).prefixWith(null, depKey).prefixWith(null, 'dependencies');
              if (this.handleError(error)) {
                return error;
              }
            }
          } else if (Array.isArray(dep)) {
            for (var i = 0; i < dep.length; i++) {
              var requiredKey = dep[i];
              if (data[requiredKey] === undefined) {
                error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                  key: depKey,
                  missing: requiredKey
                }).prefixWith(null, '' + i).prefixWith(null, depKey).prefixWith(null, 'dependencies');
                if (this.handleError(error)) {
                  return error;
                }
              }
            }
          } else {
            if (error = this.validateAll(data, dep, [], [
                'dependencies',
                depKey
              ], dataPointerPath)) {
              return error;
            }
          }
        }
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;
  };
  ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
    if (schema.allOf === undefined) {
      return null;
    }
    var error;
    for (var i = 0; i < schema.allOf.length; i++) {
      var subSchema = schema.allOf[i];
      if (error = this.validateAll(data, subSchema, [], [
          'allOf',
          i
        ], dataPointerPath)) {
        return error;
      }
    }
    return null;
  };
  ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
    if (schema.anyOf === undefined) {
      return null;
    }
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
      oldUnknownPropertyPaths = this.unknownPropertyPaths;
      oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    var errorAtEnd = true;
    for (var i = 0; i < schema.anyOf.length; i++) {
      if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = {};
        this.knownPropertyPaths = {};
      }
      var subSchema = schema.anyOf[i];
      var errorCount = this.errors.length;
      var error = this.validateAll(data, subSchema, [], [
          'anyOf',
          i
        ], dataPointerPath);
      if (error === null && errorCount === this.errors.length) {
        this.errors = this.errors.slice(0, startErrorCount);
        if (this.trackUnknownProperties) {
          for (var knownKey in this.knownPropertyPaths) {
            oldKnownPropertyPaths[knownKey] = true;
            delete oldUnknownPropertyPaths[knownKey];
          }
          for (var unknownKey in this.unknownPropertyPaths) {
            if (!oldKnownPropertyPaths[unknownKey]) {
              oldUnknownPropertyPaths[unknownKey] = true;
            }
          }
          // We need to continue looping so we catch all the property definitions, but we don't want to return an error
          errorAtEnd = false;
          continue;
        }
        return null;
      }
      if (error) {
        errors.push(error.prefixWith(null, '' + i).prefixWith(null, 'anyOf'));
      }
    }
    if (this.trackUnknownProperties) {
      this.unknownPropertyPaths = oldUnknownPropertyPaths;
      this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (errorAtEnd) {
      errors = errors.concat(this.errors.slice(startErrorCount));
      this.errors = this.errors.slice(0, startErrorCount);
      return this.createError(ErrorCodes.ANY_OF_MISSING, {}, '', '/anyOf', errors);
    }
  };
  ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
    if (schema.oneOf === undefined) {
      return null;
    }
    var validIndex = null;
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
      oldUnknownPropertyPaths = this.unknownPropertyPaths;
      oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    for (var i = 0; i < schema.oneOf.length; i++) {
      if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = {};
        this.knownPropertyPaths = {};
      }
      var subSchema = schema.oneOf[i];
      var errorCount = this.errors.length;
      var error = this.validateAll(data, subSchema, [], [
          'oneOf',
          i
        ], dataPointerPath);
      if (error === null && errorCount === this.errors.length) {
        if (validIndex === null) {
          validIndex = i;
        } else {
          this.errors = this.errors.slice(0, startErrorCount);
          return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {
            index1: validIndex,
            index2: i
          }, '', '/oneOf');
        }
        if (this.trackUnknownProperties) {
          for (var knownKey in this.knownPropertyPaths) {
            oldKnownPropertyPaths[knownKey] = true;
            delete oldUnknownPropertyPaths[knownKey];
          }
          for (var unknownKey in this.unknownPropertyPaths) {
            if (!oldKnownPropertyPaths[unknownKey]) {
              oldUnknownPropertyPaths[unknownKey] = true;
            }
          }
        }
      } else if (error) {
        errors.push(error.prefixWith(null, '' + i).prefixWith(null, 'oneOf'));
      }
    }
    if (this.trackUnknownProperties) {
      this.unknownPropertyPaths = oldUnknownPropertyPaths;
      this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (validIndex === null) {
      errors = errors.concat(this.errors.slice(startErrorCount));
      this.errors = this.errors.slice(0, startErrorCount);
      return this.createError(ErrorCodes.ONE_OF_MISSING, {}, '', '/oneOf', errors);
    } else {
      this.errors = this.errors.slice(0, startErrorCount);
    }
    return null;
  };
  ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
    if (schema.not === undefined) {
      return null;
    }
    var oldErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
      oldUnknownPropertyPaths = this.unknownPropertyPaths;
      oldKnownPropertyPaths = this.knownPropertyPaths;
      this.unknownPropertyPaths = {};
      this.knownPropertyPaths = {};
    }
    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
    var notErrors = this.errors.slice(oldErrorCount);
    this.errors = this.errors.slice(0, oldErrorCount);
    if (this.trackUnknownProperties) {
      this.unknownPropertyPaths = oldUnknownPropertyPaths;
      this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (error === null && notErrors.length === 0) {
      return this.createError(ErrorCodes.NOT_PASSED, {}, '', '/not');
    }
    return null;
  };
  // parseURI() and resolveUrl() are from https://gist.github.com/1088850
  //   -  released as public domain by author ("Yaffle") - see comments on gist
  function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return m ? {
      href: m[0] || '',
      protocol: m[1] || '',
      authority: m[2] || '',
      host: m[3] || '',
      hostname: m[4] || '',
      port: m[5] || '',
      pathname: m[6] || '',
      search: m[7] || '',
      hash: m[8] || ''
    } : null;
  }
  function resolveUrl(base, href) {
    // RFC 3986
    function removeDotSegments(input) {
      var output = [];
      input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
        if (p === '/..') {
          output.pop();
        } else {
          output.push(p);
        }
      });
      return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
    }
    href = parseURI(href || '');
    base = parseURI(base || '');
    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
  }
  function getDocumentUri(uri) {
    return uri.split('#')[0];
  }
  function normSchema(schema, baseUri) {
    if (schema && typeof schema === 'object') {
      if (baseUri === undefined) {
        baseUri = schema.id;
      } else if (typeof schema.id === 'string') {
        baseUri = resolveUrl(baseUri, schema.id);
        schema.id = baseUri;
      }
      if (Array.isArray(schema)) {
        for (var i = 0; i < schema.length; i++) {
          normSchema(schema[i], baseUri);
        }
      } else {
        if (typeof schema['$ref'] === 'string') {
          schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
        }
        for (var key in schema) {
          if (key !== 'enum') {
            normSchema(schema[key], baseUri);
          }
        }
      }
    }
  }
  var ErrorCodes = {
      INVALID_TYPE: 0,
      ENUM_MISMATCH: 1,
      ANY_OF_MISSING: 10,
      ONE_OF_MISSING: 11,
      ONE_OF_MULTIPLE: 12,
      NOT_PASSED: 13,
      NUMBER_MULTIPLE_OF: 100,
      NUMBER_MINIMUM: 101,
      NUMBER_MINIMUM_EXCLUSIVE: 102,
      NUMBER_MAXIMUM: 103,
      NUMBER_MAXIMUM_EXCLUSIVE: 104,
      STRING_LENGTH_SHORT: 200,
      STRING_LENGTH_LONG: 201,
      STRING_PATTERN: 202,
      OBJECT_PROPERTIES_MINIMUM: 300,
      OBJECT_PROPERTIES_MAXIMUM: 301,
      OBJECT_REQUIRED: 302,
      OBJECT_ADDITIONAL_PROPERTIES: 303,
      OBJECT_DEPENDENCY_KEY: 304,
      ARRAY_LENGTH_SHORT: 400,
      ARRAY_LENGTH_LONG: 401,
      ARRAY_UNIQUE: 402,
      ARRAY_ADDITIONAL_ITEMS: 403,
      FORMAT_CUSTOM: 500,
      KEYWORD_CUSTOM: 501,
      CIRCULAR_REFERENCE: 600,
      UNKNOWN_PROPERTY: 1000
    };
  var ErrorCodeLookup = {};
  for (var key in ErrorCodes) {
    ErrorCodeLookup[ErrorCodes[key]] = key;
  }
  var ErrorMessagesDefault = {
      INVALID_TYPE: 'invalid type: {type} (expected {expected})',
      ENUM_MISMATCH: 'No enum match for: {value}',
      ANY_OF_MISSING: 'Data does not match any schemas from "anyOf"',
      ONE_OF_MISSING: 'Data does not match any schemas from "oneOf"',
      ONE_OF_MULTIPLE: 'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',
      NOT_PASSED: 'Data matches schema from "not"',
      NUMBER_MULTIPLE_OF: 'Value {value} is not a multiple of {multipleOf}',
      NUMBER_MINIMUM: 'Value {value} is less than minimum {minimum}',
      NUMBER_MINIMUM_EXCLUSIVE: 'Value {value} is equal to exclusive minimum {minimum}',
      NUMBER_MAXIMUM: 'Value {value} is greater than maximum {maximum}',
      NUMBER_MAXIMUM_EXCLUSIVE: 'Value {value} is equal to exclusive maximum {maximum}',
      STRING_LENGTH_SHORT: 'String is too short ({length} chars), minimum {minimum}',
      STRING_LENGTH_LONG: 'String is too long ({length} chars), maximum {maximum}',
      STRING_PATTERN: 'String does not match pattern: {pattern}',
      OBJECT_PROPERTIES_MINIMUM: 'Too few properties defined ({propertyCount}), minimum {minimum}',
      OBJECT_PROPERTIES_MAXIMUM: 'Too many properties defined ({propertyCount}), maximum {maximum}',
      OBJECT_REQUIRED: 'Missing required property: {key}',
      OBJECT_ADDITIONAL_PROPERTIES: 'Additional properties not allowed',
      OBJECT_DEPENDENCY_KEY: 'Dependency failed - key must exist: {missing} (due to key: {key})',
      ARRAY_LENGTH_SHORT: 'Array is too short ({length}), minimum {minimum}',
      ARRAY_LENGTH_LONG: 'Array is too long ({length}), maximum {maximum}',
      ARRAY_UNIQUE: 'Array items are not unique (indices {match1} and {match2})',
      ARRAY_ADDITIONAL_ITEMS: 'Additional items not allowed',
      FORMAT_CUSTOM: 'Format validation failed ({message})',
      KEYWORD_CUSTOM: 'Keyword failed: {key} ({message})',
      CIRCULAR_REFERENCE: 'Circular $refs: {urls}',
      UNKNOWN_PROPERTY: 'Unknown property (not in schema)'
    };
  function ValidationError(code, message, dataPath, schemaPath, subErrors) {
    Error.call(this);
    if (code === undefined) {
      throw new Error('No code supplied for error: ' + message);
    }
    this.message = message;
    this.code = code;
    this.dataPath = dataPath || '';
    this.schemaPath = schemaPath || '';
    this.subErrors = subErrors || null;
    var err = new Error(this.message);
    this.stack = err.stack || err.stacktrace;
    if (!this.stack) {
      try {
        throw err;
      } catch (err) {
        this.stack = err.stack || err.stacktrace;
      }
    }
  }
  ValidationError.prototype = Object.create(Error.prototype);
  ValidationError.prototype.constructor = ValidationError;
  ValidationError.prototype.name = 'ValidationError';
  ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
    if (dataPrefix !== null) {
      dataPrefix = dataPrefix.replace(/~/g, '~0').replace(/\//g, '~1');
      this.dataPath = '/' + dataPrefix + this.dataPath;
    }
    if (schemaPrefix !== null) {
      schemaPrefix = schemaPrefix.replace(/~/g, '~0').replace(/\//g, '~1');
      this.schemaPath = '/' + schemaPrefix + this.schemaPath;
    }
    if (this.subErrors !== null) {
      for (var i = 0; i < this.subErrors.length; i++) {
        this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
      }
    }
    return this;
  };
  function isTrustedUrl(baseUrl, testUrl) {
    if (testUrl.substring(0, baseUrl.length) === baseUrl) {
      var remainder = testUrl.substring(baseUrl.length);
      if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === '/' || remainder.charAt(0) === '#' || remainder.charAt(0) === '?') {
        return true;
      }
    }
    return false;
  }
  var languages = {};
  function createApi(language) {
    var globalContext = new ValidatorContext();
    var currentLanguage = language || 'en';
    var api = {
        addFormat: function () {
          globalContext.addFormat.apply(globalContext, arguments);
        },
        language: function (code) {
          if (!code) {
            return currentLanguage;
          }
          if (!languages[code]) {
            code = code.split('-')[0];  // fall back to base language
          }
          if (languages[code]) {
            currentLanguage = code;
            return code;  // so you can tell if fall-back has happened
          }
          return false;
        },
        addLanguage: function (code, messageMap) {
          var key;
          for (key in ErrorCodes) {
            if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
              messageMap[ErrorCodes[key]] = messageMap[key];
            }
          }
          var rootCode = code.split('-')[0];
          if (!languages[rootCode]) {
            // use for base language if not yet defined
            languages[code] = messageMap;
            languages[rootCode] = messageMap;
          } else {
            languages[code] = Object.create(languages[rootCode]);
            for (key in messageMap) {
              if (typeof languages[rootCode][key] === 'undefined') {
                languages[rootCode][key] = messageMap[key];
              }
              languages[code][key] = messageMap[key];
            }
          }
          return this;
        },
        freshApi: function (language) {
          var result = createApi();
          if (language) {
            result.language(language);
          }
          return result;
        },
        validate: function (data, schema, checkRecursive, banUnknownProperties) {
          var context = new ValidatorContext(globalContext, false, languages[currentLanguage], checkRecursive, banUnknownProperties);
          if (typeof schema === 'string') {
            schema = { '$ref': schema };
          }
          context.addSchema('', schema);
          var error = context.validateAll(data, schema, null, null, '');
          if (!error && banUnknownProperties) {
            error = context.banUnknownProperties();
          }
          this.error = error;
          this.missing = context.missing;
          this.valid = error === null;
          return this.valid;
        },
        validateResult: function () {
          var result = {};
          this.validate.apply(result, arguments);
          return result;
        },
        validateMultiple: function (data, schema, checkRecursive, banUnknownProperties) {
          var context = new ValidatorContext(globalContext, true, languages[currentLanguage], checkRecursive, banUnknownProperties);
          if (typeof schema === 'string') {
            schema = { '$ref': schema };
          }
          context.addSchema('', schema);
          context.validateAll(data, schema, null, null, '');
          if (banUnknownProperties) {
            context.banUnknownProperties();
          }
          var result = {};
          result.errors = context.errors;
          result.missing = context.missing;
          result.valid = result.errors.length === 0;
          return result;
        },
        addSchema: function () {
          return globalContext.addSchema.apply(globalContext, arguments);
        },
        getSchema: function () {
          return globalContext.getSchema.apply(globalContext, arguments);
        },
        getSchemaMap: function () {
          return globalContext.getSchemaMap.apply(globalContext, arguments);
        },
        getSchemaUris: function () {
          return globalContext.getSchemaUris.apply(globalContext, arguments);
        },
        getMissingUris: function () {
          return globalContext.getMissingUris.apply(globalContext, arguments);
        },
        dropSchemas: function () {
          globalContext.dropSchemas.apply(globalContext, arguments);
        },
        defineKeyword: function () {
          globalContext.defineKeyword.apply(globalContext, arguments);
        },
        defineError: function (codeName, codeNumber, defaultMessage) {
          if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
            throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
          }
          if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {
            throw new Error('Code number must be an integer > 10000');
          }
          if (typeof ErrorCodes[codeName] !== 'undefined') {
            throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
          }
          if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
            throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
          }
          ErrorCodes[codeName] = codeNumber;
          ErrorCodeLookup[codeNumber] = codeName;
          ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
          for (var langCode in languages) {
            var language = languages[langCode];
            if (language[codeName]) {
              language[codeNumber] = language[codeNumber] || language[codeName];
            }
          }
        },
        reset: function () {
          globalContext.reset();
          this.error = null;
          this.missing = [];
          this.valid = true;
        },
        missing: [],
        error: null,
        valid: true,
        normSchema: normSchema,
        resolveUrl: resolveUrl,
        getDocumentUri: getDocumentUri,
        errorCodes: ErrorCodes
      };
    return api;
  }
  var tv4 = createApi();
  tv4.addLanguage('en-gb', ErrorMessagesDefault);
  //legacy property
  tv4.tv4 = tv4;
  return tv4;  // used by _header.js to globalise.
}));
'use strict';
;
!function (undefined) {
  var ObjectPath = {
      parse: function (str) {
        if (typeof str !== 'string') {
          throw new TypeError('ObjectPath.parse must be passed a string');
        }
        var i = 0;
        var parts = [];
        var d, b, q, c;
        while (i < str.length) {
          d = str.indexOf('.', i);
          b = str.indexOf('[', i);
          // we've reached the end
          if (d === -1 && b === -1) {
            parts.push(str.slice(i, str.length));
            i = str.length;
          }  // dots
          else if (b === -1 || d !== -1 && d < b) {
            parts.push(str.slice(i, d));
            i = d + 1;
          }  // brackets
          else {
            if (b > i) {
              parts.push(str.slice(i, b));
              i = b;
            }
            q = str.slice(b + 1, b + 2);
            if (q !== '"' && q !== '\'') {
              c = str.indexOf(']', b);
              if (c === -1)
                c = str.length;
              parts.push(str.slice(i + 1, c));
              i = str.slice(c + 1, c + 2) === '.' ? c + 2 : c + 1;
            } else {
              c = str.indexOf(q + ']', b);
              if (c === -1)
                c = str.length;
              while (str.slice(c - 1, c) === '\\' && b < str.length) {
                b++;
                c = str.indexOf(q + ']', b);
              }
              parts.push(str.slice(i + 2, c).replace(new RegExp('\\' + q, 'g'), q));
              i = str.slice(c + 2, c + 3) === '.' ? c + 3 : c + 2;
            }
          }
        }
        return parts;
      },
      stringify: function (arr, quote) {
        if (!Array.isArray(arr))
          arr = [arr.toString()];
        quote = quote === '"' ? '"' : '\'';
        return arr.map(function (n) {
          return '[' + quote + n.toString().replace(new RegExp(quote, 'g'), '\\' + quote) + quote + ']';
        }).join('');
      },
      normalize: function (data, quote) {
        return ObjectPath.stringify(Array.isArray(data) ? data : ObjectPath.parse(data), quote);
      }
    };
  // AMD
  if (typeof define === 'function' && define.amd) {
    define(function () {
      return ObjectPath;
    });
  }  // CommonJS
  else if (typeof exports === 'object') {
    exports.ObjectPath = ObjectPath;
  }  // Angular
  else if (typeof angular === 'object') {
    angular.module('ObjectPath', []).provider('ObjectPath', function () {
      this.parse = ObjectPath.parse;
      this.stringify = ObjectPath.stringify;
      this.normalize = ObjectPath.normalize;
      this.$get = function () {
        return ObjectPath;
      };
    });
  }  // Browser global.
  else {
    window.ObjectPath = ObjectPath;
  }
}();
var deps = ['ObjectPath'];
try {
  angular.module('ngSanitize'), deps.push('ngSanitize');
} catch (e) {
}
try {
  angular.module('ui.sortable'), deps.push('ui.sortable');
} catch (e) {
}
try {
  angular.module('angularSpectrumColorpicker'), deps.push('angularSpectrumColorpicker');
} catch (e) {
}
angular.module('schemaForm', deps), angular.module('schemaForm').provider('sfPath', [
  'ObjectPathProvider',
  function (e) {
    var r = { parse: e.parse };
    r.stringify = 1 === angular.version.major && angular.version.minor < 3 ? function (e) {
      return Array.isArray(e) ? e.join('.') : e.toString();
    } : e.stringify, r.normalize = function (e, t) {
      return r.stringify(Array.isArray(e) ? e : r.parse(e), t);
    }, this.parse = r.parse, this.stringify = r.stringify, this.normalize = r.normalize, this.$get = function () {
      return r;
    };
  }
]), angular.module('schemaForm').factory('sfSelect', [
  'sfPath',
  function (e) {
    var r = /^\d+$/;
    return function (t, a, n) {
      a || (a = this);
      var i = 'string' == typeof t ? e.parse(t) : t;
      if ('undefined' != typeof n && 1 === i.length)
        return a[i[0]] = n, a;
      'undefined' != typeof n && 'undefined' == typeof a[i[0]] && (a[i[0]] = i.length > 2 && r.test(i[1]) ? [] : {});
      for (var o = a[i[0]], u = 1; u < i.length; u++) {
        if ('' === i[u])
          return void 0;
        if ('undefined' != typeof n) {
          if (u === i.length - 1)
            return o[i[u]] = n, n;
          var l = o[i[u]];
          ('undefined' == typeof l || null === l) && (l = r.test(i[u + 1]) ? [] : {}, o[i[u]] = l), o = l;
        } else
          o && (o = o[i[u]]);
      }
      return o;
    };
  }
]), angular.module('schemaForm').provider('schemaFormDecorators', [
  '$compileProvider',
  'sfPathProvider',
  function (e, r) {
    var t = '', a = {}, n = function (e, r) {
        'sfDecorator' === e && (e = t);
        for (var n = a[e], i = n.rules, o = 0; o < i.length; o++) {
          var u = i[o](r);
          if (u)
            return u;
        }
        return n.mappings[r.type] ? n.mappings[r.type] : n.mappings['default'];
      }, i = function (t) {
        e.directive(t, [
          '$parse',
          '$compile',
          '$http',
          '$templateCache',
          function (e, a, i, o) {
            return {
              restrict: 'AE',
              replace: !1,
              transclude: !1,
              scope: !0,
              require: '?^sfSchema',
              link: function (e, u, l, s) {
                var c = e.$watch(l.form, function (l) {
                    if (l) {
                      e.form = l;
                      var s = n(t, l);
                      i.get(s, { cache: o }).then(function (t) {
                        var n = l.key ? r.stringify(l.key).replace(/"/g, '&quot;') : '', i = t.data.replace(/\$\$value\$\$/g, 'model' + ('[' !== n[0] ? '.' : '') + n);
                        u.html(i), a(u.contents())(e);
                      }), c();
                    }
                  });
                e.showTitle = function () {
                  return e.form && e.form.notitle !== !0 && e.form.title;
                }, e.listToCheckboxValues = function (e) {
                  var r = {};
                  return angular.forEach(e, function (e) {
                    r[e] = !0;
                  }), r;
                }, e.checkboxValuesToList = function (e) {
                  var r = [];
                  return angular.forEach(e, function (e, t) {
                    e && r.push(t);
                  }), r;
                }, e.buttonClick = function (r, t) {
                  angular.isFunction(t.onClick) ? t.onClick(r, t) : angular.isString(t.onClick) && (s ? s.evalInParentScope(t.onClick, {
                    $event: r,
                    form: t
                  }) : e.$eval(t.onClick, {
                    $event: r,
                    form: t
                  }));
                }, e.evalExpr = function (r, t) {
                  return s ? s.evalInParentScope(r, t) : e.$eval(r, t);
                }, e.evalInScope = function (r, t) {
                  return r ? e.$eval(r, t) : void 0;
                }, e.errorMessage = function (r) {
                  return e.form.validationMessage ? r ? angular.isString(e.form.validationMessage) ? e.form.validationMessage : e.form.validationMessage[r.code] || e.form.validationMessage['default'] : e.form.validationMessage.number || e.form.validationMessage['default'] || e.form.validationMessage : r ? r.message : 'Not a number';
                };
              }
            };
          }
        ]);
      }, o = function (r, t, a) {
        a = angular.isDefined(a) ? a : !1, e.directive('sf' + angular.uppercase(r[0]) + r.substr(1), function () {
          return {
            restrict: 'EAC',
            scope: !0,
            replace: !0,
            transclude: a,
            template: '<sf-decorator form="form"></sf-decorator>',
            link: function (e, t, a) {
              var n = {
                  items: 'c',
                  titleMap: 'c',
                  schema: 'c'
                }, i = { type: r }, o = !0;
              angular.forEach(a, function (r, t) {
                if ('$' !== t[0] && 0 !== t.indexOf('ng') && 'sfField' !== t) {
                  var u = function (r) {
                    angular.isDefined(r) && r !== i[t] && (i[t] = r, o && i.type && (i.key || angular.isUndefined(a.key)) && (e.form = i, o = !1));
                  };
                  'model' === t ? e.$watch(r, function (r) {
                    r && e.model !== r && (e.model = r);
                  }) : 'c' === n[t] ? e.$watchCollection(r, u) : a.$observe(t, u);
                }
              });
            }
          };
        });
      };
    this.createDecorator = function (e, r, n) {
      a[e] = {
        mappings: r || {},
        rules: n || []
      }, a[t] || (t = e), i(e);
    }, this.createDirective = o, this.createDirectives = function (e) {
      angular.forEach(e, function (e, r) {
        o(r, e);
      });
    }, this.directive = function (e) {
      return e = e || t, a[e];
    }, this.addMapping = function (e, r, t) {
      a[e] && (a[e].mappings[r] = t);
    }, this.$get = function () {
      return {
        directive: function (e) {
          return a[e];
        },
        defaultDecorator: t
      };
    }, i('sfDecorator');
  }
]), angular.module('schemaForm').provider('schemaForm', [
  'sfPathProvider',
  function (e) {
    var r = function (e) {
        var r = [];
        return e.forEach(function (e) {
          r.push({
            name: e,
            value: e
          });
        }), r;
      }, t = function (e, r) {
        if (!angular.isArray(e)) {
          var t = [];
          return r ? angular.forEach(r, function (r) {
            t.push({
              name: e[r],
              value: r
            });
          }) : angular.forEach(e, function (e, r) {
            t.push({
              name: e,
              value: r
            });
          }), t;
        }
        return e;
      }, a = function (e, r, t) {
        var a = d[r.type];
        if (a)
          for (var n, i = 0; i < a.length; i++)
            if (n = a[i](e, r, t))
              return n;
      }, n = function (e, r, a) {
        a = a || {};
        var n = a.global && a.global.formDefaults ? angular.copy(a.global.formDefaults) : {};
        return n.title = a.global && a.global.supressPropertyTitles === !0 ? r.title : r.title || e, r.description && (n.description = r.description), (a.required === !0 || r.required === !0) && (n.required = !0), r.maxLength && (n.maxlength = r.maxLength), r.minLength && (n.minlength = r.maxLength), (r.readOnly || r.readonly) && (n.readonly = !0), r.minimum && (n.minimum = r.minimum + (r.exclusiveMinimum ? 1 : 0)), r.maximum && (n.maximum = r.maximum - (r.exclusiveMaximum ? 1 : 0)), r.validationMessage && (n.validationMessage = r.validationMessage), r.enumNames && (n.titleMap = t(r.enumNames, r['enum'])), n.schema = r, n.ngModelOptions = n.ngModelOptions || {}, n;
      }, i = function (r, t, a) {
        if ('string' === t.type && !t['enum']) {
          var i = n(r, t, a);
          return i.key = a.path, i.type = 'text', a.lookup[e.stringify(a.path)] = i, i;
        }
      }, o = function (r, t, a) {
        if ('number' === t.type) {
          var i = n(r, t, a);
          return i.key = a.path, i.type = 'number', a.lookup[e.stringify(a.path)] = i, i;
        }
      }, u = function (r, t, a) {
        if ('integer' === t.type) {
          var i = n(r, t, a);
          return i.key = a.path, i.type = 'number', a.lookup[e.stringify(a.path)] = i, i;
        }
      }, l = function (r, t, a) {
        if ('boolean' === t.type) {
          var i = n(r, t, a);
          return i.key = a.path, i.type = 'checkbox', a.lookup[e.stringify(a.path)] = i, i;
        }
      }, s = function (t, a, i) {
        if ('string' === a.type && a['enum']) {
          var o = n(t, a, i);
          return o.key = i.path, o.type = 'select', o.titleMap || (o.titleMap = r(a['enum'])), i.lookup[e.stringify(i.path)] = o, o;
        }
      }, c = function (t, a, i) {
        if ('array' === a.type && a.items && a.items['enum']) {
          var o = n(t, a, i);
          return o.key = i.path, o.type = 'checkboxes', o.titleMap || (o.titleMap = r(a.items['enum'])), i.lookup[e.stringify(i.path)] = o, o;
        }
      }, f = function (r, t, i) {
        if ('object' === t.type) {
          var o = n(r, t, i);
          return o.type = 'fieldset', o.items = [], i.lookup[e.stringify(i.path)] = o, angular.forEach(t.properties, function (r, n) {
            var u = i.path.slice();
            if (u.push(n), i.ignore[e.stringify(u)] !== !0) {
              var l = t.required && -1 !== t.required.indexOf(n), s = a(n, r, {
                  path: u,
                  required: l || !1,
                  lookup: i.lookup,
                  ignore: i.ignore
                });
              s && o.items.push(s);
            }
          }), o;
        }
      }, m = function (r, t, i) {
        if ('array' === t.type) {
          var o = n(r, t, i);
          o.type = 'array', o.key = i.path, i.lookup[e.stringify(i.path)] = o;
          var u = t.required && -1 !== t.required.indexOf(i.path[i.path.length - 1]), l = i.path.slice();
          return l.push(''), o.items = [a(r, t.items, {
              path: l,
              required: u || !1,
              lookup: i.lookup,
              ignore: i.ignore,
              global: i.global
            })], o;
        }
      }, d = {
        string: [
          s,
          i
        ],
        object: [f],
        number: [o],
        integer: [u],
        'boolean': [l],
        array: [
          c,
          m
        ]
      }, p = function (e) {
        return e;
      };
    this.defaults = d, this.stdFormObj = n, this.defaultFormDefinition = a, this.postProcess = function (e) {
      p = e;
    }, this.appendRule = function (e, r) {
      d[e] || (d[e] = []), d[e].push(r);
    }, this.prependRule = function (e, r) {
      d[e] || (d[e] = []), d[e].unshift(r);
    }, this.createStandardForm = n, this.$get = function () {
      var r = {};
      return r.merge = function (a, n, i, o, u) {
        n = n || ['*'], o = o || {}, u = u || a.readonly || a.readOnly;
        var l = r.defaults(a, i, o), s = n.indexOf('*');
        -1 !== s && (n = n.slice(0, s).concat(l.form).concat(n.slice(s + 1)));
        var c = l.lookup;
        return p(n.map(function (n) {
          if ('string' == typeof n && (n = { key: n }), n.key && 'string' == typeof n.key && (n.key = e.parse(n.key)), n.titleMap && (n.titleMap = t(n.titleMap)), n.itemForm) {
            n.items = [];
            var l = e.stringify(n.key), s = c[l];
            angular.forEach(s.items, function (e) {
              var r = angular.copy(n.itemForm);
              r.key = e.key, n.items.push(r);
            });
          }
          if (n.key) {
            var f = e.stringify(n.key);
            c[f] && (n = angular.extend(c[f], n));
          }
          return u === !0 && (n.readonly = !0), n.items && (n.items = r.merge(a, n.items, i, o, n.readonly)), n.tabs && angular.forEach(n.tabs, function (e) {
            e.items = r.merge(a, e.items, i, o, n.readonly);
          }), 'checkbox' === n.type && angular.isUndefined(n.schema['default']) && (n.schema['default'] = !1), n;
        }));
      }, r.defaults = function (e, r, t) {
        var n = [], i = {};
        if (r = r || {}, t = t || {}, 'object' !== e.type)
          throw new Error('Not implemented. Only type "object" allowed at root level of schema.');
        return angular.forEach(e.properties, function (o, u) {
          if (r[u] !== !0) {
            var l = e.required && -1 !== e.required.indexOf(u), s = a(u, o, {
                path: [u],
                lookup: i,
                ignore: r,
                required: l,
                global: t
              });
            s && n.push(s);
          }
        }), {
          form: n,
          lookup: i
        };
      }, r.traverseSchema = function (e, r, t, a) {
        a = angular.isDefined(a) ? a : !0, t = t || [];
        var n = function (e, r, t) {
          if (r(e, t), angular.forEach(e.properties, function (e, a) {
              var i = t.slice();
              i.push(a), n(e, r, i);
            }), !a && e.items) {
            var i = t.slice();
            i.push(''), n(e.items, r, i);
          }
        };
        n(e, r, t || []);
      }, r.traverseForm = function (e, t) {
        t(e), angular.forEach(e.items, function (e) {
          r.traverseForm(e, t);
        }), e.tabs && angular.forEach(e.tabs, function (e) {
          angular.forEach(e.items, function (e) {
            r.traverseForm(e, t);
          });
        });
      }, r;
    };
  }
]), angular.module('schemaForm').factory('sfValidator', [function () {
    var e = {};
    return e.validate = function (e, r) {
      if (!e)
        return { valid: !0 };
      var t = e.schema;
      if (!t)
        return { valid: !0 };
      '' === r && (r = void 0), 'number' === e.type && null === r && (r = void 0);
      var a = {
          type: 'object',
          properties: {}
        }, n = e.key[e.key.length - 1];
      a.properties[n] = t, e.required && (a.required = [n]);
      var i = {};
      return angular.isDefined(r) && (i[n] = r), tv4.validateResult(i, a);
    }, e;
  }]), angular.module('schemaForm').directive('sfArray', [
  'sfSelect',
  'schemaForm',
  'sfValidator',
  function (e, r, t) {
    var a = function (e) {
      return function (r) {
        r.key && (r.key[r.key.indexOf('')] = e);
      };
    };
    return {
      restrict: 'A',
      scope: !0,
      require: '?ngModel',
      link: function (n, i, o, u) {
        var l = {}, s = n.$watch(o.sfArray, function (i) {
            var o = e(i.key, n.model);
            if (angular.isUndefined(o) && (o = [], e(i.key, n.model, o)), n.modelArray = o, i.items) {
              var c = i.items[0];
              i.items.length > 1 && (c = {
                type: 'section',
                items: i.items.map(function (e) {
                  return e.ngModelOptions = i.ngModelOptions, e.readonly = i.readonly, e;
                })
              });
            }
            if (n.copyWithIndex = function (e) {
                if (!l[e] && c) {
                  var t = angular.copy(c);
                  t.arrayIndex = e, r.traverseForm(t, a(e)), l[e] = t;
                }
                return l[e];
              }, n.appendToArray = function () {
                var t = o.length, a = n.copyWithIndex(t);
                if (r.traverseForm(a, function (r) {
                    r.key && angular.isDefined(r['default']) && e(r.key, n.model, r['default']);
                  }), t === o.length) {
                  var u, l = e('schema.items.type', i);
                  'object' === l ? u = {} : 'array' === l && (u = []), o.push(u);
                }
                return n.validateArray && n.validateArray(), o;
              }, n.deleteFromArray = function (e) {
                return o.splice(e, 1), n.validateArray && n.validateArray(), o;
              }, i.titleMap || i.startEmpty === !0 || 0 !== o.length || n.appendToArray(), i.titleMap && i.titleMap.length > 0) {
              n.titleMapValues = [];
              var f = function (e) {
                n.titleMapValues = [], e = e || [], i.titleMap.forEach(function (r) {
                  n.titleMapValues.push(-1 !== e.indexOf(r.value));
                });
              };
              f(n.modelArray), n.$watchCollection('modelArray', f), n.$watchCollection('titleMapValues', function (e) {
                if (e) {
                  for (var r = n.modelArray; r.length > 0;)
                    r.shift();
                  i.titleMap.forEach(function (t, a) {
                    e[a] && r.push(t.value);
                  });
                }
              });
            }
            if (u) {
              var m;
              n.validateArray = function () {
                var e = t.validate(i, n.modelArray.length > 0 ? n.modelArray : void 0);
                e.valid !== !1 || !e.error || '' !== e.error.dataPath && e.error.dataPath !== '/' + i.key[i.key.length - 1] ? u.$setValidity('schema', !0) : (u.$setViewValue(n.modelArray), m = e.error, u.$setValidity('schema', !1));
              }, n.$on('schemaFormValidate', n.validateArray), n.hasSuccess = function () {
                return u.$valid && !u.$pristine;
              }, n.hasError = function () {
                return u.$invalid;
              }, n.schemaError = function () {
                return m;
              };
            }
            s();
          });
      }
    };
  }
]), angular.module('schemaForm').directive('sfChanged', function () {
  return {
    require: 'ngModel',
    restrict: 'AC',
    scope: !1,
    link: function (e, r, t, a) {
      var n = e.$eval(t.sfChanged);
      n && n.onChange && a.$viewChangeListeners.push(function () {
        angular.isFunction(n.onChange) ? n.onChange(a.$modelValue, n) : e.evalExpr(n.onChange, {
          modelValue: a.$modelValue,
          form: n
        });
      });
    }
  };
}), angular.module('schemaForm').directive('sfSchema', [
  '$compile',
  'schemaForm',
  'schemaFormDecorators',
  'sfSelect',
  function (e, r, t, a) {
    var n = /[A-Z]/g, i = function (e, r) {
        return r = r || '_', e.replace(n, function (e, t) {
          return (t ? r : '') + e.toLowerCase();
        });
      };
    return {
      scope: {
        schema: '=sfSchema',
        initialForm: '=sfForm',
        model: '=sfModel',
        options: '=sfOptions'
      },
      controller: [
        '$scope',
        function (e) {
          this.evalInParentScope = function (r, t) {
            return e.$parent.$eval(r, t);
          };
        }
      ],
      replace: !1,
      restrict: 'A',
      transclude: !0,
      require: '?form',
      link: function (n, o, u, l, s) {
        n.formCtrl = l;
        var c = {};
        s(n, function (e) {
          if (e.addClass('schema-form-ignore'), o.prepend(e), o[0].querySelectorAll) {
            var r = o[0].querySelectorAll('[ng-model]');
            if (r)
              for (var t = 0; t < r.length; t++) {
                var a = r[t].getAttribute('ng-model');
                c[a.substring(a.indexOf('.') + 1)] = !0;
              }
          }
        });
        var f = {};
        n.$watch(function () {
          var l = n.schema, s = n.initialForm || ['*'];
          if (s && l && l.type && (f.form !== s || f.schema !== l) && Object.keys(l.properties).length > 0) {
            f.schema = l, f.form = s;
            var m = r.merge(l, s, c, n.options), d = document.createDocumentFragment();
            n.schemaForm = {
              form: m,
              schema: l
            }, o.children(':not(.schema-form-ignore)').remove(), angular.forEach(m, function (e, r) {
              var a = document.createElement(u.sfDecorator || i(t.defaultDecorator, '-'));
              a.setAttribute('form', 'schemaForm.form[' + r + ']');
              var n;
              try {
                n = o[0].querySelector('*[sf-insert-field="' + e.key + '"]');
              } catch (l) {
                n = null;
              }
              n ? (n.innerHTML = '', n.appendChild(a)) : d.appendChild(a);
            }), o[0].appendChild(d), e(o.children())(n), r.traverseSchema(l, function (e, r) {
              if (angular.isDefined(e['default'])) {
                var t = a(r, n.model);
                angular.isUndefined(t) && a(r, n.model, e['default']);
              }
            });
          }
        });
      }
    };
  }
]), angular.module('schemaForm').directive('schemaValidate', [
  'sfValidator',
  function (e) {
    return {
      restrict: 'A',
      scope: !1,
      priority: 1000,
      require: 'ngModel',
      link: function (r, t, a, n) {
        r.ngModel = n;
        var i = null, o = function () {
            return u || (u = r.$eval(a.schemaValidate)), u;
          }, u = o();
        n.$validators ? n.$validators.schema = function (r) {
          var t = e.validate(o(), r);
          return i = t.error, t.valid;
        } : n.$parsers.push(function (r) {
          if (u = o(), !u)
            return r;
          var t = e.validate(u, r);
          return t.valid ? (n.$setValidity('schema', !0), r) : (n.$setValidity('schema', !1), void (i = t.error));
        }), r.$on('schemaFormValidate', function () {
          n.$validate ? (n.$validate(), n.$invalid && (n.$dirty = !0, n.$pristine = !1)) : n.$setViewValue(n.$viewValue);
        }), r.hasSuccess = function () {
          return n.$valid && (!n.$pristine || !n.$isEmpty(n.$modelValue));
        }, r.hasError = function () {
          return n.$invalid && !n.$pristine;
        }, r.schemaError = function () {
          return i;
        };
      }
    };
  }
]);
angular.module('schemaForm').run([
  '$templateCache',
  function (e) {
    e.put('directives/decorators/bootstrap/actions-trcl.html', '<div class="btn-group" ng-transclude=""></div>'), e.put('directives/decorators/bootstrap/actions.html', '<div class="btn-group"><input ng-repeat-start="item in form.items" type="submit" class="btn {{ item.style || \'btn-primary\' }}" value="{{item.title}}" ng-if="item.type === \'submit\'"><button ng-repeat-end="" class="btn {{ item.style || \'btn-default\' }}" type="button" ng-disabled="form.readonly" ng-if="item.type !== \'submit\'" ng-click="buttonClick($event,item)">{{item.title}}</button></div>'), e.put('directives/decorators/bootstrap/array.html', '<div sf-array="form" ng-model="$$value$$" ng-model-options="form.ngModelOptions"><h3 ng-show="form.title && form.notitle !== true">{{ form.title }}</h3><ol class="list-group" ng-model="modelArray" ui-sortable=""><li class="list-group-item" ng-repeat="item in modelArray track by $index"><button ng-hide="form.readonly" ng-click="deleteFromArray($index)" style="position: relative; z-index: 20;" type="button" class="close pull-right"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button><sf-decorator ng-init="arrayIndex = $index" form="copyWithIndex($index)"></sf-decorator></li></ol><div class="clearfix" style="padding: 15px;"><button ng-hide="form.readonly" ng-click="appendToArray()" type="button" class="btn {{ form.style.add || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</button></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'), e.put('directives/decorators/bootstrap/checkbox.html', '<div class="checkbox" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label><input type="checkbox" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form"><span ng-bind-html="form.title"></span></label><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div></div>'), e.put('directives/decorators/bootstrap/checkboxes.html', '<div sf-array="form" ng-model="$$value$$" class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="checkbox" ng-repeat="val in titleMapValues track by $index"><label><input type="checkbox" ng-disabled="form.readonly" sf-changed="form" ng-model="titleMapValues[$index]"><span ng-bind-html="form.titleMap[$index].name"></span></label></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'), e.put('directives/decorators/bootstrap/default.html', '<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false }"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><input ng-show="form.key" type="{{form.type}}" step="any" sf-changed="form" placeholder="{{form.placeholder}}" class="form-control" ng-model-options="form.ngModelOptions" ng-model="$$value$$" ng-disabled="form.readonly" schema-validate="form"><span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'), e.put('directives/decorators/bootstrap/fieldset-trcl.html', '<fieldset ng-disabled="form.readonly"><legend ng-show="form.title">{{ form.title }}</legend><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div><div ng-transclude=""></div></fieldset>'), e.put('directives/decorators/bootstrap/fieldset.html', '<fieldset ng-disabled="form.readonly"><legend ng-show="form.title">{{ form.title }}</legend><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div><sf-decorator ng-repeat="item in form.items" form="item"></sf-decorator></fieldset>'), e.put('directives/decorators/bootstrap/help.html', '<div class="helpvalue" ng-bind-html="form.helpvalue"></div>'), e.put('directives/decorators/bootstrap/radio-buttons.html', '<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><div><label class="control-label" ng-show="showTitle()">{{form.title}}</label></div><div class="btn-group"><label class="btn {{ (item.value === $$value$$) ? form.style.selected || \'btn-primary\' : form.style.unselected || \'btn-primary\'; }}" ng-class="{ active: item.value === $$value$$ }" ng-repeat="item in form.titleMap"><input type="radio" sf-changed="form" style="display: none;" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" ng-value="item.value"><span ng-bind-html="item.name"></span></label></div><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div></div>'), e.put('directives/decorators/bootstrap/radios-inline.html', '<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div><label class="radio-inline" ng-repeat="item in form.titleMap"><input type="radio" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-value="item.value"><span ng-bind-html="item.name"></span></label></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'), e.put('directives/decorators/bootstrap/radios.html', '<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="radio" ng-repeat="item in form.titleMap"><label><input type="radio" sf-changed="form" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" ng-value="item.value"><span ng-bind-html="item.name"></span></label></div><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'), e.put('directives/decorators/bootstrap/readonly.html', '<div class="form-group"><label ng-show="showTitle()">{{form.title}}</label><input ng-if="form.type !== \'textarea\'" type="text" disabled="" class="form-control" value="{{$$value$$}}"><textarea ng-if="form.type === \'textarea\'" disabled="" class="form-control">{{$$value$$}}</textarea><div class="help-block" ng-show="form.description" ng-bind-html="form.description"></div></div>'), e.put('directives/decorators/bootstrap/section.html', '<div ng-if="!form.condition || evalExpr(form.condition,{ model: model, \'arrayIndex\': arrayIndex })"><sf-decorator ng-repeat="item in form.items" form="item"></sf-decorator></div>'), e.put('directives/decorators/bootstrap/select.html', '<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><select ng-model="$$value$$" ng-model-options="form.ngModelOptions" ng-disabled="form.readonly" sf-changed="form" class="form-control" schema-validate="form" ng-options="item.value as item.name for item in form.titleMap"></select><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div>'), e.put('directives/decorators/bootstrap/submit.html', '<div class="form-group"><input type="submit" class="btn {{ form.style || \'btn-primary\' }}" value="{{form.title}}" ng-disabled="form.readonly" ng-if="form.type === \'submit\'"><button class="btn {{ form.style || \'btn-default\' }}" type="button" ng-click="buttonClick($event,form)" ng-disabled="form.readonly" ng-if="form.type !== \'submit\'">{{form.title}}</button></div>'), e.put('directives/decorators/bootstrap/tabarray.html', '<div sf-array="form" ng-init="selected = { tab: 0 }" class="clearfix"><div ng-if="!form.tabType || form.tabType !== \'right\'" ng-class="{\'col-xs-3\': !form.tabType || form.tabType === \'left\'}"><ul class="nav nav-tabs" ng-class="{ \'tabs-left\': !form.tabType || form.tabType === \'left\'}" style="margin-bottom: 15px"><li ng-repeat="item in modelArray track by $index" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{evalExpr(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide="form.readonly" ng-click="$event.preventDefault() || (selected.tab = appendToArray().length - 1)"><a href="#"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</a></li></ul></div><div ng-class="{\'col-xs-9\': !form.tabsType || form.tabsType === \'left\' || form.tabsType === \'right\'}"><div class="tab-content"><div class="tab-pane clearfix" ng-repeat="item in modelArray track by $index" ng-show="selected.tab === $index" ng-class="{active: selected.tab === $index}"><sf-decorator form="copyWithIndex($index)"></sf-decorator><button ng-hide="form.readonly" ng-click="selected.tab = deleteFromArray($index).length - 1" type="button" class="btn {{ form.style.remove || \'btn-default\' }} pull-right"><i class="glyphicon glyphicon-trash"></i> {{ form.remove || \'Remove\'}}</button></div></div></div><div ng-if="form.tabType === \'right\'" class="col-xs-3"><ul class="nav nav-tabs tabs-right" style="margin-bottom: 15px"><li ng-repeat="item in modelArray track by $index" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{evalExpr(form.title,{\'$index\':$index, value: item}) || $index}}</a></li><li ng-hide="form.readonly" ng-click="$event.preventDefault() || appendToArray()"><a href="#"><i class="glyphicon glyphicon-plus"></i> {{ form.add || \'Add\'}}</a></li></ul></div></div>'), e.put('directives/decorators/bootstrap/tabs.html', '<div ng-init="selected = { tab: 0 }"><ul class="nav nav-tabs" style="margin-bottom: 15px"><li ng-repeat="tab in form.tabs" ng-disabled="form.readonly" ng-click="$event.preventDefault() || (selected.tab = $index)" ng-class="{active: selected.tab === $index}"><a href="#">{{ tab.title }}</a></li></ul><div class="tab-content"><div class="tab-pane" ng-disabled="form.readonly" ng-repeat="tab in form.tabs" ng-show="selected.tab === $index" ng-class="{active: selected.tab === $index}"><bootstrap-decorator ng-repeat="item in tab.items" form="item"></bootstrap-decorator></div></div></div>'), e.put('directives/decorators/bootstrap/textarea.html', '<div class="form-group has-feedback" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label ng-show="showTitle()">{{form.title}}</label><textarea class="form-control" sf-changed="form" placeholder="{{form.placeholder}}" ng-disabled="form.readonly" ng-model="$$value$$" ng-model-options="form.ngModelOptions" schema-validate="form"></textarea> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div>');
  }
]), angular.module('schemaForm').config([
  'schemaFormDecoratorsProvider',
  function (e) {
    var t = 'directives/decorators/bootstrap/';
    e.createDecorator('bootstrapDecorator', {
      textarea: t + 'textarea.html',
      fieldset: t + 'fieldset.html',
      array: t + 'array.html',
      tabarray: t + 'tabarray.html',
      tabs: t + 'tabs.html',
      section: t + 'section.html',
      conditional: t + 'section.html',
      actions: t + 'actions.html',
      select: t + 'select.html',
      checkbox: t + 'checkbox.html',
      checkboxes: t + 'checkboxes.html',
      number: t + 'default.html',
      password: t + 'default.html',
      submit: t + 'submit.html',
      button: t + 'submit.html',
      radios: t + 'radios.html',
      'radios-inline': t + 'radios-inline.html',
      radiobuttons: t + 'radio-buttons.html',
      help: t + 'help.html',
      'default': t + 'default.html'
    }, []), e.createDirectives({
      textarea: t + 'textarea.html',
      select: t + 'select.html',
      checkbox: t + 'checkbox.html',
      checkboxes: t + 'checkboxes.html',
      number: t + 'default.html',
      submit: t + 'submit.html',
      button: t + 'submit.html',
      text: t + 'default.html',
      date: t + 'default.html',
      password: t + 'default.html',
      datepicker: t + 'datepicker.html',
      input: t + 'default.html',
      radios: t + 'radios.html',
      'radios-inline': t + 'radios-inline.html',
      radiobuttons: t + 'radio-buttons.html'
    });
  }
]).directive('sfFieldset', function () {
  return {
    transclude: !0,
    scope: !0,
    templateUrl: 'directives/decorators/bootstrap/fieldset-trcl.html',
    link: function (e, t, r) {
      e.title = e.$eval(r.title);
    }
  };
});
(function () {
  'use strict';
  /**
     * @ngdoc overview
     * @name app
     * @description
     * # app
     *
     * Main module of the application.
     */
  angular.module('baabtra', [
    'ngAnimate',
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ngTouch',
    'ngStorage',
    'ui.router',
    'ui.utils',
    'mgcrea.ngStrap',
    'pascalprecht.translate',
    'oc.lazyLoad',
    'ui.load',
    'ui.jp',
    'angular-loading-bar',
    'LocalStorageModule',
    'ui.tree',
    'xtForm',
    'xeditable',
    'angularFileUpload',
    'uiRouterStyles',
    'schemaForm'
  ]).run([
    'editableOptions',
    function (editableOptions) {
      editableOptions.theme = 'bs3';
    }
  ]);
}());
// config
var app = angular.module('baabtra').config([
    '$controllerProvider',
    '$compileProvider',
    '$filterProvider',
    '$provide',
    function ($controllerProvider, $compileProvider, $filterProvider, $provide) {
      // lazy controller, directive and service
      app.controller = $controllerProvider.register;
      app.directive = $compileProvider.directive;
      app.filter = $filterProvider.register;
      app.factory = $provide.factory;
      app.service = $provide.service;
      app.constant = $provide.constant;
      app.value = $provide.value;
    }
  ]).config([
    '$translateProvider',
    function ($translateProvider) {
      // Register a loader for the static files
      // So, the module will search missing translation tables under the specified urls.
      // Those urls are [prefix][langKey][suffix].
      $translateProvider.useStaticFilesLoader({
        prefix: 'i18n/',
        suffix: '.js'
      });
      // Tell the module what language to use by default
      $translateProvider.preferredLanguage('en');
      // Tell the module to store the language in the local storage
      $translateProvider.useLocalStorage();
    }
  ]).constant('bbConfig', { 'BWS': 'http://server.mb-test.in/' });
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.config:uiRouter
     * @description
     * # Config
     * Config for the router
     */
  angular.module('baabtra').run([
    '$rootScope',
    '$state',
    '$stateParams',
    function ($rootScope, $state, $stateParams) {
      $rootScope.$state = $state;
      $rootScope.$stateParams = $stateParams;
    }
  ]).config([
    '$stateProvider',
    '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
      $urlRouterProvider.otherwise('/login');
      $stateProvider.state('app', {
        abstract: true,
        url: '/app',
        views: { '': { templateUrl: 'angularModules/login/partials/Partial-Login_view.html' } }
      }).state('app.dashboard', {
        url: '/dashboard',
        templateUrl: 'views/pages/dashboard.html',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load([
                'angularModules/template/controllers/chart.js',
                'angularModules/template/controllers/vectormap.js'
              ]);
            }
          ]
        }
      }).state('mail', {
        url: '/mail',
        views: {
          '': { templateUrl: 'views/layout.html' },
          'aside': { templateUrl: 'views/partials/aside.nav.mail.html' }
        }
      }).state('mail.inbox', {
        url: '/inbox',
        templateUrl: 'views/pages/mail.html'
      });
    }
  ]);
}());
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.config:uiRouter
     * @description
     * # Config
     * Config for the uikit router
     */
  angular.module('baabtra').config([
    '$stateProvider',
    '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
      $stateProvider.state('ui', {
        url: '/ui',
        views: {
          'aside': { templateUrl: 'views/partials/aside.nav.uikit.html' },
          '': { templateUrl: 'views/layout.html' }
        }
      }).state('ui.component', {
        url: '/component',
        template: '<div ui-view></div>'
      }).state('ui.component.arrow', {
        url: '/arrow',
        templateUrl: 'views/ui/component/arrow.html'
      }).state('ui.component.badge-label', {
        url: '/badge-label',
        templateUrl: 'views/ui/component/badge-label.html'
      }).state('ui.component.button', {
        url: '/button',
        templateUrl: 'views/ui/component/button.html'
      }).state('ui.component.color', {
        url: '/color',
        templateUrl: 'views/ui/component/color.html'
      }).state('ui.component.grid', {
        url: '/grid',
        templateUrl: 'views/ui/component/grid.html'
      }).state('ui.component.icon', {
        url: '/icons',
        templateUrl: 'views/ui/component/icon.html'
      }).state('ui.component.list', {
        url: '/list',
        templateUrl: 'views/ui/component/list.html'
      }).state('ui.component.nav', {
        url: '/nav',
        templateUrl: 'views/ui/component/nav.html'
      }).state('ui.component.panel', {
        url: '/panel',
        templateUrl: 'views/ui/component/panel.html'
      }).state('ui.component.progressbar', {
        url: '/progressbar',
        templateUrl: 'views/ui/component/progressbar.html'
      }).state('ui.component.streamline', {
        url: '/streamline',
        templateUrl: 'views/ui/component/streamline.html'
      }).state('ui.component.timeline', {
        url: '/timeline',
        templateUrl: 'views/ui/component/timeline.html'
      }).state('ui.angular-strap', {
        url: '/angular-strap',
        template: '<div ui-view class="fade-in"></div>',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load(['angularModules/template/controllers/angular-strap.js']);
            }
          ]
        }
      }).state('ui.angular-strap.affix', {
        url: '/affix',
        templateUrl: 'views/ui/angular-strap/affix.html'
      }).state('ui.angular-strap.alert', {
        url: '/alert',
        templateUrl: 'views/ui/angular-strap/alert.html'
      }).state('ui.angular-strap.aside', {
        url: '/aside',
        templateUrl: 'views/ui/angular-strap/aside.html'
      }).state('ui.angular-strap.button', {
        url: '/button',
        templateUrl: 'views/ui/angular-strap/button.html'
      }).state('ui.angular-strap.collapse', {
        url: '/collapse',
        templateUrl: 'views/ui/angular-strap/collapse.html'
      }).state('ui.angular-strap.dropdown', {
        url: '/dropdown',
        templateUrl: 'views/ui/angular-strap/dropdown.html'
      }).state('ui.angular-strap.datepicker', {
        url: '/datepicker',
        templateUrl: 'views/ui/angular-strap/datepicker.html'
      }).state('ui.angular-strap.timepicker', {
        url: '/timepicker',
        templateUrl: 'views/ui/angular-strap/timepicker.html'
      }).state('ui.angular-strap.modal', {
        url: '/modal',
        templateUrl: 'views/ui/angular-strap/modal.html'
      }).state('ui.angular-strap.select', {
        url: '/select',
        templateUrl: 'views/ui/angular-strap/select.html'
      }).state('ui.angular-strap.tab', {
        url: '/tab',
        templateUrl: 'views/ui/angular-strap/tab.html'
      }).state('ui.angular-strap.tooltip', {
        url: '/tooltip',
        templateUrl: 'views/ui/angular-strap/tooltip.html'
      }).state('ui.angular-strap.popover', {
        url: '/popover',
        templateUrl: 'views/ui/angular-strap/popover.html'
      }).state('ui.angular-strap.typeahead', {
        url: '/typehead',
        templateUrl: 'views/ui/angular-strap/typeahead.html'
      }).state('ui.form', {
        url: '/form',
        template: '<div ui-view></div>'
      }).state('ui.form.layout', {
        url: '/layout',
        templateUrl: 'views/ui/form/layout.html'
      }).state('ui.form.element', {
        url: '/element',
        templateUrl: 'views/ui/form/element.html'
      }).state('ui.form.validation', {
        url: '/validation',
        templateUrl: 'views/ui/form/validation.html'
      }).state('ui.form.select', {
        url: '/select',
        templateUrl: 'views/ui/form/select.html',
        controller: 'SelectCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularModules/template/controllers/select.js');
            }
          ]
        }
      }).state('ui.form.editor', {
        url: '/editor',
        templateUrl: 'views/ui/form/editor.html',
        controller: 'EditorCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularModules/template/controllers/editor.js');
            }
          ]
        }
      }).state('ui.form.slider', {
        url: '/slider',
        templateUrl: 'views/ui/form/slider.html',
        controller: 'SliderCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularModules/template/controllers/slider.js');
            }
          ]
        }
      }).state('ui.form.tree', {
        url: '/tree',
        templateUrl: 'views/ui/form/tree.html',
        controller: 'TreeCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularModules/template/controllers/tree.js');
            }
          ]
        }
      }).state('ui.form.file-upload', {
        url: '/file-upload',
        templateUrl: 'views/ui/form/file-upload.html',
        controller: 'UploadCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularFileUpload').then(function () {
                return $ocLazyLoad.load('angularModules/template/controllers/upload.js');
              });
            }
          ]
        }
      }).state('ui.form.image-crop', {
        url: '/image-crop',
        templateUrl: 'views/ui/form/image-crop.html',
        controller: 'ImgCropCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('ngImgCrop').then(function () {
                return $ocLazyLoad.load('angularModules/template/controllers/imgcrop.js');
              });
            }
          ]
        }
      }).state('ui.table', {
        url: '/table',
        template: '<div ui-view></div>'
      }).state('ui.table.static', {
        url: '/static',
        templateUrl: 'views/ui/table/static.html'
      }).state('ui.table.smart', {
        url: '/smart',
        templateUrl: 'views/ui/table/smart.html',
        controller: 'TableCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('smart-table').then(function () {
                return $ocLazyLoad.load('angularModules/template/controllers/table.js');
              });
            }
          ]
        }
      }).state('ui.chart', {
        url: '/chart',
        templateUrl: 'views/ui/chart/chart.html',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularModules/template/controllers/chart.js');
            }
          ]
        }
      }).state('ui.map', {
        url: '/map',
        template: '<div ui-view></div>'
      }).state('ui.map.google', {
        url: '/google',
        templateUrl: 'views/ui/map/google.html',
        controller: 'GoogleMapCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load([
                {
                  files: [
                    'vendor/jquery/load-google-maps.js',
                    'angularModules/template/controllers/googlemap.js'
                  ]
                },
                {
                  name: 'ui.map',
                  files: ['vendor/modules/angular-ui-map/ui-map.js']
                }
              ]).then(function () {
                return loadGoogleMaps();
              });
            }
          ]
        }
      }).state('ui.map.vector', {
        url: '/vector',
        templateUrl: 'views/ui/map/vector.html',
        controller: 'VectorMapCtrl',
        resolve: {
          deps: [
            '$ocLazyLoad',
            function ($ocLazyLoad) {
              return $ocLazyLoad.load('angularModules/template/controllers/vectormap.js');
            }
          ]
        }
      });
    }
  ]);
}());
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.config:uiRouter
     * @description
     * # Config
     * Config for the pages router
     */
  angular.module('baabtra').config([
    '$stateProvider',
    '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {
      $stateProvider.state('page', {
        url: '/page',
        views: {
          '': { templateUrl: 'views/layout.html' },
          'aside': { templateUrl: 'views/partials/aside.nav.pages.html' }
        }
      }).state('home', {
        url: '/home',
        views: {
          '': { templateUrl: 'views/layout.html' },
          'aside': { templateUrl: 'views/partials/aside.nav.pages.html' }
        }
      }).state('home.company', {
        url: '/company',
        templateUrl: 'angularModules/company/partials/Partial-company_view.html',
        controller: 'CompanyViewCtrl'
      }).state('home.company.registration', {
        url: '/registration',
        views: {
          'manage': {
            templateUrl: 'angularModules/company/partials/Partial-company_registration.html',
            controller: 'CompanyRegistrationCtrl'
          }
        }
      }).state('home.company.manage', {
        url: '/manage',
        views: { 'manage': { templateUrl: 'angularModules/company/partials/Partial-company_manage.html' } }
      }).state('home.company.manage.info', {
        url: '/company-info/:companyId',
        views: { 'manage-container': { templateUrl: 'angularModules/company/partials/Partial-company_manage_info.html' } }
      }).state('home.company.manage.billing-config', {
        url: '/company-billing-config/:companyId',
        views: {
          'manage-container': {
            templateUrl: 'angularModules/billing/partials/Partial-user_billing_config.html',
            controller: 'UserBillingConfigCtrl'
          }
        }
      }).state('home.company.manage.feature-config', {
        url: '/company-feature-config/:companyId',
        views: {
          'manage-container': {
            templateUrl: 'angularModules/feature/partials/Partial-user_feature_config.html',
            controller: 'UserFeatureConfigCtrl'
          }
        }
      }).state('page.profile', {
        url: '/profile',
        templateUrl: 'views/pages/profile.html'
      }).state('page.settings', {
        url: '/settings',
        templateUrl: 'views/pages/settings.html'
      }).state('page.blank', {
        url: '/blank',
        templateUrl: 'views/pages/blank.html'
      }).state('login', {
        url: '/login',
        templateUrl: 'angularModules/login/partials/Partial-Login_view.html',
        controller: 'LoginViewCtrl'
      }).state('home.main', {
        url: '/main',
        templateUrl: 'angularModules/login/partials/Partial-home.html',
        controller: 'HomeCtrl'
      }).state('home.company.manage.role', {
        url: '/role',
        templateUrl: 'angularModules/company/partials/Partial-manage_user_role.html',
        controller: 'ManageUserRoleCtrl'
      }).state('home.feature_config', {
        url: '/feature_config',
        templateUrl: 'angularModules/feature/partials/Partial-feature_config.html',
        controller: 'FeatureConfigCtrl'
      }).state('home.billing_plans', {
        url: '/billing_plans',
        templateUrl: 'angularModules/billing/partials/Partial-billing_plans.html',
        controller: 'BillingPlansCtrl'
      }).state('home.main.roleMenuMapping', {
        url: '/roleMenuMapping',
        views: {
          'innercontent': {
            templateUrl: 'angularModules/roleMenuMapping/partials/Partial-roleMenuMapping.html',
            controller: 'RoleMenuMappingCtrl'
          }
        }
      }).state('home.main.manageCompany', {
        url: '/manageCompany',
        views: {
          'innercontent': {
            templateUrl: 'angularModules/company/partials/Partial-manageCompany.html',
            controller: 'ManagecompanyCtrl'
          }
        }
      }).state('home.main.manageCompany.company', {
        url: '/cmp_id={companyId}',
        views: {
          'companycontent': {
            templateUrl: 'angularModules/company/partials/Partial-companyHome.html',
            controller: 'CompanyhomeCtrl'
          }
        }
      }).state('home.main.Branches', {
        url: '/Branches',
        views: {
          'innercontent': {
            templateUrl: 'angularModules/Branches/partials/Partial-Branches.html',
            controller: 'BranchesCtrl'
          }
        },
        data: { css: 'bower_components/angular-ui-tree/demo/css/demp-horizontal.css' }
      }).state('home.main.userMenuMapping', {
        url: '/userMenuMapping',
        views: {
          'innercontent': {
            templateUrl: 'angularModules/company/partials/Partial-userMenuMapping.html',
            controller: 'UsermenumappingCtrl'
          }
        }
      }).state('home.main.addMenu', {
        url: '/addMenu',
        views: {
          'innercontent': {
            templateUrl: 'angularModules/company/partials/Partial-addMenu.html',
            controller: 'AddmenuCtrl'
          }
        }
      }).state('home.JobPosting', {
        url: '/JobPosting',
        templateUrl: 'angularModules/company/partials/Partial-JobPosting.html',
        controller: 'JobpostingCtrl'
      }).state('home.ViewJobs', {
        url: '/ViewJobs',
        templateUrl: 'angularModules/company/partials/Partial-ListJobs.html',
        controller: 'ListjobsCtrl'
      }).state('page.document', {
        url: '/document',
        templateUrl: 'views/pages/document.html'
      }).state('signin', {
        url: '/signin',
        templateUrl: 'views/pages/signin.html'
      }).state('signup', {
        url: '/signup',
        templateUrl: 'views/pages/signup.html'
      }).state('forgot-password', {
        url: '/forgot-password',
        templateUrl: 'views/pages/forgot-password.html'
      }).state('lockme', {
        url: '/lockme',
        templateUrl: 'views/pages/lockme.html'
      }).state('404', {
        url: '/404',
        templateUrl: 'views/pages/404.html'
      }).state('505', {
        url: '/505',
        templateUrl: 'views/pages/505.html'
      });
    }
  ]);
}());
// lazyload config
angular.module('baabtra').constant('MODULE_CONFIG', [
  {
    name: 'ui.select',
    module: true,
    files: [
      'vendor/modules/angular-ui-select/select.min.js',
      'vendor/modules/angular-ui-select/select.min.css'
    ]
  },
  {
    name: 'textAngular',
    module: true,
    files: [
      'vendor/modules/textAngular/textAngular-sanitize.min.js',
      'vendor/modules/textAngular/textAngular.min.js'
    ]
  },
  {
    name: 'vr.directives.slider',
    module: true,
    files: [
      'vendor/modules/angular-slider/angular-slider.min.js',
      'vendor/modules/angular-slider/angular-slider.css'
    ]
  },
  {
    name: 'angularBootstrapNavTree',
    module: true,
    files: [
      'vendor/modules/angular-bootstrap-nav-tree/abn_tree_directive.js',
      'vendor/modules/angular-bootstrap-nav-tree/abn_tree.css'
    ]
  },
  {
    name: 'angularFileUpload',
    module: true,
    files: ['vendor/modules/angular-file-upload/angular-file-upload.min.js']
  },
  {
    name: 'ngImgCrop',
    module: true,
    files: [
      'vendor/modules/ngImgCrop/ng-img-crop.js',
      'vendor/modules/ngImgCrop/ng-img-crop.css'
    ]
  },
  {
    name: 'smart-table',
    module: true,
    files: ['vendor/modules/angular-smart-table/smart-table.min.js']
  },
  {
    name: 'easyPieChart',
    module: false,
    files: ['vendor/jquery/easypiechart/jquery.easy-pie-chart.js']
  },
  {
    name: 'sparkline',
    module: false,
    files: ['vendor/jquery/sparkline/jquery.sparkline.min.js']
  },
  {
    name: 'plot',
    module: false,
    files: [
      'vendor/jquery/flot/jquery.flot.min.js',
      'vendor/jquery/flot/jquery.flot.resize.js',
      'vendor/jquery/flot/jquery.flot.tooltip.min.js',
      'vendor/jquery/flot/jquery.flot.spline.js',
      'vendor/jquery/flot/jquery.flot.orderBars.js',
      'vendor/jquery/flot/jquery.flot.pie.min.js'
    ]
  },
  {
    name: 'slimScroll',
    module: false,
    files: ['vendor/jquery/slimscroll/jquery.slimscroll.min.js']
  },
  {
    name: 'vectorMap',
    module: false,
    files: [
      'vendor/jquery/jvectormap/jquery-jvectormap.min.js',
      'vendor/jquery/jvectormap/jquery-jvectormap-world-mill-en.js',
      'vendor/jquery/jvectormap/jquery-jvectormap-us-aea-en.js',
      'vendor/jquery/jvectormap/jquery-jvectormap.css'
    ]
  }
]).config([
  '$ocLazyLoadProvider',
  'MODULE_CONFIG',
  function ($ocLazyLoadProvider, MODULE_CONFIG) {
    $ocLazyLoadProvider.config({
      debug: false,
      events: false,
      modules: MODULE_CONFIG
    });
  }
]);
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.directive:uiNav
     * @description
     * # uiScroll
     * Directive of the app
     */
  angular.module('baabtra').directive('lazyLoad', [
    'MODULE_CONFIG',
    '$ocLazyLoad',
    '$compile',
    function (MODULE_CONFIG, $ocLazyLoad, $compile) {
      return {
        restrict: 'A',
        compile: function (el, attrs) {
          var contents = el.contents().remove(), name;
          return function (scope, el, attrs) {
            angular.forEach(MODULE_CONFIG, function (module) {
              if (module.name === attrs.lazyLoad) {
                if (!module.module) {
                  name = module.files;
                } else {
                  name = module.name;
                }
              }
            });
            $ocLazyLoad.load(name).then(function () {
              $compile(contents)(scope, function (clonedElement, scope) {
                el.append(clonedElement);
              });
            });
          };
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  angular.module('ui.jp', [
    'oc.lazyLoad',
    'ui.load'
  ]).value('uiJpConfig', {}).directive('uiJp', [
    'uiJpConfig',
    'MODULE_CONFIG',
    '$ocLazyLoad',
    'uiLoad',
    '$timeout',
    function uiJpInjectingFunction(uiJpConfig, MODULE_CONFIG, $ocLazyLoad, uiLoad, $timeout) {
      return {
        restrict: 'A',
        compile: function uiJpCompilingFunction(tElm, tAttrs) {
          var options = uiJpConfig && uiJpConfig[tAttrs.uiJp];
          return function uiJpLinkingFunction(scope, elm, attrs) {
            function getOptions() {
              var linkOptions = [];
              // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
              if (attrs.uiOptions) {
                linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
                if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
                  linkOptions[0] = angular.extend({}, options, linkOptions[0]);
                }
              } else if (options) {
                linkOptions = [options];
              }
              return linkOptions;
            }
            // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
            if (attrs.ngModel && elm.is('select,input,textarea')) {
              elm.bind('change', function () {
                elm.trigger('input');
              });
            }
            // Call jQuery method and pass relevant options
            function callPlugin() {
              $timeout(function () {
                elm[attrs.uiJp].apply(elm, getOptions());
              }, 0, false);
            }
            function refresh() {
              // If ui-refresh is used, re-fire the the method upon every change
              if (attrs.uiRefresh) {
                scope.$watch(attrs.uiRefresh, function () {
                  callPlugin();
                });
              }
            }
            var jp = false;
            angular.forEach(MODULE_CONFIG, function (module) {
              if (module.name === attrs.uiJp) {
                jp = module.files;
              }
            });
            if (jp) {
              // $ocLazyLoad.load(jp)
              uiLoad.load(jp).then(function () {
                callPlugin();
                refresh();
              }).catch(function () {
              });
            } else {
              callPlugin();
              refresh();
            }
          };
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.directive:uiNav
     * @description
     * # uiScroll
     * Directive of the app
     */
  angular.module('baabtra').directive('uiNav', [
    '$timeout',
    function ($timeout) {
      return {
        restrict: 'AC',
        link: function (scope, el, attr) {
          el.find('a').bind('click', function (e) {
            var li = angular.element(this).parent();
            li.parent().find('li').removeClass('active');
            li.toggleClass('active');
            if (li.find('ul')) {
              scope.app.asideCollapse = false;
            }
          });
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.directive:uiFullscreen
     * @description
     * # uiFullscreen
     * Directive of the app
     */
  angular.module('baabtra').directive('uiFullscreen', [
    '$ocLazyLoad',
    '$document',
    function ($ocLazyLoad, $document) {
      return {
        restrict: 'AC',
        link: function (scope, el, attr) {
          el.addClass('hide');
          $ocLazyLoad.load('vendor/libs/screenfull.min.js').then(function () {
            // disable on ie11
            if (screenfull.enabled) {
              el.removeClass('hide');
            }
            el.bind('click', function () {
              var target;
              if (attr.target) {
                target = angular.element(attr.target)[0];
              }
              screenfull.toggle(target);
            });
            var body = angular.element($document[0].body);
            $document.on(screenfull.raw.fullscreenchange, function () {
              if (screenfull.isFullscreen) {
                body.addClass('fullscreen');
              } else {
                body.removeClass('fullscreen');
              }
            });
          });
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  /**
     * @ngdoc function
     * @name app.directive:uiScroll
     * @description
     * # uiScroll
     * Directive of the app
     */
  angular.module('baabtra').directive('uiScroll', [
    '$location',
    '$anchorScroll',
    function ($location, $anchorScroll) {
      return {
        restrict: 'AC',
        replace: true,
        link: function (scope, el, attr) {
          el.bind('click', function (e) {
            $location.hash(attr.uiScroll);
            $anchorScroll();
          });
        }
      };
    }
  ]);
}());
(function () {
  'use strict';
  /**
	 * 0.1.1
	 * Deferred load js/css file, used for ui-jq.js and Lazy Loading.
	 * 
	 * @ flatfull.com All Rights Reserved.
	 * Author url: http://themeforest.net/user/flatfull
	 */
  angular.module('ui.load', []).service('uiLoad', [
    '$document',
    '$q',
    '$timeout',
    function ($document, $q, $timeout) {
      var loaded = [];
      var promise = false;
      var deferred = $q.defer();
      /**
			 * Chain loads the given sources
			 * @param srcs array, script or css
			 * @returns {*} Promise that will be resolved once the sources has been loaded.
			 */
      this.load = function (srcs) {
        srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
        var self = this;
        if (!promise) {
          promise = deferred.promise;
        }
        angular.forEach(srcs, function (src) {
          promise = promise.then(function () {
            return src.indexOf('.css') >= 0 ? self.loadCSS(src) : self.loadScript(src);
          });
        });
        deferred.resolve();
        return promise;
      };
      /**
			 * Dynamically loads the given script
			 * @param src The url of the script to load dynamically
			 * @returns {*} Promise that will be resolved once the script has been loaded.
			 */
      this.loadScript = function (src) {
        if (loaded[src]) {
          return loaded[src].promise;
        }
        var deferred = $q.defer();
        var script = $document[0].createElement('script');
        script.src = src;
        script.onload = function (e) {
          $timeout(function () {
            deferred.resolve(e);
          });
        };
        script.onerror = function (e) {
          $timeout(function () {
            deferred.reject(e);
          });
        };
        $document[0].body.appendChild(script);
        loaded[src] = deferred;
        return deferred.promise;
      };
      /**
			 * Dynamically loads the given CSS file
			 * @param href The url of the CSS to load dynamically
			 * @returns {*} Promise that will be resolved once the CSS file has been loaded.
			 */
      this.loadCSS = function (href) {
        if (loaded[href]) {
          return loaded[href].promise;
        }
        var deferred = $q.defer();
        var style = $document[0].createElement('link');
        style.rel = 'stylesheet';
        style.type = 'text/css';
        style.href = href;
        style.onload = function (e) {
          $timeout(function () {
            deferred.resolve(e);
          });
        };
        style.onerror = function (e) {
          $timeout(function () {
            deferred.reject(e);
          });
        };
        $document[0].head.appendChild(style);
        loaded[href] = deferred;
        return deferred.promise;
      };
    }
  ]);
}());
(function () {
  'use strict';
  /**
 * @ngdoc function
 * @name app.controller:MainCtrl
 * @description
 * # MainCtrl
 * Controller of the app
 */
  angular.module('baabtra').controller('MainCtrl', [
    '$scope',
    '$translate',
    '$localStorage',
    '$window',
    function ($scope, $translate, $localStorage, $window) {
      // add 'ie' classes to html
      var isIE = !!navigator.userAgent.match(/MSIE/i) || !!navigator.userAgent.match(/Trident.*rv:11\./);
      // isIE && angular.element($window.document.body).addClass('ie');
      // isSmartDevice( $window ) && angular.element($window.document.body).addClass('smart');
      if (isIE) {
        angular.element($window.document.body).addClass('ie');
      }
      if (isSmartDevice($window)) {
        angular.element($window.document.body).addClass('smart');
      }
      // config
      $scope.app = {
        name: 'baabtra.com',
        version: '1.0.0',
        color: {
          primary: '#155abb',
          info: '#2772ee',
          success: '#4bb622',
          warning: '#f88311',
          danger: '#e11144',
          inverse: '#a66bee',
          light: '#f1f2f3',
          dark: '#202a3a'
        },
        settings: {
          headerColor: 'bg-primary',
          headerFixed: true,
          headerShadow: true,
          asideColor: 'bg-dark lt',
          asideTop: true
        }
      };
      $scope.options = {
        headerColor: [
          'bg-primary lt',
          'bg-primary ',
          'bg-primary dk',
          'bg-info lt',
          'bg-info',
          'bg-info dk',
          'bg-success lt',
          'bg-success ',
          'bg-success dk',
          'bg-inverse lt',
          'bg-inverse ',
          'bg-inverse dk',
          'bg-dark lt',
          'bg-dark',
          'bg-dark dk ',
          'bg-black ',
          'bg-black dk',
          'bg-white box-shadow-md'
        ],
        asideColor: [
          'bg-primary dk',
          'bg-info dk',
          'bg-success dk',
          'bg-dark lt',
          'bg-dark',
          'bg-dark dk',
          'bg-black lt',
          'bg-black',
          'bg-black dk',
          'bg-white',
          'bg-light',
          'bg-light dk'
        ]
      };
      $scope.setHeaderColor = function (color) {
        $scope.app.settings.headerColor = color;
      };
      $scope.setAsideColor = function (color) {
        $scope.app.settings.asideColor = color;
      };
      // save settings to local storage
      if (angular.isDefined($localStorage.appSettings)) {
        $scope.app.settings = $localStorage.appSettings;
      } else {
        $localStorage.appSettings = $scope.app.settings;
      }
      $scope.$watch('app.settings', function () {
        $localStorage.appSettings = $scope.app.settings;
      }, true);
      // angular translate
      $scope.langs = {
        en: 'English',
        zh_CN: '\u4e2d\u6587'
      };
      $scope.selectLang = $scope.langs[$translate.proposedLanguage()] || 'English';
      $scope.setLang = function (langKey) {
        // set the current lang
        $scope.selectLang = $scope.langs[langKey];
        // You can change the language during runtime
        $translate.use(langKey);
      };
      function isSmartDevice($window) {
        // Adapted from http://www.detectmobilebrowsers.com
        var ua = $window['navigator']['userAgent'] || $window['navigator']['vendor'] || $window['opera'];
        // Checks for iOs, Android, Blackberry, Opera Mini, and Windows mobile devices
        return /iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/.test(ua);
      }
    }
  ]);
}());
angular.module('baabtra').controller('RoleMenuMappingCtrl', [
  '$location',
  '$scope',
  '$modal',
  '$rootScope',
  'RoleMenuMappingSrv',
  '$alert',
  'localStorageService',
  function ($location, $scope, $modal, $rootScope, RoleMenuMappingSrv, $alert, localStorageService) {
    //$scope.companyName="baabtra.com";
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.rm_id = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (angular.equals(loginInfo.roleMappingObj[0].fkCompanyId, '')) {
        $scope.companyId = '';
      } else {
        $scope.companyId = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }
    // $rootScope.$watch('userMenusOrigin',function()
    //   {
    //     if($rootScope.userMenusOrigin)
    //     {
    //       $rootScope.breadCrumb($rootScope.userMenusOrigin);
    //     }
    //   });
    $scope.IconName = [
      'fa-adjust circle half',
      'fa-anchor',
      'fa-archive box',
      'fa-arrows',
      'fa-arrows-h',
      'fa-arrows-v',
      'fa-asterisk star',
      'fa-at gmail',
      'fa-automobile',
      'fa-ban',
      'fa-bank',
      'fa-barcode',
      'fa-bars',
      'fa-beer',
      'fa-bell',
      'fa-bell-o',
      'fa-bell-slash',
      'fa-bell-slash-o',
      'fa-bicycle',
      'fa-binoculars',
      'fa-birthday-cake',
      'fa-bolt',
      'fa-bomb',
      'fa-book',
      'fa-bookmark',
      'fa-bookmark-o',
      'fa-briefcase',
      'fa-bug',
      'fa-building',
      'fa-building-o',
      'fa-bullhorn',
      'fa-bullseye i',
      'fa-bus',
      'fa-cab',
      'fa-calculator',
      'fa-calendar',
      'fa-calendar-o',
      'fa-camera',
      'fa-camera-retro',
      'fa-car',
      'fa-caret-square-o-down',
      'fa-caret-square-o-left',
      'fa-caret-square-o-right',
      'fa-caret-square-o-up',
      'fa-cc',
      'fa-certificate',
      'fa-check',
      'fa-check-circle',
      'fa-check-circle-o',
      'fa-check-square',
      'fa-check-square-o',
      'fa-child',
      'fa-circle',
      'fa-circle-o',
      'fa-circle-o-notch',
      'fa-circle-thin',
      'fa-clock-o',
      'fa-close',
      'fa-cloud',
      'fa-cloud-download',
      'fa-cloud-upload',
      'fa-code',
      'fa-code-fork',
      'fa-coffee',
      'fa-cog',
      'fa-cogs',
      'fa-comment',
      'fa-comment-o',
      'fa-comments',
      'fa-comments-o',
      'fa-compass',
      'fa-copyright',
      'fa-credit-card',
      'fa-crop',
      'fa-crosshairs',
      'fa-cube',
      'fa-cubes',
      'fa-cutlery',
      'fa-dashboard',
      'fa-database',
      'fa-desktop',
      'fa-dot-circle-o',
      'fa-download',
      'fa-edit',
      'fa-ellipsis-h',
      'fa-ellipsis-v',
      'fa-envelope',
      'fa-envelope-o',
      'fa-envelope-square',
      'fa-eraser',
      'fa-exchange',
      'fa-exclamation',
      'fa-exclamation-circle',
      'fa-exclamation-triangle',
      'fa-external-link',
      'fa-external-link-square',
      'fa-eye i',
      'fa-eye-slash i',
      'fa-eyedropper i',
      'fa-fax',
      'fa-female',
      'fa-fighter-jet',
      'fa-file-archive-o',
      'fa-file-audio-o',
      'fa-file-code-o',
      'fa-file-excel-o',
      'fa-file-image-o',
      'fa-file-movie-o',
      'fa-file-pdf-o',
      'fa-file-photo-o',
      'fa-file-picture-o',
      'fa-file-powerpoint-o',
      'fa-file-sound-o',
      'fa-file-video-o',
      'fa-file-word-o',
      'fa-file-zip-o',
      'fa-film',
      'fa-filter',
      'fa-fire',
      'fa-fire-extinguisher',
      'fa-flag',
      'fa-flag-checkered',
      'fa-flag-o',
      'fa-flash',
      'fa-flask',
      'fa-folder',
      'fa-folder-o',
      'fa-folder-open',
      'fa-folder-open-o',
      'fa-frown-o',
      'fa-futbol-o',
      'fa-gamepad',
      'fa-gavel',
      'fa-gear',
      'fa-gears',
      'fa-gift',
      'fa-glass',
      'fa-globe',
      'fa-graduation-cap',
      'fa-group',
      'fa-hdd-o',
      'fa-headphones',
      'fa-heart',
      'fa-heart-o',
      'fa-history',
      'fa-home',
      'fa-image',
      'fa-inbox',
      'fa-info',
      'fa-info-circle',
      'fa-institution',
      'fa-key',
      'fa-keyboard-o',
      'fa-language',
      'fa-laptop',
      'fa-leaf',
      'fa-legal',
      'fa-lemon-o',
      'fa-level-down',
      'fa-level-up',
      'fa-life-bouy',
      'fa-life-buoy',
      'fa-life-ring',
      'fa-life-saver',
      'fa-lightbulb-o',
      'fa-location-arrow',
      'fa-lock',
      'fa-magic',
      'fa-magnet',
      'fa-mail-forward',
      'fa-mail-reply',
      'fa-mail-reply-all',
      'fa-male',
      'fa-map-marker',
      'fa-meh-o',
      'fa-microphone',
      'fa-microphone-slash',
      'fa-minus',
      'fa-minus-circle',
      'fa-minus-square',
      'fa-minus-square-o',
      'fa-mobile',
      'fa-mobile-phone',
      'fa-money',
      'fa-moon-o',
      'fa-mortar-board',
      'fa-music',
      'fa-navicon',
      'fa-newspaper-o',
      'fa-paint-brush',
      'fa-paper-plane',
      'fa-paper-plane-o',
      'fa-paw',
      'fa-pencil',
      'fa-pencil-square',
      'fa-pencil-square-o',
      'fa-phone',
      'fa-phone-square',
      'fa-photo',
      'fa-picture-o',
      'fa-plane',
      'fa-plug',
      'fa-plus',
      'fa-plus-circle',
      'fa-plus-square',
      'fa-plus-square-o',
      'fa-power-off',
      'fa-print',
      'fa-puzzle-piece',
      'fa-qrcode',
      'fa-question',
      'fa-question-circle',
      'fa-quote-left',
      'fa-quote-right',
      'fa-random',
      'fa-recycle',
      'fa-refresh',
      'fa-remove',
      'fa-reorder',
      'fa-reply',
      'fa-reply-all',
      'fa-retweet',
      'fa-road',
      'fa-rocket',
      'fa-rss',
      'fa-rss-square',
      'fa-search',
      'fa-search-minus',
      'fa-search-plus',
      'fa-send',
      'fa-send-o',
      'fa-share',
      'fa-share-alt',
      'fa-share-alt-square',
      'fa-share-square',
      'fa-share-square-o',
      'fa-shield',
      'fa-shopping-cart',
      'fa-sign-in',
      'fa-sign-out',
      'fa-signal',
      'fa-sitemap',
      'fa-sliders',
      'fa-smile-o',
      'fa-soccer-ball-o',
      'fa-sort',
      'fa-sort-alpha-asc',
      'fa-sort-alpha-desc',
      'fa-sort-amount-asc',
      'fa-sort-amount-desc',
      'fa-sort-asc',
      'fa-sort-desc',
      'fa-sort-down',
      'fa-sort-numeric-asc',
      'fa-sort-numeric-desc',
      'fa-sort-up',
      'fa-space-shuttle',
      'fa-spinner',
      'fa-spoon',
      'fa-square',
      'fa-square-o',
      'fa-star',
      'fa-star-half',
      'fa-star-half-empty',
      'fa-star-half-full',
      'fa-star-half-o',
      'fa-star-o',
      'fa-suitcase',
      'fa-sun-o',
      'fa-support',
      'fa-tablet',
      'fa-tachometer',
      'fa-tag',
      'fa-tags',
      'fa-tasks',
      'fa-taxi',
      'fa-terminal',
      'fa-thumb-tack',
      'fa-thumbs-down',
      'fa-thumbs-o-down',
      'fa-thumbs-o-up',
      'fa-thumbs-up',
      'fa-ticket',
      'fa-times',
      'fa-times-circle',
      'fa-times-circle-o',
      'fa-tint',
      'fa-toggle-down',
      'fa-toggle-left',
      'fa-toggle-off',
      'fa-toggle-on',
      'fa-toggle-right',
      'fa-toggle-up',
      'fa-trash',
      'fa-trash-o',
      'fa-tree',
      'fa-trophy',
      'fa-truck',
      'fa-tty',
      'fa-umbrella',
      'fa-university',
      'fa-unlock',
      'fa-unlock-alt',
      'fa-unsorted',
      'fa-upload',
      'fa-user',
      'fa-users',
      'fa-video-camera',
      'fa-volume-down',
      'fa-volume-off',
      'fa-volume-up',
      'fa-warning',
      'fa-wheelchair',
      'fa-wifi',
      'fa-wrench',
      'fa-file',
      'fa-adn',
      'fa-android',
      'fa-angellist',
      'fa-apple',
      'fa-behance',
      'fa-behance-square',
      'fa-bitbucket',
      'fa-bitbucket-square',
      'fa-bitcoin',
      'fa-btc',
      'fa-cc-amex',
      'fa-cc-discover',
      'fa-cc-mastercard',
      'fa-cc-paypal',
      'fa-cc-stripe',
      'fa-cc-visa',
      'fa-codepen',
      'fa-css3',
      'fa-delicious',
      'fa-deviantart',
      'fa-digg',
      'fa-dribbble',
      'fa-dropbox',
      'fa-drupal',
      'fa-empire',
      'fa-facebook',
      'fa-facebook-square',
      'fa-flickr',
      'fa-foursquare',
      'fa-ge',
      'fa-git',
      'fa-git-square',
      'fa-github',
      'fa-github-alt',
      'fa-github-square',
      'fa-gittip',
      'fa-google',
      'fa-google-plus',
      'fa-google-plus-square',
      'fa-google-wallet',
      'fa-hacker-news',
      'fa-html5',
      'fa-instagram',
      'fa-ioxhost',
      'fa-joomla',
      'fa-jsfiddle',
      'fa-lastfm',
      'fa-lastfm-square',
      'fa-linkedin',
      'fa-linkedin-square',
      'fa-linux',
      'fa-maxcdn',
      'fa-meanpath',
      'fa-openid',
      'fa-pagelines',
      'fa-paypal',
      'fa-pied-piper',
      'fa-pied-piper-alt',
      'fa-pinterest',
      'fa-pinterest-square',
      'fa-qq',
      'fa-ra',
      'fa-rebel',
      'fa-reddit',
      'fa-reddit-square',
      'fa-renren',
      'fa-skype',
      'fa-slack',
      'fa-slideshare',
      'fa-soundcloud',
      'fa-spotify',
      'fa-stack-exchange',
      'fa-stack-overflow',
      'fa-steam',
      'fa-steam-square',
      'fa-stumbleupon',
      'fa-stumbleupon-circle',
      'fa-tencent-weibo',
      'fa-trello',
      'fa-tumblr',
      'fa-tumblr-square',
      'fa-twitch',
      'fa-twitter',
      'fa-twitter-square',
      'fa-vimeo-square',
      'fa-vine',
      'fa-vk',
      'fa-wechat',
      'fa-weibo',
      'fa-weixin',
      'fa-windows',
      'fa-wordpress',
      'fa-xing',
      'fa-xing-square',
      'fa-yahoo',
      'fa-yelp',
      'fa-youtube',
      'fa-youtube-play',
      'fa-youtube-square',
      'fa-ambulance',
      'fa-h-square',
      'fa-hospital-o',
      'fa-medkit',
      'fa-stethoscope',
      'fa-user-md',
      'fa-arrows-alt',
      'fa-backward',
      'fa-compress',
      'fa-eject',
      'fa-expand',
      'fa-fast-backward',
      'fa-fast-forward',
      'fa-forward',
      'fa-pause',
      'fa-play',
      'fa-play-circle',
      'fa-play-circle-o',
      'fa-step-backward',
      'fa-step-forward',
      'fa-stop',
      'fa-angle-double-down',
      'fa-angle-double-left',
      'fa-angle-double-right',
      'fa-angle-double-up',
      'fa-angle-down',
      'fa-angle-left',
      'fa-angle-right',
      'fa-angle-up',
      'fa-arrow-circle-down',
      'fa-arrow-circle-left',
      'fa-arrow-circle-o-down',
      'fa-arrow-circle-o-left',
      'fa-arrow-circle-o-right',
      'fa-arrow-circle-o-up',
      'fa-arrow-circle-right',
      'fa-arrow-circle-up',
      'fa-arrow-down',
      'fa-arrow-left',
      'fa-arrow-right',
      'fa-arrow-up',
      'fa-caret-down',
      'fa-caret-left',
      'fa-caret-right',
      'fa-caret-up',
      'fa-chevron-circle-down',
      'fa-chevron-circle-left',
      'fa-chevron-circle-right',
      'fa-chevron-circle-up',
      'fa-chevron-down',
      'fa-chevron-left',
      'fa-chevron-right',
      'fa-chevron-up',
      'fa-hand-o-down',
      'fa-hand-o-left',
      'fa-hand-o-right',
      'fa-hand-o-up',
      'fa-long-arrow-down',
      'fa-long-arrow-left',
      'fa-long-arrow-right',
      'fa-long-arrow-up',
      'fa-align-center',
      'fa-align-justify',
      'fa-align-left',
      'fa-align-right',
      'fa-bold',
      'fa-chain',
      'fa-chain-broken',
      'fa-clipboard',
      'fa-columns',
      'fa-copy',
      'fa-cut',
      'fa-dedent',
      'fa-file-o',
      'fa-file-text',
      'fa-file-text-o',
      'fa-files-o',
      'fa-floppy-o',
      'fa-font',
      'fa-header',
      'fa-indent',
      'fa-italic',
      'fa-link',
      'fa-list',
      'fa-list-alt',
      'fa-list-ol',
      'fa-list-ul',
      'fa-outdent',
      'fa-paperclip',
      'fa-paragraph',
      'fa-paste',
      'fa-repeat',
      'fa-rotate-left',
      'fa-rotate-right',
      'fa-save',
      'fa-scissors',
      'fa-strikethrough',
      'fa-subscript',
      'fa-superscript',
      'fa-table',
      'fa-text-height',
      'fa-text-width',
      'fa-th',
      'fa-th-large',
      'fa-th-list',
      'fa-underline',
      'fa-undo',
      'fa-unlink',
      'fa-area-chart',
      'fa-bar-chart',
      'fa-bar-chart-o',
      'fa-line-chart',
      'fa-pie-chart'
    ];
    $scope.createGroupModal = function () {
      $modal({
        scope: $scope,
        template: 'views/ui/angular-strap/createGroup.html',
        show: true
      });
    };
    $scope.menuIcon = 'fa-info';
    $scope.setIcon = function (icon) {
      $scope.menuIcon = icon;
    };
    $scope.SearchType = 'Company';
    $scope.placeholderVal = 'Search Companies';
    //$scope.roleId=1;
    //$scope.rm_id='545aff95437b389ba554d6b7';
    $scope.activeLink = 1;
    $scope.CompanySate = '';
    var CurNewValue = '';
    var dragStartStatus = false;
    var MeusStatus = false;
    var tree1dragStartStatus = false;
    var current_menu_type = '';
    var menu_list_type = '';
    if (angular.equals($scope.roleId, 1)) {
      current_menu_type = 'role';
      menu_list_type = 'all';
      RoleMenuMappingSrv.FnLoadTopLevelRoles($scope);
      RoleMenuMappingSrv.FnGetCompanyDetails($scope, '', '');
    } else if (angular.equals($scope.roleId, 2)) {
      current_menu_type = 'role';
      menu_list_type = 'user';
      //$scope.companyId='5457526122588a5db73e0b23';//company id
      RoleMenuMappingSrv.FnGetRoles($scope, $scope.companyId, '', '');
      $scope.SearchType = 'Roles';
      $scope.modelSearch = '';
      $scope.placeholderVal = 'Search Roles';
    }
    $scope.ChangeCompanyState = function (cmp_id, cmp_name) {
      //To changing the active company in company list
      $scope.SearchType = 'Roles';
      $scope.modelSearch = '';
      $scope.placeholderVal = 'Search Roles';
      $scope.companyId = cmp_id;
      RoleMenuMappingSrv.FnGetRoles($scope, $scope.companyId, '', '');
      $scope.CompanySate = -1;  //$scope.CurrentCompany=cmp_name;
    };
    $scope.toLevelRoles = function () {
      $scope.comapany = false;
      $scope.ModelRoleBox = false;
      $scope.ShowNoDataFound = false;
      $scope.menudetails = false;
      $scope.RoleState = -1;
    };
    $scope.backToCompanies = function () {
      $scope.menudetails = false;
      $scope.modelSearch = '';
      $scope.placeholderVal = 'Search Companies';
      $scope.SearchType = 'Company';
      $scope.ModelRoleBox = false;
      $scope.comapany = true;
      $scope.ShowNoDataFound = false;
      $scope.RoleState = -1;
      RoleMenuMappingSrv.FnGetCompanyDetails($scope, '', '');
    };
    $scope.getRole = function (id) {
      //To load current menus by active role
      $scope.RoleState = id;
      //$scope.AllCompanies=true;
      RoleMenuMappingSrv.FnGetRoleMenus($scope, id, current_menu_type);
      //function to call the service function to load the existing menu items
      RoleMenuMappingSrv.FnGetAllMenus($scope, menu_list_type);
    };
    $scope.$watch('modelSearch', function (newValue, oldValue) {
      //function which watces the change in text box and used  for searching companies and roles
      if (!angular.equals(newValue, undefined)) {
        //$scope.activeLink=1;
        CurNewValue = newValue;
        if ($scope.SearchType === 'Company') {
          //Search by Company
          $scope.CompanySate = -1;
          //$scope.rolesBox=false;
          RoleMenuMappingSrv.FnGetCompanyDetails($scope, '', newValue);
        } else if ($scope.SearchType === 'Roles') {
          //Search by Roles
          $scope.menudetails = false;
          $scope.RoleState = -1;
          RoleMenuMappingSrv.FnGetRoles($scope, $scope.companyId, '', newValue);
        }
      }
    });
    /*---Starting Pagenation for loading companies and roles---*/
    $scope.next_one = function () {
      //To get Next page
      if ($scope.roles_count > 12 && $scope.SearchType === 'Roles') {
        //Checking Search type is Roles
        $scope.menudetails = false;
        $scope.RoleState = -1;
        $scope.activeLink = $scope.activeLink + 12;
        RoleMenuMappingSrv.FnGetRoles($scope, $scope.companyId, $scope.activeLink - 1, CurNewValue);
      } else if ($scope.companyCount > 6 && $scope.SearchType === 'Company') {
        //Checking Search type is Company
        $scope.activeLink = $scope.activeLink + 6;
        RoleMenuMappingSrv.FnGetCompanyDetails($scope, $scope.activeLink - 1, CurNewValue);
      }
    };
    $scope.prev_one = function () {
      //To get Previous page
      if ($scope.activeLink > 1 && $scope.SearchType === 'Roles') {
        //Checking Search type is Roles
        $scope.menudetails = false;
        $scope.RoleState = -1;
        $scope.activeLink = $scope.activeLink - 12;
        RoleMenuMappingSrv.FnGetRoles($scope, $scope.companyId, $scope.activeLink - 1, CurNewValue);
      } else if ($scope.activeLink > 1 && $scope.SearchType === 'Company') {
        //Checking Search type is Company
        $scope.activeLink = $scope.activeLink - 6;
        RoleMenuMappingSrv.FnGetCompanyDetails($scope, $scope.activeLink - 1, CurNewValue);
      }
    };
    /*---Ending Pagenation for loading companies and roles---*/
    $scope.remove = function (scope) {
      scope.remove();
    };
    $scope.toggle = function (scope) {
      scope.toggle();
    };
    $scope.newSubItem = function (scope) {
      var nodeData = scope.$modelValue;
      nodeData.childMenuStructure.push({
        fkMenuId: nodeData.fkMenuId * 10 + nodeData.childMenuStructure.length,
        MenuName: nodeData.MenuName + '.' + (nodeData.childMenuStructure.length + 1),
        childMenuStructure: []
      });
    };
    $scope.tree1NodesOptions = {
      dragStart: function (sourceNodeScope, destNodesScope, destIndex) {
        MeusStatus = true;
        tree1dragStartStatus = true;
        dragStartStatus = false;
      },
      accept: function (sourceNodeScope, destNodesScope, destIndex) {
        if (destNodesScope.$nodeScope == null) {
          dragStartStatus = true;
        } else if (angular.equals(destNodesScope.$nodeScope.$modelValue.MenuLink, undefined)) {
          dragStartStatus = true;
        }
        // if(destNodesScope.$nodeScope.$modelValue.MenuLink !="" || destNodesScope.$nodeScope.$modelValue.MenuLink != undefined)
        //   {
        //     dragStartStatus=true;
        //   }    
        // if (dragStartStatus) {
        //   if(!angular.equals(sourceNodeScope.$parentNodeScope,destNodesScope.$parentNodeScope) && !tree1dragStartStatus){
        //     $scope.checkNewMenu(sourceNodeScope.$modelValue.fkMenuId);
        //     if (sourceNodeScope.$modelValue.childMenuStructure.length>0)
        //     {
        //         var newSubMenu=sourceNodeScope.$modelValue.childMenuStructure;
        //         for (var i = 0; i < newSubMenu.length; i++) {
        //            $scope.checkNewMenu(newSubMenu[i].fkMenuId);
        //         }
        //     }
        //     if (!MeusStatus) {
        //       $alert({title: 'Not Allowed!', type:'warning' ,content: 'This Menu Already Exists',animation:'am-fade',duration:'3', placement: 'top-right', template: 'views/ui/angular-strap/alert.tpl.html', show: true});
        //     }
        //     dragStartStatus=false;
        //   }
        // }
        return dragStartStatus;
      }
    };
    $scope.tree2NodesOptions = {
      dragStart: function (sourceNodeScope, destNodesScope, destIndex) {
        MeusStatus = true;
        dragStartStatus = true;
        tree1dragStartStatus = false;
      }
    };
    $scope.checkNewMenu = function (new_menu_id) {
      for (var menu_count = 0; menu_count < $scope.tree1.length; menu_count++) {
        if (angular.equals($scope.tree1[menu_count].fkMenuId, new_menu_id))
          //checking, new menu exists in current root menu
          {
            MeusStatus = false;
          }
        if ($scope.tree1[menu_count].childMenuStructure.length) {
          var subMenu = $scope.tree1[menu_count].childMenuStructure;
          for (var submenu_count = 0; submenu_count < subMenu.length; submenu_count++) {
            if (angular.equals(subMenu[submenu_count].fkMenuId, new_menu_id))
              //checking, new menu exists in current sub menu
              {
                MeusStatus = false;
              }
          }
        }
      }
    };
    $scope.SaveChange = function (id) {
      //To save new menus
      if ($scope.tree1.length) {
        RoleMenuMappingSrv.FnSaveNewRoleMenu($scope, $scope.tree1);
      }
    };
    $scope.createGroup = function (groupName) {
      $scope.tree1.push({
        'MenuName': groupName,
        'menuIcon': $scope.menuIcon,
        'childMenuStructure': []
      });
    };
    $scope.removeFromTree1 = function (thisnode) {
      var menus = [];
      menus.push(thisnode.$nodeScope.$modelValue);
      addMenu(menus, null);
      function addMenu(menu, sub) {
        if (sub == null) {
          sub = 0;
        }
        if (angular.equals(menu[sub], undefined)) {
          return 0;
        }
        if (!angular.equals(menu[sub].MenuLink, undefined)) {
          $scope.tree2.push(menu[sub]);
        }
        if (menu[sub].childMenuStructure.length) {
          addMenu(menu[sub].childMenuStructure, null);
        }
        addMenu(menu, ++sub);
      }
    };
    $scope.removeFromTree2 = function (thisv) {
      $scope.tree1.push(thisv.$nodeScope.$modelValue);
    };
    $scope.moveRight = function (nodeVal) {
      console.log(nodeVal);
    };
    $scope.fnActionExists = function (thisAction, actions) {
      for (var action_count = 0; action_count < actions.length; action_count++) {
        if (actions[action_count] != null) {
          if (actions[action_count].actionName == thisAction) {
            return true;
          }
        }
      }
    };
    $scope.checkAction = function ($menuItem, thisAction, index) {
      console.log($menuItem.actionStatus[index]);
      if ($menuItem.actionStatus[index]) {
        $menuItem.actions.push(thisAction.action);
      } else {
        var currIndex = $menuItem.actions.indexOf(thisAction.action);
        $menuItem.actions.splice(currIndex, 1);
      }
      console.log(index);
    };
  }
]);
angular.module('baabtra').service('RoleMenuMappingSrv', [
  '$http',
  '$alert',
  'bbConfig',
  function RoleMenuMappingSrv($http, $alert, bbConfig) {
    var role_id = '';
    this.FnGetCompanyDetails = function ($scope, range, cmp_name)
      //To Load The Existing Company Details
      {
        $http({
          method: 'post',
          url: bbConfig.BWS + 'FnGetCompanyDetailsJi/',
          data: {
            'range': range,
            'cmp_name': cmp_name
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          //success respond from server
          $scope.result = angular.fromJson(JSON.parse(data));
          //Converting the result to json object
          $scope.companyDetails = $scope.result.comapny_detail;
          //setting the company details
          $scope.companyCount = $scope.result.comapny_count;
          //setting the company count for pagenation
          if ($scope.companyCount === 0)
            //If No matching data found, This will show an error message
            {
              $scope.ShowNoDataFound = true;
              //Enabling the error Message
              $scope.WarringMessage = 'No Matching Comapny Found';
            }
          else {
            $scope.ShowNoDataFound = false;  //Disabling the error Message
          }  //$scope.companyBox=true;//Enabling Comapny Box,To show the company Details
        }).error(function (data, status, headers, config) {
        });
      };
    this.FnLoadTopLevelRoles = function ($scope)
      //To Load The Existing Company Details
      {
        $http({
          method: 'post',
          url: bbConfig.BWS + 'FnLoadTopLevelRoles/',
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          //success respond from server
          $scope.topLevelRoles = angular.fromJson(JSON.parse(data));  //Converting the result to json object
        }).error(function (data, status, headers, config) {
        });
      };
    this.FnGetRoles = function ($scope, cmp_id, range, roleVal)
      //To Load The Roles based on company
      {
        //$scope.indicator=true;
        $http({
          method: 'post',
          url: bbConfig.BWS + 'GetAllRoles/',
          data: {
            'rm_id': $scope.roleId,
            'cmp_id': cmp_id,
            'range': range,
            'roleVal': roleVal
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          $scope.result = angular.fromJson(JSON.parse(data));
          //Converting the result to json object
          $scope.roles = $scope.result.roles;
          //setting the roles details
          $scope.roles_count = $scope.result.roles_count;
          //setting the roles count for pagenation
          if ($scope.roles_count === 0)
            //If No matching data found, This will show an error message
            {
              $scope.ShowNoDataFound = true;
              //Enabling the error Message
              $scope.WarringMessage = 'No Matching Roles Found';
            }
          else {
            $scope.ShowNoDataFound = false;  //Disabling the error Message
          }
          $scope.ModelRoleBox = true;  //Enabling rolesBox,To show the Roles Details
        }).error(function (data, status, headers, config) {
        });
      };
    this.FnGetRoleMenus = function ($scope, id, type)
      //To Load existing menus of selected role
      {
        role_id = id;
        //To Get existing selected role
        $http({
          method: 'post',
          url: bbConfig.BWS + 'GetRoleMenus/',
          data: {
            'fkRoleId': id,
            'type': type
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          $scope.menus = angular.fromJson(JSON.parse(data));
          //Converting the result to json object
          if ($scope.menus.length) {
            //Checking, the selected role have existing menus
            $scope.tree1 = $scope.menus[0].menuStructure[0].regionMenuStructure;
            //Setting exsting menus of selected role to current menu list
            // for (var i = 0; i < $scope.tree1.length; i++) {
            //   $scope.tree1[i].fkMenuId=$scope.tree1[i].fkMenuId.$oid;//Converting root menu ObjectId Id to String        
            //   if($scope.tree1[i].childMenuStructure.length>0){//Checking root menu having any submenu
            //     for (var j = 0; j < $scope.tree1[i].childMenuStructure.length; j++) {
            //       $scope.tree1[i].childMenuStructure[j].fkMenuId=$scope.tree1[i].childMenuStructure[j].fkMenuId.$oid;//Converting sub menu ObjectId to String 
            //     }
            //   }
            // }
            changeObjIdOfMenu($scope.tree1, null);
          } else
            //If no existing role found
            {
              $scope.tree1 = [];
            }
          console.log($scope.tree1);
        }).error(function (data, status, headers, config) {
        });
      };
    var changeObjIdOfMenu = function (menu, sub) {
      if (sub == null) {
        sub = 0;
      }
      if (angular.equals(menu[sub], undefined)) {
        return 0;
      }
      if (!angular.equals(menu[sub].fkMenuId, undefined)) {
        menu[sub].fkMenuId = menu[sub].fkMenuId.$oid;
      }
      if (menu[sub].childMenuStructure.length) {
        changeObjIdOfMenu(menu[sub].childMenuStructure, null);
      }
      changeObjIdOfMenu(menu, ++sub);
    };
    // function changeObjIdOfMenu(menu,sub){
    //   if(sub==null){
    //     sub=0;
    //   }
    //   if(angular.equals(menu[sub],undefined))
    //     return 0;
    //   if(!angular.equals(menu[sub].fkMenuId,undefined)){
    //     menu[sub].fkMenuId=menu[sub].fkMenuId.$oid;
    //     menu[sub].actionMaster=menu[sub].actions;
    //   }
    //   if(menu[sub].childMenuStructure.length)
    //    changeObjIdOfMenu(menu[sub].childMenuStructure,null);
    //   changeObjIdOfMenu(menu,++sub);
    // }
    this.FnGetAllMenus = function ($scope, type)
      //To Load All menus of loded user
      {
        $http({
          method: 'post',
          url: bbConfig.BWS + 'GetAllMenus/',
          data: {
            'rm_id': $scope.rm_id,
            'type': type
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          $scope.allMenus = angular.fromJson(JSON.parse(data));
          //Converting the result to json object
          if ($scope.allMenus.length > 0) {
            //Checking the result
            if (type == 'all') {
              for (var i = 0; i < $scope.allMenus.length; i++) {
                $scope.allMenus[i].fkMenuId = $scope.allMenus[i]._id.$oid;
                $scope.allMenus[i].actionMaster = $scope.allMenus[i].actions;
                delete $scope.allMenus[i]._id;
                $scope.allMenus[i].childMenuStructure = [];
              }
              $scope.tree2 = $scope.allMenus;
            } else {
              $scope.tree2 = $scope.allMenus[0].menuStructure[0].regionMenuStructure;
              //Setting the menus to menulist
              changeObjIdOfMenu($scope.tree2, null);
            }
            var removeDuplicateMenus = function (menu, sub, Child) {
              if (sub == null) {
                sub = 0;
              }
              if (angular.equals(menu[sub], undefined)) {
                return 0;
              }
              if (!angular.equals(menu[sub].MenuLink, undefined)) {
                //console.log(Child);
                //console.log(Child.MenuName+":In:"+menu[sub].MenuName);
                if (Child.fkMenuId == menu[sub].fkMenuId) {
                  Child.actionMaster = menu[sub].actions;
                  menu.splice(sub, 1);
                  return 0;
                }
              }
              if (menu[sub].childMenuStructure.length) {
                removeDuplicateMenus(menu[sub].childMenuStructure, null, Child);
              }
              removeDuplicateMenus(menu, ++sub, Child);
            };
            var checkNodeMenus = function (menu, sub) {
              if (sub == null) {
                sub = 0;
              }
              if (angular.equals(menu[sub], undefined)) {
                return 0;
              }
              if (!angular.equals(menu[sub].MenuLink, undefined)) {
                removeDuplicateMenus($scope.tree2, null, menu[sub]);  //console.log(menu[sub].MenuName);
              }
              if (menu[sub].childMenuStructure.length) {
                checkNodeMenus(menu[sub].childMenuStructure, null);
              }
              checkNodeMenus(menu, ++sub);
            };
            checkNodeMenus($scope.tree1, null);
          } else {
            $scope.tree2 = [];
          }
          console.log($scope.tree2);
          $scope.menudetails = true;  //$scope.menudetails=true;
        }).error(function (data, status, headers, config) {
        });
      };
    this.FnSaveNewRoleMenu = function ($scope, new_menu)
      //To Save current menu list
      {
        $http({
          method: 'post',
          url: bbConfig.BWS + 'SaveNewRoleMenu/',
          data: {
            'menus': new_menu,
            'role_id': role_id,
            'rm_id': $scope.rm_id
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          //console.log(angular.fromJson(JSON.parse(data)));
          if (data == 'Insert') {
            $alert({
              title: 'Success!',
              type: 'success',
              content: 'Menus Insert Successfuly..',
              animation: 'am-fade',
              duration: '3',
              placement: 'top-right',
              template: 'views/ui/angular-strap/alert.tpl.html',
              show: true
            });
          } else if (data == 'Update') {
            $alert({
              title: 'Success!',
              type: 'success',
              content: 'Menus Updated Successfuly..',
              animation: 'am-fade',
              duration: '3',
              placement: 'top-right',
              template: 'views/ui/angular-strap/alert.tpl.html',
              show: true
            });
          } else if (data == 'Not Allowed') {
            $alert({
              title: 'Not Allowed!',
              type: 'warning',
              content: 'More than 1 Submenu Not Allowed',
              animation: 'am-fade',
              duration: '3',
              placement: 'top-right',
              template: 'views/ui/angular-strap/alert.tpl.html',
              show: true
            });
          }
        }).error(function (data, status, headers, config) {
        });
      };
  }
]);
/*
Created By  : Jihin
Created Date:20/11/2014 
*/
angular.module('baabtra').controller('JobpostingCtrl', [
  '$scope',
  'JobSrv',
  '$alert',
  function ($scope, JobSrv, $alert) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.userRoleMappingId = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (loginInfo.roleMappingObj[0].fkCompanyId == '') {
        $scope.companyId = '';
      } else {
        $scope.companyId = $scope.companyState = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }
    //var cmp_id='5457526122588a5db73e0b23';
    //$scope.rm_id='545aff95437b389ba554d6b7';
    $scope.PostJob = function ()
      //To post jobs when click post job button
      {
        $scope.jobDetails = {};
        var temTags = $scope.Job.Tag.split(',');
        //Split Tags with coma
        var newTags = [];
        for (var i = 0; i < temTags.length; i++) {
          //to remove empty elements from Tags
          if (temTags[i] !== undefined && temTags[i] !== null && temTags[i] !== '') {
            newTags.push(temTags[i]);
          }
        }
        $scope.jobDetails.companyId = $scope.companyId;
        $scope.jobDetails.jobTittle = $scope.Job.Tittle;
        $scope.jobDetails.jobDescription = $scope.Job.Description;
        //$scope.jobDetails.noOfVacancies=$scope.Job.noOfVacancies;
        $scope.jobDetails.Qualification = $scope.Job.Qualification;
        $scope.jobDetails.minSalary = $scope.Job.minSalary;
        $scope.jobDetails.maxSalary = $scope.Job.maxSalary;
        $scope.jobDetails.Location = $scope.Job.Location;
        $scope.jobDetails.Tags = newTags;
        $scope.jobDetails.createdDate = new Date();
        $scope.jobDetails.updatedDate = new Date();
        $scope.jobDetails.crmId = $scope.userRoleMappingId;
        $scope.jobDetails.urmId = $scope.userRoleMappingId;
        $scope.jobDetails.activeFlag = 1;
        JobSrv.saveJob($scope);
      };
  }
]);
angular.module('baabtra').controller('ListjobsCtrl', [
  '$scope',
  'JobSrv',
  '$modal',
  function ($scope, JobSrv, $modal) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.userRoleMappingId = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (loginInfo.roleMappingObj[0].fkCompanyId == '') {
        $scope.companyId = '';
      } else {
        $scope.companyId = $scope.companyState = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }
    //var cmp_id='5457526122588a5db73e0b23';
    $scope.activeLink = 1;
    var CurNewValue = '';
    JobSrv.listJobs($scope, cmp_id, '', '');
    $scope.$watch('modelSearch', function (newValue, oldValue) {
      //function which watces the change in text box and used  for searching companies and roles
      if (!angular.equals(newValue, undefined)) {
        CurNewValue = newValue;
        JobSrv.listJobs($scope, $scope.companyId, CurNewValue, '');
      }
    });
    $scope.next_one = function () {
      //To get Next page
      if ($scope.JobCount > 12) {
        $scope.activeLink = $scope.activeLink + 12;
        JobSrv.listJobs($scope, $scope.companyId, CurNewValue, $scope.activeLink - 1);
      }
    };
    $scope.prev_one = function () {
      //To get Previous page
      if ($scope.activeLink > 12) {
        $scope.activeLink = $scope.activeLink - 12;
        JobSrv.listJobs($scope, $scope.companyId, CurNewValue, $scope.activeLink);
      }
    };
    $scope.ViewJobDetails = function (Job) {
      $scope.JobDetails = Job;
      var myOtherModal = $modal({
          scope: $scope,
          template: 'angularModules/company/partials/Partial-viewJobDetailsModal.html',
          show: true
        });
    };
    $scope.editJobDetails = function (Job) {
      $scope.EditJobDetails = Job;
      console.log($scope);
      var myOtherModal = $modal({
          scope: $scope,
          template: 'angularModules/company/partials/Partial-editJobDetailsModal.html',
          show: true
        });
    };
    $scope.hideJobDetails = function (job_id, flag) {
      //alert(job_id);
      var jobStaus = flag ? 0 : 1;
      //alert(jobStaus);
      JobSrv.hideJobDetails(job_id, jobStaus);
    };
  }
]);
angular.module('baabtra').service('JobSrv', [
  'bbConfig',
  '$http',
  '$alert',
  '$modal',
  function JobSrv(bbConfig, $http, $alert, $modal) {
    this.saveJob = function ($scope) {
      $http({
        url: bbConfig.BWS + 'postCompanyJobs/',
        method: 'POST',
        data: $scope.jobDetails,
        withCredentials: false,
        contentType: undefined,
        processData: false
      }).success(function (data, status, headers, config) {
        //console.log(angular.fromJson(JSON.parse(data)));
        $alert({
          title: 'Success!',
          content: 'Job Posted Successfuly..',
          animation: 'am-fade',
          duration: '3',
          placement: 'top-right',
          template: 'views/ui/angular-strap/alert.tpl.html',
          show: true
        });
      }).error(function (data, status, headers, config) {
      });
    };
    this.listJobs = function ($scope, cmp_id, search_key, search_range) {
      $http({
        method: 'post',
        url: bbConfig.BWS + 'getCompanyJobs/',
        data: {
          'cmp_id': cmp_id,
          'search_key': search_key,
          'search_range': search_range
        },
        contentType: 'application/json; charset=UTF-8'
      }).success(function (data, status, headers, config) {
        var result = angular.fromJson(JSON.parse(data));
        $scope.Jobs = result.JobDetails;
        $scope.JobCount = result.jobCount;
        console.log($scope.JobCount);  //$scope.pageNum=pageNum;
      }).error(function (data, status, headers, config) {
      });
    };
    this.updateJobDetails = function (jobDetails, jobId) {
      $http({
        url: bbConfig.BWS + 'UpdateJobDetails/',
        method: 'POST',
        data: {
          'jobId': jobId,
          'jobDetails': jobDetails
        },
        withCredentials: false,
        contentType: undefined,
        processData: false
      }).success(function (data, status, headers, config) {
        //var result=angular.fromJson(JSON.parse(data));
        if (data = 'success') {
        }
      }).error(function (data, status, headers, config) {
      });
    };
    this.hideJobDetails = function (jobId, jobStaus) {
      $http({
        url: bbConfig.BWS + 'HideJobDetails/',
        method: 'POST',
        data: {
          'jobId': jobId,
          'jobStaus': jobStaus
        },
        withCredentials: false,
        contentType: undefined,
        processData: false
      }).success(function (data, status, headers, config) {
        //var result=angular.fromJson(JSON.parse(data));
        if (data = 'success') {
        }
      }).error(function (data, status, headers, config) {
      });
    };
  }
]);
angular.module('baabtra').controller('ViewjobdetailsmodalCtrl', [
  '$scope',
  function ($scope) {
  }
]);
angular.module('baabtra').controller('EditjobdetailsmodalCtrl', [
  '$scope',
  'JobSrv',
  function ($scope, JobSrv) {
    var cmp_id = '5457526122588a5db73e0b23';
    $scope.rm_id = '545aff95437b389ba554d6b7';
    $scope.UpdateJob = function (job_id)
      //To post jobs when click post job button
      {
        $scope.jobDetails = {};
        if (!angular.isArray($scope.EditJobDetails.Tags)) {
          var temTags = $scope.EditJobDetails.Tags.split(',');
          //Split Tags with coma
          var newTags = [];
          for (var i = 0; i < temTags.length; i++) {
            //to remove empty elements from Tags
            if (temTags[i] !== undefined && temTags[i] !== null && temTags[i] !== '') {
              newTags.push(temTags[i]);
            }
          }
          $scope.jobDetails.Tags = newTags;
        } else {
          $scope.jobDetails.Tags = $scope.EditJobDetails.Tags;
        }
        $scope.jobDetails.jobTittle = $scope.EditJobDetails.jobTittle;
        $scope.jobDetails.jobDescription = $scope.EditJobDetails.jobDescription;
        $scope.jobDetails.Qualification = $scope.EditJobDetails.Qualification;
        $scope.jobDetails.minSalary = $scope.EditJobDetails.minSalary;
        $scope.jobDetails.maxSalary = $scope.EditJobDetails.maxSalary;
        $scope.jobDetails.Location = $scope.EditJobDetails.Location;
        JobSrv.updateJobDetails($scope.jobDetails, job_id);
        /*$scope.jobDetails.companyId=cmp_id;
	$scope.jobDetails.jobTittle=$scope.Job.Tittle;
	$scope.jobDetails.jobDescription=$scope.Job.Description;
	//$scope.jobDetails.noOfVacancies=$scope.Job.noOfVacancies;
	$scope.jobDetails.Qualification=$scope.Job.Qualification;
	$scope.jobDetails.minSalary=$scope.Job.minSalary;
	$scope.jobDetails.maxSalary=$scope.Job.maxSalary;
	$scope.jobDetails.Location=$scope.Job.Location;
	$scope.jobDetails.Tags = newTags;
	$scope.jobDetails.createdDate=new Date();
	$scope.jobDetails.updatedDate=new Date();
	$scope.jobDetails.crmId=$scope.rm_id;
	$scope.jobDetails.urmId=$scope.rm_id;
	$scope.jobDetails.activeFlag=1;
	JobSrv.saveJob($scope);*/
        console.log($scope.jobDetails);
      };
  }
]);
angular.module('baabtra').controller('UsermenumappingCtrl', [
  '$location',
  '$scope',
  '$rootScope',
  'userMenuMappingSrv',
  '$alert',
  'localStorageService',
  function ($location, $scope, $rootScope, userMenuMappingSrv, $alert, localStorageService) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.userRoleMappingId = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (angular.equals(loginInfo.roleMappingObj[0].fkCompanyId, '')) {
        $scope.companyId = '';
      } else {
        $scope.companyId = $scope.companyState = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }
    // $rootScope.$watch('userMenusOrigin',function()
    //  {
    //    if($rootScope.userMenusOrigin)
    //    {
    //      $rootScope.breadCrumb($rootScope.userMenusOrigin);
    //    }
    //  });
    //$scope.roleId=1;
    //$scope.companyId='';
    $scope.range = 1;
    var CurNewValue = '';
    var dragStartStatus = false;
    var tree1dragStartStatus = false;
    var MeusStatus = false;
    $scope.comapanyUser = false;
    $scope.placeholderVal = 'Search Users';
    $scope.SearchType = 'Company';
    //$scope.userRoleMappingId='545aff95437b389ba554d6b7';
    if (angular.equals($scope.roleId, 1)) {
      userMenuMappingSrv.FnGetCompanyDetails($scope, '', '');
    } else if (angular.equals($scope.roleId, 2)) {
      $scope.companyState = $scope.companyId;
      //company id
      $scope.comapanyUser = true;
      $scope.SearchType = 'User';
      userMenuMappingSrv.FnLoadUsers($scope, $scope.companyState, '', '');
    }
    $scope.getCompanyAdmin = function () {
      $scope.range = 1;
      userMenuMappingSrv.FnGetCompanyDetails($scope, '', '');
      $scope.placeholderVal = 'Search Users';
      $scope.SearchType = 'Company';
      $scope.modelSearch = '';
      $scope.ModelUserBox = false;
      $scope.comapanyUser = false;
      $scope.menudetails = false;
      $scope.companyState = -1;
      $scope.UserState = -1;
    };
    $scope.getCompanyUser = function () {
      userMenuMappingSrv.FnGetCompanyDetails($scope, '', '');
      $scope.range = 1;
      $scope.placeholderVal = 'Search Companies';
      $scope.modelSearch = '';
      $scope.comapanyUser = true;
      $scope.menudetails = false;
      $scope.companyState = -1;
    };
    $scope.$watch('modelSearch', function (newValue, oldValue) {
      //function which watces the change in text box and used  for searching companies and roles
      if (!angular.equals(newValue, undefined)) {
        CurNewValue = newValue;
        if (angular.equals($scope.SearchType, 'Company')) {
          userMenuMappingSrv.FnGetCompanyDetails($scope, '', CurNewValue);
        } else {
          $scope.menudetails = false;
          $scope.UserState = -1;
          userMenuMappingSrv.FnLoadUsers($scope, $scope.companyState, '', newValue);
        }
      }
    });
    $scope.next_one = function () {
      if ($scope.companyCount > 6 && angular.equals($scope.SearchType, 'Company')) {
        $scope.range = $scope.range + 6;
        userMenuMappingSrv.FnGetCompanyDetails($scope, $scope.range - 1, CurNewValue);
      } else if ($scope.user_count > 8 && angular.equals($scope.SearchType, 'User')) {
        $scope.range = $scope.range + 8;
        userMenuMappingSrv.FnLoadUsers($scope, $scope.companyState, $scope.range - 1, CurNewValue);
      }
    };
    $scope.prev_one = function () {
      //To get Previous page
      if ($scope.range > 6 && angular.equals($scope.SearchType, 'Company')) {
        $scope.range = $scope.range - 6;
        userMenuMappingSrv.FnGetCompanyDetails($scope, $scope.range - 1, CurNewValue);
      } else if ($scope.range > 8 && angular.equals($scope.SearchType, 'User')) {
        $scope.range = $scope.range - 8;
        userMenuMappingSrv.FnLoadUsers($scope, $scope.companyState, $scope.range - 1, CurNewValue);
      }
    };
    $scope.getMenus = function (cmp_id) {
      $scope.companyState = cmp_id;
      userMenuMappingSrv.FnLoadExMenuItems4AUMMapping($scope, '', 2, cmp_id);
    };
    $scope.FnAddUserMenu = function () {
      userMenuMappingSrv.FnSaveUserMenu($scope);
    };
    $scope.tree1NodesOptions = {
      dragStart: function (sourceNodeScope, destNodesScope, destIndex) {
        MeusStatus = true;
        tree1dragStartStatus = true;
      },
      accept: function (sourceNodeScope, destNodesScope, destIndex) {
        if (dragStartStatus) {
          if (!angular.equals(sourceNodeScope.$parentNodeScope, destNodesScope.$parentNodeScope) && !tree1dragStartStatus) {
            $scope.checkNewMenu(sourceNodeScope.$modelValue.fkMenuId);
            if (sourceNodeScope.$modelValue.childMenuStructure.length > 0) {
              var newSubMenu = sourceNodeScope.$modelValue.childMenuStructure;
              for (var i = 0; i < newSubMenu.length; i++) {
                $scope.checkNewMenu(newSubMenu[i].fkMenuId);
              }
            }
            if (!MeusStatus) {
              $alert({
                title: 'Not Allowed!',
                type: 'warning',
                content: 'This Menu Already Exists',
                animation: 'am-fade',
                duration: '3',
                placement: 'top-right',
                template: 'views/ui/angular-strap/alert.tpl.html',
                show: true
              });
            }
            dragStartStatus = false;
          }
        }
        return MeusStatus;
      }
    };
    $scope.tree2NodesOptions = {
      dragStart: function (sourceNodeScope, destNodesScope, destIndex) {
        MeusStatus = true;
        dragStartStatus = true;
        tree1dragStartStatus = false;
      }
    };
    $scope.checkNewMenu = function (new_menu_id) {
      for (var menu_count = 0; menu_count < $scope.tree1.length; menu_count++) {
        if (angular.equals($scope.tree1[menu_count].fkMenuId, new_menu_id))
          //checking, new menu exists in current root menu
          {
            MeusStatus = false;
          }
        if ($scope.tree1[menu_count].childMenuStructure.length) {
          var subMenu = $scope.tree1[menu_count].childMenuStructure;
          for (var submenu_count = 0; submenu_count < subMenu.length; submenu_count++) {
            if (angular.equals(subMenu[submenu_count].fkMenuId, new_menu_id))
              //checking, new menu exists in current sub menu
              {
                MeusStatus = false;
              }
          }
        }
      }
    };
    $scope.getUsers = function (cmp_id) {
      $scope.placeholderVal = 'Search Users';
      $scope.SearchType = 'User';
      $scope.companyState = cmp_id;
      userMenuMappingSrv.FnLoadUsers($scope, cmp_id, '', '');  //calling the service function FnLoadUsers() for loading the existing users
    };
    $scope.getUserMenu = function (id, fkRoleId) {
      $scope.UserState = id;
      userMenuMappingSrv.FnLoadExMenuItems4AUMMapping($scope, id, fkRoleId, '');
    };
  }
]);
angular.module('baabtra').service('userMenuMappingSrv', [
  '$http',
  '$alert',
  'bbConfig',
  function userMenuMappingSrv($http, $alert, bbConfig) {
    var thisService = this;
    // To load the existing company users.
    this.FnGetCompanyDetails = function ($scope, range, prefix) {
      $http({
        method: 'post',
        url: bbConfig.BWS + 'FnGetCompanyDetails/',
        data: JSON.stringify({
          'roleId': $scope.roleId,
          'companyId': $scope.companyId,
          'range': range,
          'prefix': prefix
        }),
        contentType: 'application/json; charset=UTF-8'
      }).success(function (data, status, headers, config) {
        //success respond from server
        var result = angular.fromJson(JSON.parse(data));
        $scope.companyDetails = result.company_details;
        $scope.companyCount = result.company_count;
        if ($scope.ShowNoDataFound) {
          $scope.ShowNoDataFound = false;
        }
        if (!$scope.companyCount) {
          $scope.WarringMessage = 'No Matching User Found';
          $scope.ShowNoDataFound = true;
        }  //$scope.companyDetails=result.data;      //filer the user list from respond data
      }).error(function (data, status, headers, config) {
      });
    };
    //function to load the current users menu items
    this.FnLoadExMenuItems4AUMMapping = function ($scope, fkUserRoleMappingId, fkRoleId, companyId) {
      $http({
        url: bbConfig.BWS + 'LoadExMenuItems4AUMMapping/',
        data: JSON.stringify({
          'fkUserRoleMappingId': fkUserRoleMappingId,
          'companyId': companyId,
          'roleId': fkRoleId
        }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        var result = angular.fromJson(JSON.parse(data));
        //response from server
        if (result !== '') {
          $scope.ExMenus = result.data;
          $scope.CurrentFkUserRoleMappingId = result.urmId.$oid;
          $scope.menuRegionId = $scope.ExMenus[0].menuStructure[0].fkmenuRegionId.$oid;
          $scope.tree1 = $scope.ExMenus[0].menuStructure[0].regionMenuStructure;
          console.log($scope.tree1);
          changeObjIdOfMenu($scope.tree1, null);
          var changeObjIdOfMenu = function (menu, sub) {
            if (sub == null) {
              sub = 0;
            }
            if (angular.equals(menu[sub], undefined)) {
              return 0;
            }
            if (!angular.equals(menu[sub].fkMenuId, undefined)) {
              menu[sub].fkMenuId = menu[sub].fkMenuId.$oid;
            }
            if (menu[sub].childMenuStructure.length) {
              changeObjIdOfMenu(menu[sub].childMenuStructure, null);
            }
            changeObjIdOfMenu(menu, ++sub);
          };
          $scope.menudetails = true;
        }
        thisService.FnLoadMenuItems4AUMMapping($scope, $scope.roleId);
      }).error(function (data, status, headers, config) {
      });
    };
    //function to load the current users menu items
    this.FnLoadMenuItems4AUMMapping = function ($scope, fkRoleId) {
      $http({
        url: bbConfig.BWS + 'LoadMenuItems4AUMMapping/',
        data: JSON.stringify({ 'fkRoleId': fkRoleId }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.menuList = angular.fromJson(JSON.parse(data));
        //response from server
        if ($scope.menuList !== '') {
          $scope.tree2 = $scope.menuList.menuStructure[0].regionMenuStructure;
          //Assigning the object value into a variable to load All menus
          changeObjIdOfMenu($scope.tree2, null);
          var changeObjIdOfMenu = function (menu, sub) {
            if (sub == null) {
              sub = 0;
            }
            if (angular.equals(menu[sub], undefined)) {
              return 0;
            }
            if (!angular.equals(menu[sub].fkMenuId, undefined)) {
              menu[sub].fkMenuId = menu[sub].fkMenuId.$oid;
            }
            if (menu[sub].childMenuStructure.length) {
              changeObjIdOfMenu(menu[sub].childMenuStructure, null);
            }
            changeObjIdOfMenu(menu, ++sub);
          };
          $scope.menuRegionId = $scope.menuList.menuStructure[0].fkmenuRegionId.$oid;
        } else {
          $scope.tree2 = [];
        }
      }).error(function (data, status, headers, config) {
      });
    };
    this.FnSaveUserMenu = function ($scope) {
      //function to save the user menus.
      $scope.stlSaveUMLoading = {
        'margin-top': '-24%',
        'margin-left': '90%'
      };
      $http({
        url: bbConfig.BWS + 'InsertUserMenu/',
        data: {
          'fkUrmId': $scope.userRoleMappingId,
          'fkUserRoleMappingId': $scope.CurrentFkUserRoleMappingId,
          'fkMenuRegionId': $scope.menuRegionId,
          'menus': $scope.tree1
        },
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        if (data == 'Insert') {
          $alert({
            title: 'Success!',
            content: 'Menus Insert Successfuly..',
            animation: 'am-fade',
            duration: '3',
            placement: 'top-right',
            template: 'views/ui/angular-strap/alert.tpl.html',
            show: true
          });
        } else if (data == 'Update') {
          $alert({
            title: 'Success!',
            type: 'success',
            content: 'Menus Updated Successfuly..',
            animation: 'am-fade',
            duration: '3',
            placement: 'top-right',
            template: 'views/ui/angular-strap/alert.tpl.html',
            show: true
          });
        } else if (data == 'Not Allowed') {
          $alert({
            title: 'Not Allowed!',
            type: 'warning',
            content: 'More than 1 Submenu Not Allowed',
            animation: 'am-fade',
            duration: '3',
            placement: 'top-right',
            template: 'views/ui/angular-strap/alert.tpl.html',
            show: true
          });
        }
      }).error(function (data, status, headers, config) {
      });
    };
    this.FnLoadUsers = function ($scope, companyId, range, search_key) {
      $http({
        url: bbConfig.BWS + 'LoadUsers/',
        data: JSON.stringify({
          'companyId': companyId,
          'prefix': search_key,
          'range': range
        }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        //success respond from server
        var result = angular.fromJson(JSON.parse(data));
        //setting the respond into a  variable
        $scope.UserList = result.data;
        //filer the user list from respond data
        $scope.user_count = result.user_count;
        if ($scope.ShowNoDataFound) {
          $scope.ShowNoDataFound = false;
        }
        if (!$scope.user_count) {
          $scope.WarringMessage = 'No Matching User Found';
          $scope.ShowNoDataFound = true;
        }
        if ($scope.UserList.length > 0) {
          $scope.ModelUserBox = true;
        }  //filer the user list from respond data
      }).error(function (data, status, headers, config) {
      });
    };
  }
]);
//created by midhun sudhakar
angular.module('baabtra').controller('LoginViewCtrl', [
  '$scope',
  'LoginService',
  '$location',
  'localStorageService',
  '$rootScope',
  function ($scope, LoginService, $location, localStorageService, $rootScope) {
    /*if (localStorageService.get('loginLsCheck')===1)
    {  
     $location.path('/page/blank');
   }*/
    $scope.btnSignupText = 'Sign in';
    $scope.emailMsg = 'Not a valid email';
    //error message for invalid email validation
    $scope.emailRMsg = 'This is required field';
    //error message for required field validator
    $scope.emailEMsg = 'This Email Already exists';
    //error message for email already exists validation  
    $scope.existingEmail = '';
    //setting the existsing email id to a scope variable      
    //callback function for fnCheckEmailExists
    $scope.fnCheckLogin = function () {
      //FnCheckLogin() is the functoin which is to be fired when user clickg the login button .
      $scope.progress = true;
      $scope.btnSignupText = 'Inprogress...';
      //While login to show the inprogress status as value of button.
      LoginService.fnloginService($scope);
    };
    $scope.emailPattern = function () {
      $scope.regexpEmail = /^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
      return {
        test: function (value) {
          if ($scope.requireEmail === false) {
            return true;
          } else {
            return $scope.regexpEmail.test(value);
          }
        }
      };
    }();
    $scope.fnCheckEmailExists = function (email) {
    };
    $scope.loginSuccessCallback = function (data) {
      localStorageService.add('loginInfo', JSON.parse(data));
      //setting the localstorage value with response from the webservice called.
      $scope.logged = angular.fromJson(JSON.parse(data));
      if ($scope.logged.result === 'true') {
        $rootScope.loginCheck = 1;
        //if login is ok ,changin the variable in rootscope.
        localStorageService.set('loginLsCheck', 1);
        //if login is ok ,changin the variable in localstorage.
        $location.path('/home');
        //routing to home after success login by user
        $scope.login_or_not = 'login Success';
      } else {
        $scope.progress = false;
        //setting button enable
        $scope.btnSignupText = 'Signup';
        //re setting the value of nutton to signup
        localStorageService.set('loginLsCheck', 2);
        //If the user not authenticated keep the value of variable in localstorage to 2
        $location.path('/');
        $scope.login_or_not = 'The Username or Password is incorrect.';
      }
    };
    $scope.loginFailureCallback = function (data) {
      //alert("loginFailureCallback");
      localStorageService.set('loginLsCheck', 2);
      $scope.login_or_not = 'The Username or Password is incorrect.';
    };
  }
]);
angular.module('baabtra').service('LoginService', [
  '$http',
  'bbConfig',
  function LoginService($http, bbConfig) {
    this.fnloginService = function ($scope) {
      $http({
        method: 'POST',
        url: bbConfig.BWS + 'Login/',
        data: $scope.loginCredential
      }).success(function (data, status, headers, config) {
        $scope.loginSuccessCallback(data);
      }).error(function (data, status, headers, config) {
        $scope.loginFailureCallback(data);
      });
    };
  }
]);
angular.module('baabtra').controller('HomeCtrl', [
  '$browser',
  '$rootScope',
  '$state',
  '$scope',
  '$localStorage',
  'localStorageService',
  'home',
  '$location',
  '$dropdown',
  function ($browser, $rootScope, $state, $scope, $localStorage, localStorageService, home, $location, $dropdown) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.rm_id = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (angular.equals(loginInfo.roleMappingObj[0].fkCompanyId, '')) {
        $scope.companyId = '';
      } else {
        $scope.companyId = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id
        $state.go('home.main');
      }
    }
    home.FnLoadMenus($scope);
    $scope.$watch('userMenusOrigin', function () {
      $scope.navBar = true;
      if (!angular.equals($rootScope.userMenusOrigin, undefined)) {
        getMenuByLink($rootScope.userMenusOrigin, null, null, $state.current.url.split('/')[1]);
        if (!$rootScope.menuExist && $state.current.url.split('/')[1] != 'main') {
          if (!Object.keys($state.params).length) {
            $localStorage.linkPath = [];
            $scope.linkPath = $localStorage.linkPath;
            $state.go('home.main');
          }
        } else if ($state.current.url.split('/')[1] == 'main') {
          $scope.navBar = false;
          $localStorage.linkPath = [];
          $scope.linkPath = $localStorage.linkPath;
        }
      }
    });
    if (!angular.equals($localStorage.linkPath, undefined)) {
      $scope.linkPath = $localStorage.linkPath;
      $scope.navBar = false;
    }
    $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
      console.log(toState);
      getMenuByLink($rootScope.userMenusOrigin, null, null, toState.url.split('/')[1]);
      if (!$rootScope.menuExist && toState.url.split('/')[1] != 'main') {
        if (!Object.keys(toParams).length) {
          event.preventDefault();
        }
      } else if (toState.url.split('/')[1] == 'main') {
        if (!$scope.goMenuVal) {
          $scope.linkPath.pop();
        }
        $localStorage.linkPath = $scope.linkPath;  // alert();
                                                   // $scope.navBar=false;
                                                   // $scope.userMenus=$rootScope.userMenusOrigin;
                                                   // $localStorage.linkPath=[];
                                                   // $scope.linkPath=[];
                                                   //$scope.linkPath=$localStorage.linkPath;
      }
    });
    function getMenuByLink(menu, sub, obj, link) {
      $rootScope.menuExist = false;
      if (sub == null) {
        sub = 0;
      }
      if (!angular.equals(menu[sub], undefined)) {
        getMenuByLink(menu, sub + 1, obj, link);
        if (menu[sub].childMenuStructure.length) {
          if (obj == null) {
            obj = [];
          }
          if (!angular.equals(menu[sub].fkMenuId, undefined)) {
            obj.push({
              pathName: menu[sub].MenuName,
              menu_id: menu[sub].fkMenuId.$oid
            });
          } else {
            obj.push({ pathName: menu[sub].MenuName });
          }
          getMenuByLink(menu[sub].childMenuStructure, null, obj, link);
        } else {
          for (var i = 0; i < menu[sub].actions.length; i++) {
          }
          if (menu[sub].MenuLink == link) {
            if (obj == null) {
              obj = [];
            }
            obj.push({
              pathName: menu[sub].MenuName,
              menu_link: menu[sub].MenuLink
            });
            $localStorage.linkPath = obj;
            $scope.linkPath = $localStorage.linkPath;
            $scope.navBar = true;
            $rootScope.menuExist = true;
          }
        }
      }
    }
    $scope.loadDetails = function (menu) {
      if (angular.equals($localStorage.linkPath, undefined)) {
        $localStorage.linkPath = [];
        $scope.linkPath = $localStorage.linkPath;
      }
      if (menu.childMenuStructure.length > 0) {
        if (!angular.equals(menu.fkMenuId, undefined)) {
          $localStorage.linkPath.push({
            pathName: menu.MenuName,
            menu_link: menu.MenuLink
          });
        } else {
          $localStorage.linkPath.push({ pathName: menu.MenuName });
        }
        $scope.navBar = true;
        $scope.userMenus = menu.childMenuStructure;
        $scope.linkPath = $localStorage.linkPath;
      } else {
        //$location.path("home/main/"+menu.M)
        $scope.navBar = true;
        if (!angular.equals(menu.fkMenuId, undefined)) {
          $localStorage.linkPath.push({
            pathName: menu.MenuName,
            menu_link: menu.MenuLink
          });
        } else {
          $localStorage.linkPath.push({ pathName: menu.MenuName });
        }
        $scope.linkPath = $localStorage.linkPath;
        $state.go('home.main.' + menu.MenuLink);
      }
      console.log($scope.linkPath);
    };
    $scope.goHome = function () {
      $localStorage.linkPath = [];
      $scope.linkPath = $localStorage.linkPath;
      $scope.navBar = false;
      $scope.userMenus = $scope.userMenusOrigin;
      $state.go('home.main');
    };
    $scope.goMenu = function (path, index) {
      console.log(path);
      if (!angular.equals(path.menu_link, undefined)) {
        $state.go('home.main.' + path.menu_link);
      } else {
        $scope.goMenuVal = 1;
        if (!angular.equals($localStorage.linkPath.length, index + 1)) {
          var trim_val = $localStorage.linkPath.length - index;
          for (var j = 1; j < trim_val; j++) {
            $scope.linkPath.pop();
            $localStorage.linkPath = $scope.linkPath;
          }
          $state.go('home.main');
        }
        var flag = 0;
        var count = 0;
        getMenu($scope.userMenusOrigin, null);
        var getMenu = function (menu, sub) {
          if (sub == null) {
            sub = 0;
          }
          if (angular.equals(menu[sub], undefined)) {
            return 0;
          }
          if (angular.equals(menu[sub].MenuName, path.pathName)) {
            $scope.userMenus = menu[sub].childMenuStructure;
            flag = 1;
          }
          if (!flag) {
            if (menu[sub].childMenuStructure.length) {
              getMenu(menu[sub].childMenuStructure, null);
            }
            getMenu(menu, ++sub);
          }
        };
      }
    };
  }
]);
angular.module('baabtra').service('home', [
  '$http',
  '$state',
  '$rootScope',
  'bbConfig',
  function home($http, $state, $rootScope, bbConfig) {
    this.FnLoadMenus = function ($scope) {
      $http({
        method: 'post',
        url: bbConfig.BWS + 'LoadMenus/',
        data: { 'rm_id': $scope.rm_id },
        contentType: 'application/json; charset=UTF-8'
      }).success(function (data, status, headers, config) {
        //success respond from server
        var result = angular.fromJson(JSON.parse(data));
        $scope.userMenus = $rootScope.userMenusOrigin = result[0].menuStructure[0].regionMenuStructure;
        $scope.menuLength = $scope.userMenus.length;
        //$scope.getMenuByLink($rootScope.userMenusOrigin,null,null,$state.current.url.split("/")[1]);
        //alert($scope.menuLength);
        $scope.classn = [
          'btn-info',
          'btn-success',
          'btn-warning',
          'btn-danger',
          'btn-inverse'
        ];  //$scope.breadCrumb(result[0].menuStructure[0].regionMenuStructure);
            //$scope.companyDetails=result.data;      //filer the user list from respond data
      }).error(function (data, status, headers, config) {
      });
    };
  }
]);
angular.module('baabtra').controller('ManageUserRoleCtrl', [
  '$scope',
  'manageCompanyRoleService',
  'localStorageService',
  '$location',
  '$alert',
  function ($scope, manageCompanyRoleService, localStorageService, $location, $alert) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/login');  //redirecting path into login
    }
    var loginInfo = localStorageService.get('loginInfo');
    $scope.companyId = loginInfo.userLoginId.$oid;
    var roleMappingObj = loginInfo.roleMappingObj;
    $scope.crmId = roleMappingObj[0].crmId;
    $scope.urmId = roleMappingObj[0].urmId;
    $scope.btnRoleAdd = 'add';
    manageCompanyRoleService.RetrieveUserRole($scope);
    $scope.AddCompanyRole = function () {
      // $scope.progress=true;
      $scope.btnRoleAdd = 'In progress';
      manageCompanyRoleService.addUserRole($scope);
    };
    $scope.deleteRole = function (RollData, arrayindex_for_delete)
      //it wil edit roles from database
      {
        $scope.arrayindex_for_delete = arrayindex_for_delete;
        RollData._id = RollData._id.$oid;
        manageCompanyRoleService.DeleteCompanyRole($scope, RollData);  // calling service function
      };
    $scope.updateUser = function (role, roleData, data)
      //it wil edit roles from database
      {
        $scope.roleData = roleData;
        $scope.role = role;
        $scope.data = data;
        manageCompanyRoleService.UpdateUserRole($scope);
      };
    // call back functions
    $scope.fnAddNewRollCallBack = function (data) {
      //callback function for handle Add new role of the company         
      data = angular.fromJson(JSON.parse(data));
      if (data == 'success') {
        $scope.Form_Adding_form.$setPristine();
        $scope.roleName = '';
        $scope.RoleDesc = '';
        manageCompanyRoleService.RetrieveUserRole($scope);
        $scope.notifications('Success', 'new role added', 'success');
      } else if (data == 'error' || data == 'failed') {
        $scope.notifications('Warning!', 'Failed to Create role', 'warning');
      }
      $scope.btnRoleAdd = 'add';
    };
    $scope.fnRertrivecompanyRoleCallBack = function (data) {
      //callback function for handle Edit role of the company         
      $scope.roles = angular.fromJson(JSON.parse(data));
      // console.log($scope.roles);
      if ($scope.roles == 'error' || $scope.roles == 'failed') {
      } else if ($scope.roles.length < 1) {
      }
    };
    $scope.fnEditUserRoleCallBack = function (data) {
      //callback function for handle Edit role of the company         
      data = angular.fromJson(JSON.parse(data));
      if (data == 'success') {
        $scope.notifications('success', 'Updated', 'success');
      } else if (data == 'error' || data == 'failed') {
        $scope.notifications('Failed to Create role', 'warning');
      }
    };
    $scope.fnDeleteRoleCallBack = function (data) {
      //callback function for handle Edit role of the company         
      data = angular.fromJson(JSON.parse(data));
      if (data == 'success') {
        $scope.roles.splice($scope.arrayindex_for_delete, 1);
      } else if (data == 'error' || data == 'failed') {
        $scope.notifications('Failed to Create role', 'warning');
      }
    };
    //notification 
    $scope.notifications = function (title, message, type) {
      // Notify(message, 'top-right', '2000', type, symbol, true); \
      $alert({
        title: title,
        content: message,
        placement: 'top-right',
        duration: 3,
        type: type
      });  // calling notification message function
    };
  }
]);
angular.module('baabtra').service('manageCompanyRoleService', [
  '$http',
  'bbConfig',
  function manageCompanyRoleService($http, bbConfig) {
    this.addUserRole = function ($scope) {
      // functon that call web service to add a comapny role
      var roles = {
          'roleName': $scope.roleName,
          'RoleDesc': $scope.RoleDesc,
          'companyId': $scope.companyId,
          'crmId': $scope.crmId,
          'urmId': $scope.urmId
        };
      $http({
        url: bbConfig.BWS + 'ManageCompanyRole/',
        data: JSON.stringify({ 'roles': roles }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnAddNewRollCallBack(data);
      }).error(function (data, status, headers, config) {
      });
    };
    this.RetrieveUserRole = function ($scope) {
      // sending a parameter only for test
      $http({
        url: bbConfig.BWS + 'ViewManageCompanyRole/',
        data: JSON.stringify({ 'companyId': $scope.companyId }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnRertrivecompanyRoleCallBack(data);
      }).error(function (data, status, headers, config) {
      });
    };
    this.DeleteCompanyRole = function ($scope, RollData) {
      $http({
        url: bbConfig.BWS + 'DeleteCompanyRole/',
        data: JSON.stringify(RollData),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnDeleteRoleCallBack(data);
      }).error(function (data, status, headers, config) {
      });
    };
    this.UpdateUserRole = function ($scope) {
      var roleData = {
          '_id': $scope.roleData._id.$oid,
          'role': $scope.role,
          'data': $scope.data
        };
      $http({
        url: bbConfig.BWS + 'UpdateCompanyRole/',
        data: JSON.stringify(roleData),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnEditUserRoleCallBack(data);
      }).error(function (data, status, headers, config) {
      });
    };
  }
]);
angular.module('baabtra').directive('fileuploadDir', [
  '$parse',
  function ($parse) {
    return {
      restrict: 'A',
      link: function postLink(scope, element, attrs) {
        var model = $parse(attrs.fileuploadDir);
        var modelSetter = model.assign;
        element.bind('change', function () {
          scope.$apply(function () {
            modelSetter(scope, element[0].files[0]);
          });
        });
      }
    };
  }
]);
angular.module('baabtra').controller('CompanyRegistrationCtrl', [
  '$scope',
  'companyRegistrationService',
  'localStorageService',
  '$location',
  '$alert',
  function ($scope, companyRegistrationService, localStorageService, $location, $alert) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/');
    }
    $scope.companyButtonDisable = false;
    $scope.companyLoading = false;
    $scope.companyLoadStyle = {
      'margin-top': '-3%',
      'margin-left': '2%'
    };
    //value with crmid of current user
    // {ObjectId:"546f0a8f3b572dc8a53c2627"};
    var loginInfo = localStorageService.get('loginInfo');
    // localStorageService.get('loginInfo');
    var loggedusercrmid = loginInfo.roleMappingId.$oid;
    // "546f0a8f3b572dc8a53c2627"
    // loginInfo.roleMappingId.$oid;
    companyRegistrationService.FnGetSectors($scope);
    companyRegistrationService.FnGetCountryStateDistrict($scope);
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //validation
    $scope.emailMsg = 'Not a valid email';
    //error message for invalid email validation
    $scope.emailEMsg = 'This Email Already exists';
    //error message for email already exists validation 
    $scope.existingEmail = '';
    //function to check number pattern
    $scope.NumberPattern = function () {
      $scope.regexpNum = /^[0-9]+$/;
      return {
        test: function (value) {
          if ($scope.requireNum === false) {
            return true;
          } else {
            return $scope.regexpNum.test(value);
          }
        }
      };
    }();
    //funtion to check url pattern
    $scope.urlPattern = function () {
      $scope.regexpUrl = /(http(s)?:\\)?([\w-]+\.)+[\w-]+[.com|.in|.org]+(\[\?%&=]*)?/;
      return {
        test: function (value) {
          if ($scope.requireUrl === false) {
            return true;
          } else {
            return $scope.regexpUrl.test(value);
          }
        }
      };
    }();
    //funtion for email validation 
    $scope.emailPattern = function () {
      $scope.regexpEmail = /^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
      return {
        test: function (value) {
          if ($scope.requireEmail === false) {
            return true;
          } else {
            return $scope.regexpEmail.test(value);
          }
        }
      };
    }();
    //funtion to check password checking
    $scope.checkPassword = function () {
      $scope.companyregistrationform.cpassword.$invalid = $scope.company.password !== $scope.company.cpassword;  //$scope.companyregistrationform.password.$error.dontMatch =$scope.companyregistrationform.$invalid= $scope.company.password !== $scope.company.cpassword;
    };
    //function for user name validation
    $scope.userVal = function (e) {
      var userNameId = $scope.company;
      // console.log(userNameId);
      companyRegistrationService.fnUserNameValid($scope, userNameId);
    };
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //function to register the company
    $scope.fnGetCompanyRegisterDetails = function (company, selection) {
      //function to call the service
      if ($scope.companyregistrationform.$valid) {
        $scope.companyRegData = company;
        $scope.companyRegData.fksectorId = selection.sectors._id.$oid;
        $scope.companyRegData.fkcountryId = selection.country._id.$oid;
        $scope.companyRegData.fkstateId = selection.state.sId.$oid;
        $scope.companyRegData.fkdistrictId = selection.district.dId.$oid;
        $scope.companyRegData.loggedusercrmid = loggedusercrmid;
        console.log($scope.company);
        companyRegistrationService.fnCompanyRegister($scope, $scope.companyRegData);
        $scope.companyButtonDisable = true;
        $scope.companyLoading = true;
      }
    };
    $scope.fnGetSectorsCallBack = function (result) {
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnGetCountryStateDistrictCallBack = function (result) {
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnUserCheckCallBack = function (result) {
      // if(result.userCheck===1){
      //     $scope.companyregistrationform.companyEmail.$error.alreadyUsed =true;
      //     $scope.notifications('UserName already in Use!','fa-warning');
      //   }
      //  if(result.userCheck===0){
      //     $scope.companyregistrationform.companyEmail.$error.alreadyUsed =false;
      //   }
      // if(result==='error'){
      //     $scope.notifications('Error in Username Checking','fa-warning');
      //   }  
      if (result.userCheck === 1) {
        //if the email id already registered
        $scope.existingEmail = $scope.company.eMail;
        //setting the existing email id to scope variable for validation.
        $scope.notifications('Error!', 'UserName already in Use!', 'danger');
      }
      if (result.userCheck === 0) {
      }
    };
    $scope.fnGetCompanyRegisterDetailsCallBack = function (result) {
      if (result === 'success') {
        $scope.notifications('Success', 'Company Registered Successfuly', 'success');
        $scope.companyButtonDisable = false;
        $scope.companyLoading = false;  //$scope.companyregistrationform.reset();
      }
      if (result === 'error') {
        $scope.notifications('Error!', 'Error in Company Registeration', 'danger');
        $scope.companyButtonDisable = false;
        $scope.companyLoading = false;
        // $scope.companyregistrationform.$invalid;
        //$scope.companyregistrationform.reset();
        $scope.companyButtonDisable = true;
      }
      if (result === 'fileErr') {
        $scope.notifications('Error!', 'Unsupported Picture Format', 'danger');
        $scope.companyButtonDisable = false;
        $scope.companyLoading = false;  // $scope.companyregistrationform.$invalid;
      }
    };
    //notification 
    $scope.notifications = function (title, message, type) {
      // Notify(message, 'top-right', '2000', type, symbol, true); \
      $alert({
        title: title,
        content: message,
        placement: 'top-right',
        duration: 3,
        type: type
      });  // calling notification message function
    };
  }
]);
angular.module('baabtra').controller('CompanyViewCtrl', [
  '$scope',
  'companyViewService',
  'localStorageService',
  '$location',
  '$alert',
  '$state',
  function ($scope, companyViewService, localStorageService, $location, $alert, $state) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/');
    }
    if (!angular.equals($state.params.companyId, undefined)) {
      $scope.companyId = $state.params.companyId;
      // console.log($scope.companyId);
      $scope.companySelected = {};
      $scope.companySelected._id = $scope.companyId;
      // console.log($scope.companySelected);
      companyViewService.fnSelectedCompany($scope);
    }
    $scope.placeholderVal = 'Search Companies';
    $scope.ShowNoDataFound = false;
    //console.log($state);
    //$state.current.name=$state.current.name+'.'+$state.params.companyId;
    //id of logged users role mapping id 
    //var loginInfo=localStorageService.get('loginInfo');
    // var loggedusercrmid="546f0a8f3b572dc8a53c2627";
    var loginInfo = localStorageService.get('loginInfo');
    var loggedusercrmid = loginInfo.roleMappingId.$oid;
    // "546f0a8f3b572dc8a53c2627";1
    // console.log(loggedusercrmid);
    //loginInfo.roleMappingId.$oid;
    // to keep count of companies
    $scope.showTime = 0;
    //to load registerd companies
    companyViewService.fnRegisteredCompanies($scope);
    //to edit a company
    $scope.editCompany = function (Field, Value) {
      $scope.companyEdited = {};
      $scope.companyEdited.Field = Field;
      $scope.companyEdited.Value = Value;
      $scope.companyEdited._id = $scope.companySelected._id;
      $scope.companyEdited.loggedusercrmid = loggedusercrmid;
      companyViewService.fnCompanyEdit($scope);
    };
    //search company
    $scope.searchCompany = function (key) {
      $scope.searchWord = {};
      $scope.searchWord.key = key;
      companyViewService.fnSearchCompany($scope);
    };
    //to delete a company
    $scope.deleteCompany = function (company) {
      company.loggedusercrmid = loggedusercrmid;
      companyViewService.fnCompanyDelete($scope, company);
    };
    //to load more companies
    $scope.showMore = function () {
      $scope.showTime = $scope.showTime + 6;
      companyViewService.fnShowMore($scope, $scope.showTime);
    };
    $scope.manageCompany = function (id) {
      $scope.companySelected = {};
      $scope.companyId = id;
      $scope.companySelected._id = id;
      // console.log($scope.companySelected);
      companyViewService.fnSelectedCompany($scope);
    };
    //callbacks
    $scope.fnRegisteredCompaniesCallBack = function (result) {
      if (result === 'error') {
        $scope.notifications('Error!', 'Error!! in Loading Companies', 'warning');
      }
    };
    $scope.fnSelectedCompanyCallBack = function (result) {
      if (result === 'success') {
        // $scope.companyId=$scope.companySelected._id.$oid;
        $scope.companySelected._id = $scope.companySelected._id.$oid;  // console.log($scope.companySelected);
      }
      if (result === 'error') {
        $scope.notifications('Error!', 'Error!! in Loading Selected Company', 'warning');
      }
    };
    $scope.editCompanyCallBack = function (result) {
      if (result === 'success') {
        $scope.notifications('Done', ' Successfully Edited ', 'success');
        companyViewService.fnRegisteredCompanies($scope);
      }
      if (result === 'error') {
        $scope.notifications('Error!', ' Error!! in Edit Operation', 'warning');
      }
    };
    $scope.deleteCompanyCallBack = function (result) {
      if (result === 'success') {
        $scope.notifications('Done', ' Successfully Deleted ', 'success');
        companyViewService.fnRegisteredCompanies($scope);
        $location.path('/home/company');
      }
      if (result === 'error') {
        $scope.notifications('Error!', ' Error!! in Deletion', 'warning');
      }
    };
    $scope.showMoreCallBack = function (result) {
      if (result === 'error') {
        $scope.notifications('Error!', 'Error!! in Show More', 'warning');
      }
    };
    $scope.fnSearchCompanyCallBack = function (result) {
      if (result === 'error') {
        $scope.notifications('Error!', 'Error!! in Searching', 'warning');
      }
    };
    //notification 
    $scope.notifications = function (title, message, type) {
      // Notify(message, 'top-right', '2000', type, symbol, true); \
      $alert({
        title: title,
        content: message,
        placement: 'top-right',
        duration: 3,
        type: type
      });  // calling notification message function
    };
  }
]);
// angular.module('baabtraApp')
//   .controller('RegisteredcompaniesCtrl',['$scope','localStorageService','companyViewService','$location', function ($scope,localStorageService,companyViewService,$location) {
//     if (localStorageService.get('loginLsCheck')===2||localStorageService.get('loginLsCheck')===null) {
//   $location.path('/');
// }      
// }]);
angular.module('baabtra').service('companyRegistrationService', [
  '$http',
  '$upload',
  'bbConfig',
  function companyRegistrationService($http, $upload, bbConfig) {
    // service('Companyregistration',['$http','$upload', function Companyregistration($http,$upload) {
    //service function for sector loading
    this.FnGetSectors = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'CompanySector/',
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.sectorlist = angular.fromJson(JSON.parse(data));
        result = 'success';
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetSectorsCallBack(result);
      });
      return result;
    };
    //service function for country state district loading
    this.FnGetCountryStateDistrict = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'CountryStateDistrict/',
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.CSDlist = angular.fromJson(JSON.parse(data));
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetCountryStateDistrictCallBack(result);
      });
      return result;
    };
    //service fuction for username validation
    this.fnUserNameValid = function ($scope, userNameId) {
      var result;
      $http({
        url: bbConfig.BWS + 'UserNameValid/',
        data: JSON.stringify(userNameId),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = angular.fromJson(JSON.parse(data));
        $scope.fnUserCheckCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnUserCheckCallBack(result);
      });
      return result;
    };
    //service function for company registration
    this.fnCompanyRegister = function ($scope, companyRegData) {
      var result;
      var companyLogo = $scope.company.companyLogo;
      var extArr = companyLogo.name.split('.');
      var ext = extArr[extArr.length - 1].toUpperCase();
      // console.log(companyRegData);
      if (ext !== 'JPG' && ext !== 'JPEG' && ext !== 'PNG' && ext !== 'TIF' && ext !== 'GIF') {
        result = 'fileErr';
        $scope.fnGetCompanyRegisterDetailsCallBack(result);
        return 0;
      }
      $upload.upload({
        url: bbConfig.BWS + 'CompanyRegistration/',
        file: companyLogo,
        data: companyRegData,
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.fnGetCompanyRegisterDetailsCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetCompanyRegisterDetailsCallBack(result);
      }).progress(function (evt) {
        console.log('percent: ' + parseInt(100 * evt.loaded / evt.total));
      });
      return result;
    };  //end ofservice function for company registration
  }
]);
angular.module('baabtra').service('companyViewService', [
  '$http',
  'bbConfig',
  function companyViewService($http, bbConfig) {
    //fnc to get registered companies default count 6
    this.fnRegisteredCompanies = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'RegisteredCompanies/',
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.companylist = angular.fromJson(JSON.parse(data));
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnRegisteredCompaniesCallBack(result);
      });
      return result;
    };
    //fnc to get selected companies default count 6
    this.fnSelectedCompany = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'SelectedCompany/',
        data: JSON.stringify($scope.companySelected._id),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.companySelected = angular.fromJson(JSON.parse(data));
        result = 'success';
        $scope.fnSelectedCompanyCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnSelectedCompanyCallBack(result);
      });
      return result;
    };
    //fnc to get search companies default count 6
    this.fnSearchCompany = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'SearchCompany/',
        data: JSON.stringify($scope.searchWord.key),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        var objArray = angular.fromJson(JSON.parse(data));
        for (var obj = 0; obj < objArray.length; obj++) {
          $scope.companylist.push(objArray[obj]);
        }
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnSearchCompanyCallBack(result);
      });
      return result;
    };
    //function to delete company
    this.fnCompanyDelete = function ($scope, company) {
      var result;
      $http({
        url: bbConfig.BWS + 'CompanyDelete/',
        data: JSON.stringify(company),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.deleteCompanyCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.deleteCompanyCallBack(result);
      });
      return result;
    };
    this.fnShowMore = function ($scope, showTime) {
      var result;
      $http({
        url: bbConfig.BWS + 'ShowMoreCompanies/',
        data: JSON.stringify({ 'showtime': showTime }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        var objArray = angular.fromJson(JSON.parse(data));
        for (var obj = 0; obj < objArray.length; obj++) {
          $scope.companylist.push(objArray[obj]);
        }
      }).error(function (data, status, headers, config) {
        result = 'error';
      });
      return result;
    };
    //function to edit company
    this.fnCompanyEdit = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'CompanyEdit/',
        data: JSON.stringify($scope.companyEdited),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.editCompanyCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.editCompanyCallBack(result);
      });
      return result;
    };
  }
]);
// angular.module('baabtraApp')
//   .service('Registeredcompanies',['$http', function Registeredcompanies($http) {
//     // AngularJS will instantiate a singleton by calling "new" on this function
//   }]);
angular.module('baabtra').controller('header', [
  '$scope',
  '$rootScope',
  '$location',
  'localStorageService',
  function ($scope, $rootScope, $location, localStorageService) {
    var loginInfo = localStorageService.get('loginInfo');
    //initialising the local storage values into a variable
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.userName = loginInfo.name;
      //gets the user login name
      $scope.profilePicSrc = loginInfo.profilePic;
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
    }
    $scope.logout = function () {
      //function fired when clicked on logout .
      $rootScope.loginCheck = 2;
      //rootscope variable value changes to .
      localStorageService.set('loginLsCheck', 2);
      //changing localstorage value.
      localStorageService.set('loginInfo', '{}');
      //resetting the userinfo before logout 
      $location.path('/login');  //redirecting path into login
    };
  }
]);
angular.module('baabtra').controller('UserBillingConfigCtrl', [
  '$scope',
  'userBillingConfigService',
  'localStorageService',
  '$location',
  '$alert',
  '$state',
  function ($scope, userBillingConfigService, localStorageService, $location, $alert, $state) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/');
    }
    $scope.companyId = $state.params.companyId;
    // console.log($scope.companyId);
    userBillingConfigService.FnGetUserPlan($scope);
    userBillingConfigService.FnGetPlan($scope);
    userBillingConfigService.FnGetFeature($scope);
    // console.log($scope.PFlist);
    $scope.featureSelected = false;
    $scope.custombillfield = false;
    $scope.PlanChangeTT = 'Warning changing plan will lead loss of current plan';
    $scope.FeatureConfigTT = 'Click on feature to configure!';
    $scope.PriceConfigTT = 'Click to edit Price';
    $scope.BillConfigTT = 'Click to edit Billing';
    var i;
    $scope.fnChangeplan = function (plan) {
      if (plan.features.length > 0) {
        // console.log($scope.userplan);
        $scope.userplan = {};
        $scope.userplan.companyId = $scope.companyId;
        plan.planId = plan._id;
        delete plan._id;
        $scope.userplan.plan = plan;
        $scope.userplan.plan.planId = $scope.userplan.plan.planId.$oid;
        var flen = $scope.userplan.plan.features.length;
        i = 0;
        while (i < flen) {
          $scope.userplan.plan.features[i].featureId = $scope.userplan.plan.features[i].featureId.$oid;
          i++;
        }
        // console.log($scope.userplan);
        userBillingConfigService.FnChangeUserPlan($scope);
      }
    };
    $scope.fConfig = function (feature) {
      $scope.featureSelected = true;
      $scope.selectedFeature = feature;
      // console.log(feature);
      if (feature.billing.years === 1 && feature.billing.months === 0 && feature.billing.days === 0) {
        // console.log("yearly");
        i = 0;
      } else if (feature.billing.years === 0 && feature.billing.months === 1 && feature.billing.days === 0) {
        // console.log("monthly");
        i = 1;
      } else {
        // console.log("custom");
        i = 2;
      }
      $scope.bill = [
        'yearly',
        'monthly',
        'custom'
      ];
      $scope.sel = {};
      $scope.sel.freqency = $scope.bill[i];
      if ($scope.sel.freqency === 'custom') {
        $scope.custombillfield = true;
      } else if ($scope.sel.freqency !== 'custom') {
        $scope.custombillfield = false;
      }
    };
    $scope.addFeature = function (feature) {
      var index = $scope.featurelist.indexOf(feature);
      // console.log(feature);
      $scope.userplan.plan.features.push(feature);
      if (index >= 0) {
        $scope.featurelist.splice(index, 1);
      }
      $scope.AddFeature = {};
      $scope.AddFeature.companyId = $scope.companyId;
      $scope.AddFeature.feature = feature;
      if (feature._id === undefined) {
        $scope.AddFeature.feature.featureId = feature.featureId.$oid;
      } else if (feature.featureId === undefined) {
        $scope.AddFeature.feature.featureId = feature._id.$oid;
        delete $scope.AddFeature.feature._id;
      }
      // console.log($scope.AddFeature.feature);
      // $scope.AddFeature.feature.featureId=feature._id.$oid;
      // delete $scope.AddFeature.feature._id;
      userBillingConfigService.FnAddFeature($scope);
    };
    $scope.deleteFeature = function (feature) {
      var index = $scope.userplan.plan.features.indexOf(feature);
      // console.log(feature);
      $scope.featurelist.push(feature);
      if (index >= 0) {
        $scope.userplan.plan.features.splice(index, 1);
      }
      $scope.DeleteFeature = {};
      $scope.DeleteFeature.companyId = $scope.companyId;
      if (feature._id === undefined) {
        $scope.DeleteFeature.featureId = feature.featureId.$oid;
      } else if (feature.featureId === undefined) {
        $scope.DeleteFeature.featureId = feature._id.$oid;
      }
      // console.log($scope.DeleteFeature);
      // $scope.DeleteFeature.featureId=feature._id.$oid;
      userBillingConfigService.FnDeleteFeature($scope);
    };
    $scope.editPricing = function (Pricing) {
      $scope.editPrice = {};
      $scope.editPrice.companyId = $scope.companyId;
      $scope.editPrice.featureId = $scope.selectedFeature.featureId.$oid;
      $scope.editPrice.pricing = Pricing;
      // console.log($scope.editPrice);
      userBillingConfigService.FnEditPricing($scope);
    };
    $scope.editBill = function (Billing) {
      // console.log(Billing);
      $scope.editBilling = {};
      $scope.editBilling.billing = {};
      $scope.editBilling.companyId = $scope.companyId;
      $scope.editBilling.featureId = $scope.selectedFeature.featureId.$oid;
      if (Billing === 'yearly') {
        $scope.custombillfield = false;
        $scope.editBilling.billing.years = 1;
        $scope.editBilling.billing.months = 0;
        $scope.editBilling.billing.days = 0;
        $scope.editBilling.billing.totalDays = 365;
        userBillingConfigService.FnEditBilling($scope);
      } else if (Billing === 'monthly') {
        $scope.custombillfield = false;
        $scope.editBilling.billing.years = 0;
        $scope.editBilling.billing.months = 1;
        $scope.editBilling.billing.days = 0;
        $scope.editBilling.billing.totalDays = 30;
        userBillingConfigService.FnEditBilling($scope);
      } else if (Billing === 'custom') {
        $scope.custombillfield = true;
      }  // console.log($scope.editBilling);
    };
    $scope.editCustomBilling = function () {
      $scope.editBilling = {};
      $scope.editBilling.billing = {};
      $scope.editBilling.companyId = $scope.companyId;
      $scope.editBilling.featureId = $scope.selectedFeature.featureId.$oid;
      $scope.editBilling.billing.years = $scope.selectedFeature.billing.years;
      $scope.editBilling.billing.months = $scope.selectedFeature.billing.months;
      $scope.editBilling.billing.days = $scope.selectedFeature.billing.days;
      $scope.editBilling.billing.totalDays = parseInt($scope.selectedFeature.billing.years * 365) + parseInt($scope.selectedFeature.billing.months * 30) + parseInt($scope.selectedFeature.billing.days);
      userBillingConfigService.FnEditBilling($scope);
    };
    //call backs
    $scope.fnGetUserPlanCallBack = function (result) {
      if (result === 'success') {
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnGetPlanCallBack = function (result) {
      if (result === 'success') {
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnGetFeatureCallBack = function (result) {
      if (result === 'success') {
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');  // console.log($scope.featurelist);
      }
    };
    $scope.fnChangeUserPlanCallBack = function (result) {
      if (result === 'success') {
        userBillingConfigService.FnGetUserPlan($scope);
        userBillingConfigService.FnGetFeature($scope);
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnEditPricingCallBack = function (result) {
      if (result === 'success') {
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnAddFeatureCallBack = function (result) {
      if (result === 'success') {
        userBillingConfigService.FnGetUserPlan($scope);
        userBillingConfigService.FnGetFeature($scope);
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnEditBillingCallBack = function (result) {
      if (result === 'success') {
        userBillingConfigService.FnGetUserPlan($scope);
        userBillingConfigService.FnGetFeature($scope);
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    $scope.fnDeleteFeatureCallBack = function (result) {
      if (result === 'success') {
        userBillingConfigService.FnGetUserPlan($scope);
        userBillingConfigService.FnGetFeature($scope);
      }
      if (result === 'error') {
        $scope.notifications('opps!', 'Error in connecting to server', 'danger');
      }
    };
    //notification 
    $scope.notifications = function (title, message, type) {
      // Notify(message, 'top-right', '2000', type, symbol, true); \
      $alert({
        title: title,
        content: message,
        placement: 'top-right',
        duration: 3,
        type: type
      });  // calling notification message function
    };
  }
]);
angular.module('baabtra').controller('UserFeatureConfigCtrl', [
  '$scope',
  'userFeatureConfigService',
  'localStorageService',
  '$location',
  '$alert',
  '$state',
  'schemaForm',
  function ($scope, userFeatureConfigService, localStorageService, $location, $alert, $state, schemaForm) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/');
    }
    var loginInfo = localStorageService.get('loginInfo');
    // localStorageService.get('loginInfo');
    var loggedusercrmid = loginInfo.roleMappingId.$oid;
    $scope.companyId = $state.params.companyId;
    $scope.featuresConfig = {};
    $scope.featuresConfig.roleId = loginInfo.roleMappingObj[0].fkRoleId;
    $scope.featuresConfig.companyId = $scope.companyId;
    console.log($scope.featuresConfig);
    $scope.schema = {
      type: 'object',
      properties: {
        name: {
          type: 'string',
          minLength: 2,
          title: 'Name',
          description: 'Name or alias'
        },
        title: {
          type: 'string',
          enum: [
            'dr',
            'jr',
            'sir',
            'mrs',
            'mr',
            'NaN',
            'dj'
          ]
        }
      }
    };
    $scope.form = [
      '*',
      {
        type: 'submit',
        title: 'Save'
      }
    ];
    $scope.model = {};
  }
]);
angular.module('baabtra').service('userBillingConfigService', [
  '$http',
  'bbConfig',
  function userBillingConfigService($http, bbConfig) {
    //to get user plan details 
    this.FnGetUserPlan = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'GetUserPlan/',
        data: angular.toJson($scope.companyId),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.userplan = angular.fromJson(JSON.parse(data));
        result = 'success';
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetUserPlanCallBack(result);
      });
      return result;
    };
    //to fetch plans 
    this.FnGetPlan = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'GetPlans/',
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.planlist = angular.fromJson(JSON.parse(data));
        result = 'success';
        $scope.fnGetPlanCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetPlanCallBack(result);
      });
      return result;
    };
    //to change user plan 
    this.FnChangeUserPlan = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'ChangeUserPlan/',
        data: angular.toJson($scope.userplan),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.fnChangeUserPlanCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnChangeUserPlanCallBack(result);
      });
      return result;
    };
    //to get features excluding features in user plan 
    this.FnGetFeature = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'GetFeatures/',
        data: angular.toJson($scope.companyId),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.featurelist = angular.fromJson(JSON.parse(data));
        result = 'success';
        $scope.fnGetFeatureCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetFeatureCallBack(result);
      });
      return result;
    };
    //to add new feature to user plan
    this.FnAddFeature = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'AddFeature/',
        data: angular.toJson($scope.AddFeature),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.fnAddFeatureCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnAddFeatureCallBack(result);
      });
      return result;
    };
    //to delete feature from user plan 
    this.FnDeleteFeature = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'DeleteFeature/',
        data: angular.toJson($scope.DeleteFeature),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.fnDeleteFeatureCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnDeleteFeatureCallBack(result);
      });
      return result;
    };
    //to edit pricing of a feature 
    this.FnEditPricing = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'EditPricing/',
        data: angular.toJson($scope.editPrice),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.fnEditPricingCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnEditPricingCallBack(result);
      });
      return result;
    };
    // to edit billing of feature 
    this.FnEditBilling = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'EditBilling/',
        data: angular.toJson($scope.editBilling),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        result = 'success';
        $scope.fnEditBillingCallBack(result);
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnEditBillingCallBack(result);
      });
      return result;
    };
  }
]);
angular.module('baabtra').service('userFeatureConfigService', [
  '$http',
  'bbConfig',
  function userFeatureConfigService($http, bbConfig) {
    this.FnGetFeatures = function ($scope) {
      var result;
      $http({
        url: bbConfig.BWS + 'GetFeaturesConfig/',
        data: angular.toJson($scope.featuresConfig),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.userplan = angular.fromJson(JSON.parse(data));
        result = 'success';
      }).error(function (data, status, headers, config) {
        result = 'error';
        $scope.fnGetUserPlanCallBack(result);
      });
      return result;
    };
  }
]);
angular.module('baabtra').controller('AddmenuCtrl', [
  '$scope',
  '$modal',
  '$rootScope',
  'addMenu',
  'localStorageService',
  function ($scope, $modal, $rootScope, addMenu, localStorageService) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.userRoleMappingId = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (loginInfo.roleMappingObj[0].fkCompanyId == '') {
        $scope.companyId = '';
      } else {
        $scope.companyId = $scope.companyState = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }
    // $rootScope.$watch('userMenusOrigin',function()
    //   {
    //     if($rootScope.userMenusOrigin)
    //     {
    //       $rootScope.breadCrumb($rootScope.userMenusOrigin);
    //     }
    //   });
    $scope.IconName = [
      'fa-adjust circle half',
      'fa-anchor',
      'fa-archive box',
      'fa-arrows',
      'fa-arrows-h',
      'fa-arrows-v',
      'fa-asterisk star',
      'fa-at gmail',
      'fa-automobile',
      'fa-ban',
      'fa-bank',
      'fa-barcode',
      'fa-bars',
      'fa-beer',
      'fa-bell',
      'fa-bell-o',
      'fa-bell-slash',
      'fa-bell-slash-o',
      'fa-bicycle',
      'fa-binoculars',
      'fa-birthday-cake',
      'fa-bolt',
      'fa-bomb',
      'fa-book',
      'fa-bookmark',
      'fa-bookmark-o',
      'fa-briefcase',
      'fa-bug patta',
      'fa-building',
      'fa-building-o',
      'fa-bullhorn',
      'fa-bullseye i',
      'fa-bus',
      'fa-cab',
      'fa-calculator',
      'fa-calendar',
      'fa-calendar-o',
      'fa-camera',
      'fa-camera-retro',
      'fa-car',
      'fa-caret-square-o-down',
      'fa-caret-square-o-left',
      'fa-caret-square-o-right',
      'fa-caret-square-o-up',
      'fa-cc',
      'fa-certificate',
      'fa-check',
      'fa-check-circle',
      'fa-check-circle-o',
      'fa-check-square',
      'fa-check-square-o',
      'fa-child',
      'fa-circle',
      'fa-circle-o',
      'fa-circle-o-notch',
      'fa-circle-thin',
      'fa-clock-o',
      'fa-close',
      'fa-cloud',
      'fa-cloud-download',
      'fa-cloud-upload',
      'fa-code',
      'fa-code-fork',
      'fa-coffee',
      'fa-cog',
      'fa-cogs',
      'fa-comment',
      'fa-comment-o',
      'fa-comments',
      'fa-comments-o',
      'fa-compass',
      'fa-copyright',
      'fa-credit-card',
      'fa-crop',
      'fa-crosshairs',
      'fa-cube',
      'fa-cubes',
      'fa-cutlery',
      'fa-dashboard',
      'fa-database',
      'fa-desktop',
      'fa-dot-circle-o',
      'fa-download',
      'fa-edit',
      'fa-ellipsis-h',
      'fa-ellipsis-v',
      'fa-envelope',
      'fa-envelope-o',
      'fa-envelope-square',
      'fa-eraser',
      'fa-exchange',
      'fa-exclamation',
      'fa-exclamation-circle',
      'fa-exclamation-triangle',
      'fa-external-link',
      'fa-external-link-square',
      'fa-eye i',
      'fa-eye-slash i',
      'fa-eyedropper i',
      'fa-fax',
      'fa-female',
      'fa-fighter-jet',
      'fa-file-archive-o',
      'fa-file-audio-o',
      'fa-file-code-o',
      'fa-file-excel-o',
      'fa-file-image-o',
      'fa-file-movie-o',
      'fa-file-pdf-o',
      'fa-file-photo-o',
      'fa-file-picture-o',
      'fa-file-powerpoint-o',
      'fa-file-sound-o',
      'fa-file-video-o',
      'fa-file-word-o',
      'fa-file-zip-o',
      'fa-film',
      'fa-filter',
      'fa-fire',
      'fa-fire-extinguisher',
      'fa-flag',
      'fa-flag-checkered',
      'fa-flag-o',
      'fa-flash',
      'fa-flask',
      'fa-folder',
      'fa-folder-o',
      'fa-folder-open',
      'fa-folder-open-o',
      'fa-frown-o',
      'fa-futbol-o',
      'fa-gamepad',
      'fa-gavel',
      'fa-gear',
      'fa-gears',
      'fa-gift',
      'fa-glass',
      'fa-globe',
      'fa-graduation-cap',
      'fa-group',
      'fa-hdd-o',
      'fa-headphones',
      'fa-heart',
      'fa-heart-o',
      'fa-history',
      'fa-home',
      'fa-image',
      'fa-inbox',
      'fa-info',
      'fa-info-circle',
      'fa-institution',
      'fa-key',
      'fa-keyboard-o',
      'fa-language',
      'fa-laptop',
      'fa-leaf',
      'fa-legal',
      'fa-lemon-o',
      'fa-level-down',
      'fa-level-up',
      'fa-life-bouy',
      'fa-life-buoy',
      'fa-life-ring',
      'fa-life-saver',
      'fa-lightbulb-o',
      'fa-location-arrow',
      'fa-lock',
      'fa-magic',
      'fa-magnet',
      'fa-mail-forward',
      'fa-mail-reply',
      'fa-mail-reply-all',
      'fa-male',
      'fa-map-marker',
      'fa-meh-o',
      'fa-microphone',
      'fa-microphone-slash',
      'fa-minus',
      'fa-minus-circle',
      'fa-minus-square',
      'fa-minus-square-o',
      'fa-mobile',
      'fa-mobile-phone',
      'fa-money',
      'fa-moon-o',
      'fa-mortar-board',
      'fa-music',
      'fa-navicon',
      'fa-newspaper-o',
      'fa-paint-brush',
      'fa-paper-plane',
      'fa-paper-plane-o',
      'fa-paw',
      'fa-pencil',
      'fa-pencil-square',
      'fa-pencil-square-o',
      'fa-phone',
      'fa-phone-square',
      'fa-photo',
      'fa-picture-o',
      'fa-plane',
      'fa-plug',
      'fa-plus',
      'fa-plus-circle',
      'fa-plus-square',
      'fa-plus-square-o',
      'fa-power-off',
      'fa-print',
      'fa-puzzle-piece',
      'fa-qrcode',
      'fa-question',
      'fa-question-circle',
      'fa-quote-left',
      'fa-quote-right',
      'fa-random',
      'fa-recycle',
      'fa-refresh',
      'fa-remove',
      'fa-reorder',
      'fa-reply',
      'fa-reply-all',
      'fa-retweet',
      'fa-road',
      'fa-rocket',
      'fa-rss',
      'fa-rss-square',
      'fa-search',
      'fa-search-minus',
      'fa-search-plus',
      'fa-send',
      'fa-send-o',
      'fa-share',
      'fa-share-alt',
      'fa-share-alt-square',
      'fa-share-square',
      'fa-share-square-o',
      'fa-shield',
      'fa-shopping-cart',
      'fa-sign-in',
      'fa-sign-out',
      'fa-signal',
      'fa-sitemap',
      'fa-sliders',
      'fa-smile-o',
      'fa-soccer-ball-o',
      'fa-sort',
      'fa-sort-alpha-asc',
      'fa-sort-alpha-desc',
      'fa-sort-amount-asc',
      'fa-sort-amount-desc',
      'fa-sort-asc',
      'fa-sort-desc',
      'fa-sort-down',
      'fa-sort-numeric-asc',
      'fa-sort-numeric-desc',
      'fa-sort-up',
      'fa-space-shuttle',
      'fa-spinner',
      'fa-spoon',
      'fa-square',
      'fa-square-o',
      'fa-star',
      'fa-star-half',
      'fa-star-half-empty',
      'fa-star-half-full',
      'fa-star-half-o',
      'fa-star-o',
      'fa-suitcase',
      'fa-sun-o',
      'fa-support',
      'fa-tablet',
      'fa-tachometer',
      'fa-tag',
      'fa-tags',
      'fa-tasks',
      'fa-taxi',
      'fa-terminal',
      'fa-thumb-tack',
      'fa-thumbs-down',
      'fa-thumbs-o-down',
      'fa-thumbs-o-up',
      'fa-thumbs-up',
      'fa-ticket',
      'fa-times',
      'fa-times-circle',
      'fa-times-circle-o',
      'fa-tint',
      'fa-toggle-down',
      'fa-toggle-left',
      'fa-toggle-off',
      'fa-toggle-on',
      'fa-toggle-right',
      'fa-toggle-up',
      'fa-trash',
      'fa-trash-o',
      'fa-tree',
      'fa-trophy',
      'fa-truck',
      'fa-tty',
      'fa-umbrella',
      'fa-university',
      'fa-unlock',
      'fa-unlock-alt',
      'fa-unsorted',
      'fa-upload',
      'fa-user',
      'fa-users',
      'fa-video-camera',
      'fa-volume-down',
      'fa-volume-off',
      'fa-volume-up',
      'fa-warning',
      'fa-wheelchair',
      'fa-wifi',
      'fa-wrench',
      'fa-file',
      'fa-adn',
      'fa-android',
      'fa-angellist',
      'fa-apple',
      'fa-behance',
      'fa-behance-square',
      'fa-bitbucket',
      'fa-bitbucket-square',
      'fa-bitcoin',
      'fa-btc',
      'fa-cc-amex',
      'fa-cc-discover',
      'fa-cc-mastercard',
      'fa-cc-paypal',
      'fa-cc-stripe',
      'fa-cc-visa',
      'fa-codepen',
      'fa-css3',
      'fa-delicious',
      'fa-deviantart',
      'fa-digg',
      'fa-dribbble',
      'fa-dropbox',
      'fa-drupal',
      'fa-empire',
      'fa-facebook',
      'fa-facebook-square',
      'fa-flickr',
      'fa-foursquare',
      'fa-ge',
      'fa-git',
      'fa-git-square',
      'fa-github',
      'fa-github-alt',
      'fa-github-square',
      'fa-gittip',
      'fa-google',
      'fa-google-plus',
      'fa-google-plus-square',
      'fa-google-wallet',
      'fa-hacker-news',
      'fa-html5',
      'fa-instagram',
      'fa-ioxhost',
      'fa-joomla',
      'fa-jsfiddle',
      'fa-lastfm',
      'fa-lastfm-square',
      'fa-linkedin',
      'fa-linkedin-square',
      'fa-linux',
      'fa-maxcdn',
      'fa-meanpath',
      'fa-openid',
      'fa-pagelines',
      'fa-paypal',
      'fa-pied-piper',
      'fa-pied-piper-alt',
      'fa-pinterest',
      'fa-pinterest-square',
      'fa-qq',
      'fa-ra',
      'fa-rebel',
      'fa-reddit',
      'fa-reddit-square',
      'fa-renren',
      'fa-skype',
      'fa-slack',
      'fa-slideshare',
      'fa-soundcloud',
      'fa-spotify',
      'fa-stack-exchange',
      'fa-stack-overflow',
      'fa-steam',
      'fa-steam-square',
      'fa-stumbleupon',
      'fa-stumbleupon-circle',
      'fa-tencent-weibo',
      'fa-trello',
      'fa-tumblr',
      'fa-tumblr-square',
      'fa-twitch',
      'fa-twitter',
      'fa-twitter-square',
      'fa-vimeo-square',
      'fa-vine',
      'fa-vk',
      'fa-wechat',
      'fa-weibo',
      'fa-weixin',
      'fa-windows',
      'fa-wordpress',
      'fa-xing',
      'fa-xing-square',
      'fa-yahoo',
      'fa-yelp',
      'fa-youtube',
      'fa-youtube-play',
      'fa-youtube-square',
      'fa-ambulance',
      'fa-h-square',
      'fa-hospital-o',
      'fa-medkit',
      'fa-stethoscope',
      'fa-user-md',
      'fa-arrows-alt',
      'fa-backward',
      'fa-compress',
      'fa-eject',
      'fa-expand',
      'fa-fast-backward',
      'fa-fast-forward',
      'fa-forward',
      'fa-pause',
      'fa-play',
      'fa-play-circle',
      'fa-play-circle-o',
      'fa-step-backward',
      'fa-step-forward',
      'fa-stop',
      'fa-angle-double-down',
      'fa-angle-double-left',
      'fa-angle-double-right',
      'fa-angle-double-up',
      'fa-angle-down',
      'fa-angle-left',
      'fa-angle-right',
      'fa-angle-up',
      'fa-arrow-circle-down',
      'fa-arrow-circle-left',
      'fa-arrow-circle-o-down',
      'fa-arrow-circle-o-left',
      'fa-arrow-circle-o-right',
      'fa-arrow-circle-o-up',
      'fa-arrow-circle-right',
      'fa-arrow-circle-up',
      'fa-arrow-down',
      'fa-arrow-left',
      'fa-arrow-right',
      'fa-arrow-up',
      'fa-caret-down',
      'fa-caret-left',
      'fa-caret-right',
      'fa-caret-up',
      'fa-chevron-circle-down',
      'fa-chevron-circle-left',
      'fa-chevron-circle-right',
      'fa-chevron-circle-up',
      'fa-chevron-down',
      'fa-chevron-left',
      'fa-chevron-right',
      'fa-chevron-up',
      'fa-hand-o-down',
      'fa-hand-o-left',
      'fa-hand-o-right',
      'fa-hand-o-up',
      'fa-long-arrow-down',
      'fa-long-arrow-left',
      'fa-long-arrow-right',
      'fa-long-arrow-up',
      'fa-align-center',
      'fa-align-justify',
      'fa-align-left',
      'fa-align-right',
      'fa-bold',
      'fa-chain',
      'fa-chain-broken',
      'fa-clipboard',
      'fa-columns',
      'fa-copy',
      'fa-cut',
      'fa-dedent',
      'fa-file-o',
      'fa-file-text',
      'fa-file-text-o',
      'fa-files-o',
      'fa-floppy-o',
      'fa-font',
      'fa-header',
      'fa-indent',
      'fa-italic',
      'fa-link',
      'fa-list',
      'fa-list-alt',
      'fa-list-ol',
      'fa-list-ul',
      'fa-outdent',
      'fa-paperclip',
      'fa-paragraph',
      'fa-paste',
      'fa-repeat',
      'fa-rotate-left',
      'fa-rotate-right',
      'fa-save',
      'fa-scissors',
      'fa-strikethrough',
      'fa-subscript',
      'fa-superscript',
      'fa-table',
      'fa-text-height',
      'fa-text-width',
      'fa-th',
      'fa-th-large',
      'fa-th-list',
      'fa-underline',
      'fa-undo',
      'fa-unlink',
      'fa-area-chart',
      'fa-bar-chart',
      'fa-bar-chart-o',
      'fa-line-chart',
      'fa-pie-chart'
    ];
    addMenu.FnGetAllMenus($scope, 'all');
    $scope.opt_type = 'Add Menu';
    $scope.GetIcon = function () {
      $modal({
        scope: $scope,
        template: 'angularModules/company/partials/iconPage.html',
        placement: 'center',
        show: true
      });
    };
    // $rootScope.$watch('userMenusOrigin',function()
    //   {
    //     if($rootScope.userMenusOrigin)
    //     {
    //       $rootScope.breadCrumb($rootScope.userMenusOrigin);
    //     }
    //   });
    // var name='a-align-center fa-align-justify fa-align-left fa-align-right fa-bold fa-chain fa-chain-broken fa-clipboard fa-columns fa-copy fa-cut fa-dedent fa-eraser fa-file fa-file-o fa-file-text fa-file-text-o fa-files-o fa-floppy-o fa-font fa-header fa-indent fa-italic fa-link fa-list fa-list-alt fa-list-ol fa-list-ul fa-outdent fa-paperclip fa-paragraph fa-paste fa-repeat fa-rotate-left fa-rotate-right fa-save fa-scissors fa-strikethrough fa-subscript fa-superscript fa-table fa-text-height fa-text-width fa-th fa-th-large fa-th-list fa-underline fa-undo fa-unlink';
    //$scope.IconName=name.split(" ");
    $scope.menu = {};
    $scope.menu.menuIcon = 'fa-info';
    $scope.setIcon = function (icon) {
      $scope.menu.menuIcon = icon;
    };
    $scope.AddMenu = function () {
      // $scope.menu.MenuName=$scope.MenuName;
      // $scope.menu.MenuLink=$scope.MenuLink;
      // $scope.menu.menuIcon=$scope.Icon;
      $scope.menu.createdDate = Date();
      $scope.menu.updatedDate = Date();
      $scope.menu.crmId = $scope.userRoleMappingId;
      $scope.menu.urmId = $scope.userRoleMappingId;
      $scope.menu.activeFlag = 1;
      addMenu.addMenuDetails($scope);  //alert($scope.Icon);
    };
    $scope.editMenu = function (menu) {
      $scope.opt_type = 'Update Menu';
      $scope.menu.actions = menu.actions;
      $scope.menu.MenuName = menu.MenuName;
      $scope.menu.MenuLink = menu.MenuLink;
      $scope.menu.menuIcon = menu.menuIcon;
    };
    $scope.menu.actions = [];
    $scope.addActtion = function () {
      if ($scope.menu.stateName && $scope.menu.actionName != undefined) {
        $scope.menu.actions.push({
          'actionName': $scope.menu.actionName,
          'stateName': $scope.menu.stateName
        });
        $scope.menu.stateName = '';
        $scope.menu.actionName = '';
      }
    };
    $scope.removeAction = function (index) {
      $scope.menu.actions.splice(index, 1);
    };
    $scope.editAction = function (action, index) {
      $scope.menu.stateName = action.stateName;
      $scope.menu.actionName = action.actionName;
      $scope.menu.actions.splice(index, 1);
    };
  }
]);
angular.module('baabtra').service('addMenu', [
  '$http',
  '$alert',
  'bbConfig',
  function addMenu($http, $alert, bbConfig) {
    this.addMenuDetails = function ($scope) {
      $http({
        method: 'post',
        url: bbConfig.BWS + 'AddMenus/',
        data: { 'menu': $scope.menu },
        contentType: 'application/json; charset=UTF-8'
      }).success(function (data, status, headers, config) {
        //success respond from server
        if (data == 'success') {
          $alert({
            title: 'Success!',
            type: 'success',
            content: 'Menus Insert Successfuly..',
            animation: 'am-fade',
            duration: '3',
            placement: 'top-right',
            template: 'views/ui/angular-strap/alert.tpl.html',
            show: true
          });
        }
      }).error(function (data, status, headers, config) {
      });
    };
    this.FnGetAllMenus = function ($scope, type)
      //To Load All menus of loded user
      {
        $http({
          method: 'post',
          url: bbConfig.BWS + 'GetAllMenus/',
          data: {
            'rm_id': $scope.userRoleMappingId,
            'type': type
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          $scope.allMenus = angular.fromJson(JSON.parse(data));
          //Converting the result to json object
          console.log($scope.allMenus);
        }).error(function (data, status, headers, config) {
        });
      };
  }
]);
angular.module('baabtra').controller('ViewmenuCtrl', [
  '$scope',
  function ($scope) {
  }
]);
angular.module('baabtra').factory('viewMenuSrv', function () {
  var viewMenuSrv = {};
  return viewMenuSrv;
});
angular.module('baabtra').controller('ManagecompanyCtrl', [
  '$scope',
  '$localStorage',
  'localStorageService',
  '$rootScope',
  '$state',
  '$location',
  'manageCompanySrv',
  function ($scope, $localStorage, localStorageService, $rootScope, $state, $location, manageCompanySrv) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.rm_id = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (angular.equals(loginInfo.roleMappingObj[0].fkCompanyId, '')) {
        $scope.companyId = '';
      } else {
        $scope.companyId = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }
    //console.log($state.current);
    // $rootScope.$watch('userMenusOrigin',function(){ 
    //         if($rootScope.userMenusOrigin)
    //           $rootScope.breadCrumb($rootScope.userMenusOrigin);
    //       });
    manageCompanySrv.FnGetCompanyDetails($scope, '', '');
    $scope.manageComapny = function (comapny) {
      $state.go('home.main.manageCompany.company', { 'companyId': comapny._id.$oid });
    };
  }
]);
angular.module('baabtra').service('manageCompanySrv', [
  '$http',
  'bbConfig',
  function manageCompanySrv($http, bbConfig) {
    this.FnGetCompanyDetails = function ($scope, range, cmp_name)
      //To Load The Existing Company Details
      {
        $http({
          method: 'post',
          url: bbConfig.BWS + 'FnGetCompanyDetailsJi/',
          data: {
            'range': range,
            'cmp_name': cmp_name
          },
          contentType: 'application/json; charset=UTF-8'
        }).success(function (data, status, headers, config) {
          //success respond from server
          $scope.result = angular.fromJson(JSON.parse(data));
          //Converting the result to json object
          $scope.companyDetails = $scope.result.comapny_detail;
          //setting the company details
          $scope.companyCount = $scope.result.comapny_count;
          //setting the company count for pagenation
          if ($scope.companyCount === 0)
            //If No matching data found, This will show an error message
            {
              $scope.ShowNoDataFound = true;
              //Enabling the error Message
              $scope.WarringMessage = 'No Matching Comapny Found';
            }
          else {
            $scope.ShowNoDataFound = false;  //Disabling the error Message
          }  //$scope.companyBox=true;//Enabling Comapny Box,To show the company Details
        }).error(function (data, status, headers, config) {
        });
      };
  }
]);
angular.module('baabtra').controller('CompanyhomeCtrl', [
  '$scope',
  '$state',
  'localStorageService',
  function ($scope, $state, localStorageService) {
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.rm_id = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (loginInfo.roleMappingObj[0].fkCompanyId == '') {
        $scope.companyId = '';
      } else {
        $scope.companyId = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id 
        $location.path('/home');
      }
    }  //console.log($state.current);
  }
]);
angular.module('baabtra').controller('BranchesCtrl', [
  '$scope',
  '$alert',
  '$timeout',
  'localStorageService',
  '$aside',
  'branchSrv',
  function ($scope, $alert, $timeout, localStorageService, $aside, branchSrv) {
    $scope.branchTree = [];
    $scope.branch = '';
    var loginInfo = localStorageService.get('loginInfo');
    if (loginInfo === null || loginInfo.length === 0) {
      $location.path('/');  //setting the location path to login page if local storage contain null value.
    }
    if (localStorageService.get('loginInfo').length !== 0) {
      //checking for data in local storage
      $scope.rm_id = loginInfo.roleMappingId.$oid;
      //gets the last logged role mapping id from local storage
      if (loginInfo.roleMappingObj[0].fkCompanyId == '') {
        $scope.companyId = '';
      } else {
        $scope.companyId = loginInfo.roleMappingObj[0].fkCompanyId.$oid;
      }
      $scope.roleId = loginInfo.roleMappingObj[0].fkRoleId;
      if ($scope.roleId != 1 && $scope.roleId != 2) {
        //checking for login role id
        $state.go('home.main');
      }
    }
    branchSrv.fnLoadBranch($scope, '5457526122588a5db73e0b23');
    //$scope.companyId="5457526122588a5db73e0b23";
    $scope.common = {
      connector: [
        'Flowchart',
        { cornerRadius: 5 }
      ],
      anchor: [
        'Top',
        'Bottom'
      ],
      endpoint: 'Blank'
    };
    $scope.drawLines = function (bTree) {
      $timeout(function () {
        angular.forEach(bTree, function (node) {
          jsPlumb.ready(function () {
            if (node.parent != null) {
              $scope.myInstanceOfJsPlumb = jsPlumb.connect({
                source: node.parent,
                target: node._id,
                paintStyle: {
                  strokeStyle: 'lightgray',
                  lineWidth: 3
                },
                endpointStyle: {
                  fillStyle: 'lightgray',
                  outlineColor: 'gray'
                },
                overlays: [[
                    'Arrow',
                    {
                      width: 12,
                      length: 12,
                      location: 0.67
                    }
                  ]]
              }, $scope.common);
            }
            ;
          });
          if (node.childrenObj != undefined) {
            $scope.drawLines(node.childrenObj);
          }
          ;
        });
      }, 100);
    };
    $scope.tree1NodesOptions = {
      dropped: function (event) {
        console.log(event);
        console.log(event.source.nodeScope.$modelValue.parent);
        console.log(event.dest.nodesScope.$parent.$modelValue._id);
        if (!angular.equals(event.source.nodeScope.$modelValue.parent, event.dest.nodesScope.$parent.$modelValue._id)) {
          event.source.nodesScope.$parent.$modelValue.children.splice(event.source.index, 1);
          if (!event.source.nodesScope.$parent.$modelValue.children.length) {
            event.source.nodesScope.$parent.$modelValue.children = null;
          }
          ;
          event.source.nodeScope.$modelValue.parent = event.dest.nodesScope.$parent.$modelValue._id;
          event.dest.nodesScope.$parent.$modelValue.children.push(event.source.nodeScope.$modelValue._id);
          branchSrv.fnInsertBranch($scope, '5457526122588a5db73e0b23', $scope.branches, $scope.rm_id);
        }
        ;
      }
    };
    $scope.$watch('branches', function (newValue, oldValue) {
      if ($scope.branches != undefined) {
        console.log(jsPlumb);
        jsPlumb.detachEveryConnection();
        buildBranchTree(findRoots($scope.branches, null), null);
        $scope.drawLines($scope.branchTree);
      }
      ;
    });
    function buildBranchTree(branchTree, index) {
      if (index == null) {
        index = 0;
      }
      if (branchTree[index].children != undefined) {
        if (branchTree[index].children.length > 0) {
          buildChildren(branchTree[index]);
          if (branchTree.length - 1 > index) {
            buildBranchTree(branchTree, ++index);
          }
          ;
        }
        ;
      }
      ;
    }
    ;
    function findChildren(branch, index) {
      if (index == null) {
        index = 0;
      }
      if (!angular.equals(branch.children, null)) {
        if (branch.children.indexOf($scope.branches[index]._id) != -1) {
          if (angular.equals(branch.childrenObj, undefined)) {
            branch.childrenObj = [];
          }
          ;
          if ($scope.branches[index].activeFlag) {
            branch.childrenObj.push($scope.branches[index]);
          }
          buildChildren($scope.branches[index]);
        }
      }
      ;
      if (index < $scope.branches.length - 1) {
        findChildren(branch, ++index);
      }
    }
    function buildChildren(branch) {
      findChildren(branch, null);
    }
    ;
    function findRoots(branch, index) {
      if (index == null) {
        index = 0;
      }
      if (branch[index].parent == null) {
        $scope.branchTree.push(branch[index]);
      }
      if (branch[index].children == null) {
        branch[index].childrenObj = [];
      }
      ;
      if (branch.length - 1 > index) {
        findRoots(branch, ++index);
      }
      return $scope.branchTree;
    }
    var nodeData = '';
    $scope.newSubItem = function (scope) {
      $scope.updateBranch = false;
      $scope.addBranch = true;
      nodeData = scope.$modelValue;
      $scope.message = 'Create A New Branch Under ';
      $scope.CurrentTopBranch = nodeData._id;
      var myOtherAside = $aside({
          scope: $scope,
          placement: 'bottom',
          animation: 'am-fade-and-slide-bottom',
          template: 'angularModules/Branches/aside/aside-newBranch.html'
        });
    };
    $scope.addSubBranch = function (branchDetails) {
      angular.forEach($scope.branches, function (branch) {
        if (branch._id == nodeData._id) {
          if (branch.children == null) {
            branch.children = [];
          }
          ;
          branch.children.push(branchDetails.name);
        }
        ;
      });
      $scope.branches.push({
        _id: branchDetails.name,
        location: branchDetails.location,
        email: branchDetails.email,
        phone: branchDetails.phone,
        children: null,
        parent: nodeData._id,
        activeFlag: 1
      });
      branchSrv.fnInsertBranch($scope, '5457526122588a5db73e0b23', $scope.branches, $scope.rm_id);
    };
    $scope.undoBranch = function () {
      lastDeletedBranch.activeFlag = 1;
      angular.forEach($scope.branches, function (branch) {
        if (lastDeletedBranch._id == branch._id) {
          branch.activeFlag = 1;
        }
        ;
      });
      branchSrv.fnInsertBranch($scope, '5457526122588a5db73e0b23', $scope.branches, $scope.rm_id);
    };
    $scope.removeBranch = function (node) {
      node.$nodeScope.$modelValue.activeFlag = 0;
      lastDeletedBranch = node.$nodeScope.$modelValue;
      branchSrv.fnInsertBranch($scope, '5457526122588a5db73e0b23', $scope.branches, $scope.rm_id);
      $alert({
        scope: $scope,
        title: '',
        container: 'body',
        keyboard: true,
        animation: 'am-fade-and-slide-top',
        template: 'views/ui/angular-strap/alert.tpl.html',
        title: 'Undo',
        content: 'The branch has been deleted',
        placement: 'top',
        type: 'warning'
      });
    };
    $scope.editBranch = function (branch) {
      lastEditBranch = branch;
      $scope.message = 'Update Details Of ';
      $scope.CurrentTopBranch = branch.$nodeScope.$modelValue._id;
      $scope.updateBranch = true;
      $scope.addBranch = false;
      $scope.branch = {};
      var myOtherAside = $aside({
          scope: $scope,
          placement: 'bottom',
          animation: 'am-fade-and-slide-bottom',
          template: 'angularModules/Branches/aside/aside-newBranch.html'
        });
      $scope.branch.name = branch.$nodeScope.$modelValue._id;
      $scope.branch.email = branch.$nodeScope.$modelValue.email;
      $scope.branch.location = branch.$nodeScope.$modelValue.location;
      $scope.branch.phone = branch.$nodeScope.$modelValue.phone;
    };
    $scope.updateSubBranch = function (branch) {
      if (!angular.equals(lastEditBranch.$nodeScope.$modelValue._id, $scope.branch.name)) {
        angular.forEach($scope.branches, function (branch) {
          if (angular.equals(lastEditBranch.$nodeScope.$modelValue.parent, branch._id)) {
            for (var i = 0; i < branch.children.length; i++) {
              if (angular.equals(lastEditBranch.$nodeScope.$modelValue._id, branch.children[i])) {
                branch.children[i] = $scope.branch.name;
              }
              ;
            }
            ;
          }
          ;
        });
        lastEditBranch.$nodeScope.$modelValue._id = $scope.branch.name;
      }
      ;
      lastEditBranch.$nodeScope.$modelValue.email = $scope.branch.email;
      lastEditBranch.$nodeScope.$modelValue.location = $scope.branch.location;
      lastEditBranch.$nodeScope.$modelValue.phone = $scope.branch.phone;
      branchSrv.fnInsertBranch($scope, '5457526122588a5db73e0b23', $scope.branches, $scope.rm_id);
    };
  }
]);
angular.module('baabtra').directive('onFinishRender', function () {
  return {
    restrict: 'AE',
    link: function (scope, element, attr) {
      if (scope.$last === true) {
        scope.$evalAsync(attr.onFinishRender);
      }
    }
  };
});
angular.module('baabtra').service('branchSrv', [
  '$http',
  'bbConfig',
  function branchSrv($http, bbConfig) {
    this.fnInsertBranch = function ($scope, cmp_id, branches, rm_id) {
      angular.forEach($scope.branches, function (branch) {
        if (branch.childrenObj != undefined) {
          delete branch.childrenObj;
        }
        ;
      });
      $http({
        method: 'post',
        url: bbConfig.BWS + 'InsertBranch/',
        data: {
          'cmp_id': cmp_id,
          'branches': branches,
          'rm_id': rm_id
        },
        contentType: 'application/json; charset=UTF-8'
      }).success(function (data, status, headers, config) {
        //success respond from server
        var result = angular.fromJson(JSON.parse(data));
        //$scope.branches=null;
        $scope.branchTree = [];
        $scope.branches = [];
        $scope.branches = result[0].branches;
        console.log($scope.branches);
      }).error(function (data, status, headers, config) {
      });
    };
    this.fnLoadBranch = function ($scope, cmp_id) {
      $http({
        method: 'post',
        url: bbConfig.BWS + 'LoadBranches/',
        data: { 'cmp_id': cmp_id },
        contentType: 'application/json; charset=UTF-8'
      }).success(function (data, status, headers, config) {
        //success respond from server
        var result = angular.fromJson(JSON.parse(data));
        if (result != '') {
          $scope.branchTree = [];
          $scope.branches = [];
          $scope.branches = result[0].branches;
          console.log($scope.branches);
        } else {
          $scope.branches = [{
              '_id': 'Baabtra.com',
              'parent': null,
              'children': null
            }];
        }
      }).error(function (data, status, headers, config) {
      });
    };
  }
]);
angular.module('baabtra').controller('FeatureConfigCtrl', [
  '$scope',
  'featureConfig',
  'localStorageService',
  '$location',
  '$alert',
  function ($scope, featureConfig, localStorageService, $location, $alert) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/login');  //redirecting path into login
    }
    var newFeature = {};
    $scope.billings = {};
    $scope.fields = [];
    var pricing = {};
    $scope.atrributes = [];
    $scope.yearNumbers = [
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20
    ];
    $scope.monthNumbers = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11
    ];
    $scope.weekNumbers = [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30
    ];
    $scope.addAttrTooltip = 'add more attributes';
    $scope.RemoveAttrTooltip = 'remove this atribute';
    featureConfig.loadInputTypes($scope);
    $scope.customBilling = false;
    $scope.validations = [];
    $scope.avail_validations = [
      'phone number',
      'email',
      'age',
      'year',
      'number',
      'price',
      'text',
      'true/false'
    ];
    $scope.createFeature = function () {
      // alert($scope.featureName+" "+$scope.featureDescription+" "+$scope.price+" "+$scope.units+" "+$scope.minUnits+" "+$scope.billing);
      newFeature = {
        'featureName': $scope.featureName,
        'featureDescription': $scope.featureDescription
      };
      pricing = {
        'price': $scope.price,
        'units': $scope.units,
        'minUnits': $scope.minUnits
      };
      newFeature['pricing'] = pricing;
      if ($scope.billing == 'custom') {
        var year = 365 * $scope.years;
        var month = 31 * $scope.months;
        var days = $scope.days;
        var billings = {
            'years': $scope.years,
            'months': $scope.months,
            'days': $scope.days,
            'totaldays': year + month + days
          };
        newFeature['billing'] = billings;
      } else {
        newFeature['billing'] = $scope.billings;
      }
      newFeature.configDetails = $scope.fields;
      console.log(newFeature);
      featureConfig.addNewFeature(newFeature);
    };
    $scope.addField = function () {
      if (typeof $scope.allowedvalue === 'undefined') {
        $scope.allowedvalue = false;
      }
      var field = {};
      field = {
        'label': $scope.label,
        'InputType': $scope.typeOfInput.inputtypes,
        'allowedvalue': $scope.allowedvalue,
        'userConfigurable': $scope.userConfigurable
      };
      field.atrributes = $scope.atrributes;
      field.validations = $scope.validations;
      $scope.fields.push(field);  // console.log($scope.fields);
    };
    $scope.BillingPlan = function () {
      if ($scope.billing == 'custom') {
        $scope.customBilling = true;
      } else {
        $scope.customBilling = false;
        if ($scope.billing == 'yearly') {
          $scope.billings = {
            'years': 1,
            'months': 0,
            'days': 0,
            'totaldays': 365
          };
        } else {
          $scope.billings = {
            'years': 0,
            'months': 1,
            'days': 0,
            'totaldays': 365
          };
        }
      }
    };
    $scope.createDivForAddAttr = function () {
      var atrribute = {};
      atrribute[$scope.attributename] = $scope.attributevalue;
      if (!angular.equals($scope.attributename, undefined) && !angular.equals($scope.attributevalue, undefined) && !angular.equals($scope.attributename, '') && !angular.equals($scope.attributevalue, '')) {
        $scope.atrributes.push(atrribute);
      }
    };
    $scope.fun_validations = function (item) {
      if (!item) {
        console.log('empty');
      } else {
        if (!angular.equals(item.avail_validations, undefined) && !angular.equals(item.avail_validations, '')) {
          $scope.validations.push(item.avail_validations);
          $scope.item.avail_validations = '';  // console.log($scope.validations);
        }
      }
    };
    $scope.removeAttr = function (index) {
      $scope.atrributes.splice(index, 1);
    };
    $scope.remove_validation = function (index) {
      $scope.validations.splice(index, 1);
    };
    //call back functions
    $scope.loadInputTypescallback = function (data) {
      $scope.InputTypes = angular.fromJson(JSON.parse(data));
    };
  }
]);
angular.module('baabtra').service('featureConfig', [
  '$http',
  'bbConfig',
  function ($http, bbConfig) {
    this.loadInputTypes = function ($scope) {
      // functon that call web service to add a comapny role
      $http({
        url: bbConfig.BWS + 'loadInputTypes/',
        data: JSON.stringify({ 'name': 'midhun' }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.loadInputTypescallback(data);
      }).error(function (data, status, headers, config) {
        console.log(data);
      });
    };
    this.addNewFeature = function (newFeature) {
      // functon that call web service to add a comapny role
      console.log(newFeature);
      // delete newFeature[$$hashKey];
      $http({
        url: bbConfig.BWS + 'newFeatureCreation/',
        data: angular.toJson({ 'newFeature': newFeature }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        // $scope.loadInputTypescallback(data);
        console.log(data);
      }).error(function (data, status, headers, config) {
      });
    };
  }
]);
angular.module('baabtra').directive('addAttrDir', [
  '$compile',
  function ($compile) {
    return function (scope, element, attrs) {
      element.bind('click', function () {
        angular.element(document.getElementById('getattrs')).append($compile('<label class=\'col-sm-3 control-label m-t\' ></label><div class=\'col-sm-8 m-t\'><div class=\'col-sm-6\' style=\'padding-left:0\'><input type=\'text\' class=\'form-control\'  placeholder=\'attribute name\' ng-model=\'attributename\'></div><div class=\'col-sm-6\' style=\'padding-right:0;\'><input type=\'text\' class=\'form-control\' placeholder=\'attribute value\' ng-model=\'attributevalue\'></div></div><label class=\'col-sm-1 m-t\' ><i href class=\'ui-icon m-t-sm fa fa-plus\' bs-tooltip=\'attrTooltip\'  ></i> </label>')(scope));
      });
    };
  }
]);
angular.module('baabtra').directive('ngEnter', function () {
  return function (scope, element, attrs) {
    element.bind('keydown keypress', function (event) {
      if (event.which === 13) {
        scope.$apply(function () {
          scope.$eval(attrs.ngEnter);
        });
        event.preventDefault();
      }
    });
  };
});
angular.module('baabtra').directive('autoComplete', [
  '$timeout',
  function ($timeout) {
    return function (scope, iElement, iAttrs) {
      iElement.autocomplete({
        source: scope[iAttrs.uiItems],
        select: function () {
          $timeout(function () {
            iElement.trigger('input');
          }, 0);
        }
      });
    };
  }
]);
angular.module('baabtra').controller('BillingPlansCtrl', [
  '$scope',
  'billingPlans',
  '$alert',
  'localStorageService',
  function ($scope, billingPlans, $alert, localStorageService) {
    if (localStorageService.get('loginLsCheck') === 2 || localStorageService.get('loginLsCheck') === null) {
      $location.path('/login');  //redirecting path into login
    }
    var loginInfo = localStorageService.get('loginInfo');
    $scope.userLoginId = loginInfo.userLoginId.$oid;
    $scope.tooltip = {
      'title': 'Click to add this feature to the plan',
      'checked': false
    };
    $scope.planName = '';
    $scope.custom = false;
    billingPlans.loadFeatures($scope);
    billingPlans.retriveCurrentPlans($scope);
    $scope.current_plan = false;
    $scope.features_to_billing_plan = [];
    $scope.newPlan = {};
    $scope.feature_add_menu = false;
    $scope.toggleCustom = function (index) {
      $scope.toggle = $scope.toggle === undefined ? index : undefined;
    };
    $scope.addfeature = function (index) {
      if ($scope.planName == '') {
        $scope.notifications('Warning!', 'Please add a plan!', 'warning');
      } else {
        $scope.this_feature = {};
        $scope.this_feature.featureId = $scope.features[index]._id.$oid;
        $scope.this_feature.featureName = $scope.features[index].featureName;
        $scope.this_feature.featureDescription = $scope.features[index].featureDescription;
        $scope.this_feature.pricing = $scope.features[index].pricing;
        $scope.this_feature.billing = $scope.features[index].billing;
        $scope.features_to_billing_plan.push($scope.this_feature);
        $scope.features.splice(index, 1);
      }
    };
    $scope.$watch(function (scope) {
      return scope.planName;
    }, function (newValue, oldValue) {
      if ($scope.planName != '') {
        $scope.current_plan = true;  // $scope.features_to_billing_plan=[];
      } else {
        $scope.current_plan = false;
      }
    });
    $scope.$watchCollection(function (scope) {
      return scope.features_to_billing_plan;
    }, function (newValue, oldValue) {
      if ($scope.features_to_billing_plan.length == 0) {
        $scope.feature_add_menu = false;
      } else {
        $scope.feature_add_menu = true;
      }
    });
    $scope.addPlan = function () {
      $scope.newPlan.planName = $scope.planName;
      $scope.newPlan.features = $scope.features_to_billing_plan;
      $scope.newPlan.createdId = $scope.userLoginId;
      // console.log($scope.newPlan);
      billingPlans.addNewBillingPlan($scope);
    };
    $scope.removeFromFeaturelist = function (feature, index) {
      $scope.features_to_billing_plan.splice(index, 1);
      $scope.features.push(feature);
    };
    $scope.filterBillingPlan = function (feature) {
      console.log(feature.billing);
      if (feature.billing.years > 0 && feature.billing.days == 0 && feature.billing.months == 0) {
        select = 0;
      } else if (feature.billing.months > 0 && feature.billing.days == 0 && feature.billing.years == 0) {
        select = 1;
      } else {
        select = 2;
      }
      $scope.billings = [
        'yearly',
        'monthly',
        'custom'
      ];
    };
    //callback functions
    $scope.fnloadFeaturesBack = function (data) {
      //callback function for handle Edit role of the company         
      $scope.features = angular.fromJson(JSON.parse(data));  // $scope.features_keeper.push($scope.features);             
    };
    $scope.fnaddNewBillingPlanBack = function (data) {
      //callback function for handle Edit role of the company         
      addNewBillingPlanBackResult = angular.fromJson(JSON.parse(data));
      if (addNewBillingPlanBackResult == 'success') {
        $scope.current_plans.push($scope.newPlan);
        $scope.notifications('Success', 'New Billing Plan created successfully', 'success');
        $scope.planName = '';
        $scope.features_to_billing_plan = [];
        // for(index=0;)
        $scope.features.push($scope.features_keeper);
        console.log($scope.features_keeper);
      } else if (addNewBillingPlanBackResult == 'error' || addNewBillingPlanBackResult == 'failed') {
        $scope.notifications('Warning!', 'New billing Plan creation was failed', 'warning');
      }
      ;
    };
    $scope.fnretrieveCurrentPlans = function (data) {
      $scope.current_plans = angular.fromJson(JSON.parse(data));
    };
    //notification 
    $scope.notifications = function (title, message, type) {
      // Notify(message, 'top-right', '2000', type, symbol, true); \
      $alert({
        title: title,
        content: message,
        placement: 'top-right',
        duration: 3,
        type: type
      });  // calling notification message function
    };
  }
]);
angular.module('baabtra').service('billingPlans', [
  '$http',
  'bbConfig',
  function ($http, bbConfig) {
    this.loadFeatures = function ($scope) {
      // functon that call web service to load a feature
      $http({
        url: bbConfig.BWS + 'loadFeatures/',
        data: JSON.stringify({ 'name': 'nothing' }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnloadFeaturesBack(data);
      }).error(function (data, status, headers, config) {
        console.log(data);
      });
    };
    this.addNewBillingPlan = function ($scope) {
      // functon that call web service to load a feature
      $http({
        url: bbConfig.BWS + 'addNewBillingPlan/',
        data: angular.toJson({ 'NewPaln': $scope.newPlan }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnaddNewBillingPlanBack(data);
      }).error(function (data, status, headers, config) {
      });  // console.log(angular.toJson($scope.newPlan));
    };
    this.retriveCurrentPlans = function ($scope) {
      // functon that call web service to load a feature
      $http({
        url: bbConfig.BWS + 'retriveCurrentPlans/',
        data: angular.toJson({ 'nothing': 'nothing' }),
        method: 'POST',
        withCredentials: false,
        contentType: 'application/json',
        dataType: 'json'
      }).success(function (data, status, headers, config) {
        $scope.fnretrieveCurrentPlans(data);
      }).error(function (data, status, headers, config) {
      });  // console.log(angular.toJson($scope.newPlan));
    };
  }
]);
angular.module('baabtra').controller('CourseCtrl', [
  '$scope',
  function ($scope) {
  }
]);
angular.module('baabtra').run([
  '$templateCache',
  function ($templateCache) {
    'use strict';
    $templateCache.put('angularModules/Branches/aside/aside-newBranch.html', '<div class=aside ds-placement=top tabindex=-1 role=dialog><div class=aside-dialog><div class=aside-content><div class=aside-header><button type=button class=close ng-click=$hide()>&times;</button><h4 class=aside-title>{{message}}{{CurrentTopBranch}}</h4></div><div class=aside-body><form name=form class="form-validation ng-pristine ng-invalid ng-invalid-required"><div class="form-group m-h-n clearfix"><div class=col-sm-6><label>Branch Name</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required" placeholder="Branch Name" ng-model=branch.name required></div><div class=col-sm-6><label>Location</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-email" placeholder=Location ng-model=branch.location required></div></div><div class="form-group m-h-n clearfix"><div class=col-sm-6><label>Email</label><input type=email class="form-control ng-pristine ng-invalid ng-valid-email ng-invalid-required" placeholder=Email ng-model=branch.email required></div><div class=col-sm-6><label>Phone</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-email" placeholder=Phone ng-pattern="/^(\\+\\d{1,3}[- ]?)?\\d{10}$/" ng-model=branch.phone required></div></div></form></div><div class=aside-footer><button type=button class="btn btn-primary" ng-show=updateBranch ng-click=updateSubBranch(branch);$hide();>Update</button> <button type=button class="btn btn-primary" ng-show=addBranch ng-click=addSubBranch(branch);$hide();>Add</button></div></div></div></div>');
    $templateCache.put('angularModules/Branches/partials/Partial-Branches.html', '<script type=text/ng-template id=nodes_renderer.html><div ui-tree-handle class="tree-node tree-node-content list-group-item" id="{{node._id}}">{{node.$root}}\n' + '            {{node._id}}&nbsp; &nbsp;\n' + '            <a href="" class="icon-grey pull-right m-l-xs" data-nodrag ng-click="removeBranch(this)"><i class="fa fa-trash" ></i></a>\n' + '            <a href="" class="icon-grey pull-right m-h-xs" data-nodrag ng-click="editBranch(this)"><i class="fa fa-edit" ></i></a>\n' + '            \n' + '            <a href="" class="icon-grey pull-right m-r-xs" data-nodrag ng-click="newSubItem(this)"><i class="fa fa-plus" ></i></a>\n' + '          </div>\n' + '          <ol ui-tree-nodes="" ng-model="node.childrenObj" style="padding-left:0px;" ng-class="{hidden: collapsed}" data-horizontal="">\n' + '            <li ng-repeat="node in node.childrenObj track by $index" class="text-center" ui-tree-node ng-include="\'nodes_renderer.html\'">\n' + '            </li>\n' + '          </ol></script><div class="row text-center"><div ui-tree=tree1NodesOptions id=tree-root><ol ui-tree-nodes="" ng-model=branchTree data-horizontal=""><li ng-repeat="node in branchTree track by $index" class="text-center list-group list-group-gap" ui-tree-node ng-include="\'nodes_renderer.html\'"></li></ol></div></div>');
    $templateCache.put('angularModules/billing/partials/Partial-billing_plans.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt ng-scope"><h3 class=no-margin>Billing plans</h3></div><div class=col-sm-12><div class="panel-heading bg-white"><strong>add new plans</strong></div><div class="col-sm-12 bg-white panel-body"><div class=form-group><div class=col-sm-4><div class=form-group><input type=text class=form-control ng-model=planName placeholder="plan name"></div><div class=list-group id=feature_list_div><a href="" class="list-group-item b-l-primary" data-animation=am-fade-and-scale data-type=success bs-tooltip=tooltip ng-repeat="feature in features" ng-click=addfeature($index)><span class="pull-right text-primary"><i class="glyphicon glyphicon fa fa-plus"></i></span><label class="block font-bold">{{feature.featureName}}</label></a></div></div><div class=col-sm-8><div id=current_plan ng-show=current_plan class=callout-info><h4 class=list-group-item>{{planName}}</h4><span ng-repeat="feature in features_to_billing_plan" class="btn btn-primary m-xs">{{feature.featureName}} &nbsp <i class=ti-settings data-content=feature data-template=views/ui/angular-strap/edit_tooltip.html data-animation=am-flip-x bs-popover="" ng-click=filterBillingPlan(feature)></i>&nbsp <i class="glyphicon glyphicon-remove-sign" ng-click=removeFromFeaturelist(feature,$index)></i></span><div class=panel-heading></div><footer class=text-right ng-show=feature_add_menu><button class="btn w-xs btn-primary m-t-xs right" ng-click=addPlan()>add plan</button></footer></div><div ng-show=current_plan><div class=panel-heading></div></div><div><ul class="nav m-b-lg" ui-nav=""><li ng-class="{\'active am-fade\':toggle==$index}" ng-repeat="plan in current_plans"><a href="" class="auto list-group-item text-ellipsis text-info"><span class="pull-right text-muted m-r-xs" ng-click=toggleCustom($index)><i class="fa fa-arrow-down inline"></i> <i class="fa fa-arrow-up none"></i></span> {{plan.planName}}</a><ul class="nav nav-sub nav-sm"><li><a href="" ng-repeat="feature in plan.features"><span class="fa fa-fw text-muted"></span> {{feature.featureName}}</a></li></ul></li></ul></div></div></div></div></div>');
    $templateCache.put('angularModules/billing/partials/Partial-user_billing_config.html', '<div class=col-xl-10><div class="panel panel-default"><div class="panel-heading bg-white font-bold">Plans &amp Features<br></div><div class=panel-body><div class=form-group><label class="col-md-1 m-t-sm font-bold" for=definpu>Plans</label><div class=col-md-7><select class=form-control data-bv-field=sectors ng-model=selection.plan ng-options="plans.planName for plans in planlist"><option value="">Select a Plan</option></select></div><button class="btn w-sm btn-primary" data-placement=top data-type=danger data-html=true data-animation=am-fade-and-scale bs-tooltip=PlanChangeTT class=ng-scope ng-click=fnChangeplan(selection.plan)>Change Plan</button></div><div class="col-md-5 m-t-lg"><div class=font-bold data-placement=top data-type=info data-html=true data-animation=am-fade-and-scale bs-tooltip=FeatureConfigTT>User Active Features<hr></div><div class="list-group bg-inherit"><div class="animated flipInX"><div class=list-group-item ng-click=fConfig(feature) ng-repeat="feature in userplan.plan.features"><span class="pull-right text-muted"><i ng-click=deleteFeature(feature) class="glyphicon glyphicon-trash"></i></span> {{feature.featureName}}</div></div></div></div><div class="col-md-5 m-t-lg"><div class=font-bold>Feature List<hr></div><div class="list-group bg-inherit"><div class="animated flipInX"><div class=list-group-item ng-repeat="feature in featurelist||searchFeature"><span class="pull-right text-muted"><i ng-click=addFeature(feature) class="glyphicon glyphicon-plus-sign"></i></span> {{feature.featureName}}</div></div></div></div></div></div></div><div ng-show=featureSelected class="panel panel-default"><div class="panel-heading bg-white">Configure {{selectedFeature.featureName}}<br></div><div class=panel-body><div class="col-md-5 m-t-sm font-bold"><div data-placement=top data-type=info data-html=true data-animation=am-fade-and-scale bs-tooltip=PriceConfigTT>Pricing<hr></div><div class=form-group><label class=col-sm-3 for=definpu>Price</label><span editable-text=selectedFeature.pricing.price class=font-bold onaftersave=editPricing(selectedFeature.pricing) required>: {{selectedFeature.pricing.price||\'Price\' }}</span></div><div class=form-group><label class=col-sm-3 for=definpu>No of Units</label><span editable-text=selectedFeature.pricing.units class=font-bold onaftersave=editPricing(selectedFeature.pricing) required>: {{selectedFeature.pricing.units||\'Units\' }}</span></div></div><div class="col-md-5 m-t-sm font-bold"><div data-placement=top data-type=info data-html=true data-animation=am-fade-and-scale bs-tooltip=BillConfigTT>Billing<hr></div><div class=form-group><label class=col-sm-3 for=definpu>Billing Frequency</label><span href editable-select=sel.freqency e-ng-options="fre for  fre in bill" onaftersave=editBill($data)>: {{sel.freqency}}</span></div><br><div ng-show=custombillfield><div class=form-group><label class=col-sm-2 for=definpu>Years</label><span class=col-sm-2 editable-text=selectedFeature.billing.years onaftersave=editCustomBilling()>: {{selectedFeature.billing.years||\'Years\'}}</span></div><div class=form-group><label class=col-sm-2 for=definpu>Months</label><span class=col-sm-2 editable-text=selectedFeature.billing.months onaftersave=editCustomBilling()>: {{selectedFeature.billing.months||\'Months\'}}</span></div><div class=form-group><label class=col-sm-2 for=definpu>Days</label><span class=col-sm-2 editable-text=selectedFeature.billing.days onaftersave=editCustomBilling()>: {{selectedFeature.billing.days||\'Days\'}}</span></div></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-JobPosting.html', '<div class=row><div class=col-sm-12><div class="panel b-light"><div class="panel-body p-sm bg-light lt"><div class=col-sm-12><form name=Job class="form-validation ng-pristine ng-invalid ng-invalid-required"><div class="panel box-shadow"><div class="panel-heading bg-primary lt"><span class=font-bold>Register Form</span></div><div class=panel-body><div class="form-group m-h-n clearfix"><div class=col-sm-12><label>Job Tittle</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required" placeholder="Job Tittle" ng-model=Job.Tittle required></div></div><div class=form-group><label>Job Description</label><textarea class="form-control ng-pristine ng-invalid ng-invalid-required" rows=5 placeholder="Job Description" ng-model=Job.Description required></textarea></div><div class=form-group><label>Qualification</label><textarea class="form-control ng-pristine ng-invalid ng-invalid-required" rows=4 placeholder=Qualification ng-model=Job.Qualification required></textarea></div><div class="form-group m-h-n clearfix"><div class=col-sm-6><label>Salary/annum</label><div class=row><div class="col-sm-6 col-xs-6"><input type=number class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-number ng-invalid-validator" placeholder=min ng-model=Job.minSalary ui-validate="\'$value>=.1\'"></div><div class="col-sm-6 col-xs-6"><input type=number class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-number ng-invalid-validator" placeholder=max ng-model=Job.maxSalary ui-validate="\'$value>Job.minSalary\' "></div></div></div><div class=col-sm-6><label>Location</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required" placeholder=Location ng-model=Job.Location required></div></div><div class=form-group><label>Tags</label><input type=text class="form-control ng-pristine ng-invalid" placeholder="Use commas to separate tags." ng-model=Job.Tag></div></div><footer class="panel-footer text-right"><button type=button ng-click=PostJob() class="btn btn-info" ng-disabled=Job.$invalid disabled>Post Job</button></footer></div></form></div></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-ListJobs.html', '<div class=row><div class=col-sm-12><div class="panel box-shadow"><div class="panel-heading bg-primary lt"><span class=font-bold>Jobs</span></div><div class=panel-body><div class=row><div class=col-sm-12><div class=pull-right><div class=btn-group style="margin-top: 4px"><button type=button class="btn btn-xs btn-default" ng-click=prev_one()><i class="fa fa-fw fa-angle-left"></i></button> <button type=button class="btn btn-xs btn-default" ng-click=next_one()><i class="fa fa-fw fa-angle-right"></i></button></div><div class="pull-right hidden-xs w"><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm bg-white btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input ng-model=modelSearch type=text class="form-control input-sm no-border" placeholder="Search Jobs..."></div></div></div></div><div class="col-md-6 col-md-12 col-sm-12" ng-repeat="Job in Jobs"><form class="form-horizontal ng-pristine ng-valid" style="cursor: pointer"><div class="panel b-light bg-light" ng-class="{\'lt\':!Job.activeFlag}"><div class="panel-heading p-v-xs p-h-sm"><div class=pull-right><a ng-click=editJobDetails(Job) href="" class="text-muted m-r-xs" title="Edit Job"><i class="glyphicon glyphicon-edit text-lg"></i></a> <a href="" class=text-muted title="Hide Job" ng-click=hideJobDetails(Job._id.$oid,Job.activeFlag)><i class="glyphicon text-lg" ng-class="{\'glyphicon-eye-open\':!Job.activeFlag,\'glyphicon-eye-close\':Job.activeFlag}"></i></a></div><a href="" class="text-lg text-ellipsis" ng-click=ViewJobDetails(Job) disabled>{{Job.jobTittle}}</a><div><div class="panel-body ng-hide p-sm"><div class=form-group><div class=col-sm-3><i class="glyphicon glyphicon-briefcase"></i> <span>1-6 yrs</span></div><div class=col-sm-2><i class="glyphicon glyphicon-map-marker"></i> <span>{{Job.Location}}</span></div></div><div class=form-group><div class=col-sm-3><label>Job Description</label></div><div class=col-sm-9><label>{{Job.jobDescription | limitTo: 100}}...</label></div></div><div class=form-group><div class=col-sm-6><i class="fa fa-rupee"></i> <span>{{Job.minSalary}}</span> <span>-</span> <span>{{Job.maxSalary}}</span> <span>P.A</span></div><div class=col-sm-6><div class=pull-right><span>Posted On:</span> <span>{{Job.createdDate | date:\'dd-MM-yyyy\'}}</span></div></div></div></div></div></div></div></form></div></div></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-addMenu.html', '<div class=p-h-md><div class=row><div class="panel panel-default"><div class=panel-body><form name=menuDetails role=form class="form-validation ng-pristine ng-invalid ng-invalid-required"><div class="form-group m-h-n clearfix"><div class=col-sm-6><h4 class="no-margin m-b">Menu Name</h4><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required" placeholder="Menu Name" ng-model=menu.MenuName required></div><div class=col-sm-6><h4 class="no-margin m-b">Menu Link</h4><input type=text class=form-control placeholder="Menu Link" ng-model=menu.MenuLink></div><div class="col-sm-6 m-t"><h4 class="no-margin m-b">Actions</h4><div class=m-h-n><div class=col-sm-6><input type=text class=form-control placeholder="Aaction Name" ng-model=menu.actionName></div><div class=col-sm-5><input type=text class=form-control placeholder="State Name" ng-model=menu.stateName></div><div class=col-sm-1 style="margin-top: 3px;margin-left: -18px;cursor: pointer" ng-click=addActtion()><i class="fa fa-plus-circle fa-2x pull-left"></i></div></div></div><div class="col-lg-6 m-t"><h4 class="no-margin m-b-md m-r">Menu Icon</h4><i class="ui-icon fa {{menu.menuIcon}} ui-iconnfo text-lg"></i> <a ng-click=GetIcon()>Change Icon</a></div></div><div class="m-h-n m-t clearfix"><div class=col-sm-6><ul class="nav nav-sm nav-pills m-b" ui-nav=""><li class="active m-r-xs" ng-repeat="action in menu.actions"><a ng-click=editAction(action,$index)>{{action.actionName}}<button type=button class=close style="margin-top: -2px;margin-left: 2px" ng-click=removeAction($index)>\xd7</button></a></li></ul></div></div><div class="m-h-n m-t clearfix"><div class=col-lg-12><button ng-click=AddMenu() class="btn btn-info pull-right btn-sm p-h font-bold" ng-disabled=menuDetails.$invalid>{{opt_type}}</button></div></div></form></div></div></div></div><div class=p-h-md><div class=row><div class="panel panel-default"><a ng-mouseover="Over=true" ng-mouseleave="Over=false" ng-repeat="menu in allMenus" class="m-md text-sm btn btn-lg bg-light m-r"><i class="fa {{menu.menuIcon}} fa-3x pull-left"></i> <span class="block clear text-left m-v-xs"><b class="text-lg block font-bold">{{menu.MenuName}}</b></span> <i ng-click=editMenu(menu) class="fa pull-right fa-1x text-lt" style="cursor: pointer" ng-class="{\'fa-pencil\':Over}"></i></a><div class=panel-body></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-companyHome.html', '<div class=col-md-12>companyHome</div>');
    $templateCache.put('angularModules/company/partials/Partial-company_manage.html', '<div id=content class="app-content ng-scope animated flipInX" role=main ui-view=""><div class="p-h-md p-v bg-white box-shadow pos-rlt ng-scope"><h3 class=no-margin>Manage Company</h3></div></div><div name=manage-container class=app-content role=main ui-view></div>');
    $templateCache.put('angularModules/company/partials/Partial-company_manage_info.html', '<div class="col-xl-9 b-l bg-auto"><div class="p-md bg-light b-b font-bold">Company Info</div><div role=form class="p-md ng-pristine ng-valid"><div class=form-group><label>Name</label><br><span editable-text="companySelected.companyName " class=font-bold onaftersave="editCompany(\'companyName\',$data)">{{companySelected.companyName||\'Company Name\' }}</span></div><div class=form-group><label>Alternate Email</label><br><span editable-text="companySelected.alternateEmail " class=font-bold onaftersave="editCompany(\'alternateEmail\', $data)">{{companySelected.alternateEmail||\'Alternate Email\' }}</span></div><div class=form-group><label>Phone</label><br><span editable-text="companySelected.Phone " class=font-bold onaftersave="editCompany(\'Phone\',$data)">{{companySelected.Phone||\'Phone Number\'}}</span></div><div class=form-group><label>Mobile</label><br><span editable-text="companySelected.Mobile " class=font-bold onaftersave="editCompany(\'Mobile\',$data)">{{companySelected.Mobile|| \'Mobile Number\'}}</span></div><div class=form-group><label>Fax</label><br><span editable-text="companySelected.Fax " class=font-bold onaftersave="editCompany(\'Fax\',$data)">{{companySelected.Fax ||\'Fax\' }}</span></div><div class=form-group><label>Address</label><br><span editable-text="companySelected.Address " class=font-bold onaftersave="editCompany(\'Address\',$data)">{{companySelected.Address ||\'Address\'}}</span></div><div class=form-group><label>Zip Code</label><br><span editable-text="companySelected.zipCode " class=font-bold onaftersave="editCompany(\'zipCode\',$data)">{{companySelected.zipCode||\'Zip Code\' }}</span></div><div class=form-group><label>WebSite</label><br><span editable-text="companySelected.webSite " class=font-bold onaftersave="editCompany(\'webSite\',$data)">{{companySelected.webSite ||\'Web site\'}}</span></div><div class=form-group><label>facebook</label><br><span editable-text="companySelected.facebook " class=font-bold onaftersave="editCompany(\'facebook\',$data)">{{companySelected.facebook||\'facebook\' }}</span></div><div class=form-group><label>Google+</label><br><span editable-text="companySelected.gplus " class=font-bold onaftersave="editCompany(\'gplus\',$data)">{{companySelected.gplus ||\'G+\'}}</span></div><div class=form-group><label>twitter</label><br><span editable-text="companySelected.twitter " class=font-bold onaftersave="editCompany(\'twitter\',companySelected.twitter)">{{companySelected.twitter ||\'twitter\'}}</span></div><button ng-click=deleteCompany(companySelected) class="btn btn-info m-t">Delete</button></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-company_registration.html', '<div class=col-xl-12><div class="panel panel-default"><br><span class=pull-right><a class="btn btn-lg btn-primary" ng-href=#/home/company>Registered Companies</a></span><div class="panel-heading bg-white"><br><br><h3>Company Registration</h3></div><div class=panel-body><form name=companyregistrationform class=form-validation enctype=multipart/form-data ng-submit=fnGetCompanyRegisterDetails(company,selection) xt-form novalidate><div class="col-md-12 animated flipInX"><div class="panel panel-default"><div class="panel-heading bg-white">Company Info</div><div class=panel-body><div><div class="form-group col-sm-2"><img ng-bind=company.companyLogo style="width:125px; height:125px"></div><div class="form-group col-sm-5"><label for=definpu>Company Name*</label><input type=text ng-model=company.companyName class=form-control id=definput xt-validate placeholder="Company Name" name=companyName required></div><div class="form-group col-sm-5"><label for=definpu>Company Sector*</label><select class=form-control xt-validate name=sector data-bv-field=sectors ng-model=selection.sectors ng-options="sectorNames.sectorName for sectorNames in sectorlist" required><option value="">Select a Sector</option><option value=other>Other</option></select></div><div class="form-group col-sm-5"><label for=definpu>E-mail Address*</label><input type=text ng-model=company.eMail ng-pattern=emailPattern class="form-control email" ui-validate=" \'$value!==existingEmail\' " ui-validate-watch=" \'existingEmail\'" msg-pattern={{emailMsg}} msg-validator={{emailEMsg}} xt-validate id=definput placeholder="Company Email Address" name=companyEmail ng-change=userVal(company) required></div><div class="form-group col-sm-5"><label for=definpu>Alternate E-mail*</label><input type=text ng-model=company.alternateEmail class=form-control id=definput placeholder="Alternate E-mail Address" name=alternateEmail xt-validate msg-pattern={{emailMsg}} ng-pattern=emailPattern required></div><div><input type=file ng-model=company.companyLogo fileupload-dir=company.companyLogo name=companyLogo></div></div></div></div></div><div class="col-md-6 animated flipInX"><div class="panel panel-default"><div class="panel-heading bg-white">Contact Details<br></div><div class=panel-body><div class=form-group><label for=definpu>Phone*</label><input type=text ng-model=company.Phone class=form-control id=definput placeholder="Phone Number" name=Phone xt-validate ng-pattern=NumberPattern required></div><div class=form-group><label for=definpu>Mobile*</label><input type=text ng-model=company.Mobile class=form-control id=definput placeholder="Mobile Number" xt-validate name=Mobile ng-pattern=NumberPattern required></div><div class=form-group><label for=definpu>Fax</label><input type=text ng-model=company.Fax class=form-control id=definput ng-pattern=NumberPattern xt-validate placeholder=Fax name=Fax></div><div class=form-group><label for=definpu>Website</label><input type=text ng-model=company.webSite xt-validate class=form-control id=definput placeholder="Website url" name=webSite ng-pattern=urlPattern></div></div></div></div><div class="col-md-6 animated flipInX"><div class="panel panel-default"><div class="panel-heading bg-white">Company Addresss<br></div><div class=panel-body><div class=form-group><select class=form-control name=country data-bv-field=country ng-model=selection.country ng-options="countries.countryName for countries in CSDlist" xt-validate required><option value="">Select a Country</option></select></div><div class=form-group><select class=form-control name=state data-bv-field=state ng-model=selection.state ng-options="state.stateName for state in selection.country.States" xt-validate required><option value="">Select a State</option></select></div><div class=form-group><select class=form-control name=district data-bv-field=district ng-model=selection.district ng-options="districts.districtName for districts in selection.state.Districts" xt-validate required><option value="">Select a District</option></select></div><div class=form-group><input type=text ng-model=company.zipCode class=form-control id=definput placeholder="Zip Code" name=zipCode ng-pattern=NumberPattern xt-validate required></div><div class=form-group><textarea class=form-control name=Address ng-model=company.Address rows=5 placeholder=Address xt-validate required></textarea></div></div></div></div><div class="col-md-6 animated flipInX"><div class="panel panel-default"><div class="panel-heading bg-white">Login Credentials<br></div><div class=panel-body><div class=form-group><label for=definpu>Username*</label><input type=text ng-model=company.eMail class=form-control id=definput placeholder="User Name" readonly name=eMail msg-validator={{emailEMsg}} xt-validate required></div><div class=form-group><label for=definpu>Password*</label><input type=password ng-model=company.password class=form-control id=definput placeholder=Password name=password ng-change=checkPassword() xt-validate required></div><div class=form-group><label for=definpu>Confirm Password*</label><input type=password ng-model=company.cpassword class=form-control id=definput placeholder="Confirm Password" name=cpassword xt-validate required ui-validate=" \'$value==company.password\' " ui-validate-watch=" \'company.password\' "></div></div></div></div><div class="col-md-6 animated flipInX"><div class="panel panel-default"><div class="panel-heading bg-white">Social Profiles<br></div><div class=panel-body><div class=form-group ng-class="{ \'has-error\' : companyregistrationform.Facebook.$invalid && !companyregistrationform.Facebook.$pristine}"><label for=definpu>Facebook</label><input type=text ng-model=company.Facebook class=form-control id=definput placeholder="Facebook url" name=Facebook ng-pattern=urlPattern></div><div class=form-group ng-class="{ \'has-error\' : companyregistrationform.Google.$invalid && !companyregistrationform.Google.$pristine}"><label for=definpu>G+</label><input type=text ng-model=company.Google class=form-control id=definput placeholder="gplus url" name=Google ng-pattern=urlPattern></div><div class=form-group ng-class="{ \'has-error\' : companyregistrationform.Twitter.$invalid && !companyregistrationform.Twitter.$pristine}"><label for=definpu>Twitter</label><input type=text ng-model=company.Twitter class=form-control id=definput placeholder="Twitter url" name=Twitter ng-pattern=urlPattern></div><div class=form-group ng-class="{ \'has-error\' : companyregistrationform.LinkedIn.$invalid && !companyregistrationform.LinkedIn.$pristine}"><label for=definpu>LinkedIn</label><input type=text ng-model=company.LinkedIn class=form-control id=definput placeholder="LinkedIn url" name=LinkedIn ng-pattern=urlPattern></div></div></div></div><button type=submit class="btn btn-blue btn-lg" ng-disabled=companyregistrationform.$invalid||companyButtonDisable>Register</button></form></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-company_view.html', '<div name=manage class=col-xl-12 ui-view><div class="panel panel-default"><br><span class=pull-right><a class="btn btn-lg btn-primary" ng-href=#/home/company/registration>Register a new Company</a></span><div class="panel-heading bg-white"><div class=col-sm-4><div class=input-group><input ng-model=CompanySearch type=text class="form-control input col-md-2 no-border well" placeholder={{placeholderVal}}...> <span class=input-group-btn><button ng-click=searchCompany(CompanySearch) class="btn btn-sm bg-white btn-icon no-shadow no-padder"><i class="glyphicon glyphicon-search text-xl"></i></button></span></div></div><br><br><h3>Registered Companies</h3></div><div class="panel-body animated flipInX"><table class="table table-striped table-bordered table-hover"><tr><td><div style="height: 400px;overflow: auto"><div class=col-sm-2 ng-repeat="company in companylist | filter:CompanySearch"><div style="background:url(images/a0.jpg) center center; background-size:cover"><div class="p-sm-1 bg-white-opacity text-center"><a href="" class="w-xs inline"><img src=images/a0.jpg class="img-circle img-responsive"></a><div class="m-b m-t-sm h3"><span class=text-black>{{company.companyName}}</span></div><a ng-href=#home/company/manage/company-info/{{companyId}} class="btn btn-sm btn-info m-b p-h" ng-click=manageCompany(company._id.$oid)>Manage</a></div></div><div class="list-group no-radius well"><a class=text-muted ng-href=http://{{company.facebook}} target=_blank><i class="fa ui-icon fa-facebook"></i></a> <a class=text-muted ng-href=http://{{company.twitter}} target=_blank><i class="fa ui-icon fa-twitter"></i></a> <a class=text-muted ng-href=http://{{company.linkedin}} target=_blank><i class="fa ui-icon fa-linkedin"></i></a> <a class=text-muted ng-href=http://{{company.gplus}} target=_blank><i class="fa ui-icon fa-google-plus"></i></a><div class="pull-right sm" data-html=true data-placement=top data-animation=flip-x data-html=true title="Contact Info" data-content="Email<br>{{company.eMail}}<br>Phone<br>{{company.Phone}}<br>Mob<br>{{company.Mobile}}" data-trigger=hover bs-popover=""><i class="fa fa-info text-xl"></i></div></div></div><div class=row ng-show=ShowNoDataFound><div class=col-sm-8><div id=alerts-container class="animated fadeIn"><div class="alert ng-scope am-fade alert-button bg-danger lt" ng-class="[type ? \'alert-\' + type : null]" style="display: block"><button type=button class="close ng-scope" ng-click=$hide()>\xd7</button> <strong class=ng-binding>Not Found!</strong>&nbsp; <span class=ng-binding>{{WarringMessage}}</span></div></div></div></div></div></td></tr></table><div class=horizontal-space></div><span class=pull-right><button class="btn btn-blue" data-placement=top data-original-title="More Registered Companies" ng-click=showMore();>show more..</button></span></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-editJobDetailsModal.html', '<div class=modal tabindex=-1 role=dialog ng-controller=EditjobdetailsmodalCtrl><div class="modal-dialog modal-lg"><div class=modal-content><div class=modal-header><button type=button class=close ng-click=$hide()>&times;</button><h4 class="modal-title text-primary">{{EditJobDetails.jobTittle}}</h4></div><div class=modal-body><form name=Job class="form-validation ng-pristine ng-invalid ng-invalid-required"><div class="panel box-shadow"><div class=panel-body><div class="form-group m-h-n clearfix"><div class=col-sm-12><label>Job Tittle</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required" placeholder="Job Tittle" ng-model=EditJobDetails.jobTittle required></div></div><div class=form-group><label>Job Description</label><textarea class="form-control ng-pristine ng-invalid ng-invalid-required" rows=5 placeholder="Job Description" ng-model=EditJobDetails.jobDescription required></textarea></div><div class=form-group><label>Qualification</label><textarea class="form-control ng-pristine ng-invalid ng-invalid-required" rows=4 placeholder=Qualification ng-model=EditJobDetails.Qualification required></textarea></div><div class="form-group m-h-n clearfix"><div class=col-sm-6><label>Salary/annum</label><div class=row><div class="col-sm-6 col-xs-6"><input type=number class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-number ng-invalid-validator" placeholder=min ng-model=EditJobDetails.minSalary ui-validate="\'$value>=.1\'"></div><div class="col-sm-6 col-xs-6"><input type=number class="form-control ng-pristine ng-invalid ng-invalid-required ng-valid-number ng-invalid-validator" placeholder=max ng-model=EditJobDetails.maxSalary ui-validate="\'$value>EditJobDetails.minSalary\' "></div></div></div><div class=col-sm-6><label>Location</label><input type=text class="form-control ng-pristine ng-invalid ng-invalid-required" placeholder=Location ng-model=EditJobDetails.Location required></div></div><div class=form-group><label>Tags</label><input type=text class="form-control ng-pristine ng-invalid" placeholder="Use commas to separate tags." ng-model=EditJobDetails.Tags></div></div><footer class="panel-footer text-right"><button type=button ng-click=UpdateJob(EditJobDetails._id.$oid) class="btn btn-info" ng-disabled=Job.$invalid disabled>Update Job</button></footer></div></form></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-manageCompany.html', '<div class="p-md ng-scope"><div class=row><div class=col-sm-12 name=companycontent ui-view><div class=col-sm-4 ng-repeat="company in companyDetails"><div class="panel b-light"><div ng-click=manageComapny(company) class="panel-body p-sm" style="cursor: pointer"><div class="pull-left text-center m-r-xs"><img src=images/CompanyLogs/company.png class="w-xs pull-left"></div><div class=clear><div class="text-xl font-bold">{{company.companyName}}</div></div></div></div></div></div></div><div class=row></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-manage_user_role.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt ng-scope"><h3 class=no-margin>Manage Company Roles</h3></div><br><div class="col-md-10 animated fadeInRight" style=padding:10px><div class=col-md-6><form name=Form_Adding_form ng-submit=AddCompanyRole() class=form-validation role=form xt-form novalidate><input type=text class="form-control text-sm bg-white" placeholder="Enter New Role" xt-validate required ng-minlength=5 name=roleName ng-model=roleName><br><textarea class="form-control text-sm bg-white" rows=3 placeholder="Enter Role Description" xt-validate required ng-minlength=7 name=roleDesc ng-model=RoleDesc></textarea><br><span class=pull-left><button class="btn btn-stroke btn-danger" type=reset>&nbsp &nbspcancel&nbsp &nbsp</button> <button class="btn btn-stroke btn-info" ng-disabled="Form_Adding_form.$invalid || progress" type=submit>&nbsp &nbsp {{btnRoleAdd}} &nbsp &nbsp</button> &nbsp &nbsp</span></form></div></div><div class=col-md-12 style="height: 280px;overflow: auto;padding:30px"><div class=col-sm-4 ng-repeat="roleData in roles"><div><a href=""><span class=pull-right data-title="Remove role!" ng-click=deleteRole(roleData,$index) bs-tooltip><i class="ui-icon ti-trash" style=padding:10px></i></span></a></div><div class="panel bg-white" style="box-shadow: 0 5px 10px rgba(0, 0, 0, .2)"><div class="panel p r-2x b-l-success text-1x font-bold b-l-5x inline clear"><a href="" class=Rolelink editable-text=roleData.roleName onaftersave="updateUser(\'roleName\',roleData,$data)" e-required e-placeholder="Enter role">{{roleData.roleName}}</a></div><small class="clear pull-none-sm text-dk p r-1x"><a href="" class=RoleDesc style=color:#777777 editable-text=roleData.roleDescription onaftersave="updateUser(\'roleDescription\',roleData,$data)" e-required e-placeholder="Enter role description">{{roleData.roleDescription}}</a></small></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-userMenuMapping.html', '<div class=row><div class=col-sm-12><div class="panel b-light"><div class="panel-body p-sm bg-light lt"><div class=bs-example append-source=""><div class="tab-container ng-scope ng-valid ng-dirty"><ul class="nav nav-tabs" role=tablist><li ng-class="{\'active\':!comapanyUser,\'ng-hide\':roleId==2}" class="ng-scope ng-h" ng-click=getCompanyAdmin()><a role=tab data-toggle=tab data-index=0 class=ng-binding>Company Admin</a></li><li ng-class="{\'active\':comapanyUser,\'ng-hide\':roleId==2}" class=ng-scope ng-click=getCompanyUser()><a href="" role=tab data-toggle=tab data-index=1 class=ng-binding><i class="ui-icon fa fa-arrow-left ui-iconnfo text-md bg-info" style="cursor: pointer" ng-show="ModelUserBox && roleId==1" ng-click=getCompanyAdmin()></i> <span>Company Users</span></a></li><div class=pull-right><div class=btn-group style="margin-top: 4px"><button type=button class="btn btn-xs btn-default" ng-click=prev_one()><i class="fa fa-fw fa-angle-left"></i></button> <button type=button class="btn btn-xs btn-default" ng-click=next_one()><i class="fa fa-fw fa-angle-right"></i></button></div><div class="pull-right hidden-xs w"><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm bg-white btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input ng-model=modelSearch type=text class="form-control input-sm no-border" placeholder={{placeholderVal}}...></div></div></div></ul><div class=tab-content><div title="To Level Roles" ng-class="{\'active\':!comapanyUser,\'ng-hide\':roleId==2}" class="ng-binding ng-scope tab-pane am-fade"><div class=row><div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 p-sm" ng-repeat="company in companyDetails"><div class="box bg-light" style="cursor: pointer" ng-click=getMenus(company._id.$oid)><div class="box-col w-xs text-center dk"><img src=images/a0.jpg class="w-xs m-r pull-left"></div><div class="box-col p b-b b-4x b-light" ng-class="{\'b-success am-fade\':companyState==company._id.$oid}"><a href="">{{company.companyName}}</a><br><div class=pull-left>Company User</div><i class="fa pull-right text-xl text-success b-4x" ng-class="{\'fa-check-circle am-flip-x\':companyState==company._id.$oid}"></i></div></div></div></div></div><div class="ng-binding ng-scope tab-pane am-fade" ng-class="{\'active\':comapanyUser,\'ng-hide\':roleId==2}"><div class=row ng-class="{\'ng-hide\':ModelUserBox}"><div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 p-sm" ng-repeat="company in companyDetails"><div class="box bg-light" style="cursor: pointer" ng-click=getUsers(company._id.$oid)><div class="box-col w-xs text-center dk"><img src=images/a0.jpg class="w-xs m-r pull-left"></div><div class="box-col p b-b b-4x b-light" ng-class="{\'b-success am-fade\':companyState==company._id.$oid}"><a href="">{{company.companyName}}</a><br><div class=pull-left>Company</div><i class="fa pull-right text-xl text-success b-4x b-info" ng-class="{\'fa-check-circle am-fade\':companyState==company._id.$oid}"></i></div></div></div></div></div><div class=row ng-show=ModelUserBox><div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 p-sm" ng-repeat="user in UserList"><div class="box bg-light" style="cursor: pointer" ng-click=getUserMenu(user.value.fkUserRoleMappingId.$oid,user.value.fkRoleId)><div class="box-col w-xs text-center dk"><img src=images/a0.jpg class="w-xs m-r pull-left"></div><div class="box-col p b-b b-4x b-light" ng-class="{\'b-success am-fade\':UserState==user.value.fkUserRoleMappingId.$oid}"><a>{{user.value.name}}</a><br><div class=pull-left>User</div><i class="fa pull-right text-xl text-success b-4x b-info" ng-class="{\'fa-check-circle am-fade\':UserState==user.value.fkUserRoleMappingId.$oid}"></i></div></div></div></div><div class=row ng-show=ShowNoDataFound><div class=col-sm-8><div id=alerts-container class="animated fadeIn"><div class="alert ng-scope am-fade alert-button bg-danger lt" ng-class="[type ? \'alert-\' + type : null]" style="display: block"><button type=button class="close ng-scope" ng-click=$hide()>\xd7</button> <strong class=ng-binding>Not Found!</strong>&nbsp; <span class=ng-binding>{{WarringMessage}}</span></div></div></div></div></div></div><script type=text/ng-template id=Render_ExMenus.html><div style="font-weight:400!important" ui-tree-handle class="tree-node dd-item dd2-item" id="{{node.fkMenuId.$oid}}"> \n' + '                                    <div class="dd2-content list-group-item bg-light lt" style="border-color: #BFC1C3;">\n' + '                                        <a data-nodrag ng-click="toggle(this)">\n' + '                                            <span class="glyphicon" ng-class="{\'glyphicon-plus\': collapsed, \'glyphicon-minus\': !collapsed}"></span>\n' + '                                        </a>{{node.MenuName}}\n' + '                                        <!--<a class="pull-right blueberry" data-nodrag=""><span ng-class="{\'glyphicon glyphicon-pencil\':editMenu}"></span></a>-->\n' + '                                    </div>\n' + '                                    <ol ui-tree-nodes="" ng-model="node.childMenuStructure" ng-class="{hidden: collapsed}" class="dd-list">\n' + '                                        <li ng-repeat="node in node.childMenuStructure" class="dd-item dd2-item" data-id="13"  ui-tree-node ng-include="\'Render_ExMenus.html\'">\n' + '                                        </li>\n' + '                                    </ol>\n' + '                                </div></script><script type=text/ng-template id=Render_AllMenus.html><div style="font-weight:400!important" ui-tree-handle class="tree-node dd-item dd2-item" id="{{node.fkMenuId.$oid}}">\n' + '                                <div class="dd2-content list-group-item bg-light lt" style="border-color: #BFC1C3;">\n' + '                                    <a data-nodrag ng-click="toggle(this)">\n' + '                                        <span class="glyphicon text-mg" ng-class="{\'glyphicon-plus\': collapsed, \'glyphicon-minus\': !collapsed}"></span>\n' + '                                    </a>{{node.MenuName}}\n' + '                                </div>\n' + '                                <ol ui-tree-nodes="" ng-model="node.childMenuStructure" ng-class="{hidden: collapsed}">\n' + '                                    <li ng-repeat="node in node.childMenuStructure" ui-tree-node ng-include="\'Render_AllMenus.html\'"></li>\n' + '                                </ol></script><div class="box bg-white" style="border: #e3e5e7 solid 1px" ng-show=menudetails><div class=col-sm-6><div class=box><div class="p p-v-sm"><h4 class="no-margin font-bold pull-left">Current Menus</h4><a class="m-h-xs pull-right" ng-click=createGroupModal()>Create A Menu Group</a></div><div class=box-row><div class="box-cell scrollable hover"><div class="col-lg-12 col-sm-12 col-xs-12 box-inner"><h4 class="no-margin m-b font-bold"></h4><div id=tree1-root ui-tree=tree1NodesOptions class="dd dd-draghandle bordered" data-max-depth=2><ol ui-tree-nodes ng-model=tree1 class=dd-list><li ng-mouseover="editMenu=true" ng-mouseleave="editMenu=false" ng-repeat="node in tree1" class="dd-item dd2-item list-group list-group-gap" ui-tree-node ng-include="\'Render_ExMenus.html\'"></li></ol></div><div class=horizontal-space></div></div></div></div><div class="p p-v-sm"><button class="btn w-sm btn-info pull-right m-b" ng-click=FnAddUserMenu()>Save Changes</button></div></div></div><div class=col-sm-6><div class=box><div class="p p-v-sm"><h4 class="no-margin font-bold">Menu List</h4></div><div class=box-row><div class="box-cell scrollable hover"><div class="col-lg-12 col-sm-12 col-xs-12 box-inner"><h4 class="no-margin m-b font-bold"></h4><div id=tree2-root ui-tree=tree2NodesOptions class="dd dd-draghandle bordered"><ol ui-tree-nodes ng-model=tree2 class=dd-list><li ng-repeat="node in tree2" class="dd-item dd2-item list-group list-group-gap" ui-tree-node ng-include="\'Render_AllMenus.html\'"></li></ol></div></div></div></div></div></div></div></div></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-viewJobDetailsModal.html', '<div class=modal tabindex=-1 role=dialog><div class="modal-dialog modal-lg"><div class=modal-content><div class=modal-header><button type=button class=close ng-click=$hide()>&times;</button><h4 class="modal-title text-primary">{{JobDetails.jobTittle}}</h4></div><div class=modal-body><form class="form-horizontal ng-pristine ng-valid" style="cursor: pointer"><div class=panel><div class="panel-body p-sm"><div class=form-group><div class="col-sm-3 col-xs-3"><i class="glyphicon glyphicon-briefcase"></i> <span>1-6 yrs</span></div><div class="col-sm-3 col-xs-3"><i class="glyphicon glyphicon-map-marker"></i> <span>{{JobDetails.Location}}</span></div><div class="col-sm-3 col-xs-3"><i class="fa fa-rupee"></i> <span>{{JobDetails.minSalary}}</span> <span>-</span> <span>{{JobDetails.maxSalary}}</span> <span>P.A</span></div><div class="col-sm-3 hidden-xs hidden-sm"><div class=pull-right><span>Posted On:</span> <span>{{JobDetails.createdDate | date:\'dd-MM-yyyy\'}}</span></div></div></div><div class=form-group><div class=col-sm-3><label>Job Description</label></div><div class=col-sm-9><label>{{JobDetails.jobDescription}}</label></div></div><div class=form-group><div class="col-sm-3 col-xs-3"><label>Qualification</label></div><div class="col-sm-9 col-xs-9"><label>{{JobDetails.Qualification}}</label></div></div><div class=form-group><div class="col-sm-9 col-xs-9"><span class="label m-r-xs" ng-repeat="tag in JobDetails.Tags  track by $index">{{tag}}</span></div></div></div></div></form></div></div></div></div>');
    $templateCache.put('angularModules/company/partials/Partial-viewMenu.html', '<div class=col-md-12></div>');
    $templateCache.put('angularModules/company/partials/iconPage.html', '<div class=modal tabindex=-1 role=dialog><div class="modal-dialog modal-lg"><div class=modal-content><div class=modal-header><div class="pull-right hidden-xs w"><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm no-bg btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input type=text ng-model=SearchIcon class="form-control input-sm no-bg no-border" placeholder=Search...></div></div><h4 class="modal-title text-primary">Choose Your Icon</h4></div><div class=modal-body><div class=box><div class=box-row><div class="box-cell scrollable hover"><div class="box-inner p p-h-sm"><div class="list-group list-group-md no-border no-radius no-margin"><div ng-click=setIcon(icon);$hide() ng-mouseover="Over=true" ng-mouseleave="Over=false" style="cursor: pointer" ng-repeat="icon in IconName | filter:SearchIcon" class="m-b-lg m-l pull-left"><i class="ui-icon fa {{icon}} ui-iconnfo text-lg" ng-class="{\'b-2x ui-iconnfo bg-success\':Over}"></i></div></div></div></div></div></div></div></div></div></div>');
    $templateCache.put('angularModules/course/partials/Partial-course.html', '<div class=col-md-12></div>');
    $templateCache.put('angularModules/feature/directives/Directive-autoComplete.html', '<div></div>');
    $templateCache.put('angularModules/feature/directives/Directive-ngEnter.html', '<div></div>');
    $templateCache.put('angularModules/feature/partials/Partial-feature_config.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt ng-scope"><h3 class=no-margin>Features</h3></div><div class=col-sm-12><form name=feature_form class="form-horizontal form-validation" xt-form novalidate><div class="panel panel-default"><div class="panel-heading bg-white"><strong>Basic constraints</strong></div><div class=panel-body><div class=form-group><label class="col-sm-3 control-label">feature name</label><div class=col-sm-9><input type=text class=form-control ng-model=featureName xt-validate required ng-minlength=5 name=featureName></div></div><div class=form-group><label class="col-sm-3 control-label">Description</label><div class=col-sm-9><textarea type=text row=5 class=form-control ng-model=featureDescription xt-validate required ng-minlength=5 name=featureDescription></textarea></div></div><div class=form-group><label class="col-sm-3 control-label">price</label><div class=col-sm-9><input type=number class=form-control ng-model=price xt-validate required name=price></div></div><div class=form-group><label class="col-sm-3 control-label">number of units</label><div class=col-sm-9><input type=number class=form-control ng-model=units xt-validate required name=units></div></div><div class=form-group><label class="col-sm-3 control-label">min. no of units</label><div class=col-sm-9><input type=number class=form-control ng-model=minUnits xt-validate required name=minUnits></div></div><div class=form-group><label class="col-sm-3 control-label">Billing</label><div class=col-sm-9><select class=form-control ng-model=billing ng-change=BillingPlan() xt-validate required name=billing><option value="" selected>select one billing plan</option><option value=yearly>yearly</option><option value=monthly>monthly</option><option value=custom>custom</option></select></div></div><div ng-show=customBilling><div class=form-group><label class="col-sm-3 control-label"></label><div class=col-sm-4><div class=form-group><div class=col-sm-9><select class=form-control name=years ng-options="number for number in yearNumbers" ng-model=years ng-init="years = 1"><option value="">years</option></select></div></div><div class=form-group><div class=col-sm-9><select class=form-control name=months ng-options="number for number in monthNumbers" ng-model=months ng-init="months = 0"><option value="">months</option></select></div></div><div class=form-group><div class=col-sm-9><select class=form-control name=days ng-options="number for number in weekNumbers" ng-model=days ng-init="days = 0"><option value="">days</option></select></div></div></div></div></div></div><div class="panel-heading bg-white"><strong>Other Details</strong></div><div class=panel-body><div class=form-group><label class="col-sm-3 control-label">label</label><div class=col-sm-9><input type=text class=form-control ng-model=label name=label xt-validate required ng-minlength=5></div></div><div class=form-group><label class="col-sm-3 control-label">input type</label><div class=col-sm-9><select class=form-control ng-options="c.inputtypes for c in InputTypes" ng-model=typeOfInput name=typeOfInput xt-validate required><option value="" selected>select an input type</option></select></div></div><div class=form-group><label class="col-sm-3 control-label">validations</label><div class=col-sm-8><div class=col-sm-6 style=padding-left:0><input type=text class=form-control data-ng-model=item.avail_validations placeholder=validation ng-enter=fun_validations(item) list=validation_list name=validations xt-validate required> <span ng-repeat="validation in validations" class="btn btn-primary m-xs"><label class=m-h-sm>{{validation}}</label><i class="fa fa-times" ng-click=remove_validation($index)></i></span><datalist id=validation_list><option data-ng-repeat="validation in avail_validations" value={{validation}}></option></datalist><div class=col-sm-6 style=padding-right:0 ng-show=allowedvalu><input type=text class=form-control ng-model=allowedvalue placeholder="allowed values"></div></div></div></div><div class=form-group id=getattrs><label class="col-sm-3 control-label">attributes</label><div class=col-sm-9><table class="table table-striped"><thead><tr><td class=no-padding><div class=col-sm-10 style=padding-left:0><input type=text class=form-control placeholder="attribute name" ng-model=attributename name=attributename xt-validate required></div></td><td class=no-padding><div class=col-sm-10 style=padding-left:0><input type=text class=form-control placeholder="attribute value" ng-model=attributevalue name=attributevalue xt-validate required></div></td><td class=no-padding><i class="ui-icon m-t-sm fa fa-plus" bs-tooltip=addAttrTooltip ng-click=createDivForAddAttr()></i></td><td></td></tr><tr ng-repeat="objAttrib in atrributes"><th ng-repeat="(atrributeN,atrributeV) in objAttrib" class=m-t>{{atrributeN}}</th><th ng-repeat="(atrributeN,atrributeV) in objAttrib" class=m-t>{{atrributeV}}</th><th style=padding-left:0><i href class="ui-icon glyphicon glyphicon-remove" ng-click=removeAttr($index) bs-tooltip=RemoveAttrTooltip></i></th></tr></thead></table></div></div><div class=form-group><label class="col-sm-3 control-label">User configurable</label><div class=col-sm-9><label class=checkbox-inline><input type=checkbox value=option1 ng-model=userConfigurable> &nbsp</label></div></div><div class=form-group><label class="col-sm-3 control-label"></label><div class=col-sm-9><button type=button class="btn btn-stroke btn-info" ng-click=addField() ng-disabled="feature_form.label.$invalid || feature_form.typeOfInput.$invalid ||feature_form.validations.$invalid ||feature_form.attributename.$invalid||feature_form.attributevalue.$invalid">add field</button></div></div><div class=form-group><label class="col-sm-3 control-label"></label><div class=col-sm-9><div class="panel panel-default"><table class="table table-bordered table-striped"><thead><tr><th>Label</th><th>Input types</th><th>validations</th><th>Allowed values</th></tr></thead><tbody><tr ng-repeat="field  in fields" st-select-row=row class="ng-scope ng-isolate-scope"><td>{{field.label}}</td><td>{{field.InputType}}</td><td><span ng-repeat="validation in validations" class=m-xs><label>{{validation}}</label></span></td><td></td></tr></tbody></table></div></div></div></div><footer class="panel-footer text-right"><button type=button class="btn btn-info" ng-disabled="feature_form.$invalid || progress" ng-click=createFeature()>Create Features</button></footer></div></form></div>');
    $templateCache.put('angularModules/feature/partials/Partial-user_feature_config.html', '<div class=col-xl-12><div class="panel panel-default"><div class="panel-heading bg-white font-bold">User Feature Configuration<br></div><div class=panel-body><div class="col-md-4 m-t-lg"><div class=font-bold>Features<hr></div></div><div class="col-md-8 m-t-lg"><div class=font-bold>Configure {{feature.featureName}}<hr></div><form sf-schema=schema sf-form=form sf-model=model></form></div></div></div></div>');
    $templateCache.put('angularModules/login/partials/Partial-Login_view.html', '<div class=container><div class="center-block w-xl w-auto-xs m-b-lg"><div class=social-title>&nbsp &nbspConnect with Your Social Accounts</div><br><div>&nbsp &nbsp<img src=images/facebook.png class=logo-prop>&nbsp <img src=images/twitter.png class=logo-prop>&nbsp <img src=images/google+.png class=logo-prop><div><br><div class="m-b text-sm">Sign in with your {{app.name}} Account</div><form name=signinform ng-submit=fnCheckLogin() class=form-validation role=form xt-form novalidate><div class=form-group><label class=hide>Email</label><input type=text placeholder=Someone@example.com class=login-form-control ng-model=loginCredential.userName ng-pattern=emailPattern id=email xt-validate name=email msg-pattern={{emailMsg}} class="form-control email" ng-change=fnCheckEmailExists(email) required></div><div class="form-group m-b-xs"><label class=hide>Password</label><input type=password placeholder=Password name=password class=login-form-control ng-model=loginCredential.password xt-validate required ng-minlength=5></div><div class="checkbox no-margin"><label class=ui-checks><input type=checkbox><i></i> Keep me signed in</label></div><button type=submit class="btn btn-info p-h-md m-v-lg" ng-disabled="signinform.$invalid || progress">{{btnSignupText}}</button><p class=text-xs><a ui-sref=forgot-password>Forgot password?</a></p><p class="m-v-lg text-sm">Do not have an account? <a ui-sref=signup>Create an account</a></p></form></div></div><div class=app-footer ng-include="\'views/footer.html\'"></div></div></div>');
    $templateCache.put('angularModules/login/partials/Partial-home.html', '<aside id=aside class="app-aside {{app.settings.asideColor}} text-lg" ng-include="\'views/aside.html\'"></aside><div class=p-md><div class=row name=innercontent ui-view><div class="col-sm-12 col-md-12 col-lg-12"><span ng-repeat="menu in userMenus"><a ng-click=loadDetails(menu) class="animated fadeInDown text-sm btn btn-lg btn-stroke {{classn[($index+1)%classn.length]}} m-l m-t"><i class="fa {{menu.menuIcon}} fa-4x"></i> <span class="block clear text-left m-v-xs"><b class="text-lg block font-bold">{{menu.MenuName}}</b></span> <i class="fa text-lg pull-right right" ng-class="{\'fa-arrow-circle-right\':menu.childMenuStructure.length}"></i></a></span></div></div></div>');
    $templateCache.put('angularModules/login/partials/landingMenuView.html', '<div class="jihin col-sm-12 col-md-12 col-lg-12"><span ng-repeat="menu in userMenus"><a ng-click=loadDetails(menu) class="animated fadeInDown text-sm btn btn-lg btn-stroke {{classn[($index+1)%classn.length]}} m-l m-t"><i class="fa {{menu.menuIcon}} fa-4x"></i> <span class="block clear text-left m-v-xs"><b class="text-lg block font-bold">{{menu.MenuName}}</b><i class="arrow {{classn[($index+1)%classn.length]}} right pull-bottom" ng-show={{menu.childMenuStructure.length}}></i></span></a></span></div>');
    $templateCache.put('angularModules/roleMenuMapping/partials/Partial-roleMenuMapping.html', '<div class=row><div class=col-sm-12><div class="panel b-light"><div class="panel-body p-sm bg-light lt"><div class=bs-example append-source=""><div class="tab-container ng-scope ng-valid ng-dirty"><ul class="nav nav-tabs" role=tablist><li ng-class="{\'active\':!comapany,\'ng-hide\':roleId==2}" class="ng-scope active"><a role=tab data-toggle=tab ng-click=toLevelRoles() data-index=0 class=ng-binding>Top Level Roles</a></li><li ng-class="{\'active\':comapany,\'ng-hide\':roleId==2}" class=ng-scope><a href="" role=tab data-toggle=tab ng-click=backToCompanies() data-index=1 class=ng-binding><i class="ui-icon fa fa-arrow-left ui-iconnfo text-md bg-info" ng-click=backToCompanies() style="cursor: pointer" ng-show=ModelRoleBox></i> <span>Comapnies</span></a></li><div class=pull-right><div class=btn-group style="margin-top: 4px"><button type=button class="btn btn-xs btn-default" ng-click=prev_one()><i class="fa fa-fw fa-angle-left"></i></button> <button type=button class="btn btn-xs btn-default" ng-click=next_one()><i class="fa fa-fw fa-angle-right"></i></button></div><div class="pull-right hidden-xs w"><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm bg-white btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input ng-model=modelSearch type=text class="form-control input-sm no-border" placeholder={{placeholderVal}}...></div></div></div></ul><div class=tab-content><div title="To Level Roles" class="ng-binding ng-scope tab-pane am-fade" ng-class="{\'active\':!comapany,\'ng-hide\':roleId==2}"><div class=row><div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 p-sm" ng-repeat="tRoles in topLevelRoles"><div class="box bg-light animated fadeInDown" ng-click=getRole(tRoles._id) style="cursor: pointer"><div class="box-col w-xs text-center"><img src=images/a0.jpg class="w-xs pull-left"></div><div class="box-col p b-b b-4x b-light" ng-class="{\'b-success am-fade\':RoleState==tRoles._id}"><a href="">{{tRoles.roleName}}</a><br><div class=pull-left>Commen Role For All Companies</div><i class="fa pull-right text-xl text-success b-4x b-info" ng-class="{\'fa-check-circle am-fade\':RoleState==tRoles._id}"></i></div></div></div></div></div><div class="ng-binding ng-scope tab-pane am-fade" ng-class="{\'active\':comapany,\'ng-hide\':roleId==2}"><div class=row ng-model=modelCompanyBox ng-show=!ModelRoleBox><div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 p-sm" ng-click=ChangeCompanyState(OneComapny._id.$oid,OneComapny.companyName) ng-repeat="OneComapny in companyDetails"><div class="box bg-light animated fadeInDown" style="cursor: pointer" ng-onhover="box-shadow: 1px 1px 5px 1px rgba(0, 0, 0, 0.23);"><div class="box-col w-xs text-center"><img src=images/CompanyLogs/company.png class="w-xs m-r pull-left"></div><div class="box-col p"><a>{{OneComapny.companyName}}</a><div>Company</div></div></div></div></div></div><div class=row ng-show=ModelRoleBox><div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 p-sm" ng-repeat="role in roles"><div class="box bg-light animated fadeInDown" style="cursor: pointer" ng-click=getRole(role._id)><div class="box-col w-xs text-center"><img src=images/a0.jpg class="w-xs m-r pull-left"></div><div class="box-col p b-b b-4x b-light" ng-class="{\'b-success am-fade\':RoleState==role._id}"><a>{{role.roleName}}</a><br><div class=pull-left>Role</div><i class="fa pull-right text-xl text-success b-4x b-info" ng-class="{\'fa-check-circle am-fade\':RoleState==role._id}"></i></div></div></div></div><div class=row ng-show=ShowNoDataFound><div class=col-sm-8><div id=alerts-container class="animated fadeIn"><div class="alert ng-scope am-fade alert-button bg-danger lt" ng-class="[type ? \'alert-\' + type : null]" style="display: block"><button type=button class="close ng-scope" ng-click=$hide()>\xd7</button> <strong class=ng-binding>Not Found!</strong>&nbsp; <span class=ng-binding>{{WarringMessage}}</span></div></div></div></div></div></div><script type=text/ng-template id=Render_ExMenus.html><div style="font-weight:400!important" ui-tree-handle class="tree-node dd-item dd2-item" id="{{node.fkMenuId.$oid}}"> \n' + '                                    <div class="dd2-content list-group-item b-l-info bg-light" style="border: 1px #cccccc solid;" ng-class="{\'lt\':node.MenuLink.trim().length}">\n' + '                                        <a data-nodrag ng-click="toggle(this)">\n' + '                                            <span ng-if="!node.MenuLink.trim().length" class="glyphicon" ng-class="{\'glyphicon-plus\': collapsed, \'glyphicon-minus\': !collapsed}"></span>\n' + '                                        </a> {{node.MenuName}}\n' + '                                        <div title="Remove" class="pull-right glyphicon glyphicon-chevron-right blueberry" data-nodrag="" ng-click="removeFromTree1(this);remove(this)"></div>\n' + '\n' + '                                        <!--<a title="Remove" class="pull-right glyphicon glyphicon-chevron-right m-r blueberry" data-nodrag="" ng-click="moveRight(this)"></a>-->\n' + '                                    </div>\n' + '                                    <ol ui-tree-nodes="" ng-model="node.childMenuStructure" ng-class="{hidden: collapsed}" class="dd-list">\n' + '                                        <li ng-repeat="node in node.childMenuStructure" class="dd-item dd2-item" data-id="13"  ui-tree-node ng-include="\'Render_ExMenus.html\'">\n' + '                                        </li>\n' + '                                    </ol>\n' + '                                </div>\n' + '                                <div ng-if="node.actionMaster.length" class="checkbox bg-light animated fadeInDown" style="margin-top: -5px;">\n' + '          <label class="ui-checks m-l p-xs" ng-repeat="action in node.actionMaster">\n' + '            <input type="checkbox" ng-init="node.actionStatus[$index]=fnActionExists(action.actionName==undefined?null:action.actionName,node.actions)" ng-model="node.actionStatus[$index]" ng-change="checkAction(node,this,$index)" value="">\n' + '            <i></i>\n' + '            {{action.actionName}}\n' + '          </label>\n' + '        </div></script><script type=text/ng-template id=Render_AllMenus.html><div style="font-weight:400!important" ui-tree-handle class="tree-node dd-item dd2-item" id="{{node.fkMenuId.$oid}}">\n' + '                                <div class="dd2-content list-group-item bg-light lt" style="border-color: #BFC1C3;">\n' + '                                    <!--<a data-nodrag ng-click="toggle(this)">\n' + '                                        <span class="glyphicon text-mg" ng-class="{\'glyphicon-plus\': collapsed, \'glyphicon-minus\': !collapsed}"></span>\n' + '                                    </a>-->{{node.MenuName}}\n' + '                                    <div title="Add" class="pull-right glyphicon glyphicon-chevron-left" data-nodrag="" ng-click="removeFromTree2(this);remove(this)"><span></span></div>\n' + '                                </div>\n' + '                                <ol ui-tree-nodes="" ng-model="node.childMenuStructure" ng-class="{hidden: collapsed}">\n' + '                                    <li ng-repeat="node in node.childMenuStructure" ui-tree-node ng-include="\'Render_AllMenus.html\'"></li>\n' + '                                </ol></script><div class="box bg-white" style="border: #e3e5e7 solid 1px" ng-show=menudetails><div class="col-sm-6 animated fadeIn"><div class=box><div class="p p-v-sm"><h4 class="no-margin font-bold pull-left">Current Menus</h4><a class="m-h-xs pull-right" ng-click=createGroupModal()>Create A Menu Group</a></div><div class=box-row><div class="box-cell scrollable hover"><div class="col-lg-12 col-sm-12 col-xs-12 box-inner"><h4 class="no-margin m-b font-bold"></h4><div id=tree1-root ui-tree=tree1NodesOptions class="dd dd-draghandle bordered"><ol ui-tree-nodes ng-model=tree1 class=dd-list><li ng-mouseover="editMenu=true" ng-mouseleave="editMenu=false" ng-repeat="node in tree1" class="dd-item dd2-item list-group list-group-gap" ui-tree-node ng-include="\'Render_ExMenus.html\'"></li></ol></div><div class=horizontal-space></div></div></div></div><div class="p p-v-sm"><button class="btn w-sm btn-info pull-right m-b" ng-click=SaveChange()>Save Changes</button></div></div></div><div class="col-sm-6 animated fadeIn"><div class=box><div class="p p-v-sm"><h4 class="no-margin font-bold">Menu List</h4></div><div class=box-row><div class="box-cell scrollable hover"><div class="col-lg-12 col-sm-12 col-xs-12 box-inner"><h4 class="no-margin m-b font-bold"></h4><div id=tree2-root ui-tree=tree2NodesOptions class="dd dd-draghandle bordered" data-max-depth=1><ol ui-tree-nodes ng-model=tree2 class=dd-list><li ng-repeat="node in tree2" class="dd-item dd2-item list-group list-group-gap" ui-tree-node ng-include="\'Render_AllMenus.html\'"></li></ol></div></div></div></div></div></div></div></div></div></div></div></div>');
    $templateCache.put('views/aside.html', '<div class=app-aside-inner bs-affix><div class="app-aside-body scrollable hover" ui-view=aside@></div></div>');
    $templateCache.put('views/footer.html', '<div class="p bg-white text-xs"><div class="pull-right hidden-xs hidden-sm text-muted"><strong>{{app.name}}</strong> - Built with AngularJS &amp; Bootstrap &copy; Copyright 2014</div><ul class="list-inline no-margin text-center-xs"><script type=text/ng-template id=lang><ul class="dropdown-menu">\n' + '        <li ng-repeat="(langKey, label) in langs">\n' + '          <a ng-click="setLang(langKey, $event)" href>{{label}}</a>\n' + '        </li>\n' + '      </ul></script><li><a bs-dropdown=dropdown data-placement=top-left data-animation=am-flip-x data-template=lang>{{selectLang}}</a></li><li class=text-muted>-</li><li><a ui-sref=page.document>Documents</a></li><li class=text-muted>-</li><li><a href="http://themeforest.net/user/heyflat/portfolio?ref=heyflat" target=_blank>Purchase</a></li></ul></div>');
    $templateCache.put('views/header.html', '<div class=navbar-header ng-class="{\'box-shadow-inset dk\':app.settings.headerShadow}"><button class="pull-right visible-xs" ng-click="app.navbarCollapse = !app.navbarCollapse"><i class=ti-settings></i></button> <button class="pull-right visible-xs" ng-click="app.asideCollapse = !app.asideCollapse"><i class=ti-menu></i></button> <a class="navbar-brand text-lt" bs-aside=aside data-template=views/partials/aside.tpl.html data-placement=top data-animation="am-slide-top aside-open-backdrop" data-container=body><i class="glyphicon glyphicon-th-large text-md"></i> <img src=images/logo.png alt=. class=hide> <span class="hidden-folded m-l-xs">{{app.name}}<sup class="text-xs font-thin"></sup></span></a></div><div class="navbar-collapse hidden-xs" ng-class="{\'show animated fadeIn\' : app.navbarCollapse}"><ul class="nav navbar-nav navbar-left"><li><a ui-sref=app.dashboard translate=header.navbar.DASHBOARD>Dashboard</a></li><li><a ui-sref=mail.inbox translate=header.navbar.EMAIL>Email</a></li><li><a ui-sref=ui.component.arrow translate=header.navbar.UIKITS>UI Kits</a></li><li><a ui-sref=page.profile translate=header.navbar.PAGES>Pages</a></li></ul><ul class="nav navbar-nav navbar-right m-r-n"><li><script type=text/ng-template id=settings><div tabindex="-1" class="p dropdown-menu bg-white bg-inherit no-b-t no-margin w-sm" role="menu">                \r' + '\n' + '                <p class="clearfix">\r' + '\n' + '                  <a class="inline {{color}} p-xs m-h-xs m-v-xs pull-left no-borders" ng-repeat="color in options.headerColor" ng-click="setHeaderColor(color)">\r' + '\n' + '                  </a>\r' + '\n' + '                </p>\r' + '\n' + '                <div class="line b-b b-light m-h-xs"></div>\r' + '\n' + '                <p class="clearfix">\r' + '\n' + '                  <a class="inline {{color}} p-xs m-h-xs m-v-xs pull-left no-borders" ng-repeat="color in options.asideColor" ng-click="setAsideColor(color)">\r' + '\n' + '                  </a>\r' + '\n' + '                </p>\r' + '\n' + '                <div class="line b-b b-light m-h-xs"></div>                \r' + '\n' + '                <div class="m-v-xs">\r' + '\n' + '                  <label class="ui-checks m-h-xs no-margin">\r' + '\n' + '                    <input type="checkbox" ng-model="app.settings.headerFixed"><i></i> Header fixed\r' + '\n' + '                  </label>\r' + '\n' + '                </div>\r' + '\n' + '                <div class="m-v-xs">\r' + '\n' + '                  <label class="ui-checks m-h-xs no-margin">\r' + '\n' + '                    <input type="checkbox" ng-model="app.settings.headerShadow"><i></i> Header shadow\r' + '\n' + '                  </label>\r' + '\n' + '                </div>\r' + '\n' + '                <div class="m-v-xs">\r' + '\n' + '                  <label class="ui-checks m-h-xs no-margin">\r' + '\n' + '                    <input type="checkbox" ng-model="app.settings.asideTop"><i></i> Aside top\r' + '\n' + '                  </label>\r' + '\n' + '                </div>\r' + '\n' + '              </div></script><a href bs-dropdown=dropdown data-animation=am-collapse data-template=settings><i class="glyphicon glyphicon-cog"></i> <span class=visible-xs-inline>Settings</span></a></li><li><a href bs-aside=aside data-template=views/partials/aside.tpl.chat.html data-placement=right data-animation="am-slide-right aside-open-inner modal-open" data-container=body><i class="glyphicon glyphicon-comment"></i> <b class="badge badge-xs bg-warning up">3</b> <span class=visible-xs-inline>Notifications</span></a></li><li class=hidden-xs><a href ui-fullscreen><i class="glyphicon glyphicon-resize-vertical"></i></a></li><li><a href class="clear no-padding-h" bs-dropdown=dropdown data-animation=am-collapse data-template=user><img src=images/a0.jpg alt=... class="navbar-img pull-right"> <span class="hidden-sm m-l">David M.</span> <b class="caret m-h-xs hidden-sm"></b></a><script type=text/ng-template id=user><ul class="dropdown-menu pull-right no-b-t">\r' + '\n' + '                <li>\r' + '\n' + '                  <a ui-sref="page.profile">Profile</a>\r' + '\n' + '                </li>\r' + '\n' + '                <li>\r' + '\n' + '                  <a ui-sref="page.settings">Settings</a>\r' + '\n' + '                </li>\r' + '\n' + '                <li class="divider">\r' + '\n' + '                <li>\r' + '\n' + '                  <a ui-sref="lockme">Lock me</a>\r' + '\n' + '                </li>\r' + '\n' + '                <li ng-click="logout()">\r' + '\n' + '                  <a >Logout</a>\r' + '\n' + '                </li>\r' + '\n' + '              </ul></script></li></ul><form class="navbar-form navbar-form-sm navbar-right visible-xs" role=search><div class=form-group><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm no-bg btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input type=text ng-model=selected typeahead="state for state in states | filter:$viewValue | limitTo:8" class="form-control input-sm no-bg no-border" placeholder=Search...></div></div></form></div>');
    $templateCache.put('views/layout.html', '<header id=header ng-include=" \'views/header.html\' " ng-controller=header class="app-header navbar {{app.settings.headerColor}}" role=menu></header><div id=content class=app-content role=main ui-view></div>');
    $templateCache.put('views/pages/404.html', '<div class="bg-warning bg-big"><div class="text-center m-b-lg"><h1 class="text-shadow no-margin text-white text-4x p-v-lg"><span class="text-2x font-bold m-t-lg block">404</span></h1><h2 class="h1 m-v-lg text-black">OOPS!</h2><p class="h4 m-v-lg text-u-c font-bold text-black">Sorry! the page you are looking for doesn\'t exist.</p><div class=p-v-lg><a href=# class="btn btn-black text-u-c font-bold">Go to the home page</a></div></div></div><div class=app-footer ng-include="\'views/footer.html\'"></div>');
    $templateCache.put('views/pages/505.html', '<div class="bg-danger dk bg-big"><div class="text-center m-b-lg"><h1 class="text-shadow no-margin text-white text-4x p-v-lg"><span class="text-2x font-bold m-t-lg block">505</span></h1><h2 class="h1 m-v-lg text-black">OUCH!</h2><p class="h4 m-v-lg text-u-c font-bold text-black">Don\'t worry, we will fix it soon.</p><div class=p-v-lg>Thanks!</div></div></div><div class=app-footer ng-include="\'views/footer.html\'"></div>');
    $templateCache.put('views/pages/blank.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Blank</h3></div><div class=p-md></div>');
    $templateCache.put('views/pages/dashboard.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><div class="pull-right hidden-xs w"><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm no-bg btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input type=text class="form-control input-sm no-bg no-border" placeholder=Search...></div></div><h3 class=no-margin>Welcome</h3></div><div class=p-md><div class=row><div class=col-sm-4><div class="panel b-light"><div class="panel-heading p-v-xs p-h-sm"><span class=pull-right>80%</span> Total Earnings</div><div class="progress progress-xxxs no-margin no-radius bg-white"><div class="progress-bar bg-light" style=width:80%></div></div><div class="panel-body p-sm"><div class="pull-left pull-none-sm p-h text-center m-r-xs"><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                  percent:80,\r' + '\n' + '                  lineWidth: 5,\r' + '\n' + '                  trackColor: \'#fff\',\r' + '\n' + '                  barColor: \'{{app.color.light}}\',\r' + '\n' + '                  scaleColor: \'#fff\',\r' + '\n' + '                  size: 65,\r' + '\n' + '                  lineCap: \'butt\',\r' + '\n' + '                  color: \'{{app.color.success}}\',\r' + '\n' + '                  animate: 3000\r' + '\n' + '                }"><div class=text-white>80%</div></div></div></div><div class=clear><div class="text-2x font-bold">432,000</div><small class=text-muted>Caculated in 19:30 Thu</small></div></div></div></div><div class=col-sm-4><div class="panel b-light"><div class="panel-heading p-v-xs p-h-sm"><span class=pull-right>20%</span> New Visits</div><div class="progress progress-xxxs no-margin no-radius bg-white"><div class="progress-bar bg-light" style=width:20%></div></div><div class="panel-body p-sm"><div class="pull-left pull-none-sm p-h text-center m-r-xs"><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent:20,\r' + '\n' + '                lineWidth: 5,\r' + '\n' + '                trackColor: \'{{app.color.light}}\',\r' + '\n' + '                barColor: \'{{app.color.info}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 65,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                color: \'{{app.color.inverse}}\',\r' + '\n' + '                animate: 3000\r' + '\n' + '              }"><div class=text-white>20%</div></div></div><div class=clear><div class="text-2x font-bold">386,000</div><small class=text-muted>Peaked at 14:30 Mon</small></div></div></div></div><div class=col-sm-4><div class="panel b-light"><div class="panel-heading p-v-xs p-h-sm"><span class=pull-right>50%</span> Helpdesk</div><div class="progress progress-xxxs no-margin no-radius bg-white"><div class="progress-bar bg-light no-radius" style=width:50%></div></div><div class="panel-body p-sm"><div class="pull-left pull-none-sm p-h text-center m-r-xs"><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '              percent: 50,\r' + '\n' + '              lineWidth: 28,\r' + '\n' + '              trackColor: \'#fff\',\r' + '\n' + '              barColor: \'{{app.color.info}}\',\r' + '\n' + '              scaleColor: \'#fff\',\r' + '\n' + '              size: 65,\r' + '\n' + '              lineCap: \'butt\',\r' + '\n' + '              rotate: 90,\r' + '\n' + '              animate: 5000\r' + '\n' + '            }"><div class=text-black>50%</div></div></div><div class=clear><div class="text-2x font-bold">96,000</div><small class=text-dk>Questions scheduled</small></div></div></div></div></div><div class=row ng-controller=ChartCtrl><div class=col-md-8><div class="panel b-light"><div class=panel-heading><label class="ui-switch bg-inverse pull-right" ng-init="showData=true"><input type=checkbox ng-model=showData> <i></i></label><span>Sell monitor</span> <i class="fa fa-caret-up text-success"></i><span class="text-xs text-muted m-l-xs">1.5%</span></div><div class=panel-body><div ui-jp=plot ui-refresh=showData ui-options="\r' + '\n' + '            [\r' + '\n' + '              {\r' + '\n' + '                data: {{plot_line}}, \r' + '\n' + '                points: { show: true, radius: 4, lineWidth: 3, fillColor: \'rgba(18,147,204,0.5)\'}, \r' + '\n' + '                lines:  { show: true, lineWidth: 0, fill: 0.5, fillColor: \'rgba(18,147,204,0.5)\' }, \r' + '\n' + '                color:\'#fff\'\r' + '\n' + '              },\r' + '\n' + '              {\r' + '\n' + '                data: {{plot_line_3}}, \r' + '\n' + '                points: { show: showData, radius: 4, lineWidth: 3, fillColor: \'rgba(166,107,238,0.5)\'}, \r' + '\n' + '                lines:  { show: showData, lineWidth: 0, fill: 0.5, fillColor: \'rgba(166,107,238,0.5)\' }, \r' + '\n' + '                color:\'#fff\'\r' + '\n' + '              }\r' + '\n' + '            ],\r' + '\n' + '            {\r' + '\n' + '              series: { shadowSize: 0 },\r' + '\n' + '              xaxis: { show: true, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: true, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:240px></div></div></div></div><div class=col-md-4><div class="panel b-light"><div class=panel-heading><a href=""></a> Total revenue of this month</div><div style="margin: 0 -2px"><div ui-jp=plot ui-options="\r' + '\n' + '            [\r' + '\n' + '              { data: {{plot_line_1}}, points: { show: true, radius: 0}, splines: { show: true, tension: 0.45, lineWidth: 1, fill: 0.2 } },\r' + '\n' + '              { data: {{plot_line_2}}, points: { show: true, radius: 0}, splines: { show: true, tension: 0.45, lineWidth: 1, fill: 1 } }\r' + '\n' + '            ], \r' + '\n' + '            {\r' + '\n' + '              colors: [\'{{app.color.success}}\', \'{{app.color.inverse}}\'],\r' + '\n' + '              series: { shadowSize: 3 },\r' + '\n' + '              xaxis: { show: false, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: false, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:175px></div></div><div class="panel-footer bg-inverse no-b-t"><div class=box><div class="box-col p-md"><span class="text-xl text-lt">$30,343 <i class="fa fa-caret-up text-muted"></i></span></div><div class="box-col text-right p-md w-xs"><div ng-init="data1=[60,40]" ui-jp=sparkline ui-options="{{data1}}, {type:\'pie\', height:35, sliceColors:[\'{{app.color.dark}}\',\'#fff\']}" class="sparkline inline"></div></div></div></div></div></div></div><div class="box b-a bg-white m-b" ng-controller=VectorMapCtrl><div class=col-md-8><div class="panel-heading b-b b-light">World Market</div><div class=panel-body><p class="m-b-lg text-muted">Many maps of the world, world regions, countries and cities are available for download from <a href="http://jvectormap.com/">http://jvectormap.com/</a>. All of them are made from the data in public domain or data licensed under the free licenses, so you can use them for any purpose without of charge.</p><div class=m-b-lg style=height:240px ui-jp=vectorMap ui-options="{            \r' + '\n' + '          map: \'world_mill_en\',\r' + '\n' + '          markers: {{world_markers}},\r' + '\n' + '          normalizeFunction: \'polynomial\',\r' + '\n' + '          backgroundColor: \'#fff\',\r' + '\n' + '          regionsSelectable: true,\r' + '\n' + '          markersSelectable: true,\r' + '\n' + '          regionStyle: {\r' + '\n' + '            initial: {\r' + '\n' + '              fill: \'{{app.color.light}}\'\r' + '\n' + '            },\r' + '\n' + '            hover: {\r' + '\n' + '              fill: \'{{app.color.info}}\',\r' + '\n' + '              stroke: \'#fff\'\r' + '\n' + '            },\r' + '\n' + '          },\r' + '\n' + '          markerStyle: {\r' + '\n' + '            initial: {\r' + '\n' + '              fill: \'{{app.color.info}}\',\r' + '\n' + '              stroke: \'#fff\'\r' + '\n' + '            },\r' + '\n' + '            hover: {\r' + '\n' + '              fill: \'{{app.color.primary}}\',\r' + '\n' + '              stroke: \'#fff\'\r' + '\n' + '            }\r' + '\n' + '          },\r' + '\n' + '          series: {\r' + '\n' + '            markers: [{\r' + '\n' + '              attribute: \'fill\',\r' + '\n' + '              scale: [\'{{app.color.primary}}\',\'{{app.color.inverse}}\', \'{{app.color.success}}\'],\r' + '\n' + '              values: {{cityAreaData}}\r' + '\n' + '            },{\r' + '\n' + '              attribute: \'r\',\r' + '\n' + '              scale: [5, 20],\r' + '\n' + '              values: {{cityAreaData}}\r' + '\n' + '            }]\r' + '\n' + '          }\r' + '\n' + '        }"></div></div></div><div class="col-md-4 b-l no-border-sm"><div class="panel-heading b-b b-light">Infomation</div><div class="list-group no-border no-radius"><div class=list-group-item><span class=pull-right>293,200</span> <i class="fa fa-fw fa-circle text-info"></i> Vatican City</div><div class=list-group-item><span class=pull-right>203,000</span> <i class="fa fa-fw fa-circle text-success"></i> San Marino</div><div class=list-group-item><span class=pull-right>180,230</span> <i class="fa fa-fw fa-circle text-inverse"></i> Marshall Islands</div><div class=list-group-item><span class=pull-right>130,100</span> <i class="fa fa-fw fa-circle text-inverse-lt"></i> Maldives</div><div class=list-group-item><span class=pull-right>98,000</span> <i class="fa fa-fw fa-circle text-primary"></i> Palau</div></div></div></div><div class=row><div class=col-sm-6><h5 class="no-margin m-b">Members</h5><ul class="list-group list-group-md"><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x b-success"><img src=images/a1.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Jonathan Doe</a> Lorem ipsum dolor sit amet, consectetur adipiscing elit</div></li><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x b-success"><img src=images/a2.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Jack Michale</a> Sectetur adipiscing elit</div></li><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x b-warning"><img src=images/a3.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Jessi</a> Sectetur adipiscing elit</div></li><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x"><img src=images/a4.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Sodake</a> Vestibulum ullamcorper sodales nisi nec condimentum</div></li></ul></div><div class=col-sm-6><h5 class="no-margin m-b">Feeds</h5><div class="list-group list-group-gap"><a href class="list-group-item b-l-inverse">Lorem ipsum dolor sit amet, consectetur adipiscing elit</a> <a href class="list-group-item b-l-success">Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugia</a> <a href class="list-group-item b-l-dark">Vestibulum ullamcorper sodales nisi nec condimentum</a> <a href class="list-group-item b-l-warning">Sollicitudin venenatis ipsum ac</a> <a href class="list-group-item b-l-info">Donec eleifend condimentum nisl eu consectetur. Integer eleifend</a> <a href class="list-group-item b-l-primary">Lectus arcu malesuada sem</a></div></div></div></div>');
    $templateCache.put('views/pages/document.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Documents</h3></div><div class="p-h-md bg-light b-b"><ul class="nav nav-lines b-info" ui-nav><li class=active><a ui-scroll=build>Build</a></li><li><a ui-scroll=css>CSS</a></li><li><a ui-scroll=modules>Modules</a></li></ul></div><div class=p-md><h3 class=m-b-lg>Build</h3><ol><li>Install <a href=http://nodejs.org class=font-bold>Node.js</a> and <a href="https://www.npmjs.org/" class=font-bold>NPM</a> on your computer</li><li>Run command <code>npm install -g bower grunt-cli</code></li><li>Run <code>bower install</code> to install dependencies</li><li>Run <code>grunt build:dev</code> to build project</li><li>Run <code>npm start</code> to start server</li></ol><p class="alert alert-info p-sm m-t-lg">Note: any commands we tell you to run must be ran from the project\'s root folder.</p><div id=css class=p-md></div><h3>CSS</h3><p>Generated by LESS files. There are many Variables you can config.</p><table class="table table-border bg-white b-a"><tbody><tr class="bg-light lt"><td colspan=2>Margin and Padding</td></tr><tr><td>.no-margin</td><td>{margin: 0}</td></tr><tr><td>.m</td><td>{margin: 15px}</td></tr><tr><td>.m-xs</td><td>{margin: 5px}</td></tr><tr><td>.m-sm</td><td>{margin: 10px}</td></tr><tr><td>.m-md</td><td>{margin: 20px}</td></tr><tr><td>.m-lg</td><td>{margin: 30px}</td></tr><tr><td>.m-v-xs</td><td>{margin-top: 5px; margin-bottom: 5px;}</td></tr><tr><td>.m-v-sm</td><td>{margin-top: 10px;margin-bottom: 10px;}</td></tr><tr><td>.m-v</td><td>{margin-top: 15px;margin-bottom: 15px;}</td></tr><tr><td>.m-v-md</td><td>{margin-top: 20px;margin-bottom: 20px;}</td></tr><tr><td>.m-v-lg</td><td>{margin-top: 30px;margin-bottom: 30px;}</td></tr><tr><td>.m-h-xs</td><td>{margin-left:5px; margin-right: 5px;}</td></tr><tr><td>.m-h-sm</td><td>{margin-left:10px;margin-right: 10px;}</td></tr><tr><td>.m-h</td><td>{margin-left:15px;margin-right: 15px;}</td></tr><tr><td>.m-h-md</td><td>{margin-left:20px;margin-right: 20px;}</td></tr><tr><td>.m-h-lg</td><td>{margin-left:30px;margin-right: 30px;}</td></tr><tr><td>.m-t</td><td>{margin-top: 15px;}</td></tr><tr><td>.m-t-xs</td><td>{margin-top: 5px;}</td></tr><tr><td>.m-t-sm</td><td>{margin-top: 10px;}</td></tr><tr><td>.m-t-md</td><td>{margin-top: 20px;}</td></tr><tr><td>.m-t-lg</td><td>{margin-top: 30px;}</td></tr><tr><td>.m-r</td><td>{margin-right: 15px;}</td></tr><tr><td>.m-r-xs</td><td>{margin-right: 5px;}</td></tr><tr><td>.m-r-sm</td><td>{margin-right: 10px;}</td></tr><tr><td>.m-r-md</td><td>{margin-right: 20px;}</td></tr><tr><td>.m-r-lg</td><td>{margin-right: 30px;}</td></tr><tr><td>.m-b</td><td>{margin-bottom:15px;}</td></tr><tr><td>.m-b-xs</td><td>{margin-bottom:5px;}</td></tr><tr><td>.m-b-sm</td><td>{margin-bottom:10px;}</td></tr><tr><td>.m-b-md</td><td>{margin-bottom:20px;}</td></tr><tr><td>.m-b-lg</td><td>{margin-bottom:30px;}</td></tr><tr><td>.m-l</td><td>{margin-left: 15px;}</td></tr><tr><td>.m-l-xs</td><td>{margin-left: 5px;}</td></tr><tr><td>.m-l-sm</td><td>{margin-left: 10px;}</td></tr><tr><td>.m-l-md</td><td>{margin-left: 20px;}</td></tr><tr><td>.m-l-lg</td><td>{margin-left: 30px;}</td></tr><tr><td>.m-n</td><td>{margin: -15px}</td></tr><tr><td>.m-h-n</td><td>{margin-left: -15px;margin-right: -15px;}</td></tr><tr><td>.m-v-n</td><td>{margin-top: -15px;margin-bottom:-15px;}</td></tr><tr><td>.m-l-n</td><td>{margin-left: -15px;}</td></tr><tr><td>.m-r-n</td><td>{margin-right: -15px;}</td></tr><tr><td>.m-t-n</td><td>{margin-top: -15px;}</td></tr><tr><td>.m-b-n</td><td>{margin-bottom:-15px;}</td></tr><tr><td>.no-padding</td><td>{ padding: 0 !important; }</td></tr><tr><td>.no-padding-h</td><td>{ padding-left: 0 !important; padding-right: 0 !important; }</td></tr><tr><td>.no-padding-v</td><td>{ padding-top: 0 !important; padding-bottom: 0 !important; }</td></tr><tr><td>.p-xs</td><td>{ padding: 5px; }</td></tr><tr><td>.p-sm</td><td>{ padding: 10px; }</td></tr><tr><td>.p</td><td>{ padding: 15px; }</td></tr><tr><td>.p-md</td><td>{ padding: 20px; }</td></tr><tr><td>.p-lg</td><td>{ padding: 30px; }</td></tr><tr><td>.p-h</td><td>{ padding-left: 15px; padding-right: 15px; }</td></tr><tr><td>.p-h-xs</td><td>{ padding-left: 5px; padding-right: 5px; }</td></tr><tr><td>.p-h-sm</td><td>{ padding-left: 10px; padding-right: 10px; }</td></tr><tr><td>.p-h-md</td><td>{ padding-left: 20px; padding-right: 20px; }</td></tr><tr><td>.p-h-lg</td><td>{ padding-left: 30px; padding-right: 30px; }</td></tr><tr><td>.p-v</td><td>{ padding-top: 15px; padding-bottom: 15px; }</td></tr><tr><td>.p-v-xs</td><td>{ padding-top: 5px; padding-bottom: 5px; }</td></tr><tr><td>.p-v-sm</td><td>{ padding-top: 10px; padding-bottom: 10px; }</td></tr><tr><td>.p-v-md</td><td>{ padding-top: 20px; padding-bottom: 20px; }</td></tr><tr><td>.p-v-lg</td><td>{ padding-top: 30px; padding-bottom: 30px; }</td></tr><tr class="bg-light lt"><td colspan=2>Border</td></tr><tr><td>.b-a</td><td>border:1px solid @border-color(see app.variables.less)</td></tr><tr><td>.b-l</td><td>border left</td></tr><tr><td>.b-t</td><td>border top</td></tr><tr><td>.b-r</td><td>border right</td></tr><tr><td>.b-b</td><td>border bottom</td></tr><tr><td>.b-light, .b-dark, .b-primary, .b-success, .b-info, .b-warning, .b-danger, .b-black, .b-white</td><td>border with specific color.</td></tr><tr><td>.b-2x</td><td>border width with 2px</td></tr><tr><td>.b-3x</td><td>border width with 3px</td></tr><tr><td>.no-border</td><td>border width: 0</td></tr><tr><td>.no-border-xs</td><td>border width: 0 on etremely small screen.</td></tr><tr class="bg-light lt"><td colspan=2>Radius</td></tr><tr><td>.r</td><td>border-radius: @border-radius-base</td></tr><tr><td>.r-l</td><td>border-radius: @border-radius-base 0 0 @border-radius-base</td></tr><tr><td>.r-r</td><td>border-radius: 0 @border-radius-base @border-radius-base 0</td></tr><tr><td>.r-t</td><td>border-radius: @border-radius-base @border-radius-base 0 0</td></tr><tr><td>.r-b</td><td>border-radius: 0 0 @border-radius-base @border-radius-base</td></tr><tr><td>.r-2x</td><td>radius size: 2 x @border-radius-base</td></tr><tr><td>.r-3x</td><td>radius size: 3 x @border-radius-base</td></tr><tr class="bg-light lt"><td colspan=2>Text</td></tr><tr><td>.text-u-c</td><td>text uppercase</td></tr><tr><td>.text-l-t</td><td>text line through</td></tr><tr><td>.text-u-l</td><td>text under line</td></tr><tr><td>.text-ellipsis</td><td>display text in one line with ellipsis</td></tr><tr><td>.text-center-xs</td><td>center text only on extremely small devices</td></tr><tr><td>.text-left-xs</td><td>align text left only on extremely small devices</td></tr><tr><td>.text-right-xs</td><td>align text right only on extremely small devices</td></tr><tr class="bg-light lt"><td colspan=2>Width and Height</td></tr><tr><td>.w-xxl</td><td>width: 360px</td></tr><tr><td>.w-xl</td><td>width: 320px</td></tr><tr><td>.w-lg</td><td>width: 280px</td></tr><tr><td>.w-md</td><td>width: 240px</td></tr><tr><td>.w</td><td>width: 200px</td></tr><tr><td>.w-sm</td><td>width: 158px</td></tr><tr><td>.w-xs</td><td>width: 90px</td></tr><tr><td>.w-xxs</td><td>width: 60px</td></tr><tr><td>.w-thumb-md</td><td>width: 45px</td></tr><tr><td>.w-thumb</td><td>width: 34px</td></tr><tr><td>.w-thumb-sm</td><td>width: 30px</td></tr><tr><td>.w-thumb-xs</td><td>width: 20px</td></tr><tr><td>.w-full</td><td>width: 100%</td></tr><tr><td>.w-auto-xs</td><td>width: auto on extremely small screen.</td></tr><tr><td>.h-full</td><td>height: 100%</td></tr><tr class="bg-light lt"><td colspan=2>Arrow</td></tr><tr><td>.arrow</td><td>base class</td></tr><tr><td>.left</td><td>left arrow, position:middle</td></tr><tr><td>.right</td><td>right arrow, position:middle</td></tr><tr><td>.top</td><td>top arrow, position:center</td></tr><tr><td>.bottom</td><td>bottom arrow, position:center</td></tr><tr><td>.pull-left</td><td>.top and .bottom arrow with left position</td></tr><tr><td>.pull-right</td><td>.top and .bottom arrow with right position</td></tr><tr><td>.pull-top</td><td>.left and .right arrow with top position</td></tr><tr><td>.pull-bottom</td><td>.left and .right arrow with bottom position</td></tr><tr class="bg-light lt"><td colspan=2>Item</td></tr><tr><td>.item-overlay</td><td>overlay the element on an item, default display:none, with \'.active\' class will show</td></tr><tr><td>.top</td><td>top element on a item element</td></tr><tr><td>.bottom</td><td>bottom element on a item element</td></tr><tr><td>.center</td><td>center element on a item element</td></tr><tr class="bg-light lt"><td colspan=2>Button</td></tr><tr><td class=w>.btn-rounded</td><td>rounded button</td></tr><tr><td>.btn-icon</td><td>icon only button</td></tr><tr><td>.btn-addon</td><td>icon addon, must have a i tag, and can use .pull-left and .pull-right</td></tr><tr class="bg-light lt"><td colspan=2>box</td></tr><tr><td>.box</td><td>display: table</td></tr><tr><td>.box-row</td><td>display: table-row</td></tr><tr><td>.box-col</td><td>display: table-cell</td></tr><tr><td>.box-inner</td><td>for box with fluid height</td></tr><tr><td>.v-m</td><td>vertical align: middle</td></tr><tr><td>.v-t</td><td>vertical align: top</td></tr><tr><td>.v-b</td><td>vertical align: bottom</td></tr></tbody></table><div id=modules class=p-md></div><h3>Modules</h3><p>Managed by Grunt</p><h4 class=m-t-md><a href=https://github.com/angular-ui/ui-router>angular-ui-router</a></h4><p>The de-facto solution to flexible routing with nested views</p><h4 class=m-t-md><a href="http://angular-translate.github.io/">angular-translate</a></h4><p>i18n for your Angular apps, made easy</p><h4 class=m-t-md><a href=https://github.com/gsklee/ngStorage>ngStorage</a></h4><p>localStorage and sessionStorage done right for AngularJS.</p><h4 class=m-t-md><a href=https://github.com/ocombe/ocLazyLoad>ocLazyLoad</a></h4><p>Load modules on demand (lazy load) in AngularJS.</p><h4 class=m-t-md><a href="http://angular-ui.github.io/ui-utils/">UI.Utils</a></h4><p>Swiss-Army-Knife of AngularJS tools (with no external dependencies!).</p><h4 class=m-t-md><a href=https://github.com/chieffancypants/angular-loading-bar>angular-loading-bar</a></h4><p>A fully automatic loading / progress bar for your angular apps.</p><h4 class=m-t-md><a href="http://mgcrea.github.io/angular-strap/">angular-strap</a></h4><p>AngularJS 1.2+ native directives for Bootstrap 3.</p><h4 class=m-t-md><a href=https://github.com/angular-ui/ui-select>angular-ui-select</a></h4><p>AngularJS-native version of Select2 and Selectize</p><h4 class=m-t-md><a href=https://github.com/fraywing/textAngular>textAngular</a></h4><p>A radically powerful Text-Editor/Wysiwyg editor for Angular.js! Create multiple editor instances, two-way-bind HTML content, watch editors for changes and more!</p><h4 class=m-t-md><a href=https://github.com/Venturocket/angular-slider>venturocket-angular-slider</a></h4><p>Slider directive for AngularJS.</p><h4 class=m-t-md><a href=https://github.com/nickperkinslondon/angular-bootstrap-nav-tree>angular-bootstrap-nav-tree</a></h4><p>An AngularJS directive that creates a Tree based on a Bootstrap "nav" list.</p><h4 class=m-t-md><a href=https://github.com/danialfarid/angular-file-upload>angular-file-upload</a></h4><p>An AngularJS directive for file upload using HTML5 with FileAPI polyfill for unsupported browsers</p><h4 class=m-t-md><a href=https://github.com/alexk111/ngImgCrop>ngImgCrop</a></h4><p>Image Crop directive for AngularJS</p><h4 class=m-t-md><a href=https://github.com/lorenzofox3/Smart-Table>angular-smart-table</a></h4><p>Code source of Smart Table module: a table/grid for Angularjs</p><h4 class=m-t-md><a href=https://github.com/angular-ui/ui-map>angular-ui-map</a></h4><p>Google Maps</p></div>');
    $templateCache.put('views/pages/forgot-password.html', '<div class=container><div class="center-block w-xl w-auto-xs m-b-lg"><div class="text-2x m-v-lg text-primary"><i class="glyphicon glyphicon-th-large text-xl"></i> {{app.name}}</div><div class=m-b>Forgot your password?<p class="text-xs m-t">Enter your email address below and we will send you instructions on how to change your password.</p></div><form name=reset><div class=form-group><input type=email placeholder="Your Email" ng-model=email class=form-control required></div><button type=submit class="btn btn-primary p-h-md m-v-md" title=Hey! data-content="Instructions sent to your email." data-type=info data-container=#alerts-container bs-alert ng-disabled=reset.$invalid>Send</button></form><p id=alerts-container></p><p class=m-v-lg><a ui-sref=signin>Return to sign in</a></p></div></div><div class=app-footer ng-include="\'views/footer.html\'"></div>');
    $templateCache.put('views/pages/lockme.html', '<div class=modal-over><div class=modal-center style="width:240px;margin:-100px 0 0 -120px"><div class="m-b clearfix"><img src=images/a0.jpg class="w-xs b-l b-4x b-success m-r pull-left"><h3>David M.</h3><p class=text-xs>23 Minutes Ago</p></div><input type=password class=form-control placeholder="Enter password"><div class=m-t><a href="#/" class="btn btn-info p-h-md">Unlock</a></div></div></div>');
    $templateCache.put('views/pages/mail.html', '<div class=app-content-inner><div class=box><div class=col-md-4><div class="box b-r"><div class="p p-v-sm b-b"><script type=text/ng-template id=filter><ul tabindex="-1" class="dropdown-menu" role="menu">\r' + '\n' + '              <li><a >Read</a></li>\r' + '\n' + '              <li><a >Unread</a></li>\r' + '\n' + '            </ul></script><a href class="pull-right text-muted"><i class="fa fa-trash"></i></a> <a href class="btn btn-default btn-xs text-muted" bs-dropdown=dropdown data-animation=am-flip-x data-template=filter>Filter <span class=caret></span></a></div><div class=box-row><div class="box-cell scrollable hover"><div class=box-inner><div class="list-group list-group-md no-border no-radius no-margin"><div class=list-group-item><a href class="w-thumb-md pull-left m-r"><img src=images/a0.jpg class=img-responsive></a><div class="clear m-b-sm"><span class="pull-right text-muted text-xs">12:30 PM<label class="ui-checks m-l-sm"><input type=checkbox><i></i></label></span><div>David M.</div><a href class="text-md text-ellipsis">Easy Angular development with Yeoman</a></div><small class=text-muted>One of the best things to happen in web development over the past few years has been the variety of tools</small></div><div class="list-group-item select"><a href class="w-thumb-md pull-left m-r"><img src=images/a1.jpg class=img-responsive></a><div class="clear m-b-sm"><span class="pull-right text-muted text-xs">10:34 PM <i class="fa fa-paperclip m-l-sm"></i><label class="ui-checks m-l-sm"><input type=checkbox><i></i></label></span><div>Eric Dane</div><a href class="text-md text-ellipsis">This is a short and opinionated review of the AngularJS</a></div><small class=text-muted>AngularJS is what HTML would have been, designed for building web-apps.</small></div><div class=list-group-item><a href class="w-thumb-md pull-left m-r"><img src=images/a2.jpg class=img-responsive></a><div class="clear m-b-sm"><span class="pull-right text-muted text-xs">9:34 PM <i class="fa fa-paperclip m-l-sm"></i><label class="ui-checks m-l-sm"><input type=checkbox><i></i></label></span><div>Ryan Gosling</div><a href class="text-md text-ellipsis">Correct the known issue</a></div><small class=text-muted>This is a known issue. Please set the correct node write permissions with sudo</small></div><div class=list-group-item><a href class="w-thumb-md pull-left m-r"><img src=images/a4.jpg class=img-responsive></a><div class="clear m-b-sm"><span class="pull-right text-muted text-xs">July 9<label class="ui-checks m-l-sm"><input type=checkbox><i></i></label></span><div>Richard Hammond</div><a href class="text-md text-ellipsis">Angular bootstrap</a></div><small class=text-muted>Native AngularJS (Angular) directives for Bootstrap. Small footprint</small></div><div class=list-group-item><a href class="w-thumb-md pull-left m-r"><img src=images/a5.jpg class=img-responsive></a><div class="clear m-b-sm"><span class="pull-right text-muted text-xs">March 10 <i class="fa fa-paperclip m-l-sm"></i><label class="ui-checks m-l-sm"><input type=checkbox><i></i></label></span><div>Ossily</div><a href class="text-md text-ellipsis">Building an Angular App: Bootstrapping</a></div><small class=text-muted>Using angular.bootstrap to Initialize Your App</small></div><div class=list-group-item><a href class="w-thumb-md pull-left m-r"><img src=images/a6.jpg class=img-responsive></a><div class="clear m-b-sm"><span class="pull-right text-muted text-xs">Feb 8 <i class="fa fa-paperclip m-l-sm"></i><label class="ui-checks m-l-sm"><input type=checkbox><i></i></label></span><div>Patrick</div><a href class="text-md text-ellipsis">AngularJS Documentation for bootstrap</a></div><small class=text-muted>Place ng-app to the root of your application</small></div></div></div></div></div></div></div><div class=col-md-8><div class=box><div class="p p-v-sm b-b"><script type=text/ng-template id=label><ul tabindex="-1" class="dropdown-menu" role="menu">\r' + '\n' + '              <li><a >Sent</a></li>\r' + '\n' + '              <li><a >Trash</a></li>\r' + '\n' + '              <li><a >Work</a></li>\r' + '\n' + '              <li><a >Project</a></li>\r' + '\n' + '            </ul></script><div class="btn-group pull-right"><button type=button class="btn btn-xs btn-default"><i class="fa fa-fw fa-angle-left"></i></button> <button type=button class="btn btn-xs btn-default"><i class="fa fa-fw fa-angle-right"></i></button></div><a href class="btn btn-default btn-xs text-muted" bs-dropdown=dropdown data-animation=am-flip-x data-template=label>Label <span class=caret></span></a> <a href class="btn btn-default btn-xs text-muted">More <span class=caret></span></a></div><div class=box-row><div class=box-cell><div class=box-inner><div class="p b-b"><h4 class="no-margin font-bold">This is a short and opinionated review of the AngularJS</h4><div class=m-t-sm><div class=pull-right>Oct 14</div><div class="w-thumb-sm pull-left m-r-sm"><img src=images/a1.jpg class=img-responsive></div><div class="clear l-h-1x"><div><strong>Eric Dane</strong> &lt;eric.dane@gmail.com></div><div>to me</div></div></div></div><div class=p-lg><p>Hey David,</p><p class=text-lt>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. Vestibulum ullamcorper sodales nisi nec condimentum. Mauris convallis mauris at pellentesque volutpat.</p><blockquote><em>Phasellus at ultricies neque, quis malesuada augue. Donec eleifend condimentum nisl eu consectetur. Integer eleifend, nisl venenatis consequat iaculis, lectus arcu malesuada sem, dapibus porta quam lacus eu neque.</em></blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. Vestibulum ullamcorper sodales nisi nec condimentum. Mauris convallis mauris at pellentesque volutpat. Phasellus at ultricies neque, quis malesuada augue. Donec eleifend condimentum nisl eu consectetur. Integer eleifend, nisl venenatis consequat iaculis, lectus arcu malesuada sem, dapibus porta quam lacus eu neque.</p><p>Duis non malesuada est, quis congue nibh. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.</p><p>Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. Vestibulum ullamcorper sodales nisi nec condimentum. Mauris convallis mauris at pellentesque volutpat. Phasellus at ultricies neque, quis malesuada augue. Donec eleifend condimentum nisl eu consectetur. Integer eleifend, nisl venenatis consequat iaculis, lectus arcu malesuada sem, dapibus porta quam lacus eu neque.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis non malesuada est, quis congue nibh. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.</p><p>Consectetur adipiscing elit. Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. Vestibulum ullamcorper sodales nisi nec condimentum. Mauris convallis mauris at pellentesque volutpat. Phasellus at ultricies neque, quis malesuada augue. Donec eleifend</p><p>&nbsp;</p><p>Best Regards</p></div></div></div></div></div></div></div></div>');
    $templateCache.put('views/pages/profile.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Profile</h3></div><div class=box><div class=col-md-3><div style="background:url(images/a0.jpg) center center; background-size:cover"><div class="p-lg bg-white-opacity text-center"><a href class="w-xs inline"><img src=images/a0.jpg class="img-circle img-responsive"></a><div class="m-b m-t-sm h2"><span class=text-black>David M.</span></div><a href class="btn btn-sm btn-info m-b p-h">Follow</a><p>I am designing something.</p></div></div><div class="text-center b-b b-light"><a href class="m-b-md inline m text-color"><span class="h3 block font-bold">221</span> <em class=text-xs>Followers</em></a> <a href class="m-b-md inline m text-color"><span class="h3 block font-bold">250</span> <em class=text-xs>Following</em></a></div><div class=p><p>About</p><p>Lorem ipsum dolor sit amet, consecteter adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet.</p><div class=m-v><a class=text-muted><i class="fa ui-icon fa-facebook"></i></a> <a class=text-muted><i class="fa ui-icon fa-twitter"></i></a> <a class=text-muted><i class="fa ui-icon fa-linkedin"></i></a></div></div><div class="list-group no-radius no-border"><a class=list-group-item><span class="pull-right badge">12</span> Messages</a> <a class=list-group-item><span class="pull-right badge">23</span> Photos</a> <a class=list-group-item><span class="pull-right badge">564</span> Posts</a></div></div><div class="col-md-9 bg-white b-l bg-auto"><div class="p bg-light"><div class="panel no-border no-margin"><form><textarea class="form-control no-border" rows=3 placeholder="Write something..."></textarea></form><div class="lt p"><button class="btn btn-info pull-right btn-sm p-h font-bold">Post</button><ul class="nav nav-pills nav-sm"><li><a href><i class="fa fa-camera"></i></a></li><li><a href><i class="fa fa-video-camera"></i></a></li></ul></div></div></div><div class="p-h bg-white b-b b-light"><ul class="nav nav-lines nav-md b-info"><li class=active><a href>Stream</a></li><li><a href>Photos <span class=badge>3</span></a></li><li><a href>Posts <span class=badge>9</span></a></li></ul></div><div class=p-h-lg><div class="streamline b-l p-v m-l-xs m-b"><div><a class="pull-left w-thumb-sm m-l-n m-t-xs m-r"><img src=images/a2.jpg class="img-responsive rounded" alt=...></a><div class=clear><div class=m-b-xs><a href>James</a> said <span class="text-muted block text-xs">Just now</span></div><div class=m-b><div>Lorem ipsum dolor sit amet, consecteter adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet. ullamcorper sodales nisi nec adipiscing elit. Morbi id neque quam. Aliquam sollicitudin</div><div class=m-t-sm><a href class="text-muted m-xs">Like</a> <a href class="text-muted m-xs">Comment</a></div></div></div></div><div><a class="pull-left w-thumb-sm m-l-n m-t-xs m-r"><img src=images/a3.jpg class="img-responsive rounded" alt=...></a><div class=clear><div class=m-b-xs><a href>Oscar</a> upload a file <span class="text-muted block text-xs">3 minutes ago</span></div><div class=m-b><div class="w-xl w-auto-xs"><div class="box bg-light"><div class="box-col w-xs text-center dk p-md v-m"><i class="fa fa-file-text-o text-3x text-muted-lt"></i></div><div class="box-col p"><a href>Geuismod tincidunt</a><div>Diam nonummy nibh euismod tincidunt ut laoreet.</div></div></div></div><div class=m-t-sm><a href class="text-muted m-xs">Like</a> <a href class="text-muted m-xs">Comment</a></div></div></div></div><div><a class="pull-left w-thumb-sm m-l-n m-t-xs m-r"><img src=images/a4.jpg class="img-responsive rounded" alt=...></a><div class=clear><div class=m-b-xs><a href>Anny</a> post a photo <span class="text-muted block text-xs">6 minutes ago</span></div><div class=m-b><div><img src=images/a10.jpg class="b p-xs"></div><div class=m-t-sm><a href class="text-muted m-xs">Like</a> <a href class="text-muted m-xs">Comment</a></div></div></div></div><div><a class="pull-left w-thumb-sm m-l-n m-t-xs m-r"><img src=images/a5.jpg class="img-responsive rounded" alt=...></a><div class=clear><div class=m-b-xs><a href>Michel</a> post a comment <span class="text-muted block text-xs">10 minutes ago</span></div><div class="m-b bg-light"><div class="p-sm b-b"><img src=images/a4.jpg class="rounded w-thumb-xs pull-left m-r-sm" alt=...> <a href>Tony</a> liked it</div><div class=p-sm><img src=images/a6.jpg class="rounded w-thumb-xs pull-left m-r-sm" alt=...> <a href>Anney</a> Commented it</div></div></div></div></div></div></div></div>');
    $templateCache.put('views/pages/settings.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Settings</h3></div><div class=box><div class=col-md-3><div style="background:url(images/a1.jpg) center center; background-size:cover"><div class="p-lg bg-white-opacity text-center"><a href class="w-xs inline"><img src=images/a1.jpg class="img-circle img-responsive"></a><div class="m-b m-t-sm h2"><span class=text-black>Mike</span></div><p>Great day, Great life</p></div></div><ul class="nav nav-list b-t" ui-nav><li class=active><a href>Profile</a></li><li><a href>Account Settings</a></li><li><a href>Emails</a></li><li><a href>Notifications</a></li><li><a href>Security</a></li><li><a href>Organizations</a></li></ul></div><div class="col-md-9 b-l bg-auto"><div class="p-md bg-light b-b font-bold">Public profile</div><form role=form class=p-md><div class=form-group><label>Profile picture</label><div class=form-file><input type=file> <button class="btn btn-default">Upload new picture</button></div></div><div class=form-group><label>Name</label><input type=text class="form-control w-xxl w-full-xs"></div><div class=form-group><label>Email address</label><input type=email class="form-control w-xxl w-full-xs"></div><div class=form-group><label>URL</label><input type=text class="form-control w-xxl w-full-xs"></div><div class=form-group><label>Company</label><input type=text class="form-control w-xxl w-full-xs"></div><div class=form-group><label>Location</label><input type=text class="form-control w-xxl w-full-xs"></div><div class=checkbox><label class=ui-checks><input type=checkbox><i></i> Available for hire</label></div><button type=submit class="btn btn-info m-t">Submit</button></form></div></div>');
    $templateCache.put('views/pages/signin.html', '<div class=container><div class="center-block w-xl w-auto-xs m-b-lg"><div class="text-2x m-v-lg text-primary"><i class="glyphicon glyphicon-th-large text-xl"></i> {{app.name}}</div><div class="m-b text-sm">Sign in with your {{app.name}} Account</div><form name=form><div class="form-group m-b-xs"><label class=hide>Email</label><input type=email placeholder=Someone@example.com class=form-control ng-model=user.email required></div><div class="form-group m-b-xs"><label class=hide>Password</label><input type=password placeholder=Password class=form-control ng-model=user.password required></div><div class="checkbox no-margin"><label class=ui-checks><input type=checkbox><i></i> Keep me signed in</label></div><button type=submit class="btn btn-info p-h-md m-v-lg">Sign in</button><p class=text-xs><a ui-sref=forgot-password>Forgot password?</a></p><p class="m-v-lg text-sm">Do not have an account? <a ui-sref=signup>Create an account</a></p></form></div></div><div class=app-footer ng-include="\'views/footer.html\'"></div>');
    $templateCache.put('views/pages/signup.html', '<div class=container><div class="center-block w-xl w-auto-xs m-b-lg"><div class="text-2x m-v-lg text-primary"><i class="glyphicon glyphicon-th-large text-xl"></i> {{app.name}}</div><div class="m-b text-sm">Sign up to your {{app.name}} Account</div><form name=form><div class="form-group m-b-xs"><label class=hide>Name</label><input type=text placeholder="Your name" class=form-control ng-model=user.name required></div><div class="form-group m-b-xs"><label class=hide>Email</label><input type=email placeholder=Someone@example.com class=form-control ng-model=user.email required></div><div class="form-group m-b-xs"><label class=hide>Password</label><input type=password placeholder=Password class=form-control ng-model=user.password required></div><div class="checkbox no-margin"><label class=ui-checks><input type=checkbox ng-model=agree required><i></i> Agree the <a href>terms and policy</a></label></div><button type=submit class="btn btn-info p-h-md m-v-lg">Sign up</button><p>Already have an account? <a ui-sref=signin>Sign in</a></p></form></div></div><div class=app-footer ng-include="\'views/footer.html\'"></div>');
    $templateCache.put('views/partials/aside.nav.mail.html', '<nav ui-nav><div class="p p-v-md hidden-aside-top"><a href=# class="btn btn-sm btn-addon btn-success"><i class="fa fa-plus fa-fw"></i> Compose</a></div><ul class="nav nav-stacked nav-pills m-h-sm"><li class="nav-header text-muted text-xs">Folders</li><li><a ui-sref=mail.dashboard><b class="label rounded bg-info pull-right">130</b> <i class="glyphicon glyphicon-inbox text-lt"></i> <span class=font-bold>Inbox</span></a></li><li><a ui-sref=app.calendar><i class="glyphicon glyphicon-send text-lt"></i> <span class=font-bold>Sent Mail</span></a></li><li><a ui-sref=app.calendar><i class="glyphicon glyphicon-bookmark text-lt"></i> <span class=font-bold>Bookmarked</span></a></li><li><a ui-sref=app.mail.list><b class="label rounded bg-info pull-right">9</b> <i class="glyphicon glyphicon-edit text-lt"></i> <span class=font-bold>Draft</span></a></li><li><a ui-sref=app.mail.list><i class="glyphicon glyphicon-trash text-lt"></i> <span class=font-bold>Trash</span></a></li><li><div class="line bg m-h-sm"></div></li><li class="nav-header text-muted text-xs">Labels</li><li><a href><i class="fa fa-circle-o text-info-dk"></i> Github</a></li><li><a href><i class="fa fa-circle-o text-success-dk"></i> Facebook</a></li><li><a href><i class="fa fa-circle-o text-lt"></i> Youtube</a></li></ul></nav>');
    $templateCache.put('views/partials/aside.nav.pages.html', '<nav ui-nav><ul class=nav><li ng-class="{\'animated fadeInDown\':navBar,\'ng-hide\':!navBar}" ui-sref-active=active><a ng-click=goHome()><i class="icon glyphicon glyphicon-list text-lg"></i></a></li><li ng-click=goMenu(path,$index) ng-repeat="path in linkPath" ui-sref-active=active><a><i class="fa fa-chevron-right" style="font-size: 8px;position: relative;top: -3px"></i> <i class="fa fa-apple fa-1x"></i> <i class=text-md>{{path.pathName}}</i></a></li><li class="animated fadeOut"><a><i class="ui-icon fa fa-asterisk b-dark-lt b-2x text-dark-lt"></i></a></li></ul></nav>');
    $templateCache.put('views/partials/aside.nav.uikit.html', '<nav ui-nav><ul class=nav><li class="nav-header h4 m-v-sm">UI Kits</li><li ng-class="{active:$state.includes(\'ui.component\')}"><a><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <i class="icon glyphicon glyphicon-briefcase text-lt"></i> <span class=font-normal>Components</span></a><ul class="nav nav-sub bg"><li ui-sref-active=active><a ui-sref=ui.component.arrow>Arrow</a></li><li ui-sref-active=active><a ui-sref=ui.component.badge-label>Badge &amp; Label</a></li><li ui-sref-active=active><a ui-sref=ui.component.button>Button</a></li><li ui-sref-active=active><a ui-sref=ui.component.color>Color</a></li><li ui-sref-active=active><a ui-sref=ui.component.grid>Grid</a></li><li ui-sref-active=active><a ui-sref=ui.component.icon>Icon</a></li><li ui-sref-active=active><a ui-sref=ui.component.list>List Group</a></li><li ui-sref-active=active><a ui-sref=ui.component.nav>Nav</a></li><li ui-sref-active=active><a ui-sref=ui.component.panel>Panel</a></li><li ui-sref-active=active><a ui-sref=ui.component.progressbar>Progressbar</a></li><li ui-sref-active=active><a ui-sref=ui.component.streamline>Streamline</a></li><li ui-sref-active=active><a ui-sref=ui.component.timeline>Timeline</a></li></ul></li><li ng-class="{active:$state.includes(\'ui.angular-strap\')}"><a><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <b class="badge bg-success pull-right">14</b> <i class="icon glyphicon glyphicon-font text-lt"></i> <span class=font-normal>Angular Strap</span></a><ul class="nav nav-sub bg"><li ui-sref-active=active><a ui-sref=ui.angular-strap.affix>Affix</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.alert>Alert</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.aside>Aside</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.button>Button</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.collapse>Collapse</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.dropdown>Dropdown</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.datepicker>Datepicker</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.timepicker>Timepicker</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.modal>Modal</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.select>Select</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.tab>Tab</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.tooltip>Tooltip</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.popover>Popover</a></li><li ui-sref-active=active><a ui-sref=ui.angular-strap.typeahead>Typeahead</a></li></ul></li><li ng-class="{active:$state.includes(\'ui.form\')}"><a><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <i class="icon glyphicon glyphicon-edit text-lt"></i> <span class=font-normal>Form</span></a><ul class="nav nav-sub bg"><li ui-sref-active=active><a ui-sref=ui.form.layout>Form Layout</a></li><li ui-sref-active=active><a ui-sref=ui.form.element>Form Element</a></li><li ui-sref-active=active><a ui-sref=ui.form.validation>Form Validation</a></li><li ui-sref-active=active><a ui-sref=ui.form.select>Select</a></li><li ui-sref-active=active><a ui-sref=ui.form.editor>Editor</a></li><li ui-sref-active=active><a ui-sref=ui.form.slider>Slider</a></li><li ui-sref-active=active><a ui-sref=ui.form.tree>Tree</a></li><li ui-sref-active=active><a ui-sref=ui.form.file-upload>File Upload</a></li><li ui-sref-active=active><a ui-sref=ui.form.image-crop>Image Crop</a></li></ul></li><li ng-class="{active:$state.includes(\'ui.table\')}"><a><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <i class="icon glyphicon glyphicon-list text-lt"></i> <span class=font-normal>Table</span></a><ul class="nav nav-sub bg"><li ui-sref-active=active><a ui-sref=ui.table.static>Static table</a></li><li ui-sref-active=active><a ui-sref=ui.table.smart>Smart table</a></li></ul></li><li ui-sref-active=active><a ui-sref=ui.chart><b class="label bg-primary pull-right">NEW</b> <i class="icon glyphicon glyphicon-stats text-lt"></i> <span class=font-normal>Charts</span></a></li><li ng-class="{active:$state.includes(\'ui.map\')}"><a><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <i class="icon glyphicon glyphicon-map-marker text-lt"></i> <span class=font-normal>Maps</span></a><ul class="nav nav-sub bg"><li ui-sref-active=active><a ui-sref=ui.map.google>Google Map</a></li><li ui-sref-active=active><a ui-sref=ui.map.vector>Vector Map</a></li></ul></li><li><a href><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <i class="icon glyphicon glyphicon-random text-lt"></i> <span>Nav levels</span></a><ul class="nav nav-sub bg"><li><a href>Nav levels 1</a></li><li><a href><span class="pull-right text-muted"><i class="fa fa-caret-down"></i></span> <span class=font-normal>Nav levels 2</span></a><ul class="nav nav-sub bg"><li><a href>Nav levels 2.1</a></li><li><a href>Nav levels 2.2</a></li></ul></li></ul></li></ul></nav>');
    $templateCache.put('views/partials/aside.tpl.chat.html', '<div class="aside w b-l" role=dialog><div class=box><div class=p><a ng-click=$hide() class="pull-right text-muted"><i class="fa fa-times"></i></a> Chat</div><div class=box-row><div class=box-cell><div class=box-inner><div class="list-group no-radius no-borders"><a class="list-group-item p-h-md"><img src=images/a1.jpg class="pull-left w-thumb m-r b-b b-b-2x b-success"><div class=clear><span class="font-bold block">Jonathan Doe</span> <span class="clear text-ellipsis text-xs">"Hey, What\'s up"</span></div></a> <a class="list-group-item p-h-md"><img src=images/a2.jpg class="pull-left w-thumb m-r b-b b-b-2x b-success"><div class=clear><span class="font-bold block">James Pill</span> <span class="clear text-ellipsis text-xs">"Lorem ipsum dolor sit amet onsectetur adipiscing elit"</span></div></a><div class="p-h-md p-v-xs m-t">Work</div><a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-success text-xs m-r-xs"></i> <span>Jonathan Morina</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-success text-xs m-r-xs"></i> <span>Mason Yarnell</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-warning text-xs m-r-xs"></i> <span>Mike Mcalidek</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Cris Labiso</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Daniel Sandvid</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Helder Oliveira</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Jeff Broderik</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Daniel Sandvid</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Helder Oliveira</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Jeff Broderik</span></a><div class="p-h-md p-v-xs m-t">Partner</div><a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-success text-xs m-r-xs"></i> <span>Mason Yarnell</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-warning text-xs m-r-xs"></i> <span>Mike Mcalidek</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Cris Labiso</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Jonathan Morina</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Daniel Sandvid</span></a> <a class="list-group-item p-h-md p-v-xs"><i class="fa fa-circle text-muted-lt text-xs m-r-xs"></i> <span>Helder Oliveira</span></a></div></div></div></div><div class="p-h-md p-v"><p>Invite People</p><a href class=text-muted><i class="fa fa-fw fa-twitter"></i> Twitter</a> <a href class=text-muted><i class="fa fa-fw fa-facebook"></i> Facebook</a></div></div></div>');
    $templateCache.put('views/partials/aside.tpl.html', '<div class="aside bg-dark box-shadow-lg" role=menu><div class=p-lg ng-click=$hide()><a ui-sref=mail.inbox class="p-lg bg-info item inline m-xs"><i class="icon glyphicon glyphicon-envelope text-2x"></i> <span class="p-xs p-h-sm bottom text-xs hidden-xs">Email</span></a> <a ui-sref=ui.component.arrow class="p-lg bg-primary item inline m-xs"><i class="icon glyphicon glyphicon-briefcase text-2x"></i> <span class="p-xs p-h-sm bottom text-xs hidden-xs">UI Kits</span></a> <a ui-sref=page.blank class="p-lg bg-success item inline m-xs"><i class="icon glyphicon glyphicon-file text-2x"></i> <span class="p-xs p-h-sm bottom text-xs hidden-xs">Pages</span></a> <a ui-sref=ui.map.google class="p-lg bg-warning item inline m-xs"><i class="icon glyphicon glyphicon-map-marker text-2x"></i> <span class="p-xs p-h-sm bottom text-xs hidden-xs">Map</span></a> <a ui-sref=ui.form.file-upload class="p-lg bg-danger item inline m-xs"><i class="icon glyphicon glyphicon-cloud text-2x"></i> <span class="p-xs p-h-sm bottom text-xs hidden-xs">Drive</span></a> <a ui-sref=ui.map.vector class="p-lg bg-inverse item inline m-xs"><i class="icon glyphicon glyphicon-usd text-2x"></i> <span class="p-xs p-h-sm bottom text-xs hidden-xs">Market</span></a></div></div>');
    $templateCache.put('views/ui/angular-strap/affix.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Typeaheads</h3></div><div class=p-md><p>The subnavigation on the left is a live demo of the affix plugin.</p><div class=highlight><pre>\n' + '      <code class=html highlight-block>\n' + '        &lt;div class="bs-sidebar hidden-print" role="complementary" data-offset-top="-80" bs-affix&gt;&lt;/div&gt;\n' + '      </code>\n' + '    </pre></div><div class="btn btn-lg btn-primary" data-offset-top=-60 bs-affix>Affix<br><small>Affix top</small></div><h2 id=affix-usage>Usage</h2><p>Append a <code>bs-affix</code>attribute to any element to enable the plugin.</p><p>You can affix inside a custom container with the <code>bs-affix-target</code> attribute added to any parent element.</p><div class="callout callout-info"><h4>The module also exposes an <code>$affix</code>service</h4><p>Available for programmatic use (mainly inside a directive as it requires an element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var affix = $affix(element, options);\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 50px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>offsetTop</td><td>number</td><td>0</td><td>Pixels to offset from top of screen when calculating position of scroll.</td></tr><tr><td>offsetBottom</td><td>number</td><td>0</td><td>Pixels to offset from bottom of screen when calculating position of scroll.</td></tr><tr><td>offsetParent</td><td>number</td><td>0</td><td>Pixels to offset from parent when calculating position of scroll.</td></tr><tr><td>offsetUnpin</td><td>number</td><td>0</td><td>Pixels to offset from unpin position when calculating position of scroll.</td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$affixProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($affixProvider) {\n' + '            angular.extend($affixProvider.defaults, {\n' + '              animation: \'am-fade-and-slide-top\',\n' + '              placement: \'top\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/alert.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Alerts</h3></div><div class=p-md ng-controller=AlertDemoCtrl><p>Alerts are styled tiny dialogs that inherit the behavior of modals.</p><pre class=bs-example-scope>$scope.alert = {{alert | json}};</pre><div class=bs-example append-source><button type=button class="btn btn-lg btn-primary" data-placement=top-right data-container=body data-duration=3 bs-alert=alert>Click to toggle alert<br><small>(using an object)</small></button> <button type=button class="btn btn-lg btn-primary" title={{alert.title}} data-content={{alert.content}} data-type=success data-container=#alerts-container bs-alert>Click to toggle alert<br><small>(using data-attrs)</small></button> <button type=button class="btn btn-lg btn-danger" data-template=views/ui/angular-strap/alert.tpl.html data-placement=top data-duration=3 data-animation=am-fade-and-slide-top data-container=body data-keyboard=true bs-alert=alert>Custom alert<br><small>(using data-template)</small></button><div id=alerts-container class=m-t></div></div><h2 id=alerts-usage>Usage</h2><p>Append a <code>bs-alert</code>attribute to any element to enable the plugin.</p><div class="callout callout-info"><h4>The module also exposes an <code>$alert</code>service</h4><p>Available for programmatic use (inside a controller/directive).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .controller(\'DemoCtrl\', function($scope, $alert) {\n' + '            var myAlert = $alert({title: \'Holy guacamole!\', content: \'Best check yo self, you\\\'re not looking too good.\', placement: \'top\', type: \'info\', show: true});\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object directly on the <code>bs-aside</code> attribute</p><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 50px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by ngAnimate</td></tr><tr><td>placement</td><td>string</td><td>\'\'</td><td>how to position the alert - top | top-left | top-right <small>(requires custom CSS)</small>.</td></tr><tr><td>title</td><td>string</td><td>\'\'</td><td>default title value if <code>title</code>attribute isn\'t present</td></tr><tr><td>content</td><td>string</td><td>\'\'</td><td>default content value if <code>data-content</code>attribute isn\'t present</td></tr><tr><td>type</td><td>string</td><td>\'info\'</td><td>default content value if <code>data-type</code>attribute isn\'t present</td></tr><tr><td>keyboard</td><td>boolean</td><td>true</td><td>Closes the alert when escape key is pressed</td></tr><tr><td>show</td><td>boolean</td><td>true</td><td>Shows the alert when initialized.</td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the alert to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the alert in the flow of the document near the triggering element -&nbsp;which will prevent the alert from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p></td></tr><tr><td>duration</td><td>number | false</td><td>false</td><td><p>If provided, the number of seconds the alert should be displayed for before it is automatically closed. Default keeps alert open until explicity closed.</p></td></tr><tr><td>dismissable</td><td>boolean</td><td>true</td><td><p>Make the alert dismissable by adding a close button (&times;).</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$alertProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($alertProvider) {\n' + '            angular.extend($alertProvider.defaults, {\n' + '              animation: \'am-fade-and-slide-top\',\n' + '              placement: \'top\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Scope methods</h3><p>Methods available inside the directive scope to toggle visibility.</p><h4>$show()</h4><p>Reveals the alert.</p><h4>$hide()</h4><p>Hides the alert.</p><h4>$toggle()</h4><p>Toggles the alert.</p></div>');
    $templateCache.put('views/ui/angular-strap/alert.tpl.html', '<div class=alert tabindex=-1 ng-class="[type ? \'alert-\' + type : null]"><button type=button class=close>&times;</button> <span ng-bind-html=content class=font-bold></span>&nbsp;<a href=""><strong ng-bind=title ng-click=undoBranch();$hide()></strong></a></div>');
    $templateCache.put('views/ui/angular-strap/aside.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Asides</h3></div><div class=p-md ng-controller=AsideDemoCtrl><p>Asides are custom panels, drawers that inherit the behavior of modals.</p><pre class=bs-example-scope>$scope.aside = {{aside | json}};</pre><div class=bs-example append-source><button type=button class="btn btn-lg btn-primary" data-animation="am-slide-right aside-open-backdrop" bs-aside=aside data-html=true>Click to toggle aside<br><small>(using an object)</small></button> <button type=button class="btn btn-lg btn-danger" data-template=views/ui/angular-strap/aside.tpl.html data-placement=left data-animation="am-slide-left aside-open-backdrop" bs-aside=aside data-container=body>Custom aside<br><small>(using data-template)</small></button> <button type=button class="btn btn-lg btn-default" data-template=views/ui/angular-strap/aside.tpl.html data-placement=top data-animation="am-slide-top aside-open-backdrop" bs-aside=aside data-container=body>Aside top<br><small>(using data-template)</small></button> <button type=button class="btn btn-lg btn-default" data-template=views/ui/angular-strap/aside.tpl.html data-placement=bottom data-animation="am-slide-bottom aside-open-backdrop" bs-aside=aside data-container=body>Aside bottom<br><small>(using data-template)</small></button></div><div class="callout callout-info"><h4>Custom styles required</h4><p>Asides are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><h2 id=asides-usage>Usage</h2><p>Append a <code>bs-aside</code>attribute to any element to enable the plugin.</p><div class="callout callout-info"><h4>The module also exposes an <code>$aside</code>service</h4><p>Available for programmatic use.</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .controller(\'DemoCtrl\', function($scope, $aside) {\n' + '            // Show a basic aside from a controller\n' + '            var myAside = $aside({title: \'My Title\', content: \'My Content\', show: true});\n' + '\n' + '            // Pre-fetch an external template populated with a custom scope\n' + '            var myOtherAside = $aside({scope: $scope, template: \'aside/docs/aside.tpl.demo.html\'});\n' + '            // Show when some event occurs (use $promise property to ensure the template has been loaded)\n' + '            myOtherAside.$promise.then(function() {\n' + '              myOtherAside.show();\n' + '            })\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object directly on the <code>bs-aside</code> attribute</p><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 50px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade-and-slide-right</td><td>apply a CSS animation powered by ngAnimate</td></tr><tr><td>placement</td><td>string</td><td>\'top\'</td><td>how to position the modal - top | bottom | center <small>(requires custom CSS)</small>.</td></tr><tr><td>title</td><td>string</td><td>\'\'</td><td>default title value if <code>title</code>attribute isn\'t present</td></tr><tr><td>content</td><td>string</td><td>\'\'</td><td>default content value if <code>data-content</code>attribute isn\'t present</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>backdrop</td><td>boolean or the string <code>\'static\'</code></td><td>true</td><td>Includes a modal-backdrop element. Alternatively, specify <code>static</code>for a backdrop which doesn\'t close the modal on click.</td></tr><tr><td>keyboard</td><td>boolean</td><td>true</td><td>Closes the modal when escape key is pressed</td></tr><tr><td>show</td><td>boolean</td><td>true</td><td>Shows the modal when initialized.</td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the popover to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p><p>It should be a <code>div.aside</code> element following Bootstrap styles conventions (<a href=//github.com/mgcrea/angular-strap/blob/master/src/aside/aside.tpl.html target=_blank>like this</a>).</p></td></tr><tr><td>contentTemplate</td><td>path</td><td>false</td><td><p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$asideProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($asideProvider) {\n' + '            angular.extend($asideProvider.defaults, {\n' + '              animation: \'am-fadeAndSlideLeft\',\n' + '              placement: \'left\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Scope methods</h3><p>Methods available inside the directive scope to toggle visibility.</p><h4>$show()</h4><p>Reveals the aside.</p><h4>$hide()</h4><p>Hides the aside.</p><h4>$toggle()</h4><p>Toggles the aside.</p></div>');
    $templateCache.put('views/ui/angular-strap/aside.tpl.html', '<div class=aside tabindex=-1 role=dialog><div class=aside-dialog><div class=aside-content><div class=aside-header ng-show=title><button type=button class=close ng-click=$hide()>&times;</button><h4 class=aside-title ng-bind-html=title></h4></div><div class=aside-body ng-show=content><h4>Text in aside</h4><p ng-bind-html=content></p><pre>2 + 3 = {{ 2 + 3 }}</pre><h4>Popover in aside</h4><p>This <button type=button class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</button> should trigger a popover on click.</p><h4>Tooltips in aside</h4><p><a href=# class=tooltip-test data-title=Tooltip bs-tooltip>This link</a> and <a href=# class=tooltip-test data-title=Tooltip bs-tooltip>that link</a> should have tooltips on hover.</p></div><div class=aside-footer><button type=button class="btn btn-default" ng-click=$hide()>Close</button> <button type=button class="btn btn-primary" ng-click=$hide()>Save changes</button></div></div></div></div>');
    $templateCache.put('views/ui/angular-strap/button.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Buttons</h3></div><div class=p-md ng-controller=ButtonDemoCtrl><p>Do more with buttons. Control button states or create groups of buttons for more components like toolbars.</p><p>This modules exposes two directives: <code>bs-checkbox</code> and <code>bs-radio</code> that can be used as attributes to trigger toggle, checkbox or radio behavior.</p><div class="callout callout-info"><h4>Group directives are also available as shortcuts</h4><p>Use <code>bs-checkbox-group</code> and <code>bs-radio-group</code> to easily setup the proper markup at compile time.</p></div><pre class=bs-example-scope>$scope.button = {{button | json}};</pre><div class=bs-example style="padding-bottom: 24px" append-source><label>Toggle:</label><button type=button class="btn btn-default" ng-model=button.toggle bs-checkbox>Toggle</button><hr><label>Checkboxes:</label><div class=btn-group ng-model=button.checkbox bs-checkbox-group><label class="btn btn-default"><input type=checkbox value=left> Left</label><label class="btn btn-default"><input type=checkbox value=middle> Middle</label><label class="btn btn-default"><input type=checkbox value=right> Right</label></div><hr><label>Radios:</label><div class=btn-group ng-model=button.radio bs-radio-group><label class="btn btn-default"><input type=radio class="btn btn-default" value=0> First</label><label class="btn btn-default"><input type=radio class="btn btn-default" value=1> Second</label><label class="btn btn-default"><input type=radio class="btn btn-default" value=2> Third</label></div></div><div class="callout callout-info"><h4>Type support</h4><p>Theses directives can handle both <code>strings</code>, <code>numbers</code> and <code>booleans</code> values.</p></div></div>');
    $templateCache.put('views/ui/angular-strap/collapse.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Collapses</h3></div><div class=p-md ng-controller=CollapseDemoCtrl><p>Add quick, dynamic collapsable functionality to transition through panels of local content.</p><pre class=bs-example-scope>$scope.panels = {{panels | json}};\n' + '$scope.panels.activePanel = {{ panels.activePanel }};\n' + '  </pre><div class=bs-example append-source><div class=panel-group ng-model=panels.activePanel bs-collapse><div class="panel panel-default" ng-repeat="panel in panels"><div class=panel-heading><h4 class=panel-title><a bs-collapse-toggle>{{ panel.title }}</a></h4></div><div class=panel-collapse bs-collapse-target><div class=panel-body>{{ panel.body }}</div></div></div></div></div><div class=bs-example style="padding-bottom: 24px" append-source><div class=btn-group ng-model=panels.activePanel bs-radio-group><label class="btn btn-default" ng-repeat="panel in panels"><input type=radio class="btn btn-default" value="{{ $index }}">Panel n\xb0{{ $index + 1 }}</label></div><div class="btn btn-default" ng-click=pushPanel()>Add new panel</div></div><h2 id=collapses-usage>Usage</h2><p>Append a <code>bs-collapse</code> attribute to any element and several <code>bs-collapse-toggle</code>,<code>bs-collapse-target</code> attributes to children elements to enable the directive.</p><div class="callout callout-info"><h4>Custom animations</h4><p>Pane animation is done with the <code>active</code> class and requires custom CSS.</p><pre class=bs-exemple-code>\n' + '      <code class=css highlight-block>\n' + '.collapse.am-collapse {\n' + '  animation-duration: .3s;\n' + '  animation-timing-function: ease;\n' + '  animation-fill-mode: backwards;\n' + '  overflow: hidden;\n' + '  &.in-remove {\n' + '    animation-name: collapse;\n' + '    display: block;\n' + '  }\n' + '  &.in-add {\n' + '    animation-name: expand;\n' + '  }\n' + '}\n' + '      </code>\n' + '    </pre></div><h3>Options</h3><p>Options can be passed via data attributes or as an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object on <code>bs-collapse</code>. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p><code>bs-collapse-toggle</code> can be hard mapped to a <code>bs-collapse-target</code> by passing its target index to the attribute (<code>bs-collapse-toggle="1"</code>)</p><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation to the popover with <code>ngAnimate</code></td></tr><tr><td>activeClass</td><td>string</td><td>in</td><td><p>Class to be applied to the animated element</p></td></tr><tr><td>disallowToggle</td><td>boolean</td><td>false</td><td><p>Disallow double-click toggling behavior</p></td></tr><tr><td>startCollapsed</td><td>boolean</td><td>false</td><td><p>Start with all elements collapsed</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$collapseProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($collapseProvider) {\n' + '            angular.extend($collapseProvider.defaults, {\n' + '              animation: \'am-flip-x\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/createGroup.html', '<div class=modal tabindex=-1 role=dialog><div class="modal-dialog modal-lg"><div class=modal-content><div class=modal-header><h4 class="modal-title text-primary">Create New Group</h4></div><div class=modal-body><div class=box><div class=form-group><div class="col-sm-1 p-sm"><i class="ui-icon fa {{menuIcon}} circle half text-lg"></i></div><div class=col-sm-11><input type=text ng-model=groupName class=form-control placeholder="Group Name"></div></div><div class="pull-right w m-b"><div class=input-group><span class=input-group-btn><button type=submit class="btn btn-sm no-bg btn-icon no-shadow no-padder"><i class=ti-search></i></button></span> <input type=text ng-model=SearchIcon class="form-control input-sm no-bg no-border" placeholder=Search...></div></div><div class=box-row><div class="box-cell scrollable hover"><div class="box-inner p p-h-sm"><div class="list-group list-group-md no-border no-radius no-margin"><div ng-click=setIcon(icon) ng-mouseover="Over=true" ng-mouseleave="Over=false" style="cursor: pointer" ng-repeat="icon in IconName | filter:SearchIcon" class="m-b-lg m-l pull-left"><i class="ui-icon fa {{icon}} ui-iconnfo text-lg" ng-class="{\'b-2x ui-iconnfo bg-success\':Over}"></i></div></div></div></div></div></div></div><div class=modal-footer><button type=button class="btn btn-primary" ng-click=createGroup(groupName);$hide();>Create</button></div></div></div></div>');
    $templateCache.put('views/ui/angular-strap/datepicker.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Datepickers</h3></div><div class=p-md ng-controller=DatepickerDemoCtrl><p>Add datepicker functionality with any form text input.</p><div class="callout callout-info"><h4>Support for locales</h4><p>This module leverages the <a href=http://docs.angularjs.org/api/ng.$locale>$locale</a> service. You just have to load the proper <a href=http://docs.angularjs.org/guide/i18n>i18n</a> file to seamlessly translate your datepickers.</p></div><pre class=bs-example-scope>$scope.selectedDate = {{selectedDate}}; // &lt;- {{ getType(\'selectedDate\') }}\n' + '$scope.selectedDateAsNumber = {{selectedDateAsNumber}}; // &lt;- {{ getType(\'selectedDateAsNumber\') }}\n' + '$scope.fromDate = {{fromDate}}; // &lt;- {{ getType(\'fromDate\') }}\n' + '$scope.untilDate = {{untilDate}}; // &lt;- {{ getType(\'untilDate\') }}\n' + '</pre><div class=bs-example style="padding-bottom: 24px" append-source><form name=datepickerForm class=form-inline role=form><div class=form-group ng-class="{\'has-error\': datepickerForm.date.$invalid}"><label class=control-label>Date <small>(as date)</small></label><input type=text class=form-control ng-model=selectedDate name=date bs-datepicker></div><div class=form-group ng-class="{\'has-error\': datepickerForm.date2.$invalid}"><label class=control-label>Date <small>(as number)</small></label><input type=text class=form-control ng-model=selectedDateAsNumber data-date-format=yyyy-MM-dd data-date-type=number data-autoclose=true data-min-date=02/10/86 data-max-date=today data-autoclose=1 name=date2 bs-datepicker></div><hr><div class=form-group><label class="control-label m-b">Date range <small>(dynamic)</small></label><div class=form-group class=col-xs-3><input type=text class=form-control ng-model=fromDate data-max-date={{untilDate}} placeholder=From bs-datepicker></div><div class=form-group class=col-xs-3><input type=text class=form-control ng-model=untilDate data-min-date={{fromDate}} placeholder=Until bs-datepicker></div></div></form></div><h2 id=datepickers-usage>Usage</h2><p>Append a <code>bs-datepicker</code>attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$datepicker</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var myDatepicker = $datepicker(element, ngModelController);\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your select in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for these docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'bottom-left\'</td><td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'focus\'</td><td>how typeahead is triggered - click | hover | focus | manual</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the typeahead to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path | id</td><td>\'$typeahead\'</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p></td></tr><tr><td>dateFormat</td><td>string</td><td>\'shortDate\'</td><td><p>Rendering format of your date, leverages <a href=http://docs.angularjs.org/api/ng.filter:date>ng.filter:date</a>.</p></td></tr><tr><td>dateType</td><td>string</td><td>\'date\'</td><td><p>Expected model type of your date - date | number | iso | string</p></td></tr><tr><td>autoclose</td><td>boolean</td><td>false</td><td><p>Whether the picker should close itself upon select.</p></td></tr><tr><td>useNative</td><td>boolean</td><td>false</td><td><p>Whether to use a native component if available (iOS/Android).</p></td></tr><tr><td>minDate</td><td>date*</td><td>-Infinity</td><td><p>Minimum allowed date for selection <small>(* fed into the <code>Date</code> constructor)</small>. You can use the string "today" that will resolve the current date.</p></td></tr><tr><td>maxDate</td><td>date*</td><td>+Infinity</td><td><p>Maximum allowed date for selection <small>(* fed into the <code>Date</code> constructor)</small>. You can use the string "today" that will resolve the current date.</p></td></tr><tr><td>startView</td><td>number</td><td>0</td><td><p>View that sould be opened by default - 0 | 1 | 2.</p></td></tr><tr><td>minView</td><td>number</td><td>0</td><td><p>Minimum allowed view - 0 | 1 | 2. 1 will only allow month selection.</p></td></tr><tr><td>startWeek</td><td>number</td><td>1</td><td><p>First day of the week.</p></td></tr><tr><td>startDate</td><td>date*</td><td>today</td><td><p>Date that sould be opened by default.</p></td></tr><tr><td>iconLeft</td><td>string</td><td>\'glyphicon glyphicon-chevron-left\'</td><td><p>CSS class for \'left\' icon.</p></td></tr><tr><td>iconRight</td><td>string</td><td>\'glyphicon glyphicon-chevron-right\'</td><td><p>CSS class for \'right\' icon.</p></td></tr><tr><td>daysOfWeekDisabled</td><td>string</td><td>\'\'</td><td><p>List of decimal days of the week values that are disabled and hence cannot be selected. For example, \'06\' disables Sunday and Saturday, \'12345\' disables Monday to Friday.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$datepickerProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($datepickerProvider) {\n' + '            angular.extend($datepickerProvider.defaults, {\n' + '              dateFormat: \'dd/MM/yyyy\',\n' + '              startWeek: 1\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/dropdown.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Dropdowns</h3></div><div class=p-md ng-controller=DropdownDemoCtrl><p>Add dropdown menus to nearly anything with this simple plugin, including the navbar, tabs, and pills.</p><p>Append a <code>bs-dropdown</code> attribute to any element to enable the plugin.</p><pre class=bs-example-scope>$scope.dropdown = {{dropdown | json}};</pre><div class=bs-example style="padding-bottom: 24px" append-source><button type=button class="btn btn-lg btn-primary" data-animation=am-flip-x data-html=true bs-dropdown=dropdown>Click to toggle dropdown<br><small>(using an object)</small></button> <button type=button class="btn btn-lg btn-danger" data-animation=am-flip-x data-template=views/ui/angular-strap/dropdown.tpl.html data-placement=top-left bs-dropdown=dropdown>Custom dropdown<br><small>(using data-template)</small></button> <button type=button class="btn btn-lg btn-default" data-animation=am-flip-x data-template=views/ui/angular-strap/dropdown.tpl.html data-placement=right bs-dropdown=dropdown>Right<br><small>(using data-template)</small></button> <button type=button class="btn btn-lg btn-default" data-animation=am-flip-x data-template=views/ui/angular-strap/dropdown.tpl.html data-placement=left bs-dropdown=dropdown>Left<br><small>(using data-template)</small></button></div><h2 id=dropdowns-usage>Usage</h2><p>Append a <code>bs-dropdown</code>attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$dropdown</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var myDropdown = $dropdown(element, {title: \'My Title\', content: \'My Content\'});\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object directly on the <code>bs-dropdown</code> attribute</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your dropdown in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'bottom-left\'</td><td>how to position the dropdown - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'click\'</td><td>how dropdown is triggered - click | hover | focus | manual</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the dropdown (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the dropdown to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the dropdown in the flow of the document near the triggering element -&nbsp;which will prevent the dropdown from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$dropdownProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($dropdownProvider) {\n' + '            angular.extend($dropdownProvider.defaults, {\n' + '              animation: \'am-flip-x\',\n' + '              trigger: \'hover\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/dropdown.tpl.html', '<ul class=dropdown-menu><li><a href>Action</a></li><li><a href>Another action</a></li><li><a href>Something else here</a></li><li class=divider></li><li><a href>Separated link</a></li></ul>');
    $templateCache.put('views/ui/angular-strap/edit_tooltip.html', '<div class=popover tabindex=-1 ng-show=content style=min-width:350px><div class=arrow></div><h3 class=popover-title>{{feature.featureName}}</h3><div class=popover-content style=border:solid><a>Descrition : {{feature.featureDescription}}</a><br><a class=test href="" editable-text=feature.pricing.price e-required e-placeholder="Enter the price">Price : {{feature.pricing.price}}</a><br><a href="" editable-text=feature.pricing.units e-required e-placeholder="Enter the units">units : {{feature.pricing.units}}</a><br><a href="" editable-text=feature.pricing.minUnits e-required e-placeholder="Enter the minimum units">minUnits : {{feature.pricing.minUnits}}</a><br><a e-ng-options="s in feature.billing">{{billingplan}}</a><div class="panel-heading bg-white"></div><div class=form-actions><button type=button class="btn btn-danger" ng-click=$hide()>Close</button> <button type=button class="btn btn-primary" ng-click="popover.saved=true;$hide()">Save changes</button></div></div></div>');
    $templateCache.put('views/ui/angular-strap/modal.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Modals</h3></div><div class=p-md ng-controller=ModalDemoCtrl><p>Modals are streamlined, but flexible, dialog prompts with the minimum required functionality and smart defaults.</p><pre class=bs-example-scope>$scope.modal = {{modal | json}};</pre><div class=bs-example style="padding-bottom: 24px" append-source><button type=button class="btn btn-lg btn-primary" data-html=true data-animation=am-fade-and-scale data-placement=center data-container=body bs-modal=modal>Click to toggle modal<br><small>(using an object)</small></button> <button type=button class="btn btn-lg btn-danger" data-animation=am-fade-and-slide-top data-template=views/ui/angular-strap/modal.tpl.html bs-modal=modal>Custom Modal<br><small>(using data-template)</small></button> <button type=button class="btn btn-lg btn-default" data-animation=am-fade-and-slide-top data-content-template=views/ui/angular-strap/modal.tpl.content.html bs-modal=modal>Custom Modal<br><small>(using data-content-template)</small></button></div><div class="callout callout-info"><h4>Backdrop animation</h4><p>Backdrop animation being powered by <code>ngAnimate</code>, it requires custom CSS.</p><pre class=bs-exemple-code>\n' + '      <code class=css highlight-block>\n' + '        .modal-backdrop.am-fade {\n' + '          opacity: .5;\n' + '          transition: opacity .15s linear;\n' + '          &.ng-enter {\n' + '            opacity: 0;\n' + '            &.ng-enter-active {\n' + '              opacity: .5;\n' + '            }\n' + '          }\n' + '          &.ng-leave {\n' + '            opacity: .5;\n' + '            &.ng-leave-active {\n' + '              opacity: 0;\n' + '            }\n' + '          }\n' + '        }\n' + '      </code>\n' + '    </pre></div><h2 id=modals-usage>Usage</h2><p>Append a <code>bs-modal</code>attribute to any element to activate the directive.</p><div class="callout callout-info"><h4>The module also exposes a <code>$modal</code>service</h4><p>Available for programmatic use (inside a directive/controller).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .controller(\'DemoCtrl\', function($scope, $modal) {\n' + '            // Show a basic modal from a controller\n' + '            var myModal = $modal({title: \'My Title\', content: \'My Content\', show: true});\n' + '\n' + '            // Pre-fetch an external template populated with a custom scope\n' + '            var myOtherModal = $modal({scope: $scope, template: \'modal/docs/modal.tpl.demo.html\', show: false});\n' + '            // Show when some event occurs (use $promise property to ensure the template has been loaded)\n' + '            $scope.showModal = function() {\n' + '              myOtherModal.$promise.then(myOtherModal.show);\n' + '            };\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object directly on the <code>bs-modal</code> attribute</p><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 50px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by ngAnimate</td></tr><tr><td>backdropAnimation</td><td>string</td><td>am-fade</td><td>apply a CSS animation to backdrop powered by ngAnimate</td></tr><tr><td>placement</td><td>string</td><td>\'top\'</td><td>how to position the modal - top | bottom | center <small>(requires custom CSS)</small>.</td></tr><tr><td>title</td><td>string</td><td>\'\'</td><td>default title value if <code>title</code>attribute isn\'t present</td></tr><tr><td>content</td><td>string</td><td>\'\'</td><td>default content value if <code>data-content</code>attribute isn\'t present</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>backdrop</td><td>boolean or the string <code>\'static\'</code></td><td>true</td><td>Includes a modal-backdrop element. Alternatively, specify <code>static</code>for a backdrop which doesn\'t close the modal on click.</td></tr><tr><td>keyboard</td><td>boolean</td><td>true</td><td>Closes the modal when escape key is pressed</td></tr><tr><td>show</td><td>boolean</td><td>true</td><td>Shows the modal when initialized.</td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the popover to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p><p>It should be a <code>div.modal</code> element following Bootstrap styles conventions (<a href=//github.com/mgcrea/angular-strap/blob/master/src/modal/modal.tpl.html target=_blank>like this</a>).</p></td></tr><tr><td>contentTemplate</td><td>path</td><td>false</td><td><p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p></td></tr><tr><td>prefixEvent</td><td>string</td><td>\'modal\'</td><td><p>If provided, prefixes the events \'.hide\' \'.hide.after\' \'.show\' and \'.show.after\' with the passed in value. With the default value these events are \'modal.hide\' \'modal.hide.after\' \'modal.show\' and \'modal.show.after\'</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$modalProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($modalProvider) {\n' + '            angular.extend($modalProvider.defaults, {\n' + '              animation: \'am-flip-x\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Scope methods</h3><p>Methods available inside the directive scope to toggle visibility.</p><h4>$show()</h4><p>Reveals the modal.</p><h4>$hide()</h4><p>Hides the modal.</p><h4>$toggle()</h4><p>Toggles the modal.</p></div>');
    $templateCache.put('views/ui/angular-strap/modal.tpl.content.html', '<div class=modal-inner-content><h4>Text in a modal</h4><p ng-bind-html=content></p><pre>2 + 3 = {{ 2 + 3 }}</pre><h4>Popover in a modal</h4><p>This <a href role=button class="btn btn-default popover-test" data-title="A Title" data-content="And here\'s some amazing content. It\'s very engaging. right?" bs-popover>button</a> should trigger a popover on click.</p><h4>Tooltips in a modal</h4><p><a href class=tooltip-test data-title=Tooltip bs-tooltip>This link</a> and <a href class=tooltip-test data-title=Tooltip bs-tooltip>that link</a> should have tooltips on hover.</p></div><div class="modal-footer m-l-n m-r-n m-b-n"><button type=button class="btn btn-default" ng-click=$hide()>Close</button> <button type=button class="btn btn-primary" ng-click=$hide()>Save changes</button></div>');
    $templateCache.put('views/ui/angular-strap/modal.tpl.html', '<div class=modal tabindex=-1 role=dialog><div class="modal-dialog modal-lg"><div class=modal-content><div class=modal-header><button type=button class=close ng-click=$hide()>&times;</button><h4 class="modal-title text-primary">{{JobDetails.jobTittle}}</h4></div><div class=modal-body><form class="form-horizontal ng-pristine ng-valid" style="cursor: pointer"><div class=panel><div class="panel-body p-sm"><div class=form-group><div class="col-sm-3 col-xs-3"><i class="glyphicon glyphicon-briefcase"></i> <span>1-6 yrs</span></div><div class="col-sm-3 col-xs-3"><i class="glyphicon glyphicon-map-marker"></i> <span>{{JobDetails.Location}}</span></div><div class="col-sm-3 col-xs-3"><i class="fa fa-rupee"></i> <span>{{JobDetails.minSalary}}</span> <span>-</span> <span>{{JobDetails.maxSalary}}</span> <span>P.A</span></div><div class="col-sm-3 hidden-xs hidden-sm"><div class=pull-right><span>Posted On:</span> <span>{{JobDetails.createdDate | date:\'dd-MM-yyyy\'}}</span></div></div></div><div class=form-group><div class=col-sm-3><label>Job Description</label></div><div class=col-sm-9><label>{{JobDetails.jobDescription}}</label></div></div><div class=form-group><div class="col-sm-3 col-xs-3"><label>Qualification</label></div><div class="col-sm-9 col-xs-9"><label>{{JobDetails.Qualification}}</label></div></div></div></div></form></div><div class=modal-footer><button type=button class="btn btn-primary">Edit</button></div></div></div></div>');
    $templateCache.put('views/ui/angular-strap/popover.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Popovers</h3></div><div class=p-md ng-controller=PopoverDemoCtrl><p>Add small overlays of content on tap, like those on the iPad, to any element for housing secondary information.</p><div class="form-group hide"><label>Title</label><input type=text class=form-control ng-model=popover.title placeholder=Title><label>Content</label><textarea class=form-control ng-model=popover.content rows=3></textarea></div><pre class=bs-example-scope>$scope.popover = {{popover | json}};</pre><div class=bs-example style="padding-bottom: 24px" append-source><button type=button class="btn btn-lg btn-primary" data-html=true data-placement=bottom data-animation=am-flip-x bs-popover=popover>Click to toggle popover<br><small>(using an object)</small></button> <button type=button class="btn btn-lg btn-primary" data-html=true data-placement=top-right title={{popover.title}} data-content={{popover.content}} data-trigger=focus bs-popover>Click to toggle popover<br><small>(using data-attrs)</small></button> <button type=button class="btn btn-lg btn-danger" title={{popover.title}} data-content={{popover.content}} data-template=views/ui/angular-strap/popover.tpl.html data-animation=am-flip-x bs-popover>Custom Popover<br><small>(using data-template)</small></button></div><h2 id=popovers-usage>Usage</h2><p>Append a <code>bs-popover</code>attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$popover</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var myPopover = $popover(element, {title: \'My Title\', content: \'My Content\'});\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object directly on the <code>bs-popover</code> attribute</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your popover in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'right\'</td><td>how to position the popover - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'click\'</td><td>how popover is triggered - click | hover | focus | manual</td></tr><tr><td>title</td><td>string</td><td>\'\'</td><td>default title value if <code>title</code>attribute isn\'t present</td></tr><tr><td>content</td><td>string</td><td>\'\'</td><td>default content value if <code>data-content</code>attribute isn\'t present</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the popover (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the popover to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the popover in the flow of the document near the triggering element -&nbsp;which will prevent the popover from floating away from the triggering element during a window resize.</p></td></tr><tr><td>target</td><td>string | DOMElement |\xa0false</td><td>false</td><td><p>Position the tooltip relative to a specific target element.</p></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p><p>It should be a <code>div.popover</code> element following Bootstrap styles conventions (<a href=//github.com/mgcrea/angular-strap/blob/master/src/popover/popover.tpl.html target=_blank>like this</a>).</p></td></tr><tr><td>contentTemplate</td><td>path</td><td>false</td><td><p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$popoverProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($popoverProvider) {\n' + '            angular.extend($popoverProvider.defaults, {\n' + '              animation: \'am-flip-x\',\n' + '              trigger: \'hover\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Scope methods</h3><p>Methods available inside the directive scope to toggle visibility.</p><h4>$show()</h4><p>Reveals the popover.</p><h4>$hide()</h4><p>Hides the popover.</p><h4>$toggle()</h4><p>Toggles the popover.</p></div>');
    $templateCache.put('views/ui/angular-strap/popover.tpl.html', '<div class=popover tabindex=-1 ng-show=content><div class=arrow></div><h3 class=popover-title ng-bind-html=title ng-show=title></h3><div class=popover-content><form name=popoverForm><p ng-bind-html=content style=min-width:300px></p><pre>2 + 3 = <span ng-cloak>{{ 2 + 3 }}</span></pre><div class=form-actions><button type=button class="btn btn-danger" ng-click=$hide()>Close</button> <button type=button class="btn btn-primary" ng-click="popover.saved=true;$hide()">Save changes</button></div></form></div></div>');
    $templateCache.put('views/ui/angular-strap/select.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Selects</h3></div><div class=p-md ng-controller=SelectDemoCtrl><p>Add quick, dynamic select functionality with any form text input.</p><pre class=bs-example-scope>$scope.selectedIcon = "{{selectedIcon}}";\n' + '$scope.selectedIcons = "{{selectedIcons}}";\n' + '$scope.icons = "{{icons}}";\n' + '</pre><div class=bs-example style="padding-bottom: 24px" append-source><label>Single select:&nbsp;</label><button type=button class="btn btn-default" ng-model=selectedIcon data-html=1 ng-options="icon.value as icon.label for icon in icons" bs-select>Action <span class=caret></span></button><hr><label>Multiple select:&nbsp;</label><button type=button class="btn btn-default" ng-model=selectedIcons data-html=1 data-multiple=1 data-animation=am-flip-x ng-options="icon.value as icon.label for icon in icons" bs-select>Action <span class=caret></span></button></div><h2 id=selects-usage>Usage</h2><p>Append a <code>bs-select</code>attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$select</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var mySelect = $select(element, controller);\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your select in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'bottom-left\'</td><td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'focus\'</td><td>how typeahead is triggered - click | hover | focus | manual</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the typeahead to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path | id</td><td>\'$typeahead\'</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p></td></tr><tr><td>multiple</td><td>boolean</td><td>false</td><td><p>Whether multiple selections should be allowed.</p></td></tr><tr><td>all-none-buttons</td><td>boolean</td><td>false</td><td><p>Show the buttons to select and deselect all items at once.</p></td></tr><tr><td>max-length</td><td>number</td><td>3</td><td><p>Maximum number of selected values that can be displayed inline.</p></td></tr><tr><td>max-length-html</td><td>string</td><td>\'selected\'</td><td><p>Placeholder to append to an overflowed multiple selection.</p></td></tr><tr><td>sort</td><td>boolean</td><td>true</td><td><p>Sort the order of the displayed labels.</p></td></tr><tr><td>placeholder</td><td>string</td><td>\'Choose among the following...\'</td><td><p>Placeholder text when no value is selected.</p></td></tr><tr><td>iconCheckmark</td><td>string</td><td>\'glyphicon glyphicon-ok\'</td><td><p>CSS class for \'checkmark\' icon.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$selectProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($selectProvider) {\n' + '            angular.extend($selectProvider.defaults, {\n' + '              animation: \'am-flip-x\',\n' + '              sort: false\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/tab.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Tabs</h3></div><div class=p-md ng-controller=TabDemoCtrl><p>Add quick, dynamic tab functionality to transition through panes of local content.</p><pre class=bs-example-scope>$scope.tabs = {{tabs | json}};\n' + '$scope.tabs.activeTab = {{ tabs.activeTab }};\n' + '  </pre><div class=bs-example append-source><div ng-model=tabs.activeTab bs-tabs class=tab-container><div ng-repeat="tab in tabs" title="{{ tab.title }}" ng-bind=tab.content bs-pane></div></div></div><div class=bs-example style="padding-bottom: 24px" append-source><div class=btn-group ng-model=tabs.activeTab bs-radio-group><label class="btn btn-default" ng-repeat="tab in tabs"><input type=radio class="btn btn-default" value="{{ $index }}">Tab n\xb0{{ $index + 1 }}</label></div><div class="btn btn-default" ng-click=pushTab()>Add new tab</div></div><h2 id=tabs-usage>Usage</h2><p>Append a <code>bs-tabs</code> attribute to any element and several children <code>bs-pane</code> attributes to children elements to enable the directive.</p><div class="callout callout-info"><h4>Custom animations</h4><p>Pane animation is done with the <code>active</code> class and requires custom CSS.</p><pre class=bs-exemple-code>\n' + '      <code class=css highlight-block>\n' + '.tab-pane.am-fade {\n' + '  animation-duration: .3s;\n' + '  animation-timing-function: ease;\n' + '  animation-fill-mode: backwards;\n' + '  opacity: 1;\n' + '\n' + '  &.active-remove {\n' + '    display: none !important;\n' + '  }\n' + '  &.active-add {\n' + '    animation-name: fadeIn;\n' + '  }\n' + '}\n' + '      </code>\n' + '    </pre></div><h3>Options</h3><p>Options can be passed via data attributes or as an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object on <code>bs-tabs</code>. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation to the popover with <code>ngAnimate</code></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If a remote URL is provided, overrides the default template</p></td></tr><tr><td>navClass</td><td>string</td><td>nav-tabs</td><td><p>Classes to be applied to the tab navigation (bootstrap supports <code>nav-pills</code>, <code>nav-stacked</code>)</p></td></tr><tr><td>activeClass</td><td>string</td><td>active</td><td><p>Class to be applied to the animated element</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$tabProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($tabProvider) {\n' + '            angular.extend($tabProvider.defaults, {\n' + '              animation: \'am-flip-x\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/timepicker.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Timepickers</h3></div><div class=p-md ng-controller=TimepickerDemoCtrl><p>Add quick, dynamic timepicker functionality with any form text input.</p><div class="callout callout-info"><h4>Support for locales</h4><p>This module leverages the <a href=http://docs.angularjs.org/api/ng.$locale>$locale</a> service. You just have to load the proper <a href=http://docs.angularjs.org/guide/i18n>i18n</a> file to seamlessly translate your timepickers.</p></div><pre class=bs-example-scope>$scope.time = {{time}}; // (formatted: {{time | date:\'shortTime\'}})\n' + '$scope.selectedTimeAsNumber = {{selectedTimeAsNumber}}; // (formatted: {{selectedTimeAsNumber | date:\'shortTime\'}})\n' + '$scope.sharedDate = {{sharedDate}}; // (formatted: {{sharedDate | date:\'short\'}})\n' + '  </pre><div class=bs-example style="padding-bottom: 24px" append-source><form name=timepickerForm class=form-inline role=form><div class=form-group ng-class="{\'has-error\': timepickerForm.time.$invalid}"><label class=control-label><i class="fa fa-clock-o"></i> Time <small>(as date)</small></label><input type=text class=form-control size=8 ng-model=time name=time bs-timepicker></div><div class=form-group ng-class="{\'has-error\': timepickerForm.time2.$invalid}"><label class=control-label><i class="fa fa-clock-o"></i> Time <small>(as number)</small></label><input type=text class=form-control size=5 ng-model=selectedTimeAsNumber data-time-format=HH:mm data-time-type=number data-min-time=10:00 data-max-time=13:30 data-autoclose=1 name=time2 bs-timepicker></div><hr><div class=form-group><label class="control-label m-b">Datetime picker</label><div class=form-group><input type=text size=10 class=form-control ng-model=sharedDate data-autoclose=1 placeholder=Date bs-datepicker></div><div class=form-group><input type=text size=8 class=form-control ng-model=sharedDate data-autoclose=1 placeholder=Time bs-timepicker></div></div></form></div><h2 id=timepickers-usage>Usage</h2><p>Append a <code>bs-timepicker</code>attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$timepicker</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var myTimepicker = $timepicker(element, ngModelController);\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your select in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'bottom-left\'</td><td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'focus\'</td><td>how typeahead is triggered - click | hover | focus | manual</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the typeahead to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path | id</td><td>\'$typeahead\'</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p></td></tr><tr><td>timeFormat</td><td>string</td><td>\'shortTime\'</td><td><p>Rendering format of your time, leverages <a href=http://docs.angularjs.org/api/ng.filter:date>ng.filter:date</a>.</p></td></tr><tr><td>timeType</td><td>string</td><td>\'date\'</td><td><p>Expected model type of your time - date | number | iso | string</p></td></tr><tr><td>autoclose</td><td>boolean</td><td>false</td><td><p>Whether the picker should close itself upon select.</p></td></tr><tr><td>useNative</td><td>boolean</td><td>true</td><td><p>Whether to use a native component if available (iOS/Android).</p></td></tr><tr><td>minTime</td><td>date*</td><td>-Infinity</td><td><p>Minimum allowed time for selection <small>(parsed against current format)</small>. You can use the string "now" that will resolve the current time.</p></td></tr><tr><td>maxTime</td><td>date*</td><td>+Infinity</td><td><p>Maximum allowed time for selection <small>(parsed against current format)</small>. You can use the string "now" that will resolve the current time.</p></td></tr><tr><td>length</td><td>number</td><td>5</td><td><p>Length of the timepicker (should be an odd number).</p></td></tr><tr><td>hourStep</td><td>number</td><td>1</td><td><p>Default step for hours.</p></td></tr><tr><td>minuteStep</td><td>number</td><td>5</td><td><p>Default step for minutes.</p></td></tr><tr><td>iconUp</td><td>string</td><td>\'glyphicon glyphicon-chevron-up\'</td><td><p>CSS class for \'up\' icon.</p></td></tr><tr><td>iconDown</td><td>string</td><td>\'glyphicon glyphicon-chevron-down\'</td><td><p>CSS class for \'down\' icon.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$timepickerProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($timepickerProvider) {\n' + '            angular.extend($timepickerProvider.defaults, {\n' + '              timeFormat: \'HH:mm\',\n' + '              length: 7\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/tooltip.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Tooltips</h3></div><div class=p-md ng-controller=TooltipDemoCtrl><p>Add small overlays of content on hover, to any element for housing secondary information.</p><div class="form-group hide"><label>Title</label><input type=text class=form-control ng-model=tooltip.title placeholder=Title></div><pre class=bs-example-scope>$scope.tooltip = {{tooltip | json}};</pre><div class=bs-example style="padding-bottom: 24px" append-source><p>Tight pants next level keffiyeh <a href data-animation=am-flip-x data-html=true bs-tooltip=tooltip>you probably</a> haven\'t heard of them. Photo booth beard raw denim letterpress vegan messenger bag stumptown.</p><div class="input-group col-xs-5"><span class=input-group-btn><button class="btn btn-primary" type=button data-trigger=click data-html=true data-type=success data-title={{tooltip.title}} bs-tooltip>Click me</button></span> <input type=text class=form-control data-placement=right data-html=true data-type=info data-container=body placeholder="Focus to toggle tooltip" data-trigger=focus bs-tooltip=tooltip></div><div class=checkbox><label data-placement=bottom-left data-type=success data-html=true data-animation=am-fade-and-scale bs-tooltip=tooltip><input type=checkbox ng-model=tooltip.checked> Remember me</label></div></div><h2 id=tooltips-usage>Usage</h2><p>Append a <code>bs-tooltip</code> attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$tooltip</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var myTooltip = $tooltip(element, {title: \'My Title\'});\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><p>For directives, you can naturally inherit the contextual <code>$scope</code> or leverage a custom one with an <a href=http://docs.angularjs.org/guide/expression>AngularJS expression</a> to evaluate as an object directly on the <code>bs-tooltip</code> attribute</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your popover in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'top\'</td><td>how to position the tooltip - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'hover focus\'</td><td>how tooltip is triggered - click | hover | focus | manual</td></tr><tr><td>title</td><td>string</td><td>\'\'</td><td>default title value if <code>title</code>attribute isn\'t present</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the tooltip (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the tooltip to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the tooltip in the flow of the document near the triggering element -&nbsp;which will prevent the tooltip from floating away from the triggering element during a window resize.</p></td></tr><tr><td>target</td><td>string | DOMElement |\xa0false</td><td>false</td><td><p>Position the tooltip relative to a specific target element.</p></td></tr><tr><td>template</td><td>path</td><td>false</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p><p>It should be a <code>div.tooltip</code> element following Bootstrap styles conventions (<a href=//github.com/mgcrea/angular-strap/blob/master/src/tooltip/tooltip.tpl.html target=_blank>like this</a>).</p></td></tr><tr><td>contentTemplate</td><td>path</td><td>false</td><td><p>If provided, fetches the partial and includes it as the inner content, can be either a remote URL or a cached template id.</p></td></tr><tr><td>prefixEvent</td><td>string</td><td>\'tooltip\'</td><td><p>If provided, prefixes the events \'.hide\' \'.hide.after\' \'.show\' and \'.show.after\' with the passed in value. With the default value these events are \'tooltip.hide\' \'tooltip.hide.after\' \'tooltip.show\' and \'tooltip.show.after\'</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$tooltipProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($tooltipProvider) {\n' + '            angular.extend($tooltipProvider.defaults, {\n' + '              animation: \'am-flip-x\',\n' + '              trigger: \'hover\'\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div><h3>Scope methods</h3><p>Methods available inside the directive scope to toggle visibility.</p><h4>$show()</h4><p>Reveals the tooltip.</p><h4>$hide()</h4><p>Hides the tooltip.</p><h4>$toggle()</h4><p>Toggles the tooltip.</p></div>');
    $templateCache.put('views/ui/angular-strap/typeahead.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Typeaheads</h3></div><div class=p-md ng-controller=TypeaheadDemoCtrl><p>Add quick, dynamic typeahead functionality with any form text input.</p><pre class=bs-example-scope>$scope.selectedState = "{{selectedState}}";\n' + '$scope.states = {{states}};\n' + '\n' + '$scope.selectedIcon = "{{selectedIcon}}";\n' + '$scope.icons = "{{icons}}";\n' + '\n' + '$scope.selectedAddress = "{{selectedAddress}}";\n' + '</pre><div class=bs-example style="padding-bottom: 24px" append-source><form class=form-inline role=form><div class=form-group><label>State</label><input type=text class=form-control ng-model=selectedState ng-options="state for state in states" placeholder="Enter state" bs-typeahead></div><div class=form-group><label>Icon</label><input type=text class=form-control ng-model=selectedIcon data-min-length=0 data-html=1 data-animation=am-flip-x ng-options="icon as icon.label for icon in icons" placeholder="Enter icon" bs-typeahead></div><hr><div class=form-group><label>Address <small>(async via maps.googleapis.com)</small></label><input type=text class=form-control ng-model=selectedAddress data-animation=am-flip-x ng-options="address.formatted_address as address.formatted_address for address in getAddress($viewValue)" placeholder="Enter address" bs-typeahead></div></form></div><h2 id=typeaheads-usage>Usage</h2><p>Append a <code>bs-typeahead</code>attribute to any element to enable the directive.</p><div class="callout callout-info"><h4>The module exposes a <code>$typeahead</code>service</h4><p>Available for programmatic use (mainly in directives as it requires a DOM element).</p><div class=highlight><pre>\n' + '        <code class=javascript highlight-block>\n' + '          var myTypeahead = $typeahead(element, {controller: someModelController});\n' + '        </code>\n' + '      </pre></div></div><h3>Options</h3><p>Options can be passed via data-attributes on the directive or as an object hash to configure the service. For data attributes, append the option name to <code>data-</code>, as in <code>data-animation=""</code>.</p><div class="callout callout-info"><h4>This module supports exotic placement options!</h4><p>You can position your typeahead in corners (such as <code>bottom-left</code>) or any other combination two.</p><p>Exotic placement options are not part of the Bootstrap\'s core, to use them you must use <code>bootstrap-additions.css</code> from the <a href=//github.com/mgcrea/bootstrap-additions target=_blank>BootstrapAdditions</a> project. This project being not yet fully released, meanwhile, you can use the <a href=//mgcrea.github.io/angular-strap/static/styles/bootstrap-additions.min.css target=_blank>development snapshot</a> compiled for theses docs.</p></div><div class=table-responsive><table class="table table-bordered table-striped"><thead><tr><th style="width: 100px">Name</th><th style="width: 100px">type</th><th style="width: 50px">default</th><th>description</th></tr></thead><tbody><tr><td>animation</td><td>string</td><td>am-fade</td><td>apply a CSS animation powered by <code>ngAnimate</code></td></tr><tr><td>placement</td><td>string</td><td>\'bottom-left\'</td><td>how to position the typeahead - top | bottom | left | right, or any combination like bottom-left.</td></tr><tr><td>trigger</td><td>string</td><td>\'focus\'</td><td>how typeahead is triggered - click | hover | focus | manual</td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>replace <code>ng-bind</code> with <code>ng-bind-html</code>, requires <code>ngSanitize</code> to be loaded</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td><p>delay showing and hiding the typeahead (ms) - does not apply to manual trigger type</p><p>If a number is supplied, delay is applied to both hide/show</p><p>Object structure is: <code>delay: { show: 500, hide: 100 }</code></p></td></tr><tr><td>container</td><td>string | false</td><td>false</td><td><p>Appends the typeahead to a specific element. Example: <code>container: \'body\'</code>. This option is particularly useful in that it allows you to position the typeahead in the flow of the document near the triggering element -&nbsp;which will prevent the typeahead from floating away from the triggering element during a window resize.</p></td></tr><tr><td>template</td><td>path | id</td><td>\'$typeahead\'</td><td><p>If provided, overrides the default template, can be either a remote URL or a cached template id.</p></td></tr><tr><td>limit</td><td>number</td><td>6</td><td><p>The max number of items to display in the dropdown.</p></td></tr><tr><td>minLength</td><td>number</td><td>1</td><td><p>The minimum character length needed before triggering autocomplete suggestions.</p></td></tr></tbody></table></div><div class="callout callout-info"><h4>Default options</h4><p>You can override global defaults for the plugin with <code>$typeaheadProvider.defaults</code></p><div class=highlight><pre class=bs-exemple-code>\n' + '        <code class=javascript highlight-block>\n' + '          angular.module(\'myApp\')\n' + '          .config(function($typeaheadProvider) {\n' + '            angular.extend($typeaheadProvider.defaults, {\n' + '              animation: \'am-flip-x\',\n' + '              minLength: 2,\n' + '              limit: 8\n' + '            });\n' + '          })\n' + '        </code>\n' + '      </pre></div></div></div>');
    $templateCache.put('views/ui/angular-strap/typeahead.tpl.html', '<pre>{{pane.content}}</pre>');
    $templateCache.put('views/ui/chart/chart.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Charts</h3></div><div class=p-md ng-controller=ChartCtrl><div class=row><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class="text-xl font-bold">3.343.209</span> <i class="fa fa-caret-up text-success"></i>1.5% <small class="block text-muted">Total revenue of this month</small></div><div style="margin: 0 -2px"><div ui-jp=plot ui-options="\r' + '\n' + '            [\r' + '\n' + '              { data: {{plot_line_1}}, points: { show: true, radius: 0}, splines: { show: true, tension: 0.45, lineWidth: 1, fill: 0.2 } },\r' + '\n' + '              { data: {{plot_line_2}}, points: { show: true, radius: 0}, splines: { show: true, tension: 0.45, lineWidth: 1, fill: 1 } }\r' + '\n' + '            ], \r' + '\n' + '            {\r' + '\n' + '              colors: [\'{{app.color.info}}\', \'{{app.color.dark}}\'],\r' + '\n' + '              series: { shadowSize: 3 },\r' + '\n' + '              xaxis: { show: false, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: false, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:170px></div></div><div class="panel-footer bg-dark no-b-t"><div class=box><div class="box-col p-md"><span class="text-lg text-lt">$23,000</span></div><div class="box-col text-right p-md"><div ng-init="data1=[60,40]" ui-jp=sparkline ui-options="{{data1}}, {type:\'pie\', height:25, sliceColors:[\'{{app.color.success}}\',\'#fff\']}" class="sparkline inline"></div></div></div></div></div></div><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class=font-bold>Lines and Bars</span> <small class="block text-muted">Plenty of options to control</small></div><div class=panel-body><div ui-jp=plot ui-options="\r' + '\n' + '            [\r' + '\n' + '              { data: {{plot_line_1}}, points: { show: true, radius: 3}, lines: { show: true, lineWidth: 1} },\r' + '\n' + '              { data: {{plot_line_2}}, bars: { show: true, barWidth: 0.4, lineWidth: 1, fillColor: { colors: [{ opacity: 0.2 }, { opacity: 0.4}] } } }\r' + '\n' + '            ], \r' + '\n' + '            {\r' + '\n' + '              colors: [\'{{app.color.primary}}\', \'{{app.color.info}}\'],\r' + '\n' + '              series: { shadowSize: 3 },\r' + '\n' + '              xaxis: { show: true, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: true, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:240px></div></div></div></div><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class=font-bold>Lines</span> <small class="block text-muted">Simple usage</small></div><div class=panel-body><div ui-jp=plot ui-options="\r' + '\n' + '            [\r' + '\n' + '              {\r' + '\n' + '                data: {{plot_line}}, \r' + '\n' + '                points: { show: true, radius: 4, lineWidth: 3, fillColor: \'rgba(18,147,204,0.3)\'}, \r' + '\n' + '                lines:  { show: true, lineWidth: 0, fill: 0.5, fillColor: \'rgba(18,147,204,0.3)\' }, \r' + '\n' + '                color:\'#fff\'\r' + '\n' + '              }\r' + '\n' + '            ],\r' + '\n' + '            {\r' + '\n' + '              series: { shadowSize: 3 },\r' + '\n' + '              xaxis: { show: true, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: true, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:240px></div></div></div></div></div><div class=row><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class=font-bold>Bars</span> <small class="block text-muted">Attractive looks</small></div><div class=panel-body><div ui-jp=plot ui-options="\r' + '\n' + '            [\r' + '\n' + '              { data: {{plot_line}} },\r' + '\n' + '              { data: {{plot_line_2}} }\r' + '\n' + '            ], \r' + '\n' + '            {\r' + '\n' + '              bars: { show: true, fill: true,  barWidth: 0.3, lineWidth: 1, fillColor: { colors: [{ opacity: 0.8 }, { opacity: 1}] } },\r' + '\n' + '              colors: [\'{{app.color.info}}\',\'{{app.color.success}}\'],\r' + '\n' + '              series: { shadowSize: 3 },\r' + '\n' + '              xaxis: { show: true, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: true, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:240px></div></div></div></div><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class=font-bold>Order Bars</span> <small class="block text-muted">With orders</small></div><div class=panel-body><div ui-jp=plot ui-options="\r' + '\n' + '            [\r' + '\n' + '              { data: {{plot_line}} },\r' + '\n' + '              { data: {{plot_line_2}} }\r' + '\n' + '            ], \r' + '\n' + '            {\r' + '\n' + '              bars: { show: true, fill: true,  barWidth: 0.3, lineWidth: 1, order: 1, fillColor: { colors: [{ opacity: 0.5 }, { opacity: 0.9}] } },\r' + '\n' + '              colors: [\'{{app.color.primary}}\',\'{{app.color.info}}\'],\r' + '\n' + '              series: { shadowSize: 3 },\r' + '\n' + '              xaxis: { show: true, font: { color: \'#ccc\' }, position: \'bottom\' },\r' + '\n' + '              yaxis:{ show: true, font: { color: \'#ccc\' }},\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },\r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%x.0 is %y.4\',  defaultTheme: false, shifts: { x: 0, y: -40 } }\r' + '\n' + '            }\r' + '\n' + '          " style=height:240px></div></div></div></div><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class=font-bold>Pies</span> <small class="block text-muted">Interactive features</small></div><div class=panel-body><div ui-jp=plot ui-options="\r' + '\n' + '            {{plot_pie}},\r' + '\n' + '            {\r' + '\n' + '              series: { pie: { show: true, innerRadius: 0.6, stroke: { width: 3 }, label: { show: true, threshold: 0.05 } } },\r' + '\n' + '              colors: [\'{{app.color.primary}}\',\'{{app.color.info}}\'],\r' + '\n' + '              grid: { hoverable: true, clickable: true, borderWidth: 0, color: \'#ccc\' },   \r' + '\n' + '              tooltip: true,\r' + '\n' + '              tooltipOpts: { content: \'%s: %p.0%\' }\r' + '\n' + '            }\r' + '\n' + '          " style=height:240px></div></div></div></div></div><div class=row><div class=col-md-4><div class="panel no-border"><div class=panel-heading><span class=font-bold>Sparklines</span> <small class="block text-muted">Small inline charts</small></div><div class="panel-body p-v-lg"><span ng-init="data1=[70,30]" ui-jp=sparkline ui-options="{{data1}}, {type:\'pie\', height:18, sliceColors:[\'{{app.color.info}}\',\'#eaeeea\']}" class="sparkline inline"></span> <span ng-init="data2=[5,6,7,9,9,7,6,5,6,5,4,3,2,4,6,7]" ui-jp=sparkline ui-options="{{data2}}, {type:\'line\', height:18, width: \'auto\', lineWidth:1, valueSpots:{\'0:\':\'{{app.color.info}}\'}, lineColor:\'{{app.color.info}}\', spotColor:\'{{app.color.info}}\', fillColor:\'\', highlightLineColor:\'#fff\', spotRadius:0}"></span> <span ng-init="data5=[1,1,0,1,-1,-1,1,-1,0,0,1,1]" ui-jp=sparkline ui-options="{{data5}}, {type:\'tristate\', height:18, width: \'auto\', type: \'tristate\', colorMap: {\'-1\': \'{{app.color.info}}\', \'1\': \'{{app.color.primary}}\'}}"></span> <span ng-init="data3=[ 10,9,11,10,11,10,12,10,9,10,11,9,8 ]" ui-jp=sparkline ui-options="{{data3}}, {type:\'bar\', height:18, barWidth:4, barSpacing:2, barColor:\'{{app.color.info}}\'}">loading...</span> <span ng-init="data4 = [ [2, 8], [4, 6], [6, 4], [8, 2], [10, 0], [8, 2], [6, 4], [4, 6], [2,8] ]" ui-jp=sparkline ui-options="{{data4}}, {type:\'bar\', height:18, barWidth:4, barSpacing:2, stackedBarColor:[\'{{app.color.success}}\', \'{{app.color.light}}\']}"></span></div></div></div><div class=col-md-8><div class="panel no-border"><div class=panel-heading><span class=font-bold>Easypiecharts</span></div><div class=panel-body><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent: 75,\r' + '\n' + '                lineWidth: 3,\r' + '\n' + '                trackColor: \'{{app.color.light}}\',\r' + '\n' + '                barColor: \'{{app.color.primary}}\',\r' + '\n' + '                scaleColor: \'{{app.color.light}}\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\'\r' + '\n' + '              }"><div>75%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent: 45,\r' + '\n' + '                lineWidth: 2,\r' + '\n' + '                trackColor: \'#fff\',\r' + '\n' + '                barColor: \'{{app.color.info}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                animate: 3000\r' + '\n' + '              }"><div>45%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent: 50,\r' + '\n' + '                lineWidth: 1,\r' + '\n' + '                trackColor: \'{{app.color.light}}\',\r' + '\n' + '                barColor: \'{{app.color.success}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                rotate: 90\r' + '\n' + '              }"><div>50%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent: 20,\r' + '\n' + '                lineWidth: 5,\r' + '\n' + '                trackColor: \'#fff\',\r' + '\n' + '                barColor: \'{{app.color.info}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                color: \'{{app.color.light}}\'\r' + '\n' + '              }"><div>20%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent: 30,\r' + '\n' + '                lineWidth: 5,\r' + '\n' + '                trackColor: \'{{app.color.light}}\',\r' + '\n' + '                barColor: \'{{app.color.primary}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                color: \'{{app.color.info}}\'\r' + '\n' + '              }"><div class=text-white>30%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent:40,\r' + '\n' + '                lineWidth: 5,\r' + '\n' + '                trackColor: \'{{app.color.light}}\',\r' + '\n' + '                barColor: \'{{app.color.success}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                color: \'{{app.color.primary}}\',\r' + '\n' + '                animate: 6000\r' + '\n' + '              }"><div class=text-white>40%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent:80,\r' + '\n' + '                lineWidth: 5,\r' + '\n' + '                trackColor: \'#fff\',\r' + '\n' + '                barColor: \'{{app.color.light}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                color: \'{{app.color.success}}\'\r' + '\n' + '              }"><div class=text-white>80%</div></div></div><div class=inline><div ui-jp=easyPieChart ui-options="{\r' + '\n' + '                percent: 32,\r' + '\n' + '                lineWidth: 25,\r' + '\n' + '                trackColor: \'#fff\',\r' + '\n' + '                barColor: \'{{app.color.info}}\',\r' + '\n' + '                scaleColor: \'#fff\',\r' + '\n' + '                size: 60,\r' + '\n' + '                lineCap: \'butt\',\r' + '\n' + '                rotate: 30,\r' + '\n' + '                animate: 5000\r' + '\n' + '              }"><div class=text-black>32%</div></div></div></div></div></div></div></div>');
    $templateCache.put('views/ui/component/arrow.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Arrows</h3></div><div class=p-md><h5 class="no-margin font-bold">Postion</h5><p class=m-b-lg>[top, right, bottom, left]</p><div class="row text-center"><div class=col-sm-3><div class="panel b-a pos-rlt"><span class="arrow top b-white"></span><div class=panel-body>Arrow at the top</div></div></div><div class=col-sm-3><div class="panel b-a pos-rlt"><span class="arrow right b-white"></span><div class=panel-body>Arrow at the right</div></div></div><div class=col-sm-3><div class="panel b-a pos-rlt"><span class="arrow bottom b-white"></span><div class=panel-body>Arrow at the bottom</div></div></div><div class=col-sm-3><div class="panel b-a pos-rlt"><span class="arrow left b-white"></span><div class=panel-body>Arrow at the left</div></div></div></div><div class="row text-center"><div class=col-sm-3><div class=row><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow top pull-left b-white"></span><div class=panel-body>pull-left</div></div></div><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow top pull-right b-white"></span><div class=panel-body>pull-right</div></div></div></div></div><div class=col-sm-3><div class=row><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow right pull-top b-white"></span><div class=panel-body>pull-top</div></div></div><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow right pull-bottom b-white"></span><div class=panel-body>pull-bottom</div></div></div></div></div><div class=col-sm-3><div class=row><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow bottom pull-left b-white"></span><div class=panel-body>pull-left</div></div></div><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow bottom pull-right b-white"></span><div class=panel-body>pull-right</div></div></div></div></div><div class=col-sm-3><div class=row><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow left pull-top b-white"></span><div class=panel-body>pull-top</div></div></div><div class=col-xs-6><div class="panel b-a pos-rlt"><span class="arrow left pull-bottom b-white"></span><div class=panel-body>pull-bottom</div></div></div></div></div></div><h5 class="no-margin font-bold">Colors</h5><p class=m-b-lg>b-primary[primary, info, success, warning, danger, white, light]</p><div class="row text-center"><div class=col-sm-3><div class="panel bg-primary pos-rlt"><span class="arrow top b-primary"></span><div class=panel-body>b-primary</div></div></div><div class=col-sm-3><div class="panel bg-info pos-rlt"><span class="arrow right b-info"></span><div class=panel-body>b-info</div></div></div><div class=col-sm-3><div class="panel bg-success pos-rlt"><span class="arrow bottom b-success"></span><div class=panel-body>b-success</div></div></div><div class=col-sm-3><div class="panel bg-warning pos-rlt"><span class="arrow left b-warning"></span><div class=panel-body>b-warning</div></div></div></div><div class="row text-center"><div class=col-sm-3><div class="panel b-a bg-light pos-rlt"><span class="arrow top b-light"></span><div class=panel-body>b-light</div></div></div><div class=col-sm-3><div class="panel bg-dark pos-rlt"><span class="arrow right b-dark"></span><div class=panel-body>b-dark</div></div></div><div class=col-sm-3><div class="panel bg-black pos-rlt"><span class="arrow bottom b-black"></span><div class=panel-body>b-black</div></div></div><div class=col-sm-3><div class="panel bg-danger pos-rlt"><span class="arrow left b-danger"></span><div class=panel-body>b-danger</div></div></div></div><h5 class="no-margin m-b font-bold">Code</h5><div><code>&lt;span class="arrow left b-white pull-left">&lt;/span></code></div></div>');
    $templateCache.put('views/ui/component/badge-label.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Badges &amp; Labels</h3></div><div class=p-md><div class=row><div class=col-sm-6><h5 class="no-margin m-b">Badge Colors</h5><p><span class=badge>14</span> <span class="badge bg-primary">250</span> <span class="badge bg-info">6</span> <span class="badge bg-success">9</span> <span class="badge bg-warning">20</span> <span class="badge bg-danger">5</span> <span class="badge bg-dark">2</span> <span class="badge bg-black">8</span> <span class="badge bg-light">8</span> <span class="badge badge-black">6</span></p><h5 class="no-margin m-b m-t-lg">Size</h5><p><span class="badge badge-lg">8</span> <span class="badge bg-primary">50</span> <span class="badge badge-sm bg-success">6</span> <span class="badge badge-xs bg-danger">3</span></p><h5 class="no-margin m-b m-t-lg">With arrow</h5><p><span class="badge badge-lg bg-primary pos-rlt m-r-xs"><b class="arrow top b-primary pull-in"></b>5</span> <span class="badge bg-success pos-rlt m-r-xs"><b class="arrow right b-success pull-in"></b>9</span> <span class="badge bg-info pos-rlt m-r-xs"><b class="arrow bottom b-info pull-in"></b>10</span> <span class="badge bg-dark pos-rlt m-r-xs"><b class="arrow left b-dark pull-in"></b>2</span></p><h5 class="no-margin m-b m-t-lg">Usage</h5><div class=m-b-lg><button class="btn m-v-xs btn-default">Notifications <b class="badge bg-info m-l-xs">23</b></button> <button class="btn m-v-xs btn-primary">UI Kits <b class="badge m-l-xs">6</b></button> <button class="btn m-v-xs btn-info">Components <b class="badge m-l-xs">8</b></button> <button class="btn m-v-xs btn-success">Pages <b class="badge m-l-xs">4</b></button> <button class="btn m-v-xs btn-sm btn-dark">Dark <b class="badge badge-sm bg-warning m-l-xs">7</b></button> <button class="btn m-v-xs btn-xs btn-default">Default <b class="badge badge-xs m-l-xs">23</b></button></div><div class=m-b><i class="fa fa-bell text-lg"></i><b class="badge bg-danger up">3</b> <i class="fa fa-bell-o m-l-sm"></i><b class="badge badge-xs bg-success up">5</b></div><ul class="nav nav-lines m-b b-b" ui-nav><li class=active><a href>Pages</a></li><li><a href><span>Components</span> <span class="badge bg-warning">2</span></a></li><li><a href>UI Kits</a></li></ul><ul class="nav nav-sm nav-pills m-b" ui-nav><li class=active><a href>Pages</a></li><li><a href>Components <span class="badge bg-success badge-sm">2</span></a></li><li><a href>UI Kits</a></li></ul></div><div class=col-sm-6><h5 class="no-margin m-b">Label Colors</h5><p><span class=label>A</span> <span class="label bg-primary">B</span> <span class="label bg-info">C</span> <span class="label bg-success">D</span> <span class="label bg-warning">E</span> <span class="label bg-danger">F</span> <span class="label bg-dark">G</span> <span class="label bg-black">H</span> <span class="label bg-light">J</span> <span class="label label-black">J</span></p><h5 class="no-margin m-b m-t-lg">Size</h5><p><span class="label label-lg">A</span> <span class="label bg-primary">B</span> <span class="label label-sm bg-success">C</span> <span class="label label-xs bg-danger">D</span></p><h5 class="no-margin m-b m-t-lg">With arrow</h5><p><span class="label label-lg bg-primary pos-rlt m-r-xs"><b class="arrow top b-primary"></b>NEW</span> <span class="label bg-success pos-rlt m-r-xs"><b class="arrow right b-success pull-in"></b>SUCCESS</span> <span class="label bg-info pos-rlt m-r-xs"><b class="arrow bottom b-info pull-in"></b>INFO</span> <span class="label bg-dark pos-rlt m-r-xs"><b class="arrow left b-dark pull-in"></b>DARK</span></p><h5 class="no-margin m-b m-t-lg">Usage</h5><div class=m-b-lg><span class="label bg-success pos-rlt m-r-xs"><b class="arrow right b-success pull-in"></b>Tags</span> <a href class=m-h-xs>Angular</a> <a href class=m-h-xs>Bootstrap</a> <a href class=m-h-xs>Web</a> <a href class=m-h-xs>App</a></div></div></div></div>');
    $templateCache.put('views/ui/component/button.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Buttons</h3></div><div class=p-md><div class=row><div class=col-sm-6><h5 class="no-margin m-b font-bold">Colors</h5><p class="m-b btn-groups"><button class="btn w-xs btn-default">Default</button> <button class="btn w-xs btn-primary">Primary</button> <button class="btn w-xs btn-info">Info</button> <button class="btn w-xs btn-success">Success</button> <button class="btn w-xs btn-warning">Warning</button> <button class="btn w-xs btn-danger">Danger</button> <button class="btn w-xs btn-dark">Dark</button> <button class="btn w-xs btn-black">Black</button> <button class="btn w-xs btn-light">Light</button></p><h5 class="no-margin m-b font-bold">Size</h5><p class=m-b><button class="btn btn-xs btn-default">btn-xs</button> <button class="btn btn-sm btn-default">btn-sm</button> <button class="btn btn-default">btn</button> <button class="btn btn-lg btn-default">btn-lg</button></p><h5 class="no-margin m-b font-bold">Rounded</h5><p class=m-b><button class="btn btn-rounded btn-default">btn-rounded</button> <button class="btn btn-rounded btn-default p-h-md">More padding</button></p><h5 class="no-margin m-b font-bold">Stroke</h5><p class=btn-groups><button class="btn btn-rounded btn-stroke btn-primary">btn-stroke</button> <button class="btn btn-rounded btn-stroke btn-info">btn-info</button> <button class="btn btn-rounded btn-stroke btn-success">btn-success</button> <button class="btn btn-rounded btn-stroke btn-warning">btn-warning</button> <button class="btn btn-rounded btn-stroke btn-danger">btn-danger</button> <button class="btn btn-rounded btn-stroke btn-dark">btn-dark</button> <button class="btn btn-rounded btn-stroke btn-primary b-2x">b-2x</button> <button class="btn btn-rounded btn-stroke btn-info no-border">no-border</button></p><h5 class="no-margin m-b font-bold">Addon</h5><p class="m-b btn-groups"><button class="btn btn-addon btn-primary"><i class="fa fa-plus"></i>btn-addon</button> <button class="btn btn-addon btn-default"><i class="fa fa-cloud-upload"></i>Upload</button><br><button class="btn btn-sm btn-addon btn-info"><i class="fa fa-cloud-download"></i>Download</button> <button class="btn btn-lg btn-addon btn-default"><i class="fa fa-play"></i>Play</button></p><h5 class="no-margin m-b font-bold">Icon</h5><p class=m-b><button class="btn btn-icon btn-default"><i class="fa fa-plus"></i></button> <button class="btn btn-icon btn-rounded btn-info"><i class="fa fa-twitter"></i></button> <button class="btn btn-icon btn-rounded btn-danger"><i class="fa fa-google-plus"></i></button></p></div><div class=col-sm-6><h5 class="no-margin m-b font-bold">Groups</h5><div class="btn-group m-b"><button type=button class="btn btn-stroke btn-info">Left</button> <button type=button class="btn btn-stroke btn-info">Middle</button> <button type=button class="btn btn-stroke btn-info">Right</button></div><p>Vertical</p><div class="btn-group-vertical m-b"><button type=button class="btn btn-default">Top</button> <button type=button class="btn btn-default">Middle</button> <button type=button class="btn btn-default">Bottom</button></div><p>Nested</p><script type=text/ng-template id=dropdown><ul class="dropdown-menu">\r' + '\n' + '          <li><a href>Action</a></li>\r' + '\n' + '          <li><a href>Another action</a></li>\r' + '\n' + '          <li><a href>More</a></li>\r' + '\n' + '        </ul></script><div class="btn-group m-b"><button type=button class="btn btn-default">1</button> <button type=button class="btn btn-info">2</button> <button type=button class="btn btn-default">3</button><div class="btn-group dropdown"><button type=button class="btn btn-default" bs-dropdown=dropdown data-animation=am-fade-and-slide-top data-template=dropdown>Dropdown <span class=caret></span></button></div></div><p>Justified</p><div class="btn-group btn-group-justified m-b"><a href class="btn btn-rounded btn-stroke btn-primary">Left</a> <a href class="btn btn-rounded btn-stroke btn-primary">Middle</a> <a href class="btn btn-rounded btn-stroke btn-primary">Right</a></div><p>Multiple</p><div class="btn-toolbar m-b"><div class=btn-group><button type=button class="btn btn-default">1</button> <button type=button class="btn btn-default">2</button> <button type=button class="btn btn-default active">3</button> <button type=button class="btn btn-default">4</button></div><div class=btn-group><button type=button class="btn btn-default">5</button> <button type=button class="btn btn-default">6</button> <button type=button class="btn btn-default">7</button></div><div class=btn-group><button type=button class="btn btn-default">8</button></div></div><h5 class="no-margin m-b font-bold">App</h5><div class=btn-groups><a href class="text-sm btn btn-lg btn-rounded btn-stroke btn-info m-r"><i class="fa fa-apple fa-3x pull-left"></i> <span class="block clear text-left m-v-xs">Available on the <b class="text-lg block font-bold">App Store</b></span></a> <a href class="text-sm btn btn-lg btn-rounded btn-stroke btn-success"><i class="fa fa-android fa-3x pull-left"></i> <span class="block clear text-left m-v-xs">Get it on <b class="text-lg block font-bold">Google Play</b></span></a></div></div></div></div>');
    $templateCache.put('views/ui/component/color.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Colors</h3></div><div class=p-md><h5 class="no-margin m-b font-bold">Background options</h5><div class="row row-sm m-b"><div class=col-md-6><div class="row row-sm"><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-primary"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-primary</div></div></div><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-info"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-info</div></div></div><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-success"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-success</div></div></div><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-warning"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-warning</div></div></div></div></div><div class=col-md-6><div class="row row-sm"><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-light"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-light</div></div></div><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-dark"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-dark</div></div></div><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-black"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-black</div></div></div><div class="col-xs-6 col-sm-3"><div class=panel><div class="box bg-danger"><div class="box-col lt"></div><div class="box-col p-v-md"></div><div class="box-col dk"></div></div><div class="panel-body text-center">bg-danger</div></div></div></div></div></div><h5 class="no-margin font-bold">Border options</h5><p>color: b-t[top, right, bottom, left]-primary[primary, info, success, warning, danger, dark, black]<br>width: b-t[top, right, bottom, left]-2x[2x, 3x, 4x, 5x]</p><div class=m-b><div class="panel p r-3x b-t-primary inline">b-t-primary</div><div class="panel p r-3x b-r-info inline">b-r-info</div><div class="panel p r-3x b-b-success inline">b-b-success</div><div class="panel p r-3x b-l-warning inline">b-l-warning</div><div class="panel p r-3x b-t-dark b-t-2x inline">b-t-2x</div><div class="panel p r-3x b-r-black b-r-3x inline">b-r-3x</div><div class="panel p r-3x b-b-info b-b-4x inline">b-b-4x</div><div class="panel p r-3x b-l-success b-l-5x inline">b-l-5x</div></div><h5 class="no-margin font-bold">Text options</h5><p>text-primary[primary, info, success, warning, danger][-lt[lt, dk]]</p><div class=m-b-lg><span class="text-primary m-r-xs">text-primary</span><span class="text-info-lt m-r-xs">text-info-lt</span><span class=text-success-dk>text-success-dk</span></div><h5 class="no-margin m-b font-bold">Usage</h5><div class=row><div class=col-sm-4><div class="panel no-border bg-primary"><div class="panel-heading lt text-lt"><span class=pull-right>60%</span> Total Earnings</div><div class="progress progress-xxs no-margin no-radius dk"><div class="progress-bar bg-info lt" style=width:60%></div></div><div class="panel-body p-v-md"><div class="pull-left pull-none-sm p-h text-center m-r m-v-xs"><i class="fa fa-dollar fa-4x text-muted"></i></div><div class=clear><div class="text-2x font-bold text-lt">432,000</div><small class=text-dk>Caculated in 19:30 Thu</small></div></div></div></div><div class=col-sm-4><div class="panel no-border bg-success"><div class="panel-heading lt text-lt"><span class=pull-right>50%</span> New Visits</div><div class="progress progress-xxs no-margin no-radius dk"><div class="progress-bar bg-light" style=width:50%></div></div><div class="panel-body p-v-md"><div class="pull-left pull-none-sm p-h text-center m-r m-v-xs"><i class="fa fa-globe fa-4x text-lt"></i></div><div class=clear><div class="text-2x font-bold text-lt">386,000</div><small class=text-dk>Peaked at 14:30 Mon</small></div></div></div></div><div class=col-sm-4><div class="panel b-a bg-light dk"><div class="panel-heading bg text-lt"><span class=pull-right>80%</span> Helpdesk</div><div class="progress progress-xxs no-margin no-radius bg-white"><div class="progress-bar bg-info no-radius" style=width:80%></div></div><div class="panel-body p-v-md"><div class="pull-left pull-none-sm p-h text-center r r-2x lt m-r m-v-xs m-l-xs"><i class="fa fa-question fa-4x text-muted"></i></div><div class=clear><div class="text-2x font-bold text-black">96,000</div><small class=text-dk>20% questions not answered</small></div></div></div></div></div><div class=row><div class=col-sm-4><div class="panel no-border bg-info"><div class="panel-heading lt text-lt">Revenue<div class=text-muted>Lorem ipsum dolor sit amet.</div></div><div class="progress progress-xxs no-margin no-radius dk"><div class="progress-bar bg-white" style=width:60%></div></div><div class="panel-body p-v-md"><div class="pull-right pull-none-sm p-h text-center m-r m-v-xs"><i class="fa fa-dollar fa-4x text-info-dk"></i></div><div class="clear m-l"><div class="text-2x font-bold text-lt">60%</div><small class=text-dk>lectus arcu malesuada sem</small></div></div></div></div><div class=col-sm-4><div class="panel no-border bg-warning dk"><div class="panel-heading bg text-lt">Affiliate<div class=text-muted>Phasellus at ultricies neque.</div></div><div class="progress progress-xxs no-margin no-radius dk"><div class="progress-bar bg-white" style=width:75%></div></div><div class="panel-body p-v-md"><div class="pull-right pull-none-sm p-h text-center m-r m-v-xs"><i class="fa fa-dollar fa-4x text-warning-lt"></i></div><div class="clear m-l"><div class="text-2x font-bold text-lt">75%</div><small class=text-dk>Donec eleifend condimentum</small></div></div></div></div><div class=col-sm-4><div class="panel no-border bg-black"><div class="panel-heading lt text-lt">Earnings<div class=text-muted>Mauris convallis mauris</div></div><div class="progress progress-xxs no-margin no-radius dk"><div class="progress-bar bg-white" style=width:55%></div></div><div class="panel-body p-v-md"><div class="pull-right pull-none-sm p-h text-center m-r m-v-xs"><i class="fa fa-dollar fa-4x text-success-lt"></i></div><div class="clear m-l"><div class="text-2x font-bold text-lt">55%</div><small class=text-muted>Dapibus porta quam lacus eu</small></div></div></div></div></div><div class=row><div class=col-sm-4><div class="panel b-info"><div class="panel-heading lt text-lt"><span class=pull-right>30%</span> Comments</div><div class="progress progress-xxs no-margin no-radius dk"><div class="progress-bar bg-info lt" style=width:30%></div></div><div class="panel-body p-v-md"><div class="pull-left pull-none-sm p-h text-center m-r m-v-xs"><i class="glyphicon glyphicon-comment text-4x text-muted"></i></div><div class=clear><div class="text-2x font-bold text-black">67,000</div><small class=text-dk>Some text here</small></div></div></div></div><div class=col-sm-4><div class="panel b-success"><div class="panel-heading lt text-lt"><span class=pull-right>45%</span> Transaction</div><div class="progress progress-xxs no-margin no-radius"><div class="progress-bar bg-success" style=width:50%></div></div><div class="panel-body p-v-md"><div class="pull-left pull-none-sm p-h text-center m-r m-v-xs"><i class="glyphicon glyphicon-random text-4x text-muted"></i></div><div class=clear><div class="text-2x font-bold text-black">145,000</div><small class=text-dk>Total transaction made</small></div></div></div></div><div class=col-sm-4><div class="panel b-a"><div class="panel-heading bg text-lt"><span class=pull-right>10%</span> Tags</div><div class="progress progress-xxs no-margin no-radius bg-white"><div class="progress-bar bg-light no-radius" style=width:10%></div></div><div class="panel-body p-v-md"><div class="pull-left pull-none-sm p-h text-center r r-3x lt m-r m-v-xs m-l-xs"><i class="glyphicon glyphicon-tag text-4x text-muted"></i></div><div class=clear><div class="text-2x font-bold text-black">4,530</div><small class=text-dk>10% of the posts are tagged</small></div></div></div></div></div></div>');
    $templateCache.put('views/ui/component/grid.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Grids</h3></div><div class=p-md><h5 class="no-margin m-b">Stacked-to-horizontal</h5><div class=row><div class=col-md-2><div class="panel p">.col-md-2</div></div><div class=col-md-2><div class="panel p">.col-md-2</div></div><div class=col-md-2><div class="panel p">.col-md-2</div></div><div class=col-md-2><div class="panel p">.col-md-2</div></div><div class=col-md-2><div class="panel p">.col-md-2</div></div><div class=col-md-2><div class="panel p">.col-md-2</div></div></div><div class=row><div class=col-md-8><div class="panel p">.col-md-8</div></div><div class=col-md-4><div class="panel p">.col-md-4</div></div></div><div class=row><div class=col-md-4><div class="panel p">.col-md-4</div></div><div class=col-md-4><div class="panel p">.col-md-4</div></div><div class=col-md-4><div class="panel p">.col-md-4</div></div></div><div class=row><div class=col-md-6><div class="panel p">.col-md-6</div></div><div class=col-md-6><div class="panel p">.col-md-6</div></div></div><h5 class="no-margin m-b">Mobile and desktop</h5><div class=row><div class="col-xs-12 col-md-8"><div class="panel p">.col-xs-12 .col-md-8</div></div><div class="col-xs-6 col-md-4"><div class="panel p">.col-xs-6 .col-md-4</div></div></div><div class=row><div class="col-xs-6 col-md-4"><div class="panel p">.col-xs-6 .col-md-4</div></div><div class="col-xs-6 col-md-4"><div class="panel p">.col-xs-6 .col-md-4</div></div><div class="col-xs-6 col-md-4"><div class="panel p">.col-xs-6 .col-md-4</div></div></div><div class=row><div class=col-xs-6><div class="panel p">.col-xs-6</div></div><div class=col-xs-6><div class="panel p">.col-xs-6</div></div></div><h5 class="no-margin m-b">Mobile, tablet, desktops</h5><div class=row><div class="col-xs-12 col-sm-6 col-md-8"><div class="panel p">.col-xs-12 .col-sm-6 .col-md-8</div></div><div class="col-xs-6 col-md-4"><div class="panel p">.col-xs-6 .col-md-4</div></div></div><div class=row><div class="col-xs-6 col-sm-4"><div class="panel p">.col-xs-6 .col-sm-4</div></div><div class="col-xs-6 col-sm-4"><div class="panel p">.col-xs-6 .col-sm-4</div></div><div class="clearfix visible-xs-block"></div><div class="col-xs-6 col-sm-4"><div class="panel p">.col-xs-6 .col-sm-4</div></div></div><h5 class="no-margin m-b">Offsetting columns</h5><div class=row><div class=col-md-4><div class="panel p">.col-md-4</div></div><div class="col-md-4 col-md-offset-4"><div class="panel p">.col-md-4 .col-md-offset-4</div></div></div><div class=row><div class="col-md-3 col-md-offset-3"><div class="panel p">.col-md-3 .col-md-offset-3</div></div><div class="col-md-3 col-md-offset-3"><div class="panel p">.col-md-3 .col-md-offset-3</div></div></div><div class=row><div class="col-md-6 col-md-offset-3"><div class="panel p">.col-md-6 .col-md-offset-3</div></div></div><h5 class="no-margin m-b">Column ordering</h5><div class=row><div class="col-md-9 col-md-push-3"><div class="panel p">.col-md-9 .col-md-push-3</div></div><div class="col-md-3 col-md-pull-9"><div class="panel p">.col-md-3 .col-md-pull-9</div></div></div><h3>Grid options</h3><p>See how aspects of the Bootstrap grid system work across multiple devices with a handy table.</p><div class=table-responsive><table class="table table-bordered table-striped bg-white"><thead><tr><th></th><th>Extra small devices <small>Phones (&lt;768px)</small></th><th>Small devices <small>Tablets (\u2265768px)</small></th><th>Medium devices <small>Desktops (\u2265992px)</small></th><th>Large devices <small>Desktops (\u22651200px)</small></th></tr></thead><tbody><tr><th class=text-nowrap>Grid behavior</th><td>Horizontal at all times</td><td colspan=3>Collapsed to start, horizontal above breakpoints</td></tr><tr><th class=text-nowrap>Container width</th><td>None (auto)</td><td>750px</td><td>970px</td><td>1170px</td></tr><tr><th class=text-nowrap>Class prefix</th><td><code>.col-xs-</code></td><td><code>.col-sm-</code></td><td><code>.col-md-</code></td><td><code>.col-lg-</code></td></tr><tr><th class=text-nowrap># of columns</th><td colspan=4>12</td></tr><tr><th class=text-nowrap>Column width</th><td class=text-muted>Auto</td><td>~62px</td><td>~81px</td><td>~97px</td></tr><tr><th class=text-nowrap>Gutter width</th><td colspan=4>30px (15px on each side of a column)</td></tr><tr><th class=text-nowrap>Nestable</th><td colspan=4>Yes</td></tr><tr><th class=text-nowrap>Offsets</th><td colspan=4>Yes</td></tr><tr><th class=text-nowrap>Column ordering</th><td colspan=4>Yes</td></tr></tbody></table></div></div>');
    $templateCache.put('views/ui/component/icon.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Icons</h3></div><div class=p-md><p>Turn your favorite font icons to metro style</p><div class=m-v-lg><i class="ui-icon fa fa-adjust"></i> <i class="ui-icon fa fa-anchor b-primary text-primary"></i> <i class="ui-icon fa fa-archive ui-iconnfo text-primary"></i> <i class="ui-icon fa fa-area-chart b-success text-success"></i> <i class="ui-icon fa fa-arrows b-warning text-warning"></i> <i class="ui-icon fa fa-arrows-h b-danger text-danger"></i> <i class="ui-icon fa fa-arrows-v ui-iconnverse text-inverse"></i> <i class="ui-icon fa fa-asterisk b-2x text-lg"></i> <i class="ui-icon fa fa-at ui-iconnfo text-xl bg-info"></i> <i class="ui-icon ti-settings text-2x bg-success"></i></div><h3 class="no-margin m-b">Themify Icons</h3><div><h4>Arrows &amp; Direction Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-up"></i><span>ti-arrow-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-right"></i><span>ti-arrow-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-left"></i><span>ti-arrow-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-down"></i><span>ti-arrow-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-top-right"></i><span>ti-arrow-top-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-top-left"></i><span>ti-arrow-top-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-fullscreen"></i><span>ti-fullscreen</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrows-vertical"></i><span>ti-arrows-vertical</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrows-horizontal"></i><span>ti-arrows-horizontal</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrows-corner"></i><span>ti-arrows-corner</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shift-right"></i><span>ti-shift-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shift-left"></i><span>ti-shift-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-exchange-vertical"></i><span>ti-exchange-vertical</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-circle-up"></i><span>ti-arrow-circle-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-circle-right"></i><span>ti-arrow-circle-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-circle-left"></i><span>ti-arrow-circle-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-arrow-circle-down"></i><span>ti-arrow-circle-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-up"></i><span>ti-angle-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-right"></i><span>ti-angle-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-left"></i><span>ti-angle-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-down"></i><span>ti-angle-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-double-up"></i><span>ti-angle-double-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-double-right"></i><span>ti-angle-double-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-double-left"></i><span>ti-angle-double-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-angle-double-down"></i><span>ti-angle-double-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-split-v"></i><span>ti-split-v</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-split-v-alt"></i><span>ti-split-v-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-split-h"></i><span>ti-split-h</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-direction"></i><span>ti-direction</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-direction-alt"></i><span>ti-direction-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-back-right"></i><span>ti-back-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-back-left"></i><span>ti-back-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-point-up"></i><span>ti-hand-point-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-point-right"></i><span>ti-hand-point-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-point-left"></i><span>ti-hand-point-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-point-down"></i><span>ti-hand-point-down</span></div></div><h4>Web App Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon ti-wand"></i><span>ti-wand</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-email"></i><span>ti-email</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-user"></i><span>ti-user</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-unlock"></i><span>ti-unlock</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-lock"></i><span>ti-lock</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-key"></i><span>ti-key</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-trash"></i><span>ti-trash</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-target"></i><span>ti-target</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-tag"></i><span>ti-tag</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-desktop"></i><span>ti-desktop</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-tablet"></i><span>ti-tablet</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-mobile"></i><span>ti-mobile</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-star"></i><span>ti-star</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-spray"></i><span>ti-spray</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-signal"></i><span>ti-signal</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shopping-cart"></i><span>ti-shopping-cart</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shopping-cart-full"></i><span>ti-shopping-cart-full</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-settings"></i><span>ti-settings</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-search"></i><span>ti-search</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-zoom-in"></i><span>ti-zoom-in</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-zoom-out"></i><span>ti-zoom-out</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-cut"></i><span>ti-cut</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-slice"></i><span>ti-slice</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-marker"></i><span>ti-marker</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-marker-alt"></i><span>ti-marker-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pencil"></i><span>ti-pencil</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pencil-alt"></i><span>ti-pencil-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pencil-alt2"></i><span>ti-pencil-alt2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-ruler-pencil"></i><span>ti-ruler-pencil</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-ruler"></i><span>ti-ruler</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-ruler-alt"></i><span>ti-ruler-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bookmark"></i><span>ti-bookmark</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bookmark-alt"></i><span>ti-bookmark-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-paint-bucket"></i><span>ti-paint-bucket</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-na"></i><span>ti-na</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-plus"></i><span>ti-plus</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-minus"></i><span>ti-minus</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-close"></i><span>ti-close</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-medall"></i><span>ti-medall</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-medall-alt"></i><span>ti-medall-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layers"></i><span>ti-layers</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layers-alt"></i><span>ti-layers-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-image"></i><span>ti-image</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-gallery"></i><span>ti-gallery</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-heart"></i><span>ti-heart</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-heart-broken"></i><span>ti-heart-broken</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-stop"></i><span>ti-hand-stop</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-open"></i><span>ti-hand-open</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hand-drag"></i><span>ti-hand-drag</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-flag"></i><span>ti-flag</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-flag-alt"></i><span>ti-flag-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-flag-alt-2"></i><span>ti-flag-alt-2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-eye"></i><span>ti-eye</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-cup"></i><span>ti-cup</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-crown"></i><span>ti-crown</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-thought"></i><span>ti-thought</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-comments"></i><span>ti-comments</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-comment"></i><span>ti-comment</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-comment-alt"></i><span>ti-comment-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-clip"></i><span>ti-clip</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-check"></i><span>ti-check</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-check-box"></i><span>ti-check-box</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-camera"></i><span>ti-camera</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-brush"></i><span>ti-brush</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-brush-alt"></i><span>ti-brush-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-paint-roller"></i><span>ti-paint-roller</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-palette"></i><span>ti-palette</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-briefcase"></i><span>ti-briefcase</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bag"></i><span>ti-bag</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bolt"></i><span>ti-bolt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bolt-alt"></i><span>ti-bolt-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-blackboard"></i><span>ti-blackboard</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-zip"></i><span>ti-zip</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-world"></i><span>ti-world</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-wheelchair"></i><span>ti-wheelchair</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-car"></i><span>ti-car</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-truck"></i><span>ti-truck</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-timer"></i><span>ti-timer</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-ticket"></i><span>ti-ticket</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-thumb-up"></i><span>ti-thumb-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-thumb-down"></i><span>ti-thumb-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shine"></i><span>ti-shine</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shield"></i><span>ti-shield</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pulse"></i><span>ti-pulse</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-printer"></i><span>ti-printer</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-power-off"></i><span>ti-power-off</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-plug"></i><span>ti-plug</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pie-chart"></i><span>ti-pie-chart</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-panel"></i><span>ti-panel</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-package"></i><span>ti-package</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-music"></i><span>ti-music</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-music-alt"></i><span>ti-music-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-mouse"></i><span>ti-mouse</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-mouse-alt"></i><span>ti-mouse-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-microphone"></i><span>ti-microphone</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-menu"></i><span>ti-menu</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-menu-alt"></i><span>ti-menu-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-map"></i><span>ti-map</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-map-alt"></i><span>ti-map-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-light-bulb"></i><span>ti-light-bulb</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-infinite"></i><span>ti-infinite</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-id-badge"></i><span>ti-id-badge</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-hummer"></i><span>ti-hummer</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-home"></i><span>ti-home</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-help"></i><span>ti-help</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-help-alt"></i><span>ti-help-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-info"></i><span>ti-info</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-info-alt"></i><span>ti-info-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-alert"></i><span>ti-alert</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-headphone"></i><span>ti-headphone</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-harddrives"></i><span>ti-harddrives</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-harddrive"></i><span>ti-harddrive</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-server"></i><span>ti-server</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-gift"></i><span>ti-gift</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-game"></i><span>ti-game</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-filter"></i><span>ti-filter</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-envelope"></i><span>ti-envelope</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-dashboard"></i><span>ti-dashboard</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-cloud"></i><span>ti-cloud</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-cloud-up"></i><span>ti-cloud-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-cloud-down"></i><span>ti-cloud-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-clipboard"></i><span>ti-clipboard</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-notepad"></i><span>ti-notepad</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-book"></i><span>ti-book</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-calendar"></i><span>ti-calendar</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bell"></i><span>ti-bell</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-basketball"></i><span>ti-basketball</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bar-chart"></i><span>ti-bar-chart</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-bar-chart-alt"></i><span>ti-bar-chart-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-stats-up"></i><span>ti-stats-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-stats-down"></i><span>ti-stats-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-archive"></i><span>ti-archive</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-anchor"></i><span>ti-anchor</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-alarm-clock"></i><span>ti-alarm-clock</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-agenda"></i><span>ti-agenda</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-write"></i><span>ti-write</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-window"></i><span>ti-window</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-wallet"></i><span>ti-wallet</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-money"></i><span>ti-money</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-video-clapper"></i><span>ti-video-clapper</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-video-camera"></i><span>ti-video-camera</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-vector"></i><span>ti-vector</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-support"></i><span>ti-support</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-stamp"></i><span>ti-stamp</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-ruler-alt-2"></i><span>ti-ruler-alt-2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-receipt"></i><span>ti-receipt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pin"></i><span>ti-pin</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-location-pin"></i><span>ti-location-pin</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-location-arrow"></i><span>ti-location-arrow</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pin2"></i><span>ti-pin2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pin-alt"></i><span>ti-pin-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-microphone-alt"></i><span>ti-microphone-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-magnet"></i><span>ti-magnet</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-ink-pen"></i><span>ti-ink-pen</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-headphone-alt"></i><span>ti-headphone-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-face-smile"></i><span>ti-face-smile</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-face-sad"></i><span>ti-face-sad</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-credit-card"></i><span>ti-credit-card</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-comments-smiley"></i><span>ti-comments-smiley</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-time"></i><span>ti-time</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-share"></i><span>ti-share</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-share-alt"></i><span>ti-share-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-rocket"></i><span>ti-rocket</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-new-window"></i><span>ti-new-window</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-link"></i><span>ti-link</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-unlink"></i><span>ti-unlink</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-files"></i><span>ti-files</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-file"></i><span>ti-file</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-folder"></i><span>ti-folder</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-save"></i><span>ti-save</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-save-alt"></i><span>ti-save-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-eraser"></i><span>ti-eraser</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-reload"></i><span>ti-reload</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-import"></i><span>ti-import</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-export"></i><span>ti-export</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-download"></i><span>ti-download</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-upload"></i><span>ti-upload</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-more"></i><span>ti-more</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-more-alt"></i><span>ti-more-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shift-right-alt"></i><span>ti-shift-right-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-shift-left-alt"></i><span>ti-shift-left-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-move"></i><span>ti-move</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-announcement"></i><span>ti-announcement</span></div></div><h4>Control Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-stop"></i><span>ti-control-stop</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-pause"></i><span>ti-control-pause</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-play"></i><span>ti-control-play</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-skip-forward"></i><span>ti-control-skip-forward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-skip-backward"></i><span>ti-control-skip-backward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-shuffle"></i><span>ti-control-shuffle</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-forward"></i><span>ti-control-forward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-backward"></i><span>ti-control-backward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-record"></i><span>ti-control-record</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-control-eject"></i><span>ti-control-eject</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-loop"></i><span>ti-loop</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-volume"></i><span>ti-volume</span></div></div><h4>Text Editor Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon ti-paragraph"></i><span>ti-paragraph</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-uppercase"></i><span>ti-uppercase</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-underline"></i><span>ti-underline</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-text"></i><span>ti-text</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-smallcap"></i><span>ti-smallcap</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-Italic"></i><span>ti-Italic</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-align-right"></i><span>ti-align-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-align-left"></i><span>ti-align-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-align-justify"></i><span>ti-align-justify</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-align-center"></i><span>ti-align-center</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-list"></i><span>ti-list</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-list-ol"></i><span>ti-list-ol</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-quote-right"></i><span>ti-quote-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-quote-left"></i><span>ti-quote-left</span></div></div><h4>Layout Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon ti-widgetized"></i><span>ti-widgetized</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-widget"></i><span>ti-widget</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-widget-alt"></i><span>ti-widget-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-view-list"></i><span>ti-view-list</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-view-list-alt"></i><span>ti-view-list-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-view-grid"></i><span>ti-view-grid</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout"></i><span>ti-layout</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-sidebar-2"></i><span>ti-layout-sidebar-2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid4-alt"></i><span>ti-layout-grid4-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid3-alt"></i><span>ti-layout-grid3-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid2-alt"></i><span>ti-layout-grid2-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-column4-alt"></i><span>ti-layout-column4-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-column3-alt"></i><span>ti-layout-column3-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-column2-alt"></i><span>ti-layout-column2-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-width-full"></i><span>ti-layout-width-full</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-width-default"></i><span>ti-layout-width-default</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-width-default-alt"></i><span>ti-layout-width-default-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-tab"></i><span>ti-layout-tab</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-tab-window"></i><span>ti-layout-tab-window</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-tab-v"></i><span>ti-layout-tab-v</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-tab-min"></i><span>ti-layout-tab-min</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-slider"></i><span>ti-layout-slider</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-slider-alt"></i><span>ti-layout-slider-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-sidebar-right"></i><span>ti-layout-sidebar-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-sidebar-none"></i><span>ti-layout-sidebar-none</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-sidebar-left"></i><span>ti-layout-sidebar-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-placeholder"></i><span>ti-layout-placeholder</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-menu"></i><span>ti-layout-menu</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-menu-v"></i><span>ti-layout-menu-v</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-menu-separated"></i><span>ti-layout-menu-separated</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-menu-full"></i><span>ti-layout-menu-full</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-right-72"></i><span>ti-layout-media-right-72</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-right-43"></i><span>ti-layout-media-right-43</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-overlay"></i><span>ti-layout-media-overlay</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-overlay-alt"></i><span>ti-layout-media-overlay-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-overlay-alt-2"></i><span>ti-layout-media-overlay-alt-2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-left-70"></i><span>ti-layout-media-left-70</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-left-42"></i><span>ti-layout-media-left-42</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-center-71"></i><span>ti-layout-media-center-71</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-media-center-44"></i><span>ti-layout-media-center-44</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-list-thumb"></i><span>ti-layout-list-thumb</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-list-thumb-alt"></i><span>ti-layout-list-thumb-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-list-post"></i><span>ti-layout-list-post</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-list-large-image"></i><span>ti-layout-list-large-image</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-line-solid"></i><span>ti-layout-line-solid</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid4"></i><span>ti-layout-grid4</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid3"></i><span>ti-layout-grid3</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid2"></i><span>ti-layout-grid2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-grid2-thumb"></i><span>ti-layout-grid2-thumb</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-cta-right"></i><span>ti-layout-cta-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-cta-left"></i><span>ti-layout-cta-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-cta-center"></i><span>ti-layout-cta-center</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-cta-btn-right"></i><span>ti-layout-cta-btn-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-cta-btn-left"></i><span>ti-layout-cta-btn-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-column4"></i><span>ti-layout-column4</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-column3"></i><span>ti-layout-column3</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-layout-column2"></i><span>ti-layout-column2</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-line-double"></i><span>ti-line-double</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-line-dotted"></i><span>ti-line-dotted</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-line-dashed"></i><span>ti-line-dashed</span></div></div><h4>Brand Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon ti-flickr"></i><span>ti-flickr</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-flickr-alt"></i><span>ti-flickr-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-instagram"></i><span>ti-instagram</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-google"></i><span>ti-google</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-github"></i><span>ti-github</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-facebook"></i><span>ti-facebook</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-dropbox"></i><span>ti-dropbox</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-dropbox-alt"></i><span>ti-dropbox-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-dribbble"></i><span>ti-dribbble</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-apple"></i><span>ti-apple</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-android"></i><span>ti-android</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-yahoo"></i><span>ti-yahoo</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-trello"></i><span>ti-trello</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-stack-overflow"></i><span>ti-stack-overflow</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-soundcloud"></i><span>ti-soundcloud</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-sharethis"></i><span>ti-sharethis</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-sharethis-alt"></i><span>ti-sharethis-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-reddit"></i><span>ti-reddit</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-microsoft"></i><span>ti-microsoft</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-microsoft-alt"></i><span>ti-microsoft-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-linux"></i><span>ti-linux</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-jsfiddle"></i><span>ti-jsfiddle</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-joomla"></i><span>ti-joomla</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-html5"></i><span>ti-html5</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-css3"></i><span>ti-css3</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-drupal"></i><span>ti-drupal</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-wordpress"></i><span>ti-wordpress</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-tumblr"></i><span>ti-tumblr</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-tumblr-alt"></i><span>ti-tumblr-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-skype"></i><span>ti-skype</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-youtube"></i><span>ti-youtube</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-vimeo"></i><span>ti-vimeo</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-vimeo-alt"></i><span>ti-vimeo-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-twitter"></i><span>ti-twitter</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-twitter-alt"></i><span>ti-twitter-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-linkedin"></i><span>ti-linkedin</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pinterest"></i><span>ti-pinterest</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-pinterest-alt"></i><span>ti-pinterest-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-themify-logo"></i><span>ti-themify-logo</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-themify-favicon"></i><span>ti-themify-favicon</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon ti-themify-favicon-alt"></i><span>ti-themify-favicon-alt</span></div></div></div><h3 class="font-thin m-b">Glyphicons</h3><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-asterisk"></i> <span>glyphicon-asterisk</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-plus"></i> <span>glyphicon-plus</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-euro"></i> <span>glyphicon-euro</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-minus"></i> <span>glyphicon-minus</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-cloud"></i> <span>glyphicon-cloud</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-envelope"></i> <span>glyphicon-envelope</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-pencil"></i> <span>glyphicon-pencil</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-glass"></i> <span>glyphicon-glass</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-music"></i> <span>glyphicon-music</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-search"></i> <span>glyphicon-search</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-heart"></i> <span>glyphicon-heart</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-star"></i> <span>glyphicon-star</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-star-empty"></i> <span>glyphicon-star-empty</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-user"></i> <span>glyphicon-user</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-film"></i> <span>glyphicon-film</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-th-large"></i> <span>glyphicon-th-large</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-th"></i> <span>glyphicon-th</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-th-list"></i> <span>glyphicon-th-list</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-ok"></i> <span>glyphicon-ok</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-remove"></i> <span>glyphicon-remove</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-zoom-in"></i> <span>glyphicon-zoom-in</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-zoom-out"></i> <span>glyphicon-zoom-out</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-off"></i> <span>glyphicon-off</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-signal"></i> <span>glyphicon-signal</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-cog"></i> <span>glyphicon-cog</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-trash"></i> <span>glyphicon-trash</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-home"></i> <span>glyphicon-home</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-file"></i> <span>glyphicon-file</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-time"></i> <span>glyphicon-time</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-road"></i> <span>glyphicon-road</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-download-alt"></i> <span>glyphicon-download-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-download"></i> <span>glyphicon-download</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-upload"></i> <span>glyphicon-upload</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-inbox"></i> <span>glyphicon-inbox</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-play-circle"></i> <span>glyphicon-play-circle</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-repeat"></i> <span>glyphicon-repeat</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-refresh"></i> <span>glyphicon-refresh</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-list-alt"></i> <span>glyphicon-list-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-lock"></i> <span>glyphicon-lock</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-flag"></i> <span>glyphicon-flag</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-headphones"></i> <span>glyphicon-headphones</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-volume-off"></i> <span>glyphicon-volume-off</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-volume-down"></i> <span>glyphicon-volume-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-volume-up"></i> <span>glyphicon-volume-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-qrcode"></i> <span>glyphicon-qrcode</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-barcode"></i> <span>glyphicon-barcode</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tag"></i> <span>glyphicon-tag</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tags"></i> <span>glyphicon-tags</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-book"></i> <span>glyphicon-book</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-bookmark"></i> <span>glyphicon-bookmark</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-print"></i> <span>glyphicon-print</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-camera"></i> <span>glyphicon-camera</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-font"></i> <span>glyphicon-font</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-bold"></i> <span>glyphicon-bold</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-italic"></i> <span>glyphicon-italic</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-text-height"></i> <span>glyphicon-text-height</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-text-width"></i> <span>glyphicon-text-width</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-align-left"></i> <span>glyphicon-align-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-align-center"></i> <span>glyphicon-align-center</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-align-right"></i> <span>glyphicon-align-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-align-justify"></i> <span>glyphicon-align-justify</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-list"></i> <span>glyphicon-list</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-indent-left"></i> <span>glyphicon-indent-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-indent-right"></i> <span>glyphicon-indent-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-facetime-video"></i> <span>glyphicon-facetime-video</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-picture"></i> <span>glyphicon-picture</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-map-marker"></i> <span>glyphicon-map-marker</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-adjust"></i> <span>glyphicon-adjust</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tint"></i> <span>glyphicon-tint</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-edit"></i> <span>glyphicon-edit</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-share"></i> <span>glyphicon-share</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-check"></i> <span>glyphicon-check</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-move"></i> <span>glyphicon-move</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-step-backward"></i> <span>glyphicon-step-backward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-fast-backward"></i> <span>glyphicon-fast-backward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-backward"></i> <span>glyphicon-backward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-play"></i> <span>glyphicon-play</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-pause"></i> <span>glyphicon-pause</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-stop"></i> <span>glyphicon-stop</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-forward"></i> <span>glyphicon-forward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-fast-forward"></i> <span>glyphicon-fast-forward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-step-forward"></i> <span>glyphicon-step-forward</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-eject"></i> <span>glyphicon-eject</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-chevron-left"></i> <span>glyphicon-chevron-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-chevron-right"></i> <span>glyphicon-chevron-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-plus-sign"></i> <span>glyphicon-plus-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-minus-sign"></i> <span>glyphicon-minus-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-remove-sign"></i> <span>glyphicon-remove-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-ok-sign"></i> <span>glyphicon-ok-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-question-sign"></i> <span>glyphicon-question-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-info-sign"></i> <span>glyphicon-info-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-screenshot"></i> <span>glyphicon-screenshot</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-remove-circle"></i> <span>glyphicon-remove-circle</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-ok-circle"></i> <span>glyphicon-ok-circle</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-ban-circle"></i> <span>glyphicon-ban-circle</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-arrow-left"></i> <span>glyphicon-arrow-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-arrow-right"></i> <span>glyphicon-arrow-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-arrow-up"></i> <span>glyphicon-arrow-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-arrow-down"></i> <span>glyphicon-arrow-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-share-alt"></i> <span>glyphicon-share-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-resize-full"></i> <span>glyphicon-resize-full</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-resize-small"></i> <span>glyphicon-resize-small</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-exclamation-sign"></i> <span>glyphicon-exclamation-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-gift"></i> <span>glyphicon-gift</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-leaf"></i> <span>glyphicon-leaf</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-fire"></i> <span>glyphicon-fire</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-eye-open"></i> <span>glyphicon-eye-open</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-eye-close"></i> <span>glyphicon-eye-close</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-warning-sign"></i> <span>glyphicon-warning-sign</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-plane"></i> <span>glyphicon-plane</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-calendar"></i> <span>glyphicon-calendar</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-random"></i> <span>glyphicon-random</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-comment"></i> <span>glyphicon-comment</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-magnet"></i> <span>glyphicon-magnet</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-chevron-up"></i> <span>glyphicon-chevron-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-chevron-down"></i> <span>glyphicon-chevron-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-retweet"></i> <span>glyphicon-retweet</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-shopping-cart"></i> <span>glyphicon-shopping-cart</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-folder-close"></i> <span>glyphicon-folder-close</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-folder-open"></i> <span>glyphicon-folder-open</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-resize-vertical"></i> <span>glyphicon-resize-vertical</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-resize-horizontal"></i> <span>glyphicon-resize-horizontal</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-hdd"></i> <span>glyphicon-hdd</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-bullhorn"></i> <span>glyphicon-bullhorn</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-bell"></i> <span>glyphicon-bell</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-certificate"></i> <span>glyphicon-certificate</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-thumbs-up"></i> <span>glyphicon-thumbs-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-thumbs-down"></i> <span>glyphicon-thumbs-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-hand-right"></i> <span>glyphicon-hand-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-hand-left"></i> <span>glyphicon-hand-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-hand-up"></i> <span>glyphicon-hand-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-hand-down"></i> <span>glyphicon-hand-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-circle-arrow-right"></i> <span>glyphicon-circle-arrow-right</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-circle-arrow-left"></i> <span>glyphicon-circle-arrow-left</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-circle-arrow-up"></i> <span>glyphicon-circle-arrow-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-circle-arrow-down"></i> <span>glyphicon-circle-arrow-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-globe"></i> <span>glyphicon-globe</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-wrench"></i> <span>glyphicon-wrench</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tasks"></i> <span>glyphicon-tasks</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-filter"></i> <span>glyphicon-filter</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-briefcase"></i> <span>glyphicon-briefcase</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-fullscreen"></i> <span>glyphicon-fullscreen</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-dashboard"></i> <span>glyphicon-dashboard</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-paperclip"></i> <span>glyphicon-paperclip</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-heart-empty"></i> <span>glyphicon-heart-empty</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-link"></i> <span>glyphicon-link</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-phone"></i> <span>glyphicon-phone</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-pushpin"></i> <span>glyphicon-pushpin</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-usd"></i> <span>glyphicon-usd</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-gbp"></i> <span>glyphicon-gbp</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort"></i> <span>glyphicon-sort</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort-by-alphabet"></i> <span>glyphicon-sort-by-alphabet</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort-by-alphabet-alt"></i> <span>glyphicon-sort-by-alphabet-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort-by-order"></i> <span>glyphicon-sort-by-order</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort-by-order-alt"></i> <span>glyphicon-sort-by-order-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort-by-attributes"></i> <span>glyphicon-sort-by-attributes</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sort-by-attributes-alt"></i> <span>glyphicon-sort-by-attributes-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-unchecked"></i> <span>glyphicon-unchecked</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-expand"></i> <span>glyphicon-expand</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-collapse-down"></i> <span>glyphicon-collapse-down</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-collapse-up"></i> <span>glyphicon-collapse-up</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-log-in"></i> <span>glyphicon-log-in</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-flash"></i> <span>glyphicon-flash</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-log-out"></i> <span>glyphicon-log-out</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-new-window"></i> <span>glyphicon-new-window</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-record"></i> <span>glyphicon-record</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-save"></i> <span>glyphicon-save</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-open"></i> <span>glyphicon-open</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-saved"></i> <span>glyphicon-saved</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-import"></i> <span>glyphicon-import</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-export"></i> <span>glyphicon-export</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-send"></i> <span>glyphicon-send</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-floppy-disk"></i> <span>glyphicon-floppy-disk</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-floppy-saved"></i> <span>glyphicon-floppy-saved</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-floppy-remove"></i> <span>glyphicon-floppy-remove</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-floppy-save"></i> <span>glyphicon-floppy-save</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-floppy-open"></i> <span>glyphicon-floppy-open</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-credit-card"></i> <span>glyphicon-credit-card</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-transfer"></i> <span>glyphicon-transfer</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-cutlery"></i> <span>glyphicon-cutlery</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-header"></i> <span>glyphicon-header</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-compressed"></i> <span>glyphicon-compressed</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-earphone"></i> <span>glyphicon-earphone</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-phone-alt"></i> <span>glyphicon-phone-alt</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tower"></i> <span>glyphicon-tower</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-stats"></i> <span>glyphicon-stats</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sd-video"></i> <span>glyphicon-sd-video</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-hd-video"></i> <span>glyphicon-hd-video</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-subtitles"></i> <span>glyphicon-subtitles</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sound-stereo"></i> <span>glyphicon-sound-stereo</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sound-dolby"></i> <span>glyphicon-sound-dolby</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sound-5-1"></i> <span>glyphicon-sound-5-1</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sound-6-1"></i> <span>glyphicon-sound-6-1</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-sound-7-1"></i> <span>glyphicon-sound-7-1</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-copyright-mark"></i> <span>glyphicon-copyright-mark</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-registration-mark"></i> <span>glyphicon-registration-mark</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-cloud-download"></i> <span>glyphicon-cloud-download</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-cloud-upload"></i> <span>glyphicon-cloud-upload</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tree-conifer"></i> <span>glyphicon-tree-conifer</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon glyphicon glyphicon-tree-deciduous"></i> <span>glyphicon-tree-deciduous</span></div></div><h3 class=font-thin>FontAwesome! <small class="label bg-success text-base">4.2</small></h3><p>Font Awesome gives you scalable vector icons that can instantly be customized \u2014 size, color, drop shadow, and anything that can be done with the power of CSS.</p><div><div id=web-application><h4 class=page-header>Web Application Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-adjust"></i> fa-adjust</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-anchor"></i> fa-anchor</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-archive"></i> fa-archive</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-area-chart"></i> fa-area-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows"></i> fa-arrows</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows-h"></i> fa-arrows-h</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows-v"></i> fa-arrows-v</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-asterisk"></i> fa-asterisk</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-at"></i> fa-at</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-automobile"></i> fa-automobile <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ban"></i> fa-ban</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bank"></i> fa-bank <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bar-chart"></i> fa-bar-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bar-chart-o"></i> fa-bar-chart-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-barcode"></i> fa-barcode</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bars"></i> fa-bars</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-beer"></i> fa-beer</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bell"></i> fa-bell</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bell-o"></i> fa-bell-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bell-slash"></i> fa-bell-slash</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bell-slash-o"></i> fa-bell-slash-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bicycle"></i> fa-bicycle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-binoculars"></i> fa-binoculars</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-birthday-cake"></i> fa-birthday-cake</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bolt"></i> fa-bolt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bomb"></i> fa-bomb</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-book"></i> fa-book</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bookmark"></i> fa-bookmark</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bookmark-o"></i> fa-bookmark-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-briefcase"></i> fa-briefcase</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bug"></i> fa-bug</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-building"></i> fa-building</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-building-o"></i> fa-building-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bullhorn"></i> fa-bullhorn</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bullseye"></i> fa-bullseye</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bus"></i> fa-bus</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cab"></i> fa-cab <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-calculator"></i> fa-calculator</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-calendar"></i> fa-calendar</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-calendar-o"></i> fa-calendar-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-camera"></i> fa-camera</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-camera-retro"></i> fa-camera-retro</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-car"></i> fa-car</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-down"></i> fa-caret-square-o-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-left"></i> fa-caret-square-o-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-right"></i> fa-caret-square-o-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-up"></i> fa-caret-square-o-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc"></i> fa-cc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-certificate"></i> fa-certificate</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check"></i> fa-check</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check-circle"></i> fa-check-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check-circle-o"></i> fa-check-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check-square"></i> fa-check-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check-square-o"></i> fa-check-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-child"></i> fa-child</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle"></i> fa-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle-o"></i> fa-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle-o-notch"></i> fa-circle-o-notch</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle-thin"></i> fa-circle-thin</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-clock-o"></i> fa-clock-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-close"></i> fa-close <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cloud"></i> fa-cloud</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cloud-download"></i> fa-cloud-download</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cloud-upload"></i> fa-cloud-upload</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-code"></i> fa-code</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-code-fork"></i> fa-code-fork</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-coffee"></i> fa-coffee</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cog"></i> fa-cog</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cogs"></i> fa-cogs</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-comment"></i> fa-comment</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-comment-o"></i> fa-comment-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-comments"></i> fa-comments</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-comments-o"></i> fa-comments-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-compass"></i> fa-compass</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-copyright"></i> fa-copyright</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-credit-card"></i> fa-credit-card</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-crop"></i> fa-crop</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-crosshairs"></i> fa-crosshairs</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cube"></i> fa-cube</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cubes"></i> fa-cubes</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cutlery"></i> fa-cutlery</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dashboard"></i> fa-dashboard <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-database"></i> fa-database</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-desktop"></i> fa-desktop</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dot-circle-o"></i> fa-dot-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-download"></i> fa-download</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-edit"></i> fa-edit <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ellipsis-h"></i> fa-ellipsis-h</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ellipsis-v"></i> fa-ellipsis-v</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-envelope"></i> fa-envelope</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-envelope-o"></i> fa-envelope-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-envelope-square"></i> fa-envelope-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eraser"></i> fa-eraser</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-exchange"></i> fa-exchange</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-exclamation"></i> fa-exclamation</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-exclamation-circle"></i> fa-exclamation-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-exclamation-triangle"></i> fa-exclamation-triangle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-external-link"></i> fa-external-link</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-external-link-square"></i> fa-external-link-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eye"></i> fa-eye</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eye-slash"></i> fa-eye-slash</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eyedropper"></i> fa-eyedropper</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-fax"></i> fa-fax</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-female"></i> fa-female</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-fighter-jet"></i> fa-fighter-jet</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-archive-o"></i> fa-file-archive-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-audio-o"></i> fa-file-audio-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-code-o"></i> fa-file-code-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-excel-o"></i> fa-file-excel-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-image-o"></i> fa-file-image-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-movie-o"></i> fa-file-movie-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-pdf-o"></i> fa-file-pdf-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-photo-o"></i> fa-file-photo-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-picture-o"></i> fa-file-picture-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-powerpoint-o"></i> fa-file-powerpoint-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-sound-o"></i> fa-file-sound-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-video-o"></i> fa-file-video-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-word-o"></i> fa-file-word-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-zip-o"></i> fa-file-zip-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-film"></i> fa-film</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-filter"></i> fa-filter</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-fire"></i> fa-fire</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-fire-extinguisher"></i> fa-fire-extinguisher</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-flag"></i> fa-flag</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-flag-checkered"></i> fa-flag-checkered</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-flag-o"></i> fa-flag-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-flash"></i> fa-flash <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-flask"></i> fa-flask</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-folder"></i> fa-folder</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-folder-o"></i> fa-folder-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-folder-open"></i> fa-folder-open</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-folder-open-o"></i> fa-folder-open-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-frown-o"></i> fa-frown-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-futbol-o"></i> fa-futbol-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gamepad"></i> fa-gamepad</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gavel"></i> fa-gavel</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gear"></i> fa-gear <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gears"></i> fa-gears <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gift"></i> fa-gift</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-glass"></i> fa-glass</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-globe"></i> fa-globe</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-graduation-cap"></i> fa-graduation-cap</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-group"></i> fa-group <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hdd-o"></i> fa-hdd-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-headphones"></i> fa-headphones</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-heart"></i> fa-heart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-heart-o"></i> fa-heart-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-history"></i> fa-history</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-home"></i> fa-home</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-image"></i> fa-image <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-inbox"></i> fa-inbox</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-info"></i> fa-info</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-info-circle"></i> fa-info-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-institution"></i> fa-institution <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-key"></i> fa-key</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-keyboard-o"></i> fa-keyboard-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-language"></i> fa-language</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-laptop"></i> fa-laptop</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-leaf"></i> fa-leaf</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-legal"></i> fa-legal <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-lemon-o"></i> fa-lemon-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-level-down"></i> fa-level-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-level-up"></i> fa-level-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-life-bouy"></i> fa-life-bouy <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-life-buoy"></i> fa-life-buoy <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-life-ring"></i> fa-life-ring</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-life-saver"></i> fa-life-saver <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-lightbulb-o"></i> fa-lightbulb-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-line-chart"></i> fa-line-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-location-arrow"></i> fa-location-arrow</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-lock"></i> fa-lock</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-magic"></i> fa-magic</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-magnet"></i> fa-magnet</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-mail-forward"></i> fa-mail-forward <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-mail-reply"></i> fa-mail-reply <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-mail-reply-all"></i> fa-mail-reply-all <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-male"></i> fa-male</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-map-marker"></i> fa-map-marker</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-meh-o"></i> fa-meh-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-microphone"></i> fa-microphone</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-microphone-slash"></i> fa-microphone-slash</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-minus"></i> fa-minus</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-minus-circle"></i> fa-minus-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-minus-square"></i> fa-minus-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-minus-square-o"></i> fa-minus-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-mobile"></i> fa-mobile</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-mobile-phone"></i> fa-mobile-phone <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-money"></i> fa-money</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-moon-o"></i> fa-moon-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-mortar-board"></i> fa-mortar-board <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-music"></i> fa-music</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-navicon"></i> fa-navicon <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-newspaper-o"></i> fa-newspaper-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paint-brush"></i> fa-paint-brush</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paper-plane"></i> fa-paper-plane</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paper-plane-o"></i> fa-paper-plane-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paw"></i> fa-paw</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pencil"></i> fa-pencil</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pencil-square"></i> fa-pencil-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pencil-square-o"></i> fa-pencil-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-phone"></i> fa-phone</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-phone-square"></i> fa-phone-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-photo"></i> fa-photo <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-picture-o"></i> fa-picture-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pie-chart"></i> fa-pie-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plane"></i> fa-plane</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plug"></i> fa-plug</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus"></i> fa-plus</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus-circle"></i> fa-plus-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus-square"></i> fa-plus-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus-square-o"></i> fa-plus-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-power-off"></i> fa-power-off</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-print"></i> fa-print</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-puzzle-piece"></i> fa-puzzle-piece</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-qrcode"></i> fa-qrcode</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-question"></i> fa-question</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-question-circle"></i> fa-question-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-quote-left"></i> fa-quote-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-quote-right"></i> fa-quote-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-random"></i> fa-random</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-recycle"></i> fa-recycle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-refresh"></i> fa-refresh</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-remove"></i> fa-remove <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-reorder"></i> fa-reorder <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-reply"></i> fa-reply</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-reply-all"></i> fa-reply-all</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-retweet"></i> fa-retweet</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-road"></i> fa-road</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rocket"></i> fa-rocket</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rss"></i> fa-rss</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rss-square"></i> fa-rss-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-search"></i> fa-search</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-search-minus"></i> fa-search-minus</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-search-plus"></i> fa-search-plus</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-send"></i> fa-send <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-send-o"></i> fa-send-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share"></i> fa-share</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share-alt"></i> fa-share-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share-alt-square"></i> fa-share-alt-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share-square"></i> fa-share-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share-square-o"></i> fa-share-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-shield"></i> fa-shield</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-shopping-cart"></i> fa-shopping-cart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sign-in"></i> fa-sign-in</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sign-out"></i> fa-sign-out</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-signal"></i> fa-signal</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sitemap"></i> fa-sitemap</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sliders"></i> fa-sliders</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-smile-o"></i> fa-smile-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-soccer-ball-o"></i> fa-soccer-ball-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort"></i> fa-sort</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-alpha-asc"></i> fa-sort-alpha-asc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-alpha-desc"></i> fa-sort-alpha-desc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-amount-asc"></i> fa-sort-amount-asc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-amount-desc"></i> fa-sort-amount-desc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-asc"></i> fa-sort-asc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-desc"></i> fa-sort-desc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-down"></i> fa-sort-down <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-numeric-asc"></i> fa-sort-numeric-asc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-numeric-desc"></i> fa-sort-numeric-desc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sort-up"></i> fa-sort-up <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-space-shuttle"></i> fa-space-shuttle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-spinner"></i> fa-spinner</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-spoon"></i> fa-spoon</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-square"></i> fa-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-square-o"></i> fa-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-star"></i> fa-star</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-star-half"></i> fa-star-half</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-star-half-empty"></i> fa-star-half-empty <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-star-half-full"></i> fa-star-half-full <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-star-half-o"></i> fa-star-half-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-star-o"></i> fa-star-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-suitcase"></i> fa-suitcase</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sun-o"></i> fa-sun-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-support"></i> fa-support <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tablet"></i> fa-tablet</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tachometer"></i> fa-tachometer</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tag"></i> fa-tag</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tags"></i> fa-tags</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tasks"></i> fa-tasks</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-taxi"></i> fa-taxi</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-terminal"></i> fa-terminal</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-thumb-tack"></i> fa-thumb-tack</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-thumbs-down"></i> fa-thumbs-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-thumbs-o-down"></i> fa-thumbs-o-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-thumbs-o-up"></i> fa-thumbs-o-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-thumbs-up"></i> fa-thumbs-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ticket"></i> fa-ticket</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-times"></i> fa-times</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-times-circle"></i> fa-times-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-times-circle-o"></i> fa-times-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tint"></i> fa-tint</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-down"></i> fa-toggle-down <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-left"></i> fa-toggle-left <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-off"></i> fa-toggle-off</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-on"></i> fa-toggle-on</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-right"></i> fa-toggle-right <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-up"></i> fa-toggle-up <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-trash"></i> fa-trash</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-trash-o"></i> fa-trash-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tree"></i> fa-tree</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-trophy"></i> fa-trophy</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-truck"></i> fa-truck</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tty"></i> fa-tty</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-umbrella"></i> fa-umbrella</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-university"></i> fa-university</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-unlock"></i> fa-unlock</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-unlock-alt"></i> fa-unlock-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-unsorted"></i> fa-unsorted <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-upload"></i> fa-upload</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-user"></i> fa-user</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-users"></i> fa-users</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-video-camera"></i> fa-video-camera</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-volume-down"></i> fa-volume-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-volume-off"></i> fa-volume-off</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-volume-up"></i> fa-volume-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-warning"></i> fa-warning <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-wheelchair"></i> fa-wheelchair</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-wifi"></i> fa-wifi</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-wrench"></i> fa-wrench</div></div></div><div id=file-type><h4 class=page-header>File Type Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file"></i> fa-file</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-archive-o"></i> fa-file-archive-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-audio-o"></i> fa-file-audio-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-code-o"></i> fa-file-code-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-excel-o"></i> fa-file-excel-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-image-o"></i> fa-file-image-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-movie-o"></i> fa-file-movie-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-o"></i> fa-file-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-pdf-o"></i> fa-file-pdf-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-photo-o"></i> fa-file-photo-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-picture-o"></i> fa-file-picture-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-powerpoint-o"></i> fa-file-powerpoint-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-sound-o"></i> fa-file-sound-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-text"></i> fa-file-text</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-text-o"></i> fa-file-text-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-video-o"></i> fa-file-video-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-word-o"></i> fa-file-word-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-zip-o"></i> fa-file-zip-o <span class=text-muted>(alias)</span></div></div></div><div id=spinner><h4 class=page-header>Spinner Icons</h4><div class="alert alert-success"><ul class=fa-ul><li>These icons work great with the <code>fa-spin</code> class. Check out the <a href=../examples/#spinning class=alert-link>spinning icons example</a>.</li></ul></div><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle-o-notch"></i> fa-circle-o-notch</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cog"></i> fa-cog</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gear"></i> fa-gear <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-refresh"></i> fa-refresh</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-spinner"></i> fa-spinner</div></div></div><div id=form-control><h4 class=page-header>Form Control Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check-square"></i> fa-check-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-check-square-o"></i> fa-check-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle"></i> fa-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-circle-o"></i> fa-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dot-circle-o"></i> fa-dot-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-minus-square"></i> fa-minus-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-minus-square-o"></i> fa-minus-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus-square"></i> fa-plus-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus-square-o"></i> fa-plus-square-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-square"></i> fa-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-square-o"></i> fa-square-o</div></div></div><div id=payment><h4 class=page-header>Payment Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-amex"></i> fa-cc-amex</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-discover"></i> fa-cc-discover</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-mastercard"></i> fa-cc-mastercard</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-paypal"></i> fa-cc-paypal</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-stripe"></i> fa-cc-stripe</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-visa"></i> fa-cc-visa</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-credit-card"></i> fa-credit-card</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-google-wallet"></i> fa-google-wallet</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paypal"></i> fa-paypal</div></div></div><div id=chart><h4 class=page-header>Chart Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-area-chart"></i> fa-area-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bar-chart"></i> fa-bar-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bar-chart-o"></i> fa-bar-chart-o <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-line-chart"></i> fa-line-chart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pie-chart"></i> fa-pie-chart</div></div></div><div id=currency><h4 class=page-header>Currency Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bitcoin"></i> fa-bitcoin <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-btc"></i> fa-btc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cny"></i> fa-cny <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dollar"></i> fa-dollar <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eur"></i> fa-eur</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-euro"></i> fa-euro <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gbp"></i> fa-gbp</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ils"></i> fa-ils</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-inr"></i> fa-inr</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-jpy"></i> fa-jpy</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-krw"></i> fa-krw</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-money"></i> fa-money</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rmb"></i> fa-rmb <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rouble"></i> fa-rouble <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rub"></i> fa-rub</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ruble"></i> fa-ruble <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rupee"></i> fa-rupee <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-shekel"></i> fa-shekel <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-sheqel"></i> fa-sheqel <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-try"></i> fa-try</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-turkish-lira"></i> fa-turkish-lira <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-usd"></i> fa-usd</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-won"></i> fa-won <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-yen"></i> fa-yen <span class=text-muted>(alias)</span></div></div></div><div id=text-editor><h4 class=page-header>Text Editor Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-align-center"></i> fa-align-center</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-align-justify"></i> fa-align-justify</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-align-left"></i> fa-align-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-align-right"></i> fa-align-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bold"></i> fa-bold</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chain"></i> fa-chain <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chain-broken"></i> fa-chain-broken</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-clipboard"></i> fa-clipboard</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-columns"></i> fa-columns</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-copy"></i> fa-copy <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cut"></i> fa-cut <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dedent"></i> fa-dedent <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eraser"></i> fa-eraser</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file"></i> fa-file</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-o"></i> fa-file-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-text"></i> fa-file-text</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-file-text-o"></i> fa-file-text-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-files-o"></i> fa-files-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-floppy-o"></i> fa-floppy-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-font"></i> fa-font</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-header"></i> fa-header</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-indent"></i> fa-indent</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-italic"></i> fa-italic</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-link"></i> fa-link</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-list"></i> fa-list</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-list-alt"></i> fa-list-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-list-ol"></i> fa-list-ol</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-list-ul"></i> fa-list-ul</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-outdent"></i> fa-outdent</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paperclip"></i> fa-paperclip</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paragraph"></i> fa-paragraph</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paste"></i> fa-paste <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-repeat"></i> fa-repeat</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rotate-left"></i> fa-rotate-left <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rotate-right"></i> fa-rotate-right <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-save"></i> fa-save <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-scissors"></i> fa-scissors</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-strikethrough"></i> fa-strikethrough</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-subscript"></i> fa-subscript</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-superscript"></i> fa-superscript</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-table"></i> fa-table</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-text-height"></i> fa-text-height</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-text-width"></i> fa-text-width</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-th"></i> fa-th</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-th-large"></i> fa-th-large</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-th-list"></i> fa-th-list</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-underline"></i> fa-underline</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-undo"></i> fa-undo</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-unlink"></i> fa-unlink <span class=text-muted>(alias)</span></div></div></div><div id=directional><h4 class=page-header>Directional Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-double-down"></i> fa-angle-double-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-double-left"></i> fa-angle-double-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-double-right"></i> fa-angle-double-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-double-up"></i> fa-angle-double-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-down"></i> fa-angle-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-left"></i> fa-angle-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-right"></i> fa-angle-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angle-up"></i> fa-angle-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-down"></i> fa-arrow-circle-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-left"></i> fa-arrow-circle-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-o-down"></i> fa-arrow-circle-o-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-o-left"></i> fa-arrow-circle-o-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-o-right"></i> fa-arrow-circle-o-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-o-up"></i> fa-arrow-circle-o-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-right"></i> fa-arrow-circle-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-circle-up"></i> fa-arrow-circle-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-down"></i> fa-arrow-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-left"></i> fa-arrow-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-right"></i> fa-arrow-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrow-up"></i> fa-arrow-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows"></i> fa-arrows</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows-alt"></i> fa-arrows-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows-h"></i> fa-arrows-h</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows-v"></i> fa-arrows-v</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-down"></i> fa-caret-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-left"></i> fa-caret-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-right"></i> fa-caret-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-down"></i> fa-caret-square-o-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-left"></i> fa-caret-square-o-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-right"></i> fa-caret-square-o-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-square-o-up"></i> fa-caret-square-o-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-caret-up"></i> fa-caret-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-circle-down"></i> fa-chevron-circle-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-circle-left"></i> fa-chevron-circle-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-circle-right"></i> fa-chevron-circle-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-circle-up"></i> fa-chevron-circle-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-down"></i> fa-chevron-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-left"></i> fa-chevron-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-right"></i> fa-chevron-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-chevron-up"></i> fa-chevron-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hand-o-down"></i> fa-hand-o-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hand-o-left"></i> fa-hand-o-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hand-o-right"></i> fa-hand-o-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hand-o-up"></i> fa-hand-o-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-long-arrow-down"></i> fa-long-arrow-down</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-long-arrow-left"></i> fa-long-arrow-left</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-long-arrow-right"></i> fa-long-arrow-right</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-long-arrow-up"></i> fa-long-arrow-up</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-down"></i> fa-toggle-down <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-left"></i> fa-toggle-left <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-right"></i> fa-toggle-right <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-toggle-up"></i> fa-toggle-up <span class=text-muted>(alias)</span></div></div></div><div id=video-player><h4 class=page-header>Video Player Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-arrows-alt"></i> fa-arrows-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-backward"></i> fa-backward</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-compress"></i> fa-compress</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-eject"></i> fa-eject</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-expand"></i> fa-expand</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-fast-backward"></i> fa-fast-backward</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-fast-forward"></i> fa-fast-forward</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-forward"></i> fa-forward</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pause"></i> fa-pause</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-play"></i> fa-play</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-play-circle"></i> fa-play-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-play-circle-o"></i> fa-play-circle-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-step-backward"></i> fa-step-backward</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-step-forward"></i> fa-step-forward</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-stop"></i> fa-stop</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-youtube-play"></i> fa-youtube-play</div></div></div><div id=brand><h4 class=page-header>Brand Icons</h4><div class="alert alert-success"><ul class="margin-bottom-none padding-left-lg"><li>All brand icons are trademarks of their respective owners.</li><li>The use of these trademarks does not indicate endorsement of the trademark holder by Font Awesome, nor vice versa.</li></ul></div><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-adn"></i> fa-adn</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-android"></i> fa-android</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-angellist"></i> fa-angellist</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-apple"></i> fa-apple</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-behance"></i> fa-behance</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-behance-square"></i> fa-behance-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bitbucket"></i> fa-bitbucket</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bitbucket-square"></i> fa-bitbucket-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-bitcoin"></i> fa-bitcoin <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-btc"></i> fa-btc</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-amex"></i> fa-cc-amex</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-discover"></i> fa-cc-discover</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-mastercard"></i> fa-cc-mastercard</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-paypal"></i> fa-cc-paypal</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-stripe"></i> fa-cc-stripe</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-cc-visa"></i> fa-cc-visa</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-codepen"></i> fa-codepen</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-css3"></i> fa-css3</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-delicious"></i> fa-delicious</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-deviantart"></i> fa-deviantart</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-digg"></i> fa-digg</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dribbble"></i> fa-dribbble</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-dropbox"></i> fa-dropbox</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-drupal"></i> fa-drupal</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-empire"></i> fa-empire</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-facebook"></i> fa-facebook</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-facebook-square"></i> fa-facebook-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-flickr"></i> fa-flickr</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-foursquare"></i> fa-foursquare</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ge"></i> fa-ge <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-git"></i> fa-git</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-git-square"></i> fa-git-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-github"></i> fa-github</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-github-alt"></i> fa-github-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-github-square"></i> fa-github-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-gittip"></i> fa-gittip</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-google"></i> fa-google</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-google-plus"></i> fa-google-plus</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-google-plus-square"></i> fa-google-plus-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-google-wallet"></i> fa-google-wallet</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hacker-news"></i> fa-hacker-news</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-html5"></i> fa-html5</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-instagram"></i> fa-instagram</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ioxhost"></i> fa-ioxhost</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-joomla"></i> fa-joomla</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-jsfiddle"></i> fa-jsfiddle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-lastfm"></i> fa-lastfm</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-lastfm-square"></i> fa-lastfm-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-linkedin"></i> fa-linkedin</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-linkedin-square"></i> fa-linkedin-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-linux"></i> fa-linux</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-maxcdn"></i> fa-maxcdn</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-meanpath"></i> fa-meanpath</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-openid"></i> fa-openid</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pagelines"></i> fa-pagelines</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-paypal"></i> fa-paypal</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pied-piper"></i> fa-pied-piper</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pied-piper-alt"></i> fa-pied-piper-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pinterest"></i> fa-pinterest</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-pinterest-square"></i> fa-pinterest-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-qq"></i> fa-qq</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ra"></i> fa-ra <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-rebel"></i> fa-rebel</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-reddit"></i> fa-reddit</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-reddit-square"></i> fa-reddit-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-renren"></i> fa-renren</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share-alt"></i> fa-share-alt</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-share-alt-square"></i> fa-share-alt-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-skype"></i> fa-skype</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-slack"></i> fa-slack</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-slideshare"></i> fa-slideshare</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-soundcloud"></i> fa-soundcloud</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-spotify"></i> fa-spotify</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-stack-exchange"></i> fa-stack-exchange</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-stack-overflow"></i> fa-stack-overflow</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-steam"></i> fa-steam</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-steam-square"></i> fa-steam-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-stumbleupon"></i> fa-stumbleupon</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-stumbleupon-circle"></i> fa-stumbleupon-circle</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tencent-weibo"></i> fa-tencent-weibo</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-trello"></i> fa-trello</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tumblr"></i> fa-tumblr</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-tumblr-square"></i> fa-tumblr-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-twitch"></i> fa-twitch</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-twitter"></i> fa-twitter</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-twitter-square"></i> fa-twitter-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-vimeo-square"></i> fa-vimeo-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-vine"></i> fa-vine</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-vk"></i> fa-vk</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-wechat"></i> fa-wechat <span class=text-muted>(alias)</span></div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-weibo"></i> fa-weibo</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-weixin"></i> fa-weixin</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-windows"></i> fa-windows</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-wordpress"></i> fa-wordpress</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-xing"></i> fa-xing</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-xing-square"></i> fa-xing-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-yahoo"></i> fa-yahoo</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-yelp"></i> fa-yelp</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-youtube"></i> fa-youtube</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-youtube-play"></i> fa-youtube-play</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-youtube-square"></i> fa-youtube-square</div></div></div><div id=medical><h4 class=page-header>Medical Icons</h4><div class="row list-icon"><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-ambulance"></i> fa-ambulance</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-h-square"></i> fa-h-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-hospital-o"></i> fa-hospital-o</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-medkit"></i> fa-medkit</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-plus-square"></i> fa-plus-square</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-stethoscope"></i> fa-stethoscope</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-user-md"></i> fa-user-md</div><div class="col-md-3 col-sm-4"><i class="ui-icon fa fa-wheelchair"></i> fa-wheelchair</div></div></div></div></div>');
    $templateCache.put('views/ui/component/list.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>List Groups</h3></div><div class=p-md><div class=row><div class=col-sm-6><h5 class="no-margin m-b">Ellipsis and Fade</h5><ul class=list-group><li class="list-group-item text-ellipsis text-info">One line ellipsis, Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum</li><li class=list-group-item><div class="text-fade h-2x"><span class=text-success>Two lines fade</span>, Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum</div></li><li class=list-group-item><div class="text-fade h-3x"><span class=text-primary>Three lines fade</span>, Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum Vestibulum ullamcorper sodales nisi nec condimentum Mauris convallis mauris at pellentesque</div></li><li class=list-group-item><div class="text-fade h-4x"><span class=text-black>Four lines fade</span>, Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum Lorem ipsum dolor sit amet vibulum ullamcorper sodales nisi nec condimentum Vestibulum ullamcorper sodales nisi nec condimentum Mauris convallis mauris at pellentesque</div></li></ul><h5 class="no-margin m-b">Link and Background</h5><div class="list-group bg-primary bg-inherit"><a href class=list-group-item><span class="pull-right text-muted"><i class="glyphicon glyphicon-chevron-right"></i></span> Consectetur adipiscing elit.</a> <a href class=list-group-item><span class="pull-right text-muted"><i class="glyphicon glyphicon-chevron-right"></i></span> Lorem ipsum dolor sit amet</a> <a href class=list-group-item><span class="pull-right text-muted"><i class="glyphicon glyphicon-chevron-right"></i></span> Ullamcorper solli citudin venenatis ipsum</a> <a href class=list-group-item><span class="pull-right text-muted"><i class="glyphicon glyphicon-chevron-right"></i></span> Aliquam sodales nisi nec condimentum</a> <a href class=list-group-item><span class="pull-right text-muted"><i class="glyphicon glyphicon-chevron-right"></i></span> Mauris at pellentesque</a></div><h5 class="no-margin m-b">Border</h5><div class=list-group><a href class="list-group-item b-l-primary"><span class="pull-right text-primary"><i class="fa fa-circle text-xs"></i></span> Border left primary</a> <a href class="list-group-item b-l-warning"><span class="pull-right text-warning"><i class="fa fa-circle text-xs"></i></span> Border left warning</a> <a href class="list-group-item b-l-success"><span class="pull-right text-success"><i class="fa fa-circle text-xs"></i></span> Border left success</a> <a href class="list-group-item b-l-danger"><span class="pull-right text-danger"><i class="fa fa-circle text-xs"></i></span> Border left danger</a> <a href class="list-group-item b-l-info"><span class="pull-right text-info"><i class="fa fa-circle text-xs"></i></span> Border left info</a></div><h5 class="no-margin m-b">Medium</h5><div class="list-group list-group-md"><a href class=list-group-item>Lorem ipsum dolor sit amet, consectetur adipiscing elit</a> <a href class=list-group-item>Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugia</a> <a href class=list-group-item>Vestibulum ullamcorper sodales nisi nec condimentum</a> <a href class=list-group-item>Donec eleifend condimentum nisl eu consectetur. Integer eleifend</a> <a href class=list-group-item>Lectus arcu malesuada sem</a></div><h5 class="no-margin m-b">Small and Gap</h5><div class="list-group list-group-sm list-group-gap"><a href class=list-group-item>Lorem ipsum dolor sit amet, consectetur adipiscing elit</a> <a href class=list-group-item>Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugia</a> <a href class=list-group-item>Vestibulum ullamcorper sodales nisi nec condimentum</a> <a href class="list-group-item b-l-warning">Sollicitudin venenatis ipsum ac</a> <a href class="list-group-item b-l-info">Donec eleifend condimentum nisl eu consectetur. Integer eleifend</a> <a href class="list-group-item b-success">Lectus arcu malesuada sem</a></div></div><div class=col-sm-6><h5 class="no-margin m-b">Title and Ellipsis</h5><ul class=list-group><li class=list-group-item><div class="block font-bold">This is title</div>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</li><li class="list-group-item active"><a href class="block font-bold">Title and link</a> <span class=text-muted>Morbi id neque quam</span></li><li class=list-group-item><a href><span class="block font-bold">Title and description link</span> Aliquam sollicitudin venenatis ipsum</a></li><li class=list-group-item><a href><span class="block font-bold">Ellipsis description</span></a> <span class="clear text-ellipsis">Vestibulum ullamcorper sodales nisi nec condimentum Aliquam sollicitudin venenatis ipsum</span></li><li class=list-group-item><a href class="clear text-ellipsis block font-bold"><span class=h5>Ellipsis title and description, ullamcorper sodales nisi nec condimentum Aliquam sollicitudin venenatis</span></a> <span class="clear text-ellipsis">Vestibulum ullamcorper sodales nisi nec condimentum Aliquam sollicitudin venenatis ipsum</span></li></ul><h5 class="no-margin m-b">Badge and Label</h5><div class=list-group><a href class=list-group-item><span class="pull-right badge bg-info">12</span> Consectetur adipiscing elit.</a> <a href class=list-group-item><span class="pull-right label bg-success">5</span> Lorem ipsum dolor sit amet</a> <a href class=list-group-item><span class="pull-right text-muted m-l-xs"><i class="glyphicon glyphicon-chevron-right"></i></span> <span class="pull-right label bg-primary">4</span> Ullamcorper solli citudin venenatis ipsum</a> <a href class=list-group-item><span class="pull-right badge bg-danger">9</span> Aliquam sodales nisi nec condimentum</a> <a href class=list-group-item><span class="pull-right badge bg-warning">10</span> Mauris at pellentesque</a></div><h5 class="no-margin m-b">Alternative</h5><div class="list-group list-group-alt"><a href class=list-group-item>Lorem ipsum dolor sit amet, consectetur adipiscing elit</a> <a href class="list-group-item active">Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugia</a> <a href class=list-group-item>Vestibulum ullamcorper sodales nisi nec condimentum</a> <a href class=list-group-item>Donec eleifend condimentum nisl eu consectetur. Integer eleifend</a> <a href class=list-group-item>Lectus arcu malesuada sem</a></div><h5 class="no-margin m-b">With Gap</h5><div class="list-group list-group-gap"><a href class=list-group-item>Lorem ipsum dolor sit amet, consectetur adipiscing elit</a> <a href class=list-group-item>Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugia</a> <a href class=list-group-item>Vestibulum ullamcorper sodales nisi nec condimentum</a> <a href class=list-group-item>Donec eleifend condimentum nisl eu consectetur. Integer eleifend</a> <a href class=list-group-item>Lectus arcu malesuada sem</a></div><h5 class="no-margin m-b">Media</h5><ul class=list-group><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x b-success"><img src=images/a1.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Jonathan Doe</a> Lorem ipsum dolor sit amet, consectetur adipiscing elit</div></li><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x b-success"><img src=images/a2.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Jack Michale</a> Sectetur adipiscing elit</div></li><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x b-warning"><img src=images/a3.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Jessi</a> Sectetur adipiscing elit</div></li><li class=list-group-item><a href class="pull-left w-thumb m-r b-b b-b-2x"><img src=images/a4.jpg class=img-responsive></a><div class=clear><a href class="font-bold block">Sodake</a> Vestibulum ullamcorper sodales nisi nec condimentum</div></li></ul></div></div></div>');
    $templateCache.put('views/ui/component/nav.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Navs</h3></div><div class=p-md><div class=row><div class=col-sm-6><h5 class="no-margin m-b">Nav with sub</h5><ul class="nav m-b-lg" ui-nav><li class=active><a href><span class="pull-right label bg-info">NEW</span> Pages</a></li><li><a href>UI Kits</a></li><li><a href class=auto><span class="pull-right text-muted m-r-xs"><i class="fa fa-plus inline"></i> <i class="fa fa-minus none"></i></span> Components</a><ul class="nav nav-sub nav-sm"><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Arrow</a></li><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Button</a></li><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Colors</a></li></ul></li><li><a href><span class="pull-right badge bg-success">8</span> Mail</a></li></ul><h5 class="no-margin m-b">Nav Pills</h5><ul class="nav nav-pills m-b" ui-nav><li class=active><a href>Pages</a></li><li><a href>Components <span class="badge bg-info">2</span></a></li><li><a href>UI Kits</a></li></ul><ul class="nav nav-sm nav-pills m-b" ui-nav><li><a href>Small</a></li><li class=active><a href>Components <span class="badge bg-success badge-sm">2</span></a></li><li><a href>UI Kits</a></li></ul><ul class="nav nav-xs nav-pills m-b" ui-nav><li><a href>Nav xs</a></li><li><a href>Components <span class="badge bg-success badge-xs">2</span></a></li><li class=active><a href>UI Kits</a></li></ul><ul class="nav nav-xxs nav-rounded nav-pills m-b-lg" ui-nav><li class=active><a href>Rounded</a></li><li><a href>Components</a></li><li><a href>UI Kits</a></li></ul><h5 class="no-margin m-b">Nav Tabs</h5><ul class="nav nav-tabs" ui-nav><li class=active><a href>Pages</a></li><li><a href>Components</a></li><li><a href>UI Kits</a></li></ul><div class="p b-a no-b-t bg-white m-b"></div><ul class="nav nav-sm nav-tabs" ui-nav><li class=active><a href>Pages</a></li><li><a href>Components <span class="badge bg-warning badge-xs">5</span></a></li><li><a href>UI Kits</a></li></ul><div class="p b-a no-b-t bg-white m-b"></div><ul class="nav nav-tabs nav-justified" ui-nav><li class=active><a href>Pages</a></li><li><a href>Components</a></li><li><a href>UI Kits</a></li></ul><div class="p b-a no-b-t bg-white m-b"></div></div><div class=col-sm-6><h5 class="no-margin m-b">Nav in a bg-black div</h5><div class="bg-black lt m-b-lg"><ul class="nav scroll-y" ui-nav><li class=active><a href><span class="pull-right label bg-info">6</span> Pages</a></li><li><a href>UI Kits</a></li><li><a href class=auto><span class="pull-right text-muted m-r-xs"><i class="fa fa-plus inline"></i> <i class="fa fa-minus none"></i></span> Components</a><ul class="nav nav-sub nav-sm bg"><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Arrow</a></li><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Button</a></li><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Colors</a></li></ul></li><li><a href><span class="pull-right badge bg-success">8</span> Mail</a></li></ul></div><h5 class="no-margin m-b">Nav stacked</h5><ul class="nav nav-pills nav-stacked m-b-lg" ui-nav><li class=active><a href><span class="pull-right label bg-info">NEW</span> Pages</a></li><li><a href>UI Kits</a></li><li><a href class=auto><span class="pull-right text-muted m-r-xs"><i class="fa fa-plus inline"></i> <i class="fa fa-minus none"></i></span> Components</a><ul class="nav nav-sub nav-sm"><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Arrow</a></li><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Button</a></li><li><a href><span class="fa fa-angle-right fa-fw text-muted"></span> Colors</a></li></ul></li><li><a href><span class="pull-right badge bg-success">8</span> Mail</a></li></ul><h5 class="no-margin m-b">Nav Lines</h5><ul class="nav nav-md nav-lines m-b b-b" ui-nav><li class=active><a href><span class=h3>Pages</span></a></li><li><a href><span class=h3>Components</span> <span class="badge bg-success up">2</span></a></li><li><a href><span class=h3>UI Kits</span></a></li></ul><ul class="nav nav-lines m-b b-info" ui-nav><li class=active><a href>Pages</a></li><li><a href><span>Components</span> <span class="badge bg-info">2</span></a></li><li><a href>UI Kits</a></li></ul><ul class="nav nav-lines nav-sm m-b b-success" ui-nav><li><a href>Pages</a></li><li class=active><a href><span>Components</span> <span class="badge badge-sm bg-success">2</span></a></li><li><a href>UI Kits</a></li></ul><ul class="nav nav-lines nav-xs m-b b-primary" ui-nav><li><a href>Pages</a></li><li><a href><span>Components</span> <span class="badge badge-xs bg-primary">2</span></a></li><li class=active><a href>UI Kits</a></li></ul></div></div></div>');
    $templateCache.put('views/ui/component/panel.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Panels</h3></div><div class=p-md><div class=row><div class=col-sm-4><div class=panel><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel b-light"><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel b-a"><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel b-light"><div class="panel-heading b-b b-light">Heading</div><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel b-info"><div class="panel-heading b-b b-light">Heading</div><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel b-success"><div class="panel-heading b-b b-light">Heading</div><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel b-a"><div class="panel-heading b-b b-light">Heading</div><div class=panel-body>Panel Body</div><div class="panel-footer b-t b-light bg-white">Footer</div></div></div><div class=col-sm-4><div class="panel b-primary"><div class="panel-heading b-light">Panel heading</div><div class=panel-body>Panel Body</div><div class="panel-footer bg-white">Footer</div></div></div><div class=col-sm-4><div class="panel panel-default"><div class=panel-heading>Panel default</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-primary"><div class=panel-heading>Panel primary</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-info"><div class=panel-heading>Panel info</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-success"><div class=panel-heading>Panel success</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-warning"><div class=panel-heading>Panel warning</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-danger"><div class=panel-heading>Panel danger</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-dark"><div class=panel-heading>Panel dark</div><div class=panel-body>Panel Body</div><div class=panel-footer>Footer</div></div></div><div class=col-sm-4><div class="panel panel-primary b-t-4x"><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel panel-info b-t-4x"><div class=panel-body>Panel Body</div></div></div><div class=col-sm-4><div class="panel panel-success b-t-4x"><div class=panel-body>Panel Body</div></div></div></div></div>');
    $templateCache.put('views/ui/component/progressbar.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Progressbars</h3></div><div class=p-md><div class=row><div class=col-sm-6><h5 class="no-margin m-b">Colors</h5><div class=progress><div class="progress-bar progress-bar-primary" style=width:60%>60%</div></div><div class=progress><div class="progress-bar progress-bar-info" style=width:30%>30%</div></div><div class=progress><div class="progress-bar progress-bar-success" style=width:40%>40%</div></div><div class=progress><div class="progress-bar progress-bar-warning" style=width:30%>30%</div></div><div class=progress><div class="progress-bar progress-bar-danger" style=width:20%>20%</div></div><h5 class="no-margin m-b">Size</h5><div class="progress progress-sm"><div class="progress-bar progress-bar-primary" style=width:40%>40%</div></div><div class="progress progress-sm"><div class="progress-bar progress-bar-info" style=width:30%>30%</div></div><div class="progress progress-xs"><div class="progress-bar progress-bar-success" style=width:50%></div></div><div class="progress progress-xs"><div class="progress-bar progress-bar-warning" style=width:20%></div></div><div class="progress progress-xxs"><div class="progress-bar progress-bar-danger" style=width:15%>15%</div></div></div><div class=col-sm-6><h5 class="no-margin m-b">Striped</h5><div class="progress progress-striped"><div class="progress-bar progress-bar-primary" style=width:40%>40%</div></div><div class="progress progress-striped active"><div class="progress-bar progress-bar-info" style=width:30%>30%</div></div><h5 class="no-margin m-b">Stack</h5><div class=progress><div class="progress-bar progress-bar-info" style=width:20%>20%</div><div class="progress-bar progress-bar-success" style=width:30%>30%</div><div class="progress-bar progress-bar-warning" style=width:15%>15%</div></div><h5 class="no-margin m-b">No radius</h5><div class="progress progress-striped no-radius"><div class="progress-bar progress-bar-success" style=width:50%>50%</div></div><div class="progress progress-striped progress-sm no-radius"><div class="progress-bar progress-bar-warning" style=width:20%>20%</div></div><div class="progress progress-striped progress-xs no-radius"><div class="progress-bar bg-dark" style=width:15%></div></div></div></div></div>');
    $templateCache.put('views/ui/component/streamline.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Streamlines</h3></div><div class=p-md><div class=box><div class=col-sm-6><div class="streamline b-l m-b"><div class=sl-item><div class=sl-content><div class=text-muted>2 minutes ago</div><p>Check your Internet connection</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>9:30</div><p>Meeting with tech leader</p></div></div><div class="sl-item b-success"><div class=sl-content><div class=text-muted>8:30</div><p>Call to customer <a href class=text-info>Jacob</a> and discuss the detail.</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>Wed, 25 Mar</div><p>Finished task <a href class=text-info>Testing</a>.</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>Thu, 10 Mar</div><p>Trip to the moon</p></div></div><div class="sl-item b-info"><div class=sl-content><div class=text-muted>Sat, 5 Mar</div><p>Prepare for presentation</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>Sun, 11 Feb</div><p><a href class=text-info>Jessi</a> assign you a task <a href class=text-info>Mockup Design</a>.</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>Thu, 17 Jan</div><p>Follow up to close deal</p></div></div></div></div><div class=col-sm-6><div class="streamline b-l b-inverse m-b"><div class="sl-item sl-item-md"><div class=sl-icon><i class="fa fa-check text-muted"></i></div><div class=sl-content><div class=text-muted>Just now</div><p>Finished task <a href class=text-info>#features 4</a>.</p></div></div><div class="sl-item sl-item-md b-success"><div class=sl-icon><i class="fa fa-twitter text-success"></i></div><div class=sl-content><div class=text-muted>11:30</div><p><a href>@Jessi</a> retwit your post</p></div></div><div class="sl-item b-primary b-l"><div class=sl-content><div class=text-muted>10:30</div><p>Call to customer <a href class=text-info>Jacob</a> and discuss the detail.</p></div></div><div class="sl-item sl-item-md b-info"><div class=sl-icon><i class="fa fa-bolt text-info"></i></div><div class=sl-content><div class=text-muted>3 days ago</div><p><a href class=text-info>Jessi</a> commented your post.</p></div></div><div class="sl-item b-warning"><div class=sl-content><div class=text-muted>Thu, 10 Mar</div><p>Trip to the moon</p></div></div><div class="sl-item b-info"><div class=sl-content><div class=text-muted>Sat, 5 Mar</div><p>Prepare for presentation</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>Sun, 11 Feb</div><p><a href class=text-info>Jessi</a> assign you a task <a href class=text-info>Mockup Design</a>.</p></div></div><div class=sl-item><div class=sl-content><div class=text-muted>Thu, 17 Jan</div><p>Follow up to close deal</p></div></div></div></div></div></div>');
    $templateCache.put('views/ui/component/timeline.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><label class="ui-switch bg-info pull-right m-t-xs"><input type=checkbox ng-model=center> <i></i></label><h3 class=no-margin>Timelines</h3></div><div class=p-md><ul class=timeline ng-class="{\'timeline-center\': center}"><li class=tl-header><div class="btn btn-default">Timeline</div></li><li class=tl-item><div class="tl-wrap b-info"><span class="tl-date text-muted">5s ago</span><div class=tl-content>Simple timeline title</div></div></li><li class=tl-item><div class=tl-wrap><span class="tl-date text-muted">2h ago</span><div class="tl-content panel p-sm b-a"><span class="arrow b-white left pull-top"></span><div>Content in a panel with arrow</div></div></div></li><li class="tl-item tl-left"><div class="tl-wrap b-inverse"><span class="tl-date text-muted">7:30 am</span><div class="tl-content panel bg-inverse p-sm"><span class="arrow b-inverse left pull-top hidden-left"></span> <span class="arrow b-inverse right pull-top visible-left"></span><div class=text-lt>Content with background</div></div></div></li><li class=tl-item><div class="tl-wrap b-primary"><span class="tl-date text-muted">04.2014</span><div class="tl-content panel b-a w-lg w-auto-xs"><span class="arrow b-white left pull-top"></span><div class="text-lt p-h m-b-sm">With Title</div><div class="p b-t b-light">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. Vestibulum ullamcorper</div></div></div></li><li class="tl-item tl-left"><div class="tl-wrap b-success"><span class="tl-date text-muted">04.2014</span><div class="tl-content panel no-border bg-info dk block"><span class="arrow b-info left pull-top hidden-left"></span> <span class="arrow b-info right pull-top visible-left"></span><div class="text-lt p-h m-b-sm font-bold">Block</div><div class="panel-body b-t b-info">Consectetur adipiscing elit. Morbi id neque quam. Aliquam sollicitudin venenatis ipsum ac feugiat. Vestibulum ullamcorper</div></div></div></li><li class=tl-header><div class="btn btn-sm btn-default btn-rounded">2014</div></li><li class=tl-item><div class=tl-wrap><span class="tl-date text-muted">10.08.2013</span><div class="tl-content panel p-sm b-a"><span class="arrow b-white left pull-up hidden-left"></span> <span class="arrow b-white right pull-up visible-left"></span><div class=text-lt>A good story to hear.</div></div></div></li><li class=tl-header><i class="ui-icon fa fa-twitter b-white b-2x bg-info"></i></li><li class="tl-item tl-left"><div class="tl-wrap b-white"><span class="tl-date text-muted">5.07.2013</span><div class="tl-content panel p-sm b-a"><span class="arrow b-white left pull-up hidden-left"></span> <span class="arrow b-white right pull-up visible-left"></span><div class=text-lt>Yesterday is History</div></div></div></li><li class=tl-header><div class="btn btn-sm btn-default btn-rounded">more</div></li></ul></div>');
    $templateCache.put('views/ui/form/editor.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Editor</h3></div><div class=p-md><p class=m-b-md>A Lightweight, Two-Way-Bound & Totally Awesome Angular.js Text-Editor <a href="https://github.com/fraywing/textAngular/" target=blank><i class="fa fa-link text-muted"></i></a></p><div lazy-load=textAngular><div text-angular ng-model=htmlVariable class=btn-groups></div></div></div>');
    $templateCache.put('views/ui/form/element.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Elements</h3></div><div class=p-md><h5 class="no-margin m-b font-bold">Inputs</h5><p>Most common form control, text-based input fields. Includes support for all HTML5 types: text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel, and color.</p><form class=form-horizontal><div class=form-group><label class="col-sm-2 control-label">Text</label><div class=col-sm-10><input type=text class=form-control></div></div><div class=form-group><label class="col-sm-2 control-label">Rounded</label><div class=col-sm-10><input type=text class="form-control rounded"></div></div><div class=form-group><label class="col-sm-2 control-label" for=input-id-1>Label focus</label><div class=col-sm-10><input type=text class=form-control id=input-id-1></div></div><div class=form-group><label class="col-sm-2 control-label">Password</label><div class=col-sm-10><input type=password name=password class=form-control></div></div><div class=form-group><label class="col-sm-2 control-label">Placeholder</label><div class=col-sm-10><input type=text class=form-control placeholder=placeholder></div></div><div class=form-group><label class="col-sm-2 control-label">Help text</label><div class=col-sm-10><input type=text class=form-control> <span class="help-block m-b-none">A block of help text that breaks onto a new line and may extend beyond one line.</span></div></div><div class=form-group><label class="col-lg-2 control-label">Disabled</label><div class=col-lg-10><input class=form-control type=text placeholder="Disabled input here..." disabled></div></div><div class=form-group><label class="col-lg-2 control-label">Readonly</label><div class=col-lg-10><input class=form-control type=text placeholder="Readonly  input here..." readonly></div></div><div class=form-group><label class="col-lg-2 control-label">Static control</label><div class=col-lg-10><p class=form-control-static>email@example.com</p></div></div><div class="form-group has-success has-feedback"><label class="col-sm-2 control-label">Input with success</label><div class=col-sm-10><input type=text class=form-control> <span class="glyphicon glyphicon-ok form-control-feedback"></span></div></div><div class="form-group has-warning has-feedback"><label class="col-sm-2 control-label">Input with warning</label><div class=col-sm-10><input type=text class=form-control> <span class="glyphicon glyphicon-warning-sign form-control-feedback"></span></div></div><div class="form-group has-error has-feedback"><label class="col-sm-2 control-label">Input with error</label><div class=col-sm-10><input type=text class=form-control> <span class="glyphicon glyphicon-remove form-control-feedback"></span></div></div><div class="form-group form-group-lg"><label class="col-sm-2 control-label" for=formGroupInputLarge>Large label</label><div class=col-sm-10><input class=form-control type=text id=formGroupInputLarge placeholder="Large input"></div></div><div class="form-group form-group-sm"><label class="col-sm-2 control-label" for=formGroupInputSmall>Small label</label><div class=col-sm-10><input class=form-control type=text id=formGroupInputSmall placeholder="Small input"></div></div><div class=form-group><label class="col-sm-2 control-label">Column sizing</label><div class=col-sm-10><div class=row><div class=col-md-2><input type=text class=form-control placeholder=.col-md-2></div><div class=col-md-3><input type=text class=form-control placeholder=.col-md-3></div><div class=col-md-4><input type=text class=form-control placeholder=.col-md-4></div></div></div></div><div class=form-group><label class="col-sm-2 control-label">Input groups</label><div class=col-sm-10><div class="input-group m-b"><span class=input-group-addon>@</span> <input type=text class=form-control placeholder=Username></div><div class="input-group m-b"><input type=text class=form-control> <span class=input-group-addon>.00</span></div><div class="input-group m-b"><span class=input-group-addon>$</span> <input type=text class=form-control> <span class=input-group-addon>.00</span></div><div class="input-group m-b"><span class=input-group-addon><input type=checkbox></span> <input type=text class=form-control></div><div class=input-group><span class=input-group-addon><input type=radio></span> <input type=text class=form-control></div></div></div><div class=form-group><label class="col-sm-2 control-label">Button addons</label><div class=col-sm-10><div class="input-group m-b"><span class=input-group-btn><button class="btn btn-default" type=button>Go!</button></span> <input type=text class=form-control></div><div class=input-group><input type=text class=form-control> <span class=input-group-btn><button class="btn btn-default" type=button>Go!</button></span></div></div></div><div class=form-group><label class="col-sm-2 control-label">With dropdowns</label><div class=col-sm-10><div class="input-group m-b"><div class="input-group-btn dropdown"><button type=button class="btn btn-default dropdown-toggle" data-toggle=dropdown>Action <span class=caret></span></button><ul class=dropdown-menu><li><a href>Action</a></li><li><a href>Another action</a></li><li><a href>Something else here</a></li><li class=divider></li><li><a href>Separated link</a></li></ul></div><input type=text class=form-control></div><div class=input-group><input type=text class=form-control><div class="input-group-btn dropdown"><button type=button class="btn btn-default dropdown-toggle" data-toggle=dropdown>Action <span class=caret></span></button><ul class="dropdown-menu pull-right"><li><a href>Action</a></li><li><a href>Another action</a></li><li><a href>Something else here</a></li><li class=divider></li><li><a href>Separated link</a></li></ul></div></div></div></div><div class=form-group><label class="col-sm-2 control-label">Segmented</label><div class=col-sm-10><div class="input-group m-b"><div class="input-group-btn dropdown"><button type=button class="btn btn-default" tabindex=-1>Action</button> <button type=button class="btn btn-default dropdown-toggle" data-toggle=dropdown><span class=caret></span></button><ul class=dropdown-menu><li><a href>Action</a></li><li><a href>Another action</a></li><li><a href>Something else here</a></li><li class=divider></li><li><a href>Separated link</a></li></ul></div><input type=text class=form-control></div><div class=input-group><input type=text class=form-control><div class="input-group-btn dropdown"><button type=button class="btn btn-default" tabindex=-1>Action</button> <button type=button class="btn btn-default dropdown-toggle" data-toggle=dropdown><span class=caret></span></button><ul class="dropdown-menu pull-right"><li><a href>Action</a></li><li><a href>Another action</a></li><li><a href>Something else here</a></li><li class=divider></li><li><a href>Separated link</a></li></ul></div></div></div></div><h5 class=font-bold>Checkboxes and radios</h5><p>Checkboxes are for selecting one or several options in a list, while radios are for selecting one from many.</p><div class=form-group><label class="col-sm-2 control-label">Default (stacked)</label><div class=col-sm-10><div class=checkbox><label><input type=checkbox> one is this and that&mdash;be sure to include why it\'s great</label></div><div class="checkbox disabled"><label><input type=checkbox disabled> two is disabled</label></div><div class=radio><label><input type=radio name=optionsRadios id=optionsRadios1 value=option1 checked> one is this and that&mdash;be sure to include why it\'s great</label></div><div class=radio><label><input type=radio name=optionsRadios id=optionsRadios2 value=option2> two can be something else and selecting it will deselect one</label></div><div class="radio disabled"><label><input type=radio name=optionsRadios id=optionsRadios3 value=option3 disabled> three is disabled</label></div></div></div><div class=form-group><label class="col-sm-2 control-label">Inline</label><div class=col-sm-10><label class=checkbox-inline><input type=checkbox value=option1> a</label><label class=checkbox-inline><input type=checkbox value=option2> b</label><label class=checkbox-inline><input type=checkbox value=option3> c</label><br><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio1 value=option1> 1</label><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio2 value=option2> 2</label><label class=radio-inline><input type=radio name=inlineRadioOptions id=inlineRadio3 value=option3> 3</label></div></div><div class=form-group><label class="col-sm-2 control-label">Styled</label><div class=col-sm-10><div class=checkbox><label class=ui-checks><input type=checkbox> <i></i> one</label></div><div class=checkbox><label class=ui-checks><input type=checkbox checked> <i></i> two checked</label></div><div class=checkbox><label class=ui-checks><input type=checkbox checked disabled> <i></i> three checked and disabled</label></div><div class=checkbox><label class=ui-checks><input type=checkbox disabled> <i></i> four disabled</label></div><div class=radio><label class=ui-checks><input type=radio name=a value=option1> <i></i> one</label></div><div class=radio><label class=ui-checks><input type=radio name=a value=option2 checked> <i></i> two checked</label></div><div class=radio><label class=ui-checks><input type=radio value=option2 checked disabled> <i></i> three checked and disabled</label></div><div class=radio><label class=ui-checks><input type=radio name=a disabled> <i></i> four disabled</label></div><div class=radio><label class="ui-checks ui-checks-md"><input type=radio name=a> <i></i> Medium size radio</label></div><div class=checkbox><label class="ui-checks ui-checks-md"><input type=checkbox> <i></i> Medium size checkbox</label></div><div class="m-b-xs m-t"><label class="ui-checks ui-checks-lg"><input type=radio name=a> <i></i> Large size radio</label></div><div class=checkbox><label class="ui-checks ui-checks-lg"><input type=checkbox> <i></i> Large size checkbox</label></div></div></div><div class=form-group><label class="col-sm-2 control-label">Switch</label><div class=col-sm-10><label class="ui-switch m-t-xs m-r"><input type=checkbox checked> <i></i></label><label class="ui-switch bg-primary m-t-xs m-r"><input type=checkbox checked> <i></i></label><label class="ui-switch bg-info m-t-xs m-r"><input type=checkbox checked> <i></i></label><label class="ui-switch bg-warning m-t-xs m-r"><input type=checkbox checked> <i></i></label><label class="ui-switch bg-danger m-t-xs m-r"><input type=checkbox checked> <i></i></label></div></div><div class=form-group><label class="col-sm-2 control-label">Radio Switch</label><div class=col-sm-10><label class="ui-switch m-t-xs m-r"><input type=radio name=switch checked> <i></i></label><label class="ui-switch m-t-xs m-r"><input type=radio name=switch> <i></i></label></div></div><div class=form-group><label class="col-sm-2 control-label">Medium</label><div class=col-sm-10><label class="ui-switch ui-switch-md bg-info m-t-xs"><input type=checkbox checked> <i></i></label></div></div><div class=form-group><label class="col-sm-2 control-label">Large</label><div class=col-sm-10><label class="ui-switch ui-switch-lg bg-dark m-t-xs m-r"><input type=checkbox> <i></i></label></div></div><h5 class=font-bold>Selects and Textarea</h5><p>Use the default option, or add multiple to show multiple options at once.</p><div class=form-group><label class="col-sm-2 control-label">Select</label><div class=col-sm-10><select class=form-control><option>1</option><option>2</option><option>3</option><option>4</option></select></div></div><div class="form-group form-group-lg"><label class="col-sm-2 control-label">Select large</label><div class=col-sm-10><select class=form-control><option>1</option><option>2</option><option>3</option><option>4</option></select></div></div><div class="form-group form-group-sm"><label class="col-sm-2 control-label">Select small</label><div class=col-sm-10><select class=form-control><option>1</option><option>2</option><option>3</option><option>4</option></select></div></div><div class=form-group><label class="col-sm-2 control-label">Multiple</label><div class=col-lg-4><select multiple class=form-control><option>1</option><option>2</option><option>3</option><option>4</option></select></div></div><div class=form-group><label class="col-sm-2 control-label">Disabled</label><div class=col-sm-10><select class=form-control disabled><option>1</option><option>2</option><option>3</option><option>4</option></select></div></div><div class=form-group><label class="col-sm-2 control-label">Textarea</label><div class=col-sm-10><textarea class=form-control rows=5></textarea></div></div><div class=form-group><label class="col-sm-2 control-label">File input</label><div class=col-sm-10><input type=file></div></div><div class="form-group m-t-lg"><div class="col-sm-4 col-sm-offset-2"><button type=submit class="btn btn-default">Cancel</button> <button type=submit class="btn btn-primary">Save changes</button></div></div></form></div>');
    $templateCache.put('views/ui/form/file-upload.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Upload</h3></div><div><div class=box nv-file-drop="" uploader=uploader filters="queueLimit, customFilter"><div class=col-md-3><div class=p-md><div ng-show=uploader.isHTML5 class=m-b-md><div class="b-a b-dashed p-lg bg-white text-center m-b" nv-file-over="" over-class=b-info uploader=uploader>Base drop zone</div><div nv-file-drop="" uploader=uploader options="{ url: \'/foo\' }"><div nv-file-over="" uploader=uploader over-class=b-danger class="b-a b-white b-2x b-dashed p-lg text-center">Another drop zone with its own settings</div></div></div><p>Multiple</p><input type=file nv-file-select="" uploader=uploader multiple><p class=m-t-md>Single</p><input type=file nv-file-select="" uploader="uploader"></div></div><div class="col-md-9 bg-light b-l bg-auto"><div class=p-md><div class=m-b><b class="badge bg-info pos-rlt m-r-xs"><i class="arrow right b-info pull-in"></i>{{ uploader.queue.length }}</b> file(s)</div><table class="table bg-white b-a"><thead><tr><th width=50%>Name</th><th ng-show=uploader.isHTML5>Size</th><th ng-show=uploader.isHTML5>Progress</th><th>Status</th><th>Actions</th></tr></thead><tbody><tr ng-repeat="item in uploader.queue"><td><strong>{{ item.file.name }}</strong></td><td ng-show=uploader.isHTML5 nowrap>{{ item.file.size/1024/1024|number:2 }} MB</td><td ng-show=uploader.isHTML5><div class="progress progress-sm no-margin m-t-xs"><div class="progress-bar bg-info" role=progressbar ng-style="{ \'width\': item.progress + \'%\' }"></div></div></td><td class=text-center><span ng-show=item.isSuccess class=text-success><i class="glyphicon glyphicon-ok"></i></span> <span ng-show=item.isCancel class=text-warning><i class="glyphicon glyphicon-ban-circle"></i></span> <span ng-show=item.isError class=text-danger><i class="glyphicon glyphicon-remove"></i></span></td><td nowrap><button type=button class="btn btn-default btn-xs" ng-click=item.upload() ng-disabled="item.isReady || item.isUploading || item.isSuccess">Upload</button> <button type=button class="btn btn-default btn-xs" ng-click=item.cancel() ng-disabled=!item.isUploading>Cancel</button> <button type=button class="btn btn-default btn-xs" ng-click=item.remove()>Remove</button></td></tr></tbody></table><div><div><p>Queue progress:</p><div class="progress bg-light dker"><div class="progress-bar progress-bar-striped bg-info" role=progressbar ng-style="{ \'width\': uploader.progress + \'%\' }"></div></div></div><button type=button class="btn btn-addon btn-info" ng-click=uploader.uploadAll() ng-disabled=!uploader.getNotUploadedItems().length><i class="fa fa-cloud-upload"></i> Upload all</button> <button type=button class="btn btn-addon btn-default" ng-click=uploader.cancelAll() ng-disabled=!uploader.isUploading><i class="fa fa-ban"></i> Cancel all</button> <button type=button class="btn btn-addon btn-default" ng-click=uploader.clearQueue() ng-disabled=!uploader.queue.length><i class="fa fa-times"></i> Remove all</button><p class="text-muted m-t">Note: upload.php file included.</p></div></div></div></div></div>');
    $templateCache.put('views/ui/form/image-crop.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Image Crop</h3></div><div class=p-md><div class=m-b>Select an image file <input type=file id="fileInput"></div><div class="b-a bg-white m-r-xs m-b-xs"><div class=bg-light style=height:256px><img-crop image=myImage result-image=myCroppedImage result-image-size=128 area-type={{cropType}}></img-crop></div></div><div class="b-a inline"><div class=bg-light><img ng-src="{{myCroppedImage}}"></div></div><div class="block m-t"><div class=btn-group ng-model=cropType bs-radio-group><label class="btn btn-default"><input type=radio class="btn btn-default" value=circle> Circle</label><label class="btn btn-default"><input type=radio class="btn btn-default" value=square> Square</label></div></div><div></div></div>');
    $templateCache.put('views/ui/form/layout.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Layouts</h3></div><div class=p-md><div class=row><div class=col-md-6><div class="panel panel-default"><div class="panel-heading bg-white">Basic form<br><small class=text-muted>Individual form controls automatically receive some global styling. All textual &lt;input>, &lt;textarea>, and &lt;select> elements with .form-control are set to width: 100%; by default. Wrap labels and controls in .form-group for optimum spacing.</small></div><div class=panel-body><form role=form><div class=form-group><label for=exampleInputEmail1>Email address</label><input type=email class=form-control id=exampleInputEmail1 placeholder="Enter email"></div><div class=form-group><label for=exampleInputPassword1>Password</label><input type=password class=form-control id=exampleInputPassword1 placeholder=Password></div><div class=form-group><label for=exampleInputFile>File input</label><input type=file id=exampleInputFile><p class=help-block>Example block-level help text here.</p></div><div class=checkbox><label><input type=checkbox> Check me out</label></div><button type=submit class="btn btn-default m-b">Submit</button></form></div></div></div><div class=col-md-6><div class="panel panel-default"><div class="panel-heading bg-white">Horizontal form<br><small class=text-muted>Use Bootstrap\'s predefined grid classes to align labels and groups of form controls in a horizontal layout by adding .form-horizontal to the form. Doing so changes .form-groups to behave as grid rows, so no need for .row.</small></div><div class=panel-body><form class=form-horizontal role=form><div class=form-group><label for=inputEmail3 class="col-sm-2 control-label">Email</label><div class=col-sm-10><input type=email class=form-control id=inputEmail3 placeholder=Email></div></div><div class=form-group><label for=inputPassword3 class="col-sm-2 control-label">Password</label><div class=col-sm-10><input type=password class=form-control id=inputPassword3 placeholder=Password></div></div><div class=form-group><div class="col-sm-offset-2 col-sm-10"><div class=checkbox><label><input type=checkbox> Remember me</label></div></div></div><div class=form-group><div class="col-sm-offset-2 col-sm-10"><button type=submit class="btn btn-default">Sign in</button></div></div></form></div></div><div class="panel panel-default"><div class="panel-heading bg-white">Column sizing</div><div class=panel-body><div class="row row-sm"><div class=col-xs-3><input type=text class=form-control placeholder=.col-xs-3></div><div class=col-xs-4><input type=text class=form-control placeholder=.col-xs-4></div><div class=col-xs-5><input type=text class=form-control placeholder=.col-xs-5></div></div></div></div></div><div class=col-lg-12><div class="panel panel-default"><div class="panel-heading bg-white">Inline form<br><small class=text-muted>Add ".form-inline" to your &lt;form> for left-aligned and inline-block controls. This only applies to forms within viewports that are at least 768px wide.</small></div><div class=panel-body><form class=form-inline role=form><div class=form-group><label class=sr-only for=exampleInputEmail2>Email address</label><input type=email class=form-control id=exampleInputEmail2 placeholder="Enter email"></div><div class=form-group><div class=input-group><div class=input-group-addon>@</div><input class=form-control type=email placeholder="Enter email"></div></div><div class=form-group><label class=sr-only for=exampleInputPassword2>Password</label><input type=password class=form-control id=exampleInputPassword2 placeholder=Password></div><div class="checkbox m-l"><label class=ui-checks><input type=checkbox><i></i> Remember me</label></div><button type=submit class="btn btn-default">Sign in</button></form></div></div></div></div></div>');
    $templateCache.put('views/ui/form/select.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Selects</h3></div><div class=p-md><p class=m-b-md>AngularJS-native version of Select2 and Selectize <a href=https://github.com/angular-ui/ui-select target=blank><i class="fa fa-link text-muted"></i></a></p><div lazy-load=ui.select><form class=form-horizontal><fieldset><div class=form-group><label class="col-sm-3 control-label">Address</label><div class=col-sm-6><ui-select ng-model=address.selected theme=bootstrap ng-disabled=disabled reset-search-input=false style="width: 300px"><ui-select-match placeholder="Enter an address...">{{$select.selected.formatted_address}}</ui-select-match><ui-select-choices repeat="address in addresses track by $index" refresh=refreshAddresses($select.search) refresh-delay=0><div ng-bind-html="address.formatted_address | highlight: $select.search"></div></ui-select-choices></ui-select><span class=help-block>{{address.selected.formatted_address}}</span></div></div><div class=form-group><label class="col-sm-3 control-label">Default</label><div class=col-sm-6><ui-select ng-model=person.selected theme=bootstrap><ui-select-match placeholder="Select or search a person in the list...">{{$select.selected.name}}</ui-select-match><ui-select-choices repeat="item in people | filter: $select.search"><div ng-bind-html="item.name | highlight: $select.search"></div><small ng-bind-html="item.email | highlight: $select.search"></small></ui-select-choices></ui-select></div></div><div class=form-group><label class="col-sm-3 control-label">Grouped</label><div class=col-sm-6><ui-select ng-model=person.selected theme=bootstrap><ui-select-match placeholder="Select or search a person in the list...">{{$select.selected.name}}</ui-select-match><ui-select-choices group-by="\'group\'" repeat="item in people | filter: $select.search"><span ng-bind-html="item.name | highlight: $select.search"></span> <small ng-bind-html="item.email | highlight: $select.search"></small></ui-select-choices></ui-select></div></div><div class=form-group><label class="col-sm-3 control-label">Grouped using a string</label><div class=col-sm-6><ui-select ng-model=person.selected theme=bootstrap ng-disabled=disabled style="min-width: 300px"><ui-select-match placeholder="Select a person in the list or search his name/age...">{{$select.selected.name}}</ui-select-match><ui-select-choices group-by="\'country\'" repeat="person in people | propsFilter: {name: $select.search, age: $select.search}"><div ng-bind-html="person.name | highlight: $select.search"></div><small>email: {{person.email}} age: <span ng-bind-html="\'\'+person.age | highlight: $select.search"></span></small></ui-select-choices></ui-select></div></div><div class=form-group><label class="col-sm-3 control-label">Group using a function</label><div class=col-sm-6><ui-select ng-model=person.selected theme=bootstrap ng-disabled=disabled style="min-width: 300px"><ui-select-match placeholder="Select a person in the list or search his name/age...">{{$select.selected.name}}</ui-select-match><ui-select-choices group-by=someGroupFn repeat="person in people | propsFilter: {name: $select.search, age: $select.search}"><div ng-bind-html="person.name | highlight: $select.search"></div><small>email: {{person.email}} age: <span ng-bind-html="\'\'+person.age | highlight: $select.search"></span></small></ui-select-choices></ui-select></div></div><div class=form-group><label class="col-sm-3 control-label">With a clear button</label><div class=col-sm-6><div class=input-group><ui-select ng-model=person.selected theme=bootstrap><ui-select-match placeholder="Select or search a person in the list...">{{$select.selected.name}}</ui-select-match><ui-select-choices repeat="item in people | filter: $select.search"><span ng-bind-html="item.name | highlight: $select.search"></span> <small ng-bind-html="item.email | highlight: $select.search"></small></ui-select-choices></ui-select><span class=input-group-btn><button ng-click="person.selected = undefined" class="btn btn-default"><span class="glyphicon glyphicon-trash"></span></button></span></div></div></div><div class=form-group><label class="col-sm-3 control-label">Multiple</label><div class=col-sm-6><ui-select multiple ng-model=multipleDemo.selectedPeopleWithGroupBy theme=bootstrap ng-disabled=disabled><ui-select-match placeholder="Select person...">{{$item.name}} &lt;{{$item.email}}&gt;</ui-select-match><ui-select-choices group-by=someGroupFn repeat="person in people | propsFilter: {name: $select.search, age: $select.search}"><div ng-bind-html="person.name | highlight: $select.search"></div><small>email: {{person.email}} age: <span ng-bind-html="\'\'+person.age | highlight: $select.search"></span></small></ui-select-choices></ui-select></div></div><div class=form-group><label class="col-sm-3 control-label">Disabled</label><div class=col-sm-6><ui-select ng-model=person.selected theme=bootstrap ng-disabled=true><ui-select-match placeholder="Select or search a person in the list...">{{$select.selected.name}}</ui-select-match><ui-select-choices repeat="item in people | filter: $select.search"><div ng-bind-html="item.name | highlight: $select.search"></div><small ng-bind-html="item.email | highlight: $select.search"></small></ui-select-choices></ui-select></div></div></fieldset></form></div></div>');
    $templateCache.put('views/ui/form/slider.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Sliders</h3></div><div class=p-md><p class=m-b-md>Slider directive for AngularJS. <a href=https://github.com/Venturocket/angular-slider target=blank><i class="fa fa-link text-muted"></i></a></p><div lazy-load=vr.directives.slider><p>Single: ( {{cost}} )</p><slider ng-model=cost floor=1 ceiling=100></slider><p>Multiple: ( min:{{range.min}} - max:{{range.max}} )</p><slider ng-model=range.min ng-model-range=range.max floor=1 ceiling=100></slider><p>Formatting:</p><slider ng-model=cost translate-fn=currencyFormatting floor=1 ceiling=100></slider></div></div>');
    $templateCache.put('views/ui/form/tree.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Tree</h3></div><div><div class=box><div class="col-md-3 col-sm-6"><div><span ng-if=doing_async>...loading...</span><div lazy-load=angularBootstrapNavTree><abn-tree tree-data=my_data tree-control=my_tree on-select=my_tree_handler(branch) expand-level=2 initial-selection="Granny Smith" icon-leaf="fa fa-file-o" icon-expand="fa fa-angle-right" icon-collapse="fa fa-angle-down"></abn-tree></div></div></div><div class="col-md-9 col-sm-6 bg-light b-l bg-auto"><div class=p-md><div class="alert alert-info">{{output}}</div><button ng-click=try_changing_the_tree_data() class="btn btn-default w-md">Change The Tree Definition</button> <button ng-click=try_async_load() class="btn btn-default w-md">Load Tree Data Asynchronously</button><h5>API:</h5><div class="m-v-sm btn-groups"><button ng-click=my_tree.select_first_branch() class="btn btn-default btn-sm">First Branch</button> <button ng-click=my_tree.select_next_sibling() class="btn btn-default btn-sm">Next Sibling</button> <button ng-click=my_tree.select_prev_sibling() class="btn btn-default btn-sm">Prev Sibling</button> <button ng-click=my_tree.select_next_branch() class="btn btn-default btn-sm">Next Branch</button> <button ng-click=my_tree.select_prev_branch() class="btn btn-default btn-sm">Prev Branch</button> <button ng-click=my_tree.select_parent_branch() class="btn btn-default btn-sm">Parent</button></div><div class="m-v-sm btn-groups"><button ng-click=my_tree.expand_branch() class="btn btn-default btn-sm">Expand</button> <button ng-click=my_tree.collapse_branch() class="btn btn-default btn-sm">Collapse</button> <button ng-click=my_tree.expand_all() class="btn btn-default btn-sm">Expand All</button> <button ng-click=my_tree.collapse_all() class="btn btn-default btn-sm">Collapse All</button></div><div class="line b-b m-v-md"></div><button ng-click=try_adding_a_branch() class="btn btn-info btn-sm"><i class="fa fa-fw m-r-xs fa-plus"></i> Add Branch</button></div></div></div></div>');
    $templateCache.put('views/ui/form/validation.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Validations</h3></div><div class=p-md><div class=row><div class=col-sm-6><form name=form class=form-validation><div class="panel panel-default"><div class="panel-heading bg-white"><span class=font-bold>Register Form</span></div><div class=panel-body><div class=form-group><label>Username <em class=text-muted>(allow \'a-zA-Z0-9\', 4-10 length)</em></label><input type=text class=form-control ng-model=user.name ng-pattern="/^[a-zA-Z0-9]{4,10}$/" required></div><div class=form-group><label>Email</label><input type=email class=form-control ng-model=user.email required></div><div class="form-group m-h-n clearfix"><div class=col-sm-6><label>Enter password</label><input type=password class=form-control name=password ng-model=password required></div><div class=col-sm-6><label>Confirm password</label><input type=password class=form-control name=confirm_password required ng-model=confirm_password ui-validate=" \'$value==password\' " ui-validate-watch=" \'password\' "> <span ng-show=form.confirm_password.$error.validator>Passwords do not match!</span></div></div><div class=form-group><label>Phone</label><input type=text class=form-control placeholder="(XXX) XXXX XXX" ng-model=phone ng-pattern="/\\([0-9]{3}\\) ([0-9]{3}) ([0-9]{3})$/" required></div><div class=checkbox><label class=ui-checks><input type=checkbox ng-model=agree required><i></i> I agree to the <a href class=text-info>Terms of Service</a></label></div></div><footer class="panel-footer text-right"><button type=submit class="btn btn-info" ng-disabled=form.$invalid>Submit</button></footer></div></form></div><div class=col-sm-6><form name=form-contact class=form-validation><div class="panel panel-default"><div class="panel-heading bg-white"><span class=font-bold>Contact</span></div><div class=panel-body><div class="form-group m-h-n clearfix"><div class=col-sm-6><label>Your name</label><input type=text class=form-control placeholder=Name ng-model=contact.name required></div><div class=col-sm-6><label>Email</label><input type=email class=form-control placeholder="Enter email" ng-model=contact.email required></div></div><div class=form-group><label>Your website</label><input type=url class=form-control placeholder="http://" ng-model=contact.url required></div><div class=form-group><label>Message</label><textarea class=form-control rows=6 placeholder="Type your message"></textarea></div></div><footer class="panel-footer text-right"><button type=submit class="btn btn-info">Submit</button></footer></div></form></div></div><div class=row><div class=col-sm-6><form name=formValidate class="form-horizontal form-validation"><div class="panel panel-default"><div class="panel-heading bg-white"><strong>Basic constraints</strong></div><div class=panel-body><div class=form-group><label class="col-sm-3 control-label">Required</label><div class=col-sm-9><input type=text class=form-control placeholder="required field" ng-model=f.a required><select class="form-control m-t" ng-model=f.b required><option value="">Please choose</option><option value=foo>Foo</option><option value=bar>Bar</option></select><label class="checkbox ui-checks"><input type=checkbox ng-model=f.c required><i></i> Agree to the policy</label></div></div><div class=form-group><label class="col-sm-3 control-label">Min Length</label><div class=col-sm-9><input type=text class=form-control placeholder="minlength = 5" ng-model=f.d ng-minlength=5 required></div></div><div class=form-group><label class="col-sm-3 control-label">Max Length</label><div class=col-sm-9><input type=text class=form-control placeholder="maxlength = 5" ng-model=f.e ng-maxlength=5 required></div></div><div class=form-group><label class="col-sm-3 control-label">Range Length</label><div class=col-sm-9><input type=text class=form-control placeholder="minlength = 5 maxlength = 10" ng-model=f.f ng-minlength=5 ng-maxlength=10 required></div></div><div class=form-group><label class="col-sm-3 control-label">Min</label><div class=col-sm-9><input type=number class=form-control placeholder="min = 5" ng-model=f.g ui-validate=" \'$value >= 5\' " required></div></div><div class=form-group><label class="col-sm-3 control-label">Max</label><div class=col-sm-9><input type=number class=form-control placeholder="max = 5" ng-model=f.h ui-validate=" \'$value <= 5\' " required></div></div><div class=form-group><label class="col-sm-3 control-label">Range</label><div class=col-sm-9><input type=number class=form-control placeholder="min = 5 max = 10" ng-model=f.i ui-validate="{ a:\'$value >= 5\', b:\'$value <= 10\' }" required></div></div><div class=form-group><label class="col-sm-3 control-label">RegExp</label><div class=col-sm-9><input type=text class=form-control placeholder="hexa color code" ng-model=f.j ng-pattern="/^#(?:[0-9a-fA-F]{3}){1,2}$/" required></div></div></div><footer class="panel-footer text-right"><button type=submit class="btn btn-info">Submit</button></footer></div></form></div><div class=col-sm-6><form name=forma class="form-horizontal form-validation"><div class="panel panel-default"><div class="panel-heading bg-white"><strong>Type constraints</strong></div><div class=panel-body><div class=form-group><label class="col-sm-3 control-label">Email</label><div class=col-sm-9><input type=email class=form-control placeholder=email ng-model=g.a required></div></div><div class=form-group><label class="col-sm-3 control-label">Url</label><div class=col-sm-9><input type=url class=form-control placeholder="http://" ng-model=g.b required></div></div><div class=form-group><label class="col-sm-3 control-label">Digits</label><div class=col-sm-9><input type=text class=form-control placeholder=digits ng-model=g.c ng-pattern="/^[0-9]+$/" required></div></div><div class=form-group><label class="col-sm-3 control-label">Number</label><div class=col-sm-9><input type=number class=form-control placeholder=number ng-model=g.d required></div></div><div class=form-group><label class="col-sm-3 control-label">Alphanum</label><div class=col-sm-9><input type=text class=form-control placeholder="alphanumeric string" ng-model=g.e ng-pattern="/^[a-zA-Z]+$/" required></div></div><div class=form-group><label class="col-sm-3 control-label">Date Iso</label><div class=col-sm-9><input type=text class=form-control placeholder=YYYY-MM-DD ng-model=g.f ng-pattern="/[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])$/" required></div></div><div class=form-group><label class="col-sm-3 control-label">Phone</label><div class=col-sm-9><input type=text class=form-control placeholder="(XXX) XXXX XXX" ng-model=g.g ng-pattern="/\\([0-9]{3}\\) ([0-9]{3}) ([0-9]{3})$/" required></div></div><div class=form-group><label class="col-sm-3 control-label">Equal To</label><div class=col-sm-9><div class=row><div class=col-sm-6><input type=text name=foo class=form-control ng-model=g.h required></div><div class=col-sm-6><input type=text name=confirm_foo class=form-control required ng-model=g.i ui-validate=" \'$value==g.h\' " ui-validate-watch=" \'g.h\' "> <span ng-show=forma.confirm_foo.$error.validator>Not match!</span></div></div></div></div></div><footer class="panel-footer text-right"><button type=submit class="btn btn-info">Submit</button></footer></div></form></div></div></div>');
    $templateCache.put('views/ui/map/google.html', '<div class=app-content-inner><div class=box><div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Google Maps</h3></div><div class=box-row><div class=box-cell><div class=box-inner><div class=box><div class="col-md-3 hide"><div class=box><div class=box-row><div class=box-cell><div class=box-inner><div class=p-md><div class=hide><h5 class="no-margin m-b">Click to add a marker! (There is a bug on the event when using lazy load. bind twice on click event)</h5><p>{{zoomMessage}}</p><ul class="list-unstyled list-inline"><li ng-repeat="marker in myMarkers"><a class="btn btn-default m-b-sm" ng-click=myMap.panTo(marker.getPosition())>Pan to Marker {{$index}}</a></li></ul></div><div ng-repeat="marker in myMarkers" ui-map-marker=myMarkers[$index] ui-event="{\'map-click\': \'openMarkerInfo(marker)\'}"></div><div ui-map-info-window=myInfoWindow><div class=m-b-sm>Marker</div><div class=m-b-sm><div class="pull-left m-t-xs">Lat:</div><input ng-model=currentMarkerLat class="form-control input-sm w-sm m-l-lg"></div><div class=m-b-sm><div class="pull-left m-t-xs">Lng:</div><input ng-model=currentMarkerLng class="form-control input-sm w-sm m-l-lg"></div><a class="btn btn-default btn-sm m-l-lg m-b-sm" ng-click="setMarkerPosition(currentMarker, currentMarkerLat, currentMarkerLng)">Set Position</a></div></div></div></div></div></div></div><div class=col-md-9><div style="position:relative; height:100%; min-height:320px" ui-map=myMap ui-event="{\'map-click\': \'addMarker($event, $params)\', \'map-zoom_changed\': \'setZoomMessage(myMap.getZoom())\' }" ui-options=mapOptions></div></div></div></div></div></div></div></div>');
    $templateCache.put('views/ui/map/vector.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Vector Maps</h3></div><div class=p-md><div class="box b-a bg-white m-b"><div class=col-md-9><div class="panel-heading b-b b-light">World Map</div><div class=panel-body><p class="m-b-lg text-muted">Many maps of the world, world regions, countries and cities are available for download from <a href="http://jvectormap.com/">http://jvectormap.com/</a>. All of them are made from the data in public domain or data licensed under the free licenses, so you can use them for any purpose without of charge.</p><div class=m-b-lg style=height:240px ui-jp=vectorMap ui-options="{\r' + '\n' + '          map: \'world_mill_en\',\r' + '\n' + '          markers: {{world_markers}},\r' + '\n' + '          normalizeFunction: \'polynomial\',\r' + '\n' + '          backgroundColor: \'#fff\',\r' + '\n' + '          regionsSelectable: true,\r' + '\n' + '          markersSelectable: true,\r' + '\n' + '          regionStyle: {\r' + '\n' + '            initial: {\r' + '\n' + '              fill: \'{{app.color.light}}\'\r' + '\n' + '            },\r' + '\n' + '            hover: {\r' + '\n' + '              fill: \'{{app.color.info}}\',\r' + '\n' + '              stroke: \'#fff\'\r' + '\n' + '            },\r' + '\n' + '          },\r' + '\n' + '          markerStyle: {\r' + '\n' + '            initial: {\r' + '\n' + '              fill: \'{{app.color.info}}\',\r' + '\n' + '              stroke: \'#fff\'\r' + '\n' + '            },\r' + '\n' + '            hover: {\r' + '\n' + '              fill: \'{{app.color.primary}}\',\r' + '\n' + '              stroke: \'#fff\'\r' + '\n' + '            }\r' + '\n' + '          },\r' + '\n' + '          series: {\r' + '\n' + '            markers: [{\r' + '\n' + '              attribute: \'fill\',\r' + '\n' + '              scale: [\'{{app.color.primary}}\',\'{{app.color.warning}}\', \'{{app.color.success}}\'],\r' + '\n' + '              values: {{cityAreaData}}\r' + '\n' + '            },{\r' + '\n' + '              attribute: \'r\',\r' + '\n' + '              scale: [5, 20],\r' + '\n' + '              values: {{cityAreaData}}\r' + '\n' + '            }]\r' + '\n' + '          }\r' + '\n' + '        }"></div></div></div><div class="col-md-3 b-l no-border-sm"><div class="panel-heading b-b b-light">Infomation</div><div class="list-group no-border no-radius"><div class=list-group-item><span class=pull-right>293,200</span> <i class="fa fa-fw fa-circle text-danger"></i> Vatican City</div><div class=list-group-item><span class=pull-right>203,000</span> <i class="fa fa-fw fa-circle text-warning"></i> San Marino</div><div class=list-group-item><span class=pull-right>180,230</span> <i class="fa fa-fw fa-circle text-success"></i> Marshall Islands</div><div class=list-group-item><span class=pull-right>130,100</span> <i class="fa fa-fw fa-circle text-info"></i> Maldives</div><div class=list-group-item><span class=pull-right>98,000</span> <i class="fa fa-fw fa-circle text-primary"></i> Palau</div></div></div></div><div class="box b-a bg-white m-b"><div class=col-md-9><div class="panel-heading b-b b-light">USA Map</div><div class=panel-body><p class="m-b-lg text-muted">For identification of the countries and regions ISO 3166 standard is used. So you easily visualize data which is compliant with this standard.</p><div class=m-b-lg style=height:240px ui-jp=vectorMap ui-options="{\r' + '\n' + '          map: \'us_aea_en\',\r' + '\n' + '          markers: {{usa_markers}},\r' + '\n' + '          backgroundColor: \'#fff\',\r' + '\n' + '          regionsSelectable: true,\r' + '\n' + '          markersSelectable: true,\r' + '\n' + '          regionStyle: {\r' + '\n' + '            initial: {\r' + '\n' + '              fill: \'{{app.color.info}}\'\r' + '\n' + '            },\r' + '\n' + '            selected: {\r' + '\n' + '              fill: \'{{app.color.info}}\'\r' + '\n' + '            }\r' + '\n' + '          },\r' + '\n' + '          series: {\r' + '\n' + '            markers: [{\r' + '\n' + '              attribute: \'fill\',\r' + '\n' + '              scale: [\'{{app.color.primary}}\',\'{{app.color.warning}}\', \'{{app.color.success}}\'],\r' + '\n' + '              values: {{cityAreaData}}\r' + '\n' + '            },{\r' + '\n' + '              attribute: \'r\',\r' + '\n' + '              scale: [5, 20],\r' + '\n' + '              values: {{cityAreaData}}\r' + '\n' + '            }]\r' + '\n' + '          }\r' + '\n' + '        }"></div></div></div><div class="col-md-3 b-l no-border-sm"><div class=p-md><div class=text-muted>Total steps taken</div><div class="h3 m-b-lg font-bold">234,344,450</div><div><div class=m-b><i class="fa text-3x pull-left fa-circle text-info-lt"></i><div class=clear><span>232,000</span><div class="h5 font-bold">Silicon Valley</div></div></div><div class=m-b><i class="fa text-3x pull-left fa-circle text-muted"></i><div class=clear><span>9,632,000</span><div class="h5 font-bold">Los Angeles</div></div></div><div class=m-b><i class="fa text-3x pull-left fa-circle text-muted-lt"></i><div class=clear><span>23,200,000</span><div class="h5 font-bold">Philadelphia</div></div></div></div></div></div></div></div>');
    $templateCache.put('views/ui/table/smart.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Smart tables</h3></div><div class=p-md><div class="panel panel-default"><div class=panel-heading>The basics</div><table st-table=rowCollectionBasic class="table table-bordered table-striped"><thead><tr><th>first name</th><th>last name</th><th>birth date</th><th>balance</th><th>email</th></tr></thead><tbody><tr ng-repeat="row in rowCollectionBasic" st-select-row=row><td>{{row.firstName}}</td><td>{{row.lastName}}</td><td>{{row.birthDate}}</td><td>{{row.balance}}</td><td>{{row.email}}</td></tr></tbody></table></div><div class="panel panel-default"><div class=panel-heading>stSafeSrc attribute</div><div class=panel-body><button type=button ng-click=addRandomItem(row) class="btn btn-sm btn-success"><i class="glyphicon glyphicon-plus"></i> Add random item</button></div><table st-table=displayedCollection st-safe-src=rowCollection class="table table-striped"><thead><tr><th st-sort=firstName>first name</th><th st-sort=lastName>last name</th><th st-sort=birthDate>birth date</th><th st-sort=balance>balance</th><th width=50></th></tr><tr><th colspan=5><input st-search="" class=form-control placeholder="global search ..." type="text"></th></tr></thead><tbody><tr ng-repeat="row in displayedCollection"><td>{{row.firstName}}</td><td>{{row.lastName}}</td><td>{{row.birthDate}}</td><td>{{row.balance}}</td><td><button type=button ng-click=removeItem(row) class="btn btn-xs btn-default"><i class="fa fa-times"></i></button></td></tr></tbody></table></div><div class="panel panel-default"><div class=panel-heading>Format data & cell templating</div><table st-table=rowCollectionBasic class="table table-bordered table-striped"><thead><tr><th>first name</th><th>last name</th><th>birth date</th><th>balance</th><th>email</th><th width=50></th></tr></thead><tbody><tr ng-repeat="row in rowCollectionBasic"><td>{{row.firstName | uppercase}}</td><td>{{row.lastName}}</td><td>{{row.birthDate | date}}</td><td>{{row.balance | currency}}</td><td><button class="btn btn-xs" data-placement=top data-content={{row.email}} bs-popover type=button><i class="fa fa-eye"></i></button> <a ng-href=mailto:{{row.email}}>email</a></td><td><button type=button ng-click=removeRow(row) class="btn btn-xs btn-default"><i class="fa fa-times"></i></button></td></tr></tbody></table></div><div class="panel panel-default"><div class=panel-heading>Search/filter data</div><div class=panel-body><form><label for=predicate>selected predicate:</label><select class=form-control id=predicate ng-model=selectedPredicate ng-options="predicate for predicate in predicates"></select></form></div><table st-table=rowCollectionBasic class="table table-striped"><thead><tr><th st-sort=firstName>first name</th><th st-sort=lastName>last name</th><th st-sort=birthDate>birth date</th><th st-sort=balance>balance</th><th>email</th></tr><tr><th><input st-search="\'firstName\'" placeholder="search for firstname" class="input-sm form-control" type="search"></th><th colspan=3><input st-search placeholder="global search" class="input-sm form-control" type="search"></th><th><input st-search=selectedPredicate placeholder="bound predicate" class="input-sm form-control" type="search"></th></tr></thead><tbody><tr ng-repeat="row in rowCollectionBasic"><td>{{row.firstName | uppercase}}</td><td>{{row.lastName}}</td><td>{{row.birthDate | date}}</td><td>{{row.balance | currency}}</td><td><a ng-href=mailto:{{row.email}}>email</a></td></tr></tbody></table></div><div class="panel panel-default"><div class=panel-heading>Client side Pagination</div><div class=panel-body><form><label>items by page</label><input class="input-sm form-control" name=items id=items type=number ng-model=itemsByPage></form></div><table st-table=rowCollectionPage class="table table-striped"><thead><tr><th st-sort=firstName>first name</th><th st-sort=lastName>last name</th><th st-sort=birthDate>birth date</th><th st-sort=balance>balance</th><th>email</th></tr><tr><th><input st-search="\'firstName\'" placeholder="search for firstname" class="input-sm form-control" type="search"></th><th colspan=4><input st-search placeholder="global search" class="input-sm form-control" type="search"></th></tr></thead><tbody><tr ng-repeat="row in rowCollectionPage"><td>{{row.firstName | uppercase}}</td><td>{{row.lastName}}</td><td>{{row.birthDate | date}}</td><td>{{row.balance | currency}}</td><td><a ng-href=mailto:{{row.email}}>email</a></td></tr></tbody><tfoot><tr><td colspan=5 class=text-center><div st-pagination="" st-items-by-page=itemsByPage st-displayed-pages=7 class=no-margin></div></td></tr></tfoot></table></div><div class="panel panel-default"><div class=panel-heading>pipe/ajax plugin</div><table st-table=rowCollectionPip st-pipe=callServer class="table table-striped"><thead><tr><th st-sort=firstName>first name</th><th st-sort=lastName>last name</th><th st-sort=birthDate>birth date</th><th st-sort=balance>balance</th><th>email</th></tr><tr><th><input st-search=firstName placeholder="search for firstname" class="input-sm form-control" type="search"></th><th colspan=4><input st-search placeholder="global search" class="input-sm form-control" type="search"></th></tr></thead><tbody ng-hide=isLoading><tr ng-repeat="row in rowCollectionPip"><td>{{row.firstName | uppercase}}</td><td>{{row.lastName}}</td><td>{{row.birthDate | date}}</td><td>{{row.balance | currency}}</td><td><a ng-href=mailto:{{row.email}}>email</a></td></tr></tbody><tbody ng-show=isLoading><tr><td colspan=5 class=text-center><i class="fa fa-spin fa-refresh"></i></td></tr></tbody></table></div></div>');
    $templateCache.put('views/ui/table/static.html', '<div class="p-h-md p-v bg-white box-shadow pos-rlt"><h3 class=no-margin>Static tables</h3></div><div class=p-md><div class="panel panel-default"><div class=panel-heading>Basic</div><div class=panel-body>For basic styling\u2014light padding and only horizontal dividers\u2014add the base class .table to any &lt;table>. It may seem super redundant, but given the widespread use of tables for other plugins like calendars and date pickers, we\'ve opted to isolate our custom table styles.</div><table class=table><thead><tr><th>#</th><th>First Name</th><th>Last Name</th><th>Username</th></tr></thead><tbody><tr><td>1</td><td>Mark</td><td>Otto</td><td>@mdo</td></tr><tr><td>2</td><td>Jacob</td><td>Thornton</td><td>@fat</td></tr><tr><td>3</td><td>Larry</td><td>the Bird</td><td>@twitter</td></tr></tbody></table></div><div class="panel panel-default"><div class=panel-heading>Striped rows</div><div class=panel-body>Use .table-striped to add zebra-striping to any table row within the &lt;tbody>.</div><table class="table table-striped"><thead><tr><th>#</th><th>First Name</th><th>Last Name</th><th>Username</th></tr></thead><tbody><tr><td>1</td><td>Mark</td><td>Otto</td><td>@mdo</td></tr><tr><td>2</td><td>Jacob</td><td>Thornton</td><td>@fat</td></tr><tr><td>3</td><td>Larry</td><td>the Bird</td><td>@twitter</td></tr></tbody></table></div><h5>Bordered table</h5><table class="table table-bordered table-hover bg-white"><thead><tr><th>#</th><th>First Name</th><th>Last Name</th><th>Username</th></tr></thead><tbody><tr><td rowspan=2>1</td><td>Mark</td><td>Otto</td><td>@mdo</td></tr><tr><td>Mark</td><td>Otto</td><td>@TwBootstrap</td></tr><tr><td>2</td><td>Jacob</td><td>Thornton</td><td>@fat</td></tr><tr><td>3</td><td colspan=2>Larry the Bird</td><td>@twitter</td></tr></tbody></table><h5>Responsive table</h5><div class=table-responsive><table class="table table-bordered bg-white"><thead><tr><th>#</th><th>Table heading</th><th>Table heading</th><th>Table heading</th><th>Table heading</th><th>Table heading</th><th>Table heading</th></tr></thead><tbody><tr><td>1</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td></tr><tr><td>2</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td></tr><tr><td>3</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td><td>Table cell</td></tr></tbody></table></div></div>');
  }
]);